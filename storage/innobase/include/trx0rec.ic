/*****************************************************************************

Copyright (c) 1996, 2022, Oracle and/or its affiliates.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2.0, as published by the
Free Software Foundation.

This program is also distributed with certain software (including but not
limited to OpenSSL) that is licensed under separate terms, as designated in a
particular file or component or in included license documentation. The authors
of MySQL hereby grant you an additional permission to link the program and
your derivative works with the separately licensed software that they have
included with MySQL.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License, version 2.0,
for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA

*****************************************************************************/

/** @file include/trx0rec.ic
 Transaction undo log record

 Created 3/26/1996 Heikki Tuuri
 *******************************************************/

#ifndef UNIV_HOTBACKUP
/** Reads from an undo log record the record type.
 @return record type */
static inline ulint trx_undo_rec_get_type(
    const trx_undo_rec_t *undo_rec) /*!< in: undo log record */
{
  return (mach_read_from_1(undo_rec + 2) & (TRX_UNDO_CMPL_INFO_MULT - 1));
}

/** Reads from an undo log record the record compiler info.
 @return compiler info */
static inline ulint trx_undo_rec_get_cmpl_info(
    const trx_undo_rec_t *undo_rec) /*!< in: undo log record */
{
  return (mach_read_from_1(undo_rec + 2) / TRX_UNDO_CMPL_INFO_MULT);
}

/** Returns true if an undo log record contains an extern storage field.
 @return true if extern */
static inline bool trx_undo_rec_get_extern_storage(
    const trx_undo_rec_t *undo_rec) /*!< in: undo log record */
{
  if (mach_read_from_1(undo_rec + 2) & TRX_UNDO_UPD_EXTERN) {
    return true;
  }

  return false;
}

/** Reads the undo log record number.
 @return undo no */
static inline undo_no_t trx_undo_rec_get_undo_no(
    const trx_undo_rec_t *undo_rec) /*!< in: undo log record */
{
  const byte *ptr = undo_rec + 2;
  uint8_t type_cmpl = mach_read_from_1(ptr);

  const bool blob_undo = type_cmpl & TRX_UNDO_MODIFY_BLOB;

  if (blob_undo) {
    /* The next record offset takes 2 bytes + 1 byte for
    type_cmpl flag + 1 byte for the new flag.  Total 4 bytes.*/
    ptr = undo_rec + 4;
  } else {
    ptr = undo_rec + 3;
  }
  return (mach_u64_read_much_compressed(ptr));
}

static inline trx_undo_rec_t *trx_undo_rec_copy(const page_t *undo_page,
                                                uint32_t undo_offset,
                                                mem_heap_t *heap) {
  ut_ad(undo_offset < UNIV_PAGE_SIZE);
  trx_undo_rec_t *undo_rec = (trx_undo_rec_t *)(undo_page + undo_offset);

  /* Read the offset of next undo record from the current undo record
  and subtract it from current undo log record offset to get the length
  of undo record */
  uint32_t next_undo_offset = mach_read_from_2(undo_rec);
  ut_a(next_undo_offset > undo_offset);

  uint32_t len = next_undo_offset - undo_offset;
  ut_ad(len < UNIV_PAGE_SIZE);
  return ((trx_undo_rec_t *)mem_heap_dup(heap, undo_rec, len));
}
#endif /* !UNIV_HOTBACKUP */
