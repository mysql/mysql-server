/*****************************************************************************

Copyright (c) 1995, 2022, Oracle and/or its affiliates.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2.0, as published by the
Free Software Foundation.

This program is also distributed with certain software (including but not
limited to OpenSSL) that is licensed under separate terms, as designated in a
particular file or component or in included license documentation. The authors
of MySQL hereby grant you an additional permission to link the program and
your derivative works with the separately licensed software that they have
included with MySQL.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License, version 2.0,
for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA

*****************************************************************************/

/** @file include/mtr0log.ic
 Mini-transaction logging routines

 Created 12/7/1995 Heikki Tuuri
 *******************************************************/

#include "buf0dblwr.h"
#include "fsp0types.h"
#include "mach0data.h"
#include "trx0types.h"

#include "mysqld_error.h"

static inline bool mlog_open(mtr_t *mtr, ulint size, byte *&buffer) {
  mtr->set_modified();
  return (mlog_open_metadata(mtr, size, buffer));
}

static inline bool mlog_open_metadata(mtr_t *mtr, ulint size, byte *&buffer) {
  if (mtr_get_log_mode(mtr) == MTR_LOG_NONE ||
      mtr_get_log_mode(mtr) == MTR_LOG_NO_REDO) {
    buffer = nullptr;
    return (false);
  }

  buffer = mtr->get_log()->open(size);
  return (buffer != nullptr);
}

/** Closes a buffer opened to mlog. */
static inline void mlog_close(
    mtr_t *mtr, /*!< in: mtr */
    byte *ptr)  /*!< in: buffer space from ptr up was not used */
{
  ut_ad(mtr_get_log_mode(mtr) != MTR_LOG_NONE);
  ut_ad(mtr_get_log_mode(mtr) != MTR_LOG_NO_REDO);

  mtr->get_log()->close(ptr);
}

/** Concatenates 1 - 4 bytes to the mtr log. The value is not compressed. */
static inline void mlog_catenate_ulint(
    mtr_buf_t *mtr_buf, /*!< in/out: buffer to write */
    ulint val,          /*!< in: value to write */
    mlog_id_t type)     /*!< in: type of value to write */
{
  static_assert(MLOG_1BYTE == 1);
  static_assert(MLOG_2BYTES == 2);
  static_assert(MLOG_4BYTES == 4);
  static_assert(MLOG_8BYTES == 8);

  byte *ptr = mtr_buf->push<byte *>(type);

  switch (type) {
    case MLOG_4BYTES:
      mach_write_to_4(ptr, val);
      break;
    case MLOG_2BYTES:
      mach_write_to_2(ptr, val);
      break;
    case MLOG_1BYTE:
      mach_write_to_1(ptr, val);
      break;
    default:
      ut_error;
  }
}

/** Concatenates 1 - 4 bytes to the mtr log. The value is not compressed. */
static inline void mlog_catenate_ulint(
    mtr_t *mtr,     /*!< in/out: mtr */
    ulint val,      /*!< in: value to write */
    mlog_id_t type) /*!< in: MLOG_1BYTE, MLOG_2BYTES, MLOG_4BYTES */
{
  if (mtr_get_log_mode(mtr) == MTR_LOG_NONE ||
      mtr_get_log_mode(mtr) == MTR_LOG_NO_REDO) {
    return;
  }

  mlog_catenate_ulint(mtr->get_log(), val, type);
}

/** Concatenates a compressed ulint to mlog. */
static inline void mlog_catenate_ulint_compressed(
    mtr_t *mtr, /*!< in: mtr */
    ulint val)  /*!< in: value to write */
{
  byte *log_ptr = nullptr;

  /* If no logging is requested, we may return now */
  if (!mlog_open(mtr, 10, log_ptr)) {
    return;
  }

  log_ptr += mach_write_compressed(log_ptr, val);

  mlog_close(mtr, log_ptr);
}

/** Catenates a compressed 64-bit integer to mlog. */
static inline void mlog_catenate_ull_compressed(
    mtr_t *mtr,   /*!< in: mtr */
    uint64_t val) /*!< in: value to write */
{
  byte *log_ptr = nullptr;

  /* If no logging is requested, we may return now */
  if (!mlog_open(mtr, 15, log_ptr)) {
    return;
  }

  log_ptr += mach_u64_write_compressed(log_ptr, val);

  mlog_close(mtr, log_ptr);
}

static inline byte *mlog_write_initial_dict_log_record(mlog_id_t type,
                                                       table_id_t id,
                                                       uint64_t version,
                                                       byte *log_ptr,
                                                       mtr_t *mtr) {
  ut_ad(type <= MLOG_BIGGEST_TYPE);
  ut_ad(type == MLOG_TABLE_DYNAMIC_META);

  mach_write_to_1(log_ptr, type);
  log_ptr++;

  log_ptr += mach_u64_write_much_compressed(log_ptr, id);
  log_ptr += mach_u64_write_much_compressed(log_ptr, version);

  mtr->added_rec();
  return (log_ptr);
}

/** Writes a log record about an operation.
@param[in]      type            Redo log record type
@param[in]      space_id        Tablespace identifier
@param[in]      page_no         Page number
@param[in,out]  log_ptr         Current end of mini-transaction log
@param[in,out]  mtr             Mini-transaction
@return end of mini-transaction log */
static inline byte *mlog_write_initial_log_record_low(mlog_id_t type,
                                                      space_id_t space_id,
                                                      page_no_t page_no,
                                                      byte *log_ptr,
                                                      mtr_t *mtr) {
  ut_ad(type <= MLOG_BIGGEST_TYPE);

  mach_write_to_1(log_ptr, type);
  log_ptr++;

  log_ptr += mach_write_compressed(log_ptr, space_id);
  log_ptr += mach_write_compressed(log_ptr, page_no);

  mtr->added_rec();
  return (log_ptr);
}

#ifndef UNIV_HOTBACKUP
/** Writes the initial part of a log record (3..11 bytes).
 If the implementation of this function is changed, all
 size parameters to mlog_open() should be adjusted accordingly!
 @return new value of log_ptr */
static inline byte *mlog_write_initial_log_record_fast(
    const byte *ptr, /*!< in: pointer to (inside) a buffer
                     frame holding the file page where
                     modification is made */
    mlog_id_t type,  /*!< in: log item type: MLOG_1BYTE, ... */
    byte *log_ptr,   /*!< in: pointer to mtr log which has
                     been opened */
    mtr_t *mtr)      /*!< in/out: mtr */
{
  const byte *page;
  space_id_t space;
  page_no_t offset;

  ut_ad(log_ptr);
  ut_d(mtr->memo_modify_page(ptr));

  page = (const byte *)ut_align_down(ptr, UNIV_PAGE_SIZE);
  space = mach_read_from_4(page + FIL_PAGE_ARCH_LOG_NO_OR_SPACE_ID);
  offset = mach_read_from_4(page + FIL_PAGE_OFFSET);

  /* check whether the page is in the doublewrite buffer;
  the doublewrite buffer is located in pages
  FSP_EXTENT_SIZE, ..., 3 * FSP_EXTENT_SIZE - 1 in the
  system tablespace */

  /* We don't redo log the double write buffer */
  if (space == TRX_SYS_SPACE && offset >= FSP_EXTENT_SIZE &&
      offset < 3 * FSP_EXTENT_SIZE) {
    return (log_ptr);
  }

  return (mlog_write_initial_log_record_low(type, space, offset, log_ptr, mtr));
}
#endif /* !UNIV_HOTBACKUP */
