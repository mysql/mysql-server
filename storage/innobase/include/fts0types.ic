/*****************************************************************************

Copyright (c) 2007, 2022, Oracle and/or its affiliates.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2.0, as published by the
Free Software Foundation.

This program is also distributed with certain software (including but not
limited to OpenSSL) that is licensed under separate terms, as designated in a
particular file or component or in included license documentation. The authors
of MySQL hereby grant you an additional permission to link the program and
your derivative works with the separately licensed software that they have
included with MySQL.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License, version 2.0,
for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA

*****************************************************************************/

/** @file include/fts0types.ic
 Full text search types.

 Created 2007-03-27 Sunny Bains
 *******************************************************/

#ifndef INNOBASE_FTS0TYPES_IC
#define INNOBASE_FTS0TYPES_IC

#include "ha_prototypes.h"
#include "rem0cmp.h"

/** Duplicate a string. */
static inline void fts_string_dup(
    fts_string_t *dst,       /*!< in: dup to here */
    const fts_string_t *src, /*!< in: src string */
    mem_heap_t *heap)        /*!< in: heap to use */
{
  dst->f_str = (byte *)mem_heap_alloc(heap, src->f_len + 1);
  memcpy(dst->f_str, src->f_str, src->f_len);

  dst->f_len = src->f_len;
  dst->f_str[src->f_len] = 0;
  dst->f_n_char = src->f_n_char;
}

/** Compare two fts_trx_row_t doc_ids.
 @return < 0 if n1 < n2, 0 if n1 == n2, > 0 if n1 > n2 */
static inline int fts_trx_row_doc_id_cmp(const void *p1, /*!< in: id1 */
                                         const void *p2) /*!< in: id2 */
{
  const fts_trx_row_t *tr1 = (const fts_trx_row_t *)p1;
  const fts_trx_row_t *tr2 = (const fts_trx_row_t *)p2;

  return ((int)(tr1->doc_id - tr2->doc_id));
}

/** Compare two fts_ranking_t doc_ids.
 @return < 0 if n1 < n2, 0 if n1 == n2, > 0 if n1 > n2 */
static inline int fts_ranking_doc_id_cmp(const void *p1, /*!< in: id1 */
                                         const void *p2) /*!< in: id2 */
{
  const fts_ranking_t *rk1 = (const fts_ranking_t *)p1;
  const fts_ranking_t *rk2 = (const fts_ranking_t *)p2;

  return ((int)(rk1->doc_id - rk2->doc_id));
}

/** Compare two fts_update_t doc_ids.
 @return < 0 if n1 < n2, 0 if n1 == n2, > 0 if n1 > n2 */
static inline int fts_update_doc_id_cmp(const void *p1, /*!< in: id1 */
                                        const void *p2) /*!< in: id2 */
{
  const fts_update_t *up1 = (const fts_update_t *)p1;
  const fts_update_t *up2 = (const fts_update_t *)p2;

  return ((int)(up1->doc_id - up2->doc_id));
}

/** Get the first character's code position for FTS index partition
@param[in]      cs        Character set
@param[in]      p2        string
@param[in]      len2    string length
*/
extern ulint innobase_strnxfrm(const CHARSET_INFO *cs, const uchar *p2,
                               const ulint len2);

/** Check if fts index charset is cjk
@param[in]      cs      charset
@retval true    if the charset is cjk
@retval false   if not. */
static inline bool fts_is_charset_cjk(const CHARSET_INFO *cs) {
  if (strcmp(cs->m_coll_name, "gb2312_chinese_ci") == 0 ||
      strcmp(cs->m_coll_name, "gbk_chinese_ci") == 0 ||
      strcmp(cs->m_coll_name, "big5_chinese_ci") == 0 ||
      strcmp(cs->m_coll_name, "gb18030_chinese_ci") == 0 ||
      strcmp(cs->m_coll_name, "ujis_japanese_ci") == 0 ||
      strcmp(cs->m_coll_name, "sjis_japanese_ci") == 0 ||
      strcmp(cs->m_coll_name, "cp932_japanese_ci") == 0 ||
      strcmp(cs->m_coll_name, "eucjpms_japanese_ci") == 0 ||
      strcmp(cs->m_coll_name, "euckr_korean_ci") == 0) {
    return (true);
  } else {
    return (false);
  }
}

/** Select the FTS auxiliary index for the given character by range.
@param[in]      cs      charset
@param[in]      str     string
@param[in]      len     string length
@retval the index to use for the string */
static inline ulint fts_select_index_by_range(const CHARSET_INFO *cs,
                                              const byte *str, ulint len) {
  ulint selected = 0;
  ulint value = innobase_strnxfrm(cs, str, len);

  while (fts_index_selector[selected].value != 0) {
    if (fts_index_selector[selected].value == value) {
      return (selected);

    } else if (fts_index_selector[selected].value > value) {
      return (selected > 0 ? selected - 1 : 0);
    }

    ++selected;
  }

  ut_ad(selected > 1);

  return (selected - 1);
}

/** Select the FTS auxiliary index for the given character by hash.
@param[in]      cs      charset
@param[in]      str     string
@param[in]      len     string length
@retval the index to use for the string */
static inline ulint fts_select_index_by_hash(const CHARSET_INFO *cs,
                                             const byte *str, ulint len) {
  int char_len;

  ut_ad(!(str == nullptr && len > 0));

  if (str == nullptr || len == 0) {
    return 0;
  }

  /* Get the first char */
  char_len = my_mbcharlen_ptr(cs, reinterpret_cast<const char *>(str),
                              reinterpret_cast<const char *>(str + len));
  ut_ad(static_cast<ulint>(char_len) <= len);

  /*
    Get collation hash code. Force truncation to ulong for legacy reasons;
    it gives different results for Windows and Linux, but it needs to match
    on-disk data.
   */
  uint64_t nr1 = 1;
  uint64_t nr2 = 4;
  cs->coll->hash_sort(cs, str, char_len, &nr1, &nr2);

  return (static_cast<ulong>(nr1) % FTS_NUM_AUX_INDEX);
}

/** Select the FTS auxiliary index for the given character.
@param[in]      cs      charset
@param[in]      str     string
@param[in]      len     string length in bytes
@retval the index to use for the string */
static inline ulint fts_select_index(const CHARSET_INFO *cs, const byte *str,
                                     ulint len) {
  ulint selected;

  if (fts_is_charset_cjk(cs)) {
    selected = fts_select_index_by_hash(cs, str, len);
  } else {
    selected = fts_select_index_by_range(cs, str, len);
  }

  return (selected);
}

/** Return the selected FTS aux index suffix. */
static inline const char *fts_get_suffix(
    ulint selected) /*!< in: selected index */
{
  return (fts_index_selector[selected].suffix);
}

/** Return the selected FTS aux index suffix in 5.7 compatible format
@param[in]      selected        selected index
@return the suffix name */
static inline const char *fts_get_suffix_5_7(ulint selected) {
  return (fts_index_selector_5_7[selected].suffix);
}

#endif /* INNOBASE_FTS0TYPES_IC */
