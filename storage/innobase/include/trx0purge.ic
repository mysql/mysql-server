/*****************************************************************************

Copyright (c) 1996, 2022, Oracle and/or its affiliates.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2.0, as published by the
Free Software Foundation.

This program is also distributed with certain software (including but not
limited to OpenSSL) that is licensed under separate terms, as designated in a
particular file or component or in included license documentation. The authors
of MySQL hereby grant you an additional permission to link the program and
your derivative works with the separately licensed software that they have
included with MySQL.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License, version 2.0,
for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA

*****************************************************************************/

/** @file include/trx0purge.ic
 Purge old versions

 Created 3/26/1996 Heikki Tuuri
 *******************************************************/

#include "trx0undo.h"

/** Calculates the file address of an undo log header when we have the file
 address of its history list node.
 @return file address of the log */
static inline fil_addr_t trx_purge_get_log_from_hist(
    fil_addr_t node_addr) /*!< in: file address of the history
                          list node of the log */
{
  node_addr.boffset -= TRX_UNDO_HISTORY_NODE;

  return (node_addr);
}

/** address of its history list node.
 @return true if purge_sys_t::limit <= purge_sys_t::iter */
static inline bool trx_purge_check_limit(void) {
  /* limit is used to track till what point purge element has been
  processed and so limit <= iter.
  undo_no ordering is enforced only within the same rollback segment.
  If a transaction uses multiple rollback segments then we need to
  consider the rollback segment space id too. */
  return (purge_sys->iter.trx_no > purge_sys->limit.trx_no ||
          (purge_sys->iter.trx_no == purge_sys->limit.trx_no &&
           ((purge_sys->iter.undo_no >= purge_sys->limit.undo_no) ||
            (purge_sys->iter.undo_rseg_space !=
             purge_sys->limit.undo_rseg_space))));
}
