/*****************************************************************************

Copyright (c) 1996, 2022, Oracle and/or its affiliates.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2.0, as published by the
Free Software Foundation.

This program is also distributed with certain software (including but not
limited to OpenSSL) that is licensed under separate terms, as designated in a
particular file or component or in included license documentation. The authors
of MySQL hereby grant you an additional permission to link the program and
your derivative works with the separately licensed software that they have
included with MySQL.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License, version 2.0,
for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA

*****************************************************************************/

/** @file include/btr0sea.ic
 The index tree adaptive search

 Created 2/17/1996 Heikki Tuuri
 *************************************************************************/

#include "btr0cur.h"
#include "buf0buf.h"
#include "dict0mem.h"
#include "sync0rw.h"

/** Updates the search info statistics following a search in B-tree that was
performed not using or not finding row with the AHI index. It may decide to try
to update the searched record on which the supplied cursor in positioned at, or
add the whole page to AHI.
@param[in,out]  info    search info
@param[in]      cursor  cursor which was just positioned */
void btr_search_info_update_slow(btr_search_t *info, btr_cur_t *cursor);

static inline const btr_search_t *btr_search_get_info(
    const dict_index_t *index) {
  return (index->search_info);
}

static inline btr_search_t *btr_search_get_info(dict_index_t *index) {
  return (index->search_info);
}

static inline void btr_search_info_update(dict_index_t *index,
                                          btr_cur_t *cursor) {
  ut_ad(!rw_lock_own(btr_get_search_latch(index), RW_LOCK_S));
  ut_ad(!rw_lock_own(btr_get_search_latch(index), RW_LOCK_X));

  if (dict_index_is_spatial(index) || !btr_search_enabled) {
    return;
  }
  if (cursor->flag == BTR_CUR_HASH_NOT_ATTEMPTED) {
    return;
  }

  btr_search_t *info;
  info = btr_search_get_info(index);

  info->hash_analysis++;

  if (info->hash_analysis < BTR_SEARCH_HASH_ANALYSIS) {
    /* Do nothing */

    return;
  }

  ut_ad(cursor->flag != BTR_CUR_HASH);

  btr_search_info_update_slow(info, cursor);
}

static inline void btr_search_x_lock(const dict_index_t *index,
                                     ut::Location location) {
  rw_lock_x_lock_gen(btr_get_search_latch(index), 0, location);
}

static inline bool btr_search_x_lock_nowait(const dict_index_t *index,
                                            ut::Location location) {
  return rw_lock_x_lock_nowait(btr_get_search_latch(index), location);
}

static inline void btr_search_x_unlock(const dict_index_t *index) {
  rw_lock_x_unlock(btr_get_search_latch(index));
}

static inline void btr_search_x_lock_all(ut::Location location) {
  for (ulint i = 0; i < btr_ahi_parts; ++i) {
    rw_lock_x_lock_gen(btr_search_latches[i], 0, location);
  }
}

static inline void btr_search_x_unlock_all() {
  for (ulint i = 0; i < btr_ahi_parts; ++i) {
    rw_lock_x_unlock(btr_search_latches[i]);
  }
}

static inline void btr_search_s_lock(const dict_index_t *index,
                                     ut::Location location) {
  rw_lock_s_lock_gen(btr_get_search_latch(index), 0, location);
}

static inline bool btr_search_s_lock_nowait(const dict_index_t *index,
                                            ut::Location location) {
  return rw_lock_s_lock_nowait(btr_get_search_latch(index), location);
}

static inline void btr_search_s_unlock(const dict_index_t *index) {
  rw_lock_s_unlock(btr_get_search_latch(index));
}

static inline void btr_search_s_lock_all(ut::Location location) {
  for (ulint i = 0; i < btr_ahi_parts; ++i) {
    rw_lock_s_lock_gen(btr_search_latches[i], 0, location);
  }
}

static inline void btr_search_s_unlock_all() {
  for (ulint i = 0; i < btr_ahi_parts; ++i) {
    rw_lock_s_unlock(btr_search_latches[i]);
  }
}

#ifdef UNIV_DEBUG
static inline bool btr_search_own_all(ulint mode) {
  for (ulint i = 0; i < btr_ahi_parts; ++i) {
    if (!rw_lock_own(btr_search_latches[i], mode)) {
      return (false);
    }
  }
  return (true);
}

static inline bool btr_search_own_any(ulint mode) {
  for (ulint i = 0; i < btr_ahi_parts; ++i) {
    if (rw_lock_own(btr_search_latches[i], mode)) {
      return (true);
    }
  }
  return (false);
}
#endif /* UNIV_DEBUG */

static inline size_t btr_get_search_slot(const space_index_t index_id,
                                         const space_id_t space_id) {
  return static_cast<size_t>(ut::hash_uint64_pair(index_id, space_id) %
                             btr_ahi_parts_fast_modulo);
}

static inline rw_lock_t *btr_get_search_latch(const dict_index_t *index) {
  ut_ad(index != nullptr);

  return btr_search_latches[btr_get_search_slot(index->id, index->space)];
}

static inline hash_table_t *btr_get_search_table(const dict_index_t *index) {
  ut_ad(index != nullptr);

  return btr_search_sys
      ->hash_tables[btr_get_search_slot(index->id, index->space)];
}
