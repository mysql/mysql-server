/*****************************************************************************

Copyright (c) 1997, 2022, Oracle and/or its affiliates.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2.0, as published by the
Free Software Foundation.

This program is also distributed with certain software (including but not
limited to OpenSSL) that is licensed under separate terms, as designated in a
particular file or component or in included license documentation. The authors
of MySQL hereby grant you an additional permission to link the program and
your derivative works with the separately licensed software that they have
included with MySQL.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License, version 2.0,
for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA

*****************************************************************************/

/** @file include/eval0eval.ic
 SQL evaluator: evaluates simple data structures, like expressions, in
 a query graph

 Created 12/29/1997 Heikki Tuuri
 *******************************************************/

#include "pars0grm.h"
#include "que0que.h"
#include "rem0cmp.h"

/** Evaluates a function node. */
void eval_func(func_node_t *func_node); /*!< in: function node */
/** Allocate a buffer from global dynamic memory for a value of a que_node.
 NOTE that this memory must be explicitly freed when the query graph is
 freed. If the node already has allocated buffer, that buffer is freed
 here. NOTE that this is the only function where dynamic memory should be
 allocated for a query node val field.
 @return pointer to allocated buffer */
byte *eval_node_alloc_val_buf(
    que_node_t *node, /*!< in: query graph node; sets the val field
                      data field to point to the new buffer, and
                      len field equal to size */
    ulint size);      /*!< in: buffer size */

/** Allocates a new buffer if needed.
 @return pointer to buffer */
static inline byte *eval_node_ensure_val_buf(
    que_node_t *node, /*!< in: query graph node; sets the val field
                      data field to point to the new buffer, and
                      len field equal to size */
    ulint size)       /*!< in: buffer size */
{
  dfield_t *dfield;
  byte *data;

  dfield = que_node_get_val(node);
  dfield_set_len(dfield, size);

  data = static_cast<byte *>(dfield_get_data(dfield));

  if (!data || que_node_get_val_buf_size(node) < size) {
    data = eval_node_alloc_val_buf(node, size);
  }

  return (data);
}

/** Evaluates a symbol table symbol. */
static inline void eval_sym(sym_node_t *sym_node) /*!< in: symbol table node */
{
  ut_ad(que_node_get_type(sym_node) == QUE_NODE_SYMBOL);

  if (sym_node->indirection) {
    /* The symbol table node is an alias for a variable or a
    column */

    dfield_copy_data(que_node_get_val(sym_node),
                     que_node_get_val(sym_node->indirection));
  }
}

/** Evaluates an expression. */
static inline void eval_exp(que_node_t *exp_node) /*!< in: expression */
{
  if (que_node_get_type(exp_node) == QUE_NODE_SYMBOL) {
    eval_sym((sym_node_t *)exp_node);

    return;
  }

  eval_func(static_cast<func_node_t *>(exp_node));
}

/** Sets an integer value as the value of an expression node. */
static inline void eval_node_set_int_val(
    que_node_t *node, /*!< in: expression node */
    lint val)         /*!< in: value to set */
{
  dfield_t *dfield;
  byte *data;

  dfield = que_node_get_val(node);

  data = static_cast<byte *>(dfield_get_data(dfield));

  if (data == nullptr) {
    data = eval_node_alloc_val_buf(node, 4);
  }

  ut_ad(dfield_get_len(dfield) == 4);

  mach_write_to_4(data, (ulint)val);
}

/** Gets an integer non-SQL null value from an expression node.
 @return integer value */
static inline lint eval_node_get_int_val(
    que_node_t *node) /*!< in: expression node */
{
  const byte *ptr;
  dfield_t *dfield;

  dfield = que_node_get_val(node);
  ptr = static_cast<byte *>(dfield_get_data(dfield));

  ut_ad(dfield_get_len(dfield) == 4);

  return (mach_read_from_4(ptr));
}

/** Gets a boolean value from a query node.
 @return boolean value */
static inline bool eval_node_get_bool_val(
    que_node_t *node) /*!< in: query graph node */
{
  dfield_t *dfield;
  byte *data;

  dfield = que_node_get_val(node);

  data = static_cast<byte *>(dfield_get_data(dfield));

  ut_ad(data != nullptr);

  return (mach_read_from_1(data));
}

/** Sets a boolean value as the value of a function node. */
static inline void eval_node_set_bool_val(
    func_node_t *func_node, /*!< in: function node */
    bool val)               /*!< in: value to set */
{
  dfield_t *dfield;
  byte *data;

  dfield = que_node_get_val(func_node);

  data = static_cast<byte *>(dfield_get_data(dfield));

  if (data == nullptr) {
    /* Allocate 1 byte to hold the value */

    data = eval_node_alloc_val_buf(func_node, 1);
  }

  ut_ad(dfield_get_len(dfield) == 1);

  mach_write_to_1(data, val);
}

/** Copies a binary string value as the value of a query graph node. Allocates a
 new buffer if necessary. */
static inline void eval_node_copy_and_alloc_val(
    que_node_t *node, /*!< in: query graph node */
    const byte *str,  /*!< in: binary string */
    ulint len)        /*!< in: string length or UNIV_SQL_NULL */
{
  byte *data;

  if (len == UNIV_SQL_NULL) {
    dfield_set_len(que_node_get_val(node), len);

    return;
  }

  data = eval_node_ensure_val_buf(node, len);

  ut_memcpy(data, str, len);
}

/** Copies a query node value to another node. */
static inline void eval_node_copy_val(
    que_node_t *node1, /*!< in: node to copy to */
    que_node_t *node2) /*!< in: node to copy from */
{
  dfield_t *dfield2;

  dfield2 = que_node_get_val(node2);

  eval_node_copy_and_alloc_val(node1,
                               static_cast<byte *>(dfield_get_data(dfield2)),
                               dfield_get_len(dfield2));
}
