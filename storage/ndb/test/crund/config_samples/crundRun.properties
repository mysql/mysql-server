# Copyright (c) 2010, 2022, Oracle and/or its affiliates.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2.0,
# as published by the Free Software Foundation.
#
# This program is also distributed with certain software (including
# but not limited to OpenSSL) that is licensed under separate terms,
# as designated in a particular file or component or in included license
# documentation.  The authors of MySQL hereby grant you an additional
# permission to link the program and your derivative works with the
# separately licensed software that they have included with MySQL.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License, version 2.0, for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA

# benchmark loads run by generic driver ([un]qualified class names)
loads=NdbapiAB,NdbjtieAB
#loads=NdbapiAB
#loads=NdbjtieAB
#loads=ClusterjAB
#loads=JdbcAB
#loads=JpaAB
#loads=NdbjtieAB,ClusterjAB
#loads=NdbjtieAB,ClusterjAB,JdbcAB
#loads=NdbjtieAB,ClusterjAB,JdbcAB,JpaAB
# former TWS loads:
#loads=NdbjtieS
#loads=ClusterjS
#loads=JdbcS
#loads=NdbjtieS,ClusterjS,JdbcS

# number of runs in a series (discard the first 5..10 warmup runs)
#nRuns=1
#nRuns=5
#nRuns=10
nRuns=20

# which bulk operation patterns to run (execution modes):
#       xMode           #rows           #roundtrips     #transactions
#       indy            O(n)            O(n)            O(n)
#       each            O(n)            O(n)            O(1)
#       bulk            O(n)            O(1)            O(1)
#xMode=indy
#xMode=each
#xMode=bulk
xMode=indy,each,bulk

# number of operations/rows per run with scale factor
#nOpsStart=1
#nOpsStart=10
nOpsStart=100
#nOpsStart=1000
#nOpsStart=10000
#nOpsEnd=1
#nOpsEnd=10
#nOpsEnd=100
#nOpsEnd=1000
nOpsEnd=10000
nOpsScale=10

# max length of bytes/chars values (0=disabled, scales in multiples of 10)
#maxVarbinaryBytes=0
maxVarbinaryBytes=100
#maxVarcharChars=0
maxVarcharChars=100
# XXX currently, blobs/text only implemented in crund jdbc
maxBlobBytes=0
#maxBlobBytes=100000
maxTextChars=0
#maxTextChars=100000

# benchmark metrics collected by generic driver
logRealTime=true
logCpuTime=true
#logMemUsage=true
#includeFullGC=false
logSumOfOps=true

# whether to fail on errors fast or after finishing operation sequence
failOnError=true

# whether connections are to be renewed after a run
#renewConnection=false

# lock mode used for queries {none, shared, exclusive}
# XXX shared/exclusive locking currently not implemented in jpa, clusterj
#lockMode=none

# comma-separated list of java regexp which operations to run or skip;
# skip ops matching excludes; if includes given, only run those included.
# XXX C++ Crund: no support for regexp yet but match for starts-with only
#include=
#exclude=
#
# XXX
#include=A_ins,B_ins
#exclude=A_set,A_get
#
# examples: only run inserts/deletes, byte/char ops...
#include=.*_ins.*,.*_del.*,
#include=B_ins.*,B_del.*,B_.*Varbin.*,B_.*Varchar.*,
#
# examples: skip all As, Bs, A-B navigation, byte/char, blob/text ops...
#exclude=A_.*,B_getAs.*,
#exclude=B_.*,A_getBs.*,
#exclude=A_getBs.*,B_getAs.*,
#exclude=.*Varbin.*,.*Varchar.*,
#exclude=.*Blob.*,.*Text.*,

# COMMENTS, LIMITS, ISSUES:
#
# ndbd errors (increase SendBufferMemory) at:
# nOps >= 65536
#
# ndbapi@(A=16384, B=16384) fails at running out of MaxNoOfLocalOperations
# increase the correlated from default MaxNoOfConcurrentOperations=32768
# MaxNoOfConcurrentOperations=65536
#
# msqld errors with JDBC (increase MaxNoOfConcurrentOperations) at:
# nOps >= 16384 
#
# NdbApi (driver+load) at:
# nOps >= 4096:
#
# ClusterJ breaks in navA->B,navA->B_opt at: nOps >= 4096
# clusterj@(A=4096, B=4096) fails at MaxNoOfConcurrentTransactions=4096
# clusterj@(A=16384, B=16384) fails at MaxNoOfConcurrentTransactions=16384
#MaxNoOfConcurrentTransactions=16384
# -- leaking connections?
#
# not yet supported in NdbapiAB:
# maxStringLength > 255 (or so)
#
# Ndbapi (driver): [nOps=10000]ndbapi, maxStringLength=100
#B_getVarchar_100,bulk
# !!! error in NdbapiAB.cpp, line: 473, code: 1218, msg: Send Buffers overloaded in NDB kernel.
#