# Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2.0,
# as published by the Free Software Foundation.
#
# This program is also distributed with certain software (including
# but not limited to OpenSSL) that is licensed under separate terms,
# as designated in a particular file or component or in included license
# documentation.  The authors of MySQL hereby grant you an additional
# permission to link the program and your derivative works with the
# separately licensed software that they have included with MySQL.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License, version 2.0, for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA

jdbc.driver=com.mysql.jdbc.Driver
jdbc.user=
jdbc.password=
jdbc.autoCommit=false
#jdbc.url=jdbc:mysql://localhost/crunddb?allowMultiQueries=true
#jdbc.url=jdbc:mysql://localhost/crunddb?allowMultiQueries=true&rewriteBatchedStatements=true&cachePrepStmts=true&prepStmtCacheSize=100&prepStmtCacheSqlLimit=1024
jdbc.url=jdbc:mysql://localhost/crunddb?allowMultiQueries=true&rewriteBatchedStatements=true&cachePrepStmts=true&prepStmtCacheSize=100&prepStmtCacheSqlLimit=1024&useServerPrepStmts=true

# jdbc:mysql settings
#jdbc.url=jdbc:mysql://localhost/crunddb
# allow the use of ';' to delimit multiple queries during one statement
#   allowMultiQueries=true
#
# use server-side prepared statements if the server supports them
#   useServerPrepStmts  [false]
#   caution: with  server-side prepared statements, call clearParameters()
#   and set all parameters again before switching from large to nonlarge
#   parameters when using setBinaryStream(), ..., setBlob(), ...
# replace prepared statements unsupported by server with client-side emulation
#   emulateUnsupportedPstmts  [true]
#
# cache the parsing stage of client-side prepared statements,
# the "check" for suitability of server-side prepared statements themselves?
#   cachePrepStmts  [false]
# if enabled, how many prepared statements should be cached
#   prepStmtCacheSize  [25]
# if enabled, the largest SQL the driver will cache the parsing for
#   prepStmtCacheSqlLimit  [256]
#
# use multiqueries/multi-value inserts when executeBatch() is called
#   rewriteBatchedStatements=true
#   - server-side prepared statements can not currently take advantage of this
#   - if not called PreparedStatement.set*Stream(), batch size might be
#     suboptimal or result in error that the resultant packet is too large
#   - Statement.getGeneratedKeys() only works when entire batch is of INSERTs
#
# cache the parsing stage of CallableStatements
#   cacheCallableStmts  [false]
# if enabled, how many callable statements should be cached
#   callableStmtCacheSize  [100]
#
# cache ResultSetMetaData for Statements and PreparedStatements
#   cacheResultSetMetadata  [false]
# if enabled, number of queries to cache ResultSetMetadata for
#   metadataCacheSize  [50]
#
# use internal values of autocommit rather than querying the db for commit()
#   useLocalSessionState  [false]
# use the in-transaction state to determine if commit() should be sent to db
#   useLocalTransactionState  [false]
# maintain internal timers, adds System.getCurrentTimeMillis() calls per query
#   maintainTimeStats  [true]
#
# call setFetchSize(n) with this value on all newly-created Statements
#   defaultFetchSize  [0]
# with setFetchSize() > 0, should statement use cursor-based fetching
#   useCursorFetch  [false]
#
# continue processing batch commands if one statement fails
#   continueBatchOnError  [true]
#
# emulate java.sql.Blobs with locators, if enabled, delay loading the actual
# Blob data until retrieval method (getInputStream()...) has been called
#   emulateLocators  [false]
# if enabled, buffer size for fetching BLOB data for getBinaryInputStream
#  locatorFetchBufferSize  [1048576]
