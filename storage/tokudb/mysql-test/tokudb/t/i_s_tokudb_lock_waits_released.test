# verify that information_schema.tokudb_locks gets populated with locks, information_schema.tokudb_lock_waits gets
# populated with 1 lock_wait and all transactions are present in information_schema.tokudb_trx for 2 clients

source include/have_tokudb.inc;
set default_storage_engine='tokudb';
set tokudb_prelock_empty=false;
disable_warnings;
drop table if exists t;
enable_warnings;

create table t (id int primary key);

# verify that txn_a insert (1) blocks txn_b insert (1) and txn_b gets a duplicate key error

# should be empty
select trx_id,trx_mysql_thread_id from information_schema.tokudb_trx;
select * from information_schema.tokudb_locks;
select * from information_schema.tokudb_lock_waits;

connect (conn_a,localhost,root,,);
set autocommit=0;
set tokudb_prelock_empty=OFF; # disable the bulk loader
insert into t values (1);

connect (conn_b,localhost,root,,);
set autocommit=0;
send insert into t values (1);

# should find the presence of a lock on 1st transaction
connection default;
let $wait_condition= select count(*)=1 from information_schema.processlist where info='insert into t values (1)' and state='update';
source include/wait_condition.inc;
real_sleep 1; # delay a little to shorten the update -> write row -> lock wait race

replace_column 1 TRX_ID 2 MYSQL_ID; 
replace_result $datadir ./;
select * from information_schema.tokudb_locks;

# should find the presence of a lock_wait on the 2nd transaction
replace_column 1 REQUEST_TRX_ID 2 BLOCK_TRX_ID 6 LOCK_WAITS_START_TIME;
replace_result $datadir ./;
select * from information_schema.tokudb_lock_waits;

# should find the presence of two transactions
replace_column 1 TRX_ID 2 MYSQL_ID;
select trx_id,trx_mysql_thread_id from information_schema.tokudb_trx;

connection conn_a;
commit;
# verify that the lock on the 1st transaction is released and replaced by the lock for the 2nd transaction
replace_column 1 TRX_ID 2 MYSQL_ID;
replace_result $datadir ./;
select * from information_schema.tokudb_locks;
select * from information_schema.tokudb_lock_waits;

connection conn_b;
--error 1062 # duplicate key
reap;
commit;

connection default;
disconnect conn_a;
disconnect conn_b;

# verify that txn_a replace (1) blocks txn_b replace (1) and txn_b eventually gets the lock on (1) and completes

# verify that the lock on the 2nd transaction has been released
# should be be empty
select trx_id,trx_mysql_thread_id from information_schema.tokudb_trx;
select * from information_schema.tokudb_locks;
select * from information_schema.tokudb_lock_waits;

connect (conn_a,localhost,root,,);
set autocommit=0;
set tokudb_prelock_empty=OFF; # disable the bulk loader
replace into t values (1);

connect (conn_b,localhost,root,,);
set autocommit=0;
send replace into t values (1);

# should find the presence of a lock on 1st transaction
connection default;
let $wait_condition= select count(*)=1 from information_schema.processlist where info='replace into t values (1)' and state='update';
source include/wait_condition.inc;
real_sleep 1; # delay a little to shorten the update -> write row -> lock wait race

replace_column 1 TRX_ID 2 MYSQL_ID; 
replace_result $datadir ./;
select * from information_schema.tokudb_locks;

# should find the presence of a lock_wait on the 2nd transaction
replace_column 1 REQUEST_TRX_ID 2 BLOCK_TRX_ID 6 LOCK_WAITS_START_TIME;
replace_result $datadir ./;
select * from information_schema.tokudb_lock_waits;

# should find the presence of two transactions
replace_column 1 TRX_ID 2 MYSQL_ID;
select trx_id,trx_mysql_thread_id from information_schema.tokudb_trx;

connection conn_a;
commit;
# verify that the lock on the 1st transaction is released and replaced by the lock for the 2nd transaction
replace_column 1 TRX_ID 2 MYSQL_ID;
replace_result $datadir ./;
select * from information_schema.tokudb_locks;
select * from information_schema.tokudb_lock_waits;

connection conn_b;
reap;
commit;

connection default;
disconnect conn_a;
disconnect conn_b;

# verify that the lock on the 2nd transaction has been released
# should be be empty
select trx_id,trx_mysql_thread_id from information_schema.tokudb_trx;
select * from information_schema.tokudb_locks;
select * from information_schema.tokudb_lock_waits;

drop table t;
