## Inserting with upsert

## Preamble
--source include/xplugin_preamble.inc
## Test starts here

--let $xtest_file= $MYSQL_TMP_DIR/crud_insert_upsert.tmp
--write_file $xtest_file
## Test data
-->quiet

-->macro Insert  %MODEL%  %TABLE%  %ROWS%  %UPSERT%  %ERROR%
Mysqlx.Crud.Insert {
  data_model: %MODEL%
  collection { name: '%TABLE%' schema: 'xtest'}
  %ROWS%
  upsert: %UPSERT%
}
-->expecterror %ERROR%
-->recvresult
-->endmacro

-->macro Insert_one  %MODEL%  %TABLE%  %ROW%  %ERROR%
-->callmacro Insert %MODEL%	%TABLE%	row{field{%ROW%}}	false	%ERROR%
-->endmacro

-->macro Insert_two  %MODEL%  %TABLE%  %ROW1%  %ROW2%  %ERROR%
-->callmacro Insert %MODEL%	%TABLE%	row{field{%ROW1%}} row{field{%ROW2%}}	false	%ERROR%
-->endmacro

-->macro Upsert_one  %MODEL%  %TABLE%  %ROW%  %ERROR%
-->callmacro Insert %MODEL%	%TABLE%	row{field{%ROW%}}	true	%ERROR%
-->endmacro

-->macro Upsert_two  %MODEL%  %TABLE%  %ROW1%  %ROW2%  %ERROR%
-->callmacro Insert %MODEL%	%TABLE%	row{field{%ROW1%}} row{field{%ROW2%}}	true	%ERROR%
-->endmacro

-->macro Show  %TABLE%
-->stmtsql SELECT doc FROM xtest.%TABLE%
-->recvresult
-->endmacro


-->varlet %DOC1_FOOBARCOM_FOO% type: LITERAL literal{type: V_OCTETS v_octets{value:'{"_id": "1", "email": "foo@bar.com", "name":"foo"}' content_type:2}}
-->varlet %DOC2_BLABARCOM_BLA% type: LITERAL literal{type: V_OCTETS v_octets{value:'{"_id": "2", "email": "bla@bar.com", "name":"bla"}' content_type:2}}
-->varlet %DOC3_FOOORACOM_FOO% type: LITERAL literal{type: V_OCTETS v_octets{value:'{"_id": "3", "email": "foo@ora.com", "name":"foo"}' content_type:2}}
-->varlet %DOC1_FOOORACOM_FOO% type: LITERAL literal{type: V_OCTETS v_octets{value:'{"_id": "1", "email": "foo@ora.com", "name":"foo"}' content_type:2}}
-->varlet %DOC3_FOOBARCOM_BLA% type: LITERAL literal{type: V_OCTETS v_octets{value:'{"_id": "3", "email": "foo@bar.com", "name":"bla"}' content_type:2}}
-->varlet %DOC1_BLA% type: LITERAL literal{type: V_OCTETS v_octets{value:'{"_id": "1", "name":"bla"}' content_type:2}}
-->varlet %DOC1_BLABARCOM_FOO% type: LITERAL literal{type: V_OCTETS v_octets{value:'{"_id": "1", "email": "bla@bar.com", "name":"foo"}' content_type:2}}
-->varlet %DOC4_BLABLACOM_BLA% type: LITERAL literal{type: V_OCTETS v_octets{value:'{"_id": "4", "email": "bla@bla.com", "name":"bla"}' content_type:2}}


-->title =Data model: TABLE

-->sql
CREATE TABLE xtest.xtable (doc JSON);
-->endsql
-->title -Insert two docs
-->callmacro Insert_two	TABLE	xtable	%DOC1_FOOBARCOM_FOO%	%DOC2_BLABARCOM_BLA%	ER_SUCCESS
-->callmacro Show	xtable
-->title -Upsert one doc
-->callmacro Upsert_one	TABLE	xtable	%DOC3_FOOORACOM_FOO%	ER_X_BAD_INSERT_DATA



-->title =Data model: DOCUMENT

-->macro Setup %NAME%
-->stmtadmin create_collection	{"schema":"xtest","name":"%NAME%"}
-->recvresult
-->stmtadmin create_collection_index	{"schema":"xtest", "collection":"%NAME%", "name":"secondary", "unique":true, "constraint":{"member":"$.email", "type":"TEXT(20)","required":false}}
-->recvresult
-->callmacro Insert_two	DOCUMENT	%NAME%	%DOC1_FOOBARCOM_FOO%	%DOC2_BLABARCOM_BLA%	ER_SUCCESS
-->callmacro Show	%NAME%
-->endmacro


-->macro Setup_drop_id %NAME%
-->callmacro Setup	%NAME%
-->stmtsql ALTER TABLE xtest.%NAME% DROP COLUMN `_id`;
-->recvresult
-->endmacro


-->title -Test0 - No matches
-->callmacro Setup	col0
-->callmacro Upsert_one	DOCUMENT	col0	%DOC3_FOOORACOM_FOO%	ER_SUCCESS
-->callmacro Show	col0

-->title -Test1 - Match on _id and secondary key
-->callmacro Setup	col1
-->callmacro Upsert_one	DOCUMENT	col1	%DOC1_FOOORACOM_FOO%	ER_SUCCESS
-->callmacro Show	col1

-->title -Test2 - Match on secondary key only
-->callmacro Setup	col2
-->callmacro Upsert_one	DOCUMENT	col2	%DOC3_FOOBARCOM_BLA%	ER_SUCCESS
-->callmacro Show	col2

-->title -Test3 - Match on _id only
-->callmacro Setup	col3
-->callmacro Upsert_one	DOCUMENT	col3	%DOC1_BLA%	ER_SUCCESS
-->callmacro Show	col3

-->title -Test4 - Match on _id and secondary, but from different rows
-->callmacro Setup	col4
-->callmacro Upsert_one	DOCUMENT	col4	%DOC1_BLABARCOM_FOO%	ER_X_DOC_ID_DUPLICATE
-->callmacro Show	col4

-->title -Test1-2 - Match on _id and secondary key (upsert two rows)
-->callmacro Setup	col21
-->callmacro Upsert_two	DOCUMENT	col21	%DOC4_BLABLACOM_BLA%	%DOC1_FOOORACOM_FOO%	ER_SUCCESS
-->callmacro Show	col21

-->title -Test2-2 - Match on secondary key only (upsert two rows)
-->callmacro Setup	col22
-->callmacro Upsert_two	DOCUMENT	col22	%DOC4_BLABLACOM_BLA%	%DOC3_FOOBARCOM_BLA%	ER_SUCCESS
-->callmacro Show	col22

-->title -Test3-2 - Match on _id only (upsert two rows)
-->callmacro Setup	col23
-->callmacro Upsert_two	DOCUMENT	col23	%DOC4_BLABLACOM_BLA%	%DOC1_BLA%	ER_SUCCESS
-->callmacro Show	col23

-->title -Test4-2 - Match on _id and secondary, but from different rows (upsert two rows)
-->callmacro Setup	col24
-->callmacro Upsert_two	DOCUMENT	col24	%DOC4_BLABLACOM_BLA%	%DOC1_BLABARCOM_FOO%	ER_X_DOC_ID_DUPLICATE
-->callmacro Show	col24


-->title -Test0-3 - No matches (insert instead upsert)
-->callmacro Setup	col30
-->callmacro Insert_one	DOCUMENT	col30	%DOC3_FOOORACOM_FOO%	ER_SUCCESS
-->callmacro Show	col30

-->title -Test1-3 - Match on _id and secondary key (insert instead upsert)
-->callmacro Setup	col31
-->callmacro Insert_one	DOCUMENT	col31	%DOC1_FOOORACOM_FOO%	ER_X_DOC_ID_DUPLICATE
-->callmacro Show	col31

-->title -Test2-3 - Match on secondary key only (insert instead upsert)
-->callmacro Setup	col32
-->callmacro Insert_one	DOCUMENT	col32	%DOC3_FOOBARCOM_BLA%	ER_X_DOC_ID_DUPLICATE
-->callmacro Show	col32

-->title -Test3-3 - Match on _id only (insert instead upsert)
-->callmacro Setup	col33
-->callmacro Insert_one	DOCUMENT	col33	%DOC1_BLA%	ER_X_DOC_ID_DUPLICATE
-->callmacro Show	col33

-->title -Test4-3 - Match on _id and secondary, but from different rows (insert instead upsert)
-->callmacro Setup	col34
-->callmacro Insert_one	DOCUMENT	col34	%DOC1_BLABARCOM_FOO%	ER_X_DOC_ID_DUPLICATE
-->callmacro Show	col34


-->title -Test0-4 - No matches (drop _id coulmn)
-->callmacro Setup_drop_id	col40
-->callmacro Upsert_one	DOCUMENT	col40	%DOC3_FOOORACOM_FOO%	ER_SUCCESS
-->callmacro Show	col40

-->title -Test1-4 - Match on _id and secondary key (drop _id coulmn)
-->callmacro Setup_drop_id	col41
-->callmacro Upsert_one	DOCUMENT	col41	%DOC1_FOOORACOM_FOO%	ER_SUCCESS
-->callmacro Show	col41

-->title -Test2-4 - Match on secondary key only (drop _id coulmn)
-->callmacro Setup_drop_id	col42
-->callmacro Upsert_one	DOCUMENT	col42	%DOC3_FOOBARCOM_BLA%	ER_SUCCESS
-->callmacro Show	col42

-->title -Test3-4 - Match on _id only (drop _id coulmn)
-->callmacro Setup_drop_id	col43
-->callmacro Upsert_one	DOCUMENT	col43	%DOC1_BLA%	ER_SUCCESS
-->callmacro Show	col43

-->title -Test4-4 - Match on _id and secondary, but from different rows (drop _id coulmn)
-->callmacro Setup_drop_id	col44
-->callmacro Upsert_one	DOCUMENT	col44	%DOC1_BLABARCOM_FOO%	ER_SUCCESS
-->callmacro Show	col44


EOF

CREATE SCHEMA xtest;

--exec $MYSQLXTEST --import=$MYSQLXTEST_MACRO_DIR -uroot --password='' --file=$xtest_file 2>&1

## Cleanup
--remove_file $xtest_file
DROP SCHEMA IF EXISTS xtest;
UNINSTALL PLUGIN mysqlx;
