## Tests for row locking in SQL find.

## Preamble
--source include/xplugin_preamble.inc
--source include/xplugin_create_user.inc

let $old_innodb_lock_wait_timeout= `SELECT @@innodb_lock_wait_timeout`;

# Tests
--write_file $MYSQL_TMP_DIR/find_row_locking.tmp
-->quiet

-->macro Check_data_locks_table
-->noquery_result
-->stmtsql SELECT COUNT(*) FROM performance_schema.data_locks
-->recvtovar %NUM%
-->endmacro

-->macro Expect_data_locks_table_is_not_empty
-->echo Verify [Expecting performance_schema.data_locks to be not empty]
-->callmacro Check_data_locks_table
-->assert_gt %NUM%	0
-->query_result
-->endmacro

-->macro Expect_data_locks_table_is_empty
-->echo Verify [Expecting performance_schema.data_locks to be empty]
-->callmacro Check_data_locks_table
-->assert_eq 0	%NUM%
-->query_result
-->endmacro

-->echo ######### preparation #########
-->sql
drop schema if exists xtest;
create schema xtest default charset 'utf8mb4';
use xtest;
create table test_coll (doc JSON, _id VARBINARY(16) GENERATED ALWAYS AS (json_unquote(json_extract(doc, '$._id'))) stored PRIMARY KEY);
insert into test_coll (doc) values ('{"_id": "1", "a": 1}');
insert into test_coll (doc) values ('{"_id": "2", "a": 1}');
insert into test_coll (doc) values ('{"_id": "3", "a": 1}');
set global innodb_lock_wait_timeout=3;
-->endsql

-->newsession session1	x_root
-->newsession session2	x_root

-->echo ######### Shared lock after shared lock #########
-->setsession session1
-->callmacro Expect_data_locks_table_is_empty
-->stmtsql START TRANSACTION;
-->recvresult
Mysqlx.Crud.Find {
  collection {
    name: "test_coll"
    schema: "xtest"
  }
  data_model: DOCUMENT
  criteria {
    type: OPERATOR
    operator {
      name: "=="
      param {
        type: IDENT identifier {
          name: "_id"
        }
      }
      param {
        type: LITERAL
        literal {
            type: V_STRING
            v_string {
              value: "1"
            }
        }
      }
    }
  }
  locking: SHARED_LOCK
}
-->recvresult
-->callmacro Expect_data_locks_table_is_not_empty

-->setsession session2
-->stmtsql START TRANSACTION;
-->recvresult
Mysqlx.Crud.Find {
  collection {
    name: "test_coll"
    schema: "xtest"
  }
  data_model: DOCUMENT
  criteria {
    type: OPERATOR
    operator {
      name: "=="
      param {
        type: IDENT identifier {
          name: "_id"
        }
      }
      param {
        type: LITERAL
        literal {
            type: V_STRING
            v_string {
              value: "2"
            }
        }
      }
    }
  }
  locking: SHARED_LOCK
}
-->recvresult
Mysqlx.Crud.Find {
  collection {
    name: "test_coll"
    schema: "xtest"
  }
  data_model: DOCUMENT
  criteria {
    type: OPERATOR
    operator {
      name: "=="
      param {
        type: IDENT identifier {
          name: "_id"
        }
      }
      param {
        type: LITERAL
        literal {
            type: V_STRING
            v_string {
              value: "1"
            }
        }
      }
    }
  }
  locking: SHARED_LOCK
}
-->recvresult
-->callmacro Expect_data_locks_table_is_not_empty

-->setsession session1
-->stmtsql ROLLBACK;
-->recvresult

-->setsession session2
-->stmtsql ROLLBACK;
-->recvresult

-->callmacro Expect_data_locks_table_is_empty

-->echo ######### Shared lock after exclusive lock #########
-->setsession session1
-->callmacro Expect_data_locks_table_is_empty
-->stmtsql START TRANSACTION;
-->recvresult
Mysqlx.Crud.Find {
  collection {
    name: "test_coll"
    schema: "xtest"
  }
  data_model: DOCUMENT
  criteria {
    type: OPERATOR
    operator {
      name: "=="
      param {
        type: IDENT identifier {
          name: "_id"
        }
      }
      param {
        type: LITERAL
        literal {
            type: V_STRING
            v_string {
              value: "1"
            }
        }
      }
    }
  }
  locking: EXCLUSIVE_LOCK
}
-->recvresult
-->callmacro Expect_data_locks_table_is_not_empty

-->setsession session2
-->stmtsql START TRANSACTION;
-->recvresult
Mysqlx.Crud.Find {
  collection {
    name: "test_coll"
    schema: "xtest"
  }
  data_model: DOCUMENT
  criteria {
    type: OPERATOR
    operator {
      name: "=="
      param {
        type: IDENT identifier {
          name: "_id"
        }
      }
      param {
        type: LITERAL
        literal {
            type: V_STRING
            v_string {
              value: "2"
            }
        }
      }
    }
  }
  locking: SHARED_LOCK
}
-->recvresult
Mysqlx.Crud.Find {
  collection {
    name: "test_coll"
    schema: "xtest"
  }
  data_model: DOCUMENT
  criteria {
    type: OPERATOR
    operator {
      name: "=="
      param {
        type: IDENT identifier {
          name: "_id"
        }
      }
      param {
        type: LITERAL
        literal {
            type: V_STRING
            v_string {
              value: "1"
            }
        }
      }
    }
  }
  locking: SHARED_LOCK
}
-->expecterror ER_LOCK_WAIT_TIMEOUT
-->recvresult
-->callmacro Expect_data_locks_table_is_not_empty

-->setsession session1
-->stmtsql ROLLBACK;
-->recvresult

-->setsession session2
-->stmtsql ROLLBACK;
-->recvresult

-->callmacro Expect_data_locks_table_is_empty

-->echo ######### Exclusive lock after shared lock #########
-->setsession session1
-->callmacro Expect_data_locks_table_is_empty
-->stmtsql START TRANSACTION;
-->recvresult
Mysqlx.Crud.Find {
  collection {
    name: "test_coll"
    schema: "xtest"
  }
  data_model: DOCUMENT
  criteria {
    type: OPERATOR
    operator {
      name: "=="
      param {
        type: IDENT identifier {
          name: "_id"
        }
      }
      param {
        type: LITERAL
        literal {
            type: V_STRING
            v_string {
              value: "1"
            }
        }
      }
    }
  }
  locking: SHARED_LOCK
}
-->recvresult
-->callmacro Expect_data_locks_table_is_not_empty

-->setsession session2
-->stmtsql START TRANSACTION;
-->recvresult
Mysqlx.Crud.Find {
  collection {
    name: "test_coll"
    schema: "xtest"
  }
  data_model: DOCUMENT
  criteria {
    type: OPERATOR
    operator {
      name: "=="
      param {
        type: IDENT identifier {
          name: "_id"
        }
      }
      param {
        type: LITERAL
        literal {
            type: V_STRING
            v_string {
              value: "2"
            }
        }
      }
    }
  }
  locking: EXCLUSIVE_LOCK
}
-->recvresult
Mysqlx.Crud.Find {
  collection {
    name: "test_coll"
    schema: "xtest"
  }
  data_model: DOCUMENT
  criteria {
    type: OPERATOR
    operator {
      name: "=="
      param {
        type: IDENT identifier {
          name: "_id"
        }
      }
      param {
        type: LITERAL
        literal {
            type: V_STRING
            v_string {
              value: "3"
            }
        }
      }
    }
  }
  locking: EXCLUSIVE_LOCK
}
-->recvresult
Mysqlx.Crud.Find {
  collection {
    name: "test_coll"
    schema: "xtest"
  }
  data_model: DOCUMENT
  criteria {
    type: OPERATOR
    operator {
      name: "=="
      param {
        type: IDENT identifier {
          name: "_id"
        }
      }
      param {
        type: LITERAL
        literal {
            type: V_STRING
            v_string {
              value: "1"
            }
        }
      }
    }
  }
  locking: EXCLUSIVE_LOCK
}
-->expecterror ER_LOCK_WAIT_TIMEOUT
-->recvresult
-->callmacro Expect_data_locks_table_is_not_empty

-->setsession session1
-->stmtsql ROLLBACK;
-->recvresult

-->setsession session2
-->stmtsql ROLLBACK;
-->recvresult

-->callmacro Expect_data_locks_table_is_empty

-->echo ######### Exclusive lock after exclusive lock #########
-->setsession session1
-->callmacro Expect_data_locks_table_is_empty
-->stmtsql START TRANSACTION;
-->recvresult
Mysqlx.Crud.Find {
  collection {
    name: "test_coll"
    schema: "xtest"
  }
  data_model: DOCUMENT
  criteria {
    type: OPERATOR
    operator {
      name: "=="
      param {
        type: IDENT identifier {
          name: "_id"
        }
      }
      param {
        type: LITERAL
        literal {
            type: V_STRING
            v_string {
              value: "1"
            }
        }
      }
    }
  }
  locking: EXCLUSIVE_LOCK
}
-->recvresult
-->callmacro Expect_data_locks_table_is_not_empty

-->setsession session2
-->stmtsql START TRANSACTION;
-->recvresult
Mysqlx.Crud.Find {
  collection {
    name: "test_coll"
    schema: "xtest"
  }
  data_model: DOCUMENT
  criteria {
    type: OPERATOR
    operator {
      name: "=="
      param {
        type: IDENT identifier {
          name: "_id"
        }
      }
      param {
        type: LITERAL
        literal {
            type: V_STRING
            v_string {
              value: "2"
            }
        }
      }
    }
  }
  locking: EXCLUSIVE_LOCK
}
-->recvresult
Mysqlx.Crud.Find {
  collection {
    name: "test_coll"
    schema: "xtest"
  }
  data_model: DOCUMENT
  criteria {
    type: OPERATOR
    operator {
      name: "=="
      param {
        type: IDENT identifier {
          name: "_id"
        }
      }
      param {
        type: LITERAL
        literal {
            type: V_STRING
            v_string {
              value: "1"
            }
        }
      }
    }
  }
  locking: EXCLUSIVE_LOCK
}
-->expecterror ER_LOCK_WAIT_TIMEOUT
-->recvresult
-->callmacro Expect_data_locks_table_is_not_empty

-->setsession session1
-->stmtsql ROLLBACK;
-->recvresult

-->setsession session2
-->stmtsql ROLLBACK;
-->recvresult

-->callmacro Expect_data_locks_table_is_empty

EOF

--exec $MYSQLXTEST -ux_root --password='' --file=$MYSQL_TMP_DIR/find_row_locking.tmp 2>&1

## Cleanup
DROP SCHEMA IF EXISTS xtest;
--remove_file $MYSQL_TMP_DIR/find_row_locking.tmp

--disable_query_log
eval SET GLOBAL innodb_lock_wait_timeout=$old_innodb_lock_wait_timeout;
--enable_query_log

## Postamble
--source include/xplugin_drop_user.inc
UNINSTALL PLUGIN mysqlx;
