################################################################################
# Test cases to verify concurrent transactions behaviour on tables with
# multi level foreign keys (eg: t1 refererring t2 and t2 referring t3)
#
# Test:
# 0. The test requires two servers: M1 and M2.
# 1. With both members ONLINE. Create three tables on M1.
# 2. With different combinations of DML transactions test concurrent
#    transactions behaviour by calling gr_parallel_local_and_remote_transactions.inc.
# 3. Assert that number of certified transactions are the expected ones after
#    all the combinations of step2.
################################################################################

--source include/have_debug_sync.inc
--source ../inc/have_group_replication_plugin.inc
--source ../inc/group_replication.inc

--echo
--echo ############################################################
--echo # Create 3 tables on server1 (t3 referring to t2 and t2 referring to t1)
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
CREATE TABLE t1 (c1 INT PRIMARY KEY);
CREATE TABLE t2 (c1 INT PRIMARY KEY, c2 INT, FOREIGN KEY (c2) REFERENCES t1(c1));
CREATE TABLE t3 (c1 INT PRIMARY KEY, c2 INT, FOREIGN KEY (c2) REFERENCES t2(c1));
INSERT INTO t1 VALUES (1), (3);
--source include/rpl_sync.inc

--let $local_server_connection1=server_1
--let $local_server_connection2=server1
--let $remote_server_connection=server2

--echo
--echo ############################################################
--echo # Scenario 1: INSERT vs UPDATE
--let $local_transaction=INSERT INTO t2 VALUES(2, 1); INSERT INTO t3 VALUES(3, 2);
--let $remote_transaction= UPDATE t1 SET c1=2 WHERE c1=1;
--let $conflict_test=1
--source ../inc/gr_parallel_local_and_remote_transactions.inc

--echo
--echo ############################################################
--echo # Scenario 2: INSERT vs DELETE
--let $local_transaction=INSERT INTO t2 VALUES(3, 2); INSERT INTO t3 VALUES(4, 3);
--let $remote_transaction= DELETE FROM t1 WHERE c1=2;
--let $conflict_test=1
--source ../inc/gr_parallel_local_and_remote_transactions.inc

# Uncomment the below scenario 3 and 4 after fixing
# Bug#24347476 HIGH PRIORITY TRX FAILED TO KILL LOW PRIORITY TRX WHEN FOREIGN KEYS ARE INVOLVED
#--echo
#--echo ############################################################
#--echo # Scenario 3: UPDATE vs INSERT
#--let $local_transaction= UPDATE t1 SET c1=4 WHERE c1=3;
#--let $remote_transaction=INSERT INTO t2 VALUES(2, 3); INSERT INTO t3 VALUES(3, 2);
#--let $conflict_test=1
#--source ../inc/gr_parallel_local_and_remote_transactions.inc

#--echo
#--echo ############################################################
#--echo # Scenario 4: DELETE vs INSERT
#--let $local_transaction= DELETE FROM t1 WHERE c1=3
#--let $remote_transaction=INSERT INTO t2 VALUES(3, 3); INSERT INTO t3 VALUES(4, 3);
#--let $conflict_test=1
#--source ../inc/gr_parallel_local_and_remote_transactions.inc

--echo
--echo ############################################################
--echo # Clean up.
DROP TABLE t3, t2, t1;
--source ../inc/group_replication_end.inc
