################################################################################
# This test verifies that during recovery the user cannot execute transactions
#
# We test:
# 1. Single node recovery.
#    Block recovery with a debug sync point and check no queries can be applied.
# 2. General replication.
#    Block recovery state transfer and check no queries can be applied.
#
# Test:
# 0. The test requires two servers: M1 and M2.
# Test local recovery:
# 1. Bootstrap GR on the first node M1 after setting the debug point to block
#    recovery. Check transactions cannot be executed.
# 2. Signal to unblock recovery. Check M1 is ONLINE. Table creation should pass
#    as M1 is ONLINE now.
# Test for a joining member:
# 3. Block state transfer by stoping applier thread on M1. Start GR on M2.
#    M2 should be in RECOVERING state. Check transactions cannot be executed.
# 4. Unblock recovery on M2 by starting applier thread on M1. Table creation
#    should pass as this M2 has now recovered and in ONLINE state.
# 5. Clean up.
################################################################################

--source include/have_debug.inc
--source include/have_debug_sync.inc
--source ../inc/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--source ../inc/group_replication.inc

--echo #
--echo # 1. Test local recovery
--echo # Start group_replication on the first node after setting the debug
--echo # point to block recovery. Check whether transactions can be executed.
--echo #

--connection server1
SET @debug_save= @@GLOBAL.DEBUG;
--echo # Set the debug flag to block recovery at different stages.
SET @@GLOBAL.DEBUG='+d,recovery_thread_start_wait';

--source ../inc/gr_set_bootstrap_group.inc

--let $group_replication_start_member_state= RECOVERING
--source include/start_group_replication.inc

# Check we cannot execute transactions
--connection server_1
--error ER_OPTION_PREVENTS_STATEMENT
CREATE TABLE t1 (i INT NOT NULL PRIMARY KEY);

#Unblock recovery
SET DEBUG_SYNC= "now SIGNAL signal.recovery_continue";

--echo # Now wait for the node to be online
--let $group_replication_member_state= ONLINE
--source ../inc/gr_wait_for_member_state.inc

--echo # Table creation should pass as the single member is now recovered.
CREATE TABLE t1 (i INT NOT NULL PRIMARY KEY);
SET @@GLOBAL.DEBUG= @debug_save;

--echo #
--echo # 2. Test for a joining member
--echo # Start group_replication on the second member and block state transfer
--echo # Query execution should not be allowed
--echo #

--connection server1
STOP SLAVE SQL_THREAD FOR CHANNEL "group_replication_applier";

--connection server2

--let $group_replication_start_member_state= RECOVERING
--source include/start_group_replication.inc

--error ER_OPTION_PREVENTS_STATEMENT
CREATE TABLE t2 (i INT NOT NULL PRIMARY KEY);

# Unblock recovery and verify all is now normal
--connection server1
START SLAVE SQL_THREAD FOR CHANNEL "group_replication_applier";

--connection server2
--let $group_replication_member_state= ONLINE
--source ../inc/gr_wait_for_member_state.inc

--echo # Table creation should pass as this node has now recovered.
CREATE TABLE t2 (i INT NOT NULL PRIMARY KEY);

--echo #
--echo # Cleanup
--echo #

DROP TABLE t1;
DROP TABLE t2;

--source ../inc/group_replication_end.inc
