################################################################################
# This test proves that STOP GROUP_REPLICAITON, resets the super_read_only
# mode on the server, set during the recovery process.
#
# Test:
# 0. The test requires two servers: M1 and M2.
# 1. Bootstrap start GR on M1. Add table for recovery. Start GR on M2.
# 2. Restart GR on M2 introducing a failure on recovery. Change recovery user
#    to introduce an error.
# 3. Try executing a transaction on M2. It should fail as server is running in
#    super_read_only mode.
# 4. Stop GR on M2. Servers super_read_only must be 0. Query execution should
#    pass now.
# 5. Clean up.
################################################################################

--let $group_replication_group_name= a1e87f30-b156-11e4-ab27-072800479365
--source ../inc/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--source ../inc/group_replication.inc

--echo # Start a 2 server group

--connection server1
--source ../inc/start_and_bootstrap_group_replication.inc

CREATE TABLE t1 (a INT NOT NULL AUTO_INCREMENT PRIMARY KEY , b INT);

--connection server2
--source include/start_group_replication.inc

--echo
--echo # Restart group replication on server 2 inducing a failure on recovery

--source include/stop_group_replication.inc
set session sql_log_bin=0;
call mtr.add_suppression("There was an error when connecting to the donor*");
call mtr.add_suppression("Maximum number of retries when*");
call mtr.add_suppression("Fatal error during the Recovery process of Group Replication.*");
call mtr.add_suppression("Transaction cannot be executed while Group Replication is OFFLINE.*");
call mtr.add_suppression("Run function 'before_commit' in plugin 'group_replication' failed");
call mtr.add_suppression("The member is leaving a group without being on one");
call mtr.add_suppression("The member is already leaving or joining a group.");
call mtr.add_suppression("Error leaving the group");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
set session sql_log_bin=1;

# Change the recovery user to introduce an error.
--disable_warnings
CHANGE MASTER TO MASTER_USER='dummy_user' FOR CHANNEL 'group_replication_recovery';
--enable_warnings

# Reduce the retry count to try only once.
SET @debug_save_retries= @@GLOBAL.group_replication_recovery_retry_count;
--eval SET GLOBAL group_replication_recovery_retry_count= 1

--eval SET GLOBAL group_replication_group_name= "$group_replication_group_name"
START GROUP_REPLICATION;

--echo
--echo # When we try to execute a transaction on the server, it should fail as
--echo # the server is running in the super-read-only mode
--let $group_replication_member_state= ERROR
--source ../inc/gr_wait_for_member_state.inc

--error ER_OPTION_PREVENTS_STATEMENT
INSERT INTO t1 (b) VALUES (1);

--echo
--echo # Execute STOP GROUP_REPLICATION and this should reset the
--echo # super_read_only mode.
STOP GROUP_REPLICATION;

--echo # The server's super_read_only mode should be 0 here.
--let $assert_text= The super_read_only mode should be 0 here.
--let $assert_cond= "[SELECT @@GLOBAL.super_read_only]" = 0;
--source include/assert.inc

--echo
--echo # Query execution should pass now
INSERT INTO t1 (b) VALUES (1);

--echo
--echo # Cleanup
DROP TABLE t1;

--disable_warnings
CHANGE MASTER TO MASTER_USER='root' FOR CHANNEL 'group_replication_recovery';
--enable_warnings

SET @@GLOBAL.group_replication_recovery_retry_count= @debug_save_retries;

--connection server1
DROP TABLE t1;

--source ../inc/group_replication_end.inc
