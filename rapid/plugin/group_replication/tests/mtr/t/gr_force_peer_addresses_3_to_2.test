################################################################################
# Verify that on a full operational group, a group with 3 members, DBA can
# force a new group membership of 2 members.
#
# Steps:
#   0) The test requires three servers: M1, M2 and M3.
#   1) Create a group with 3 members.
#   2) Force a new group membership with 2 members i.e. M1, M2.
#   3) Assert that group has 2 members M1 and M2.
#   4) Execute a transaction in order to prove liveness.
#   5) Kill the member M3 that did not receive the new membership.
#   6) Clean up.
################################################################################
# This test does crashes servers, thence we skip it on asan and valgrind.
--source include/not_asan.inc
--source include/not_valgrind.inc
--source include/big_test.inc
--source include/force_restart.inc
--source ../inc/have_group_replication_plugin.inc


--echo
--echo ############################################################
--echo # 1. Create a group with 3 members and a table on it.
--let $rpl_server_count= 3
--source ../inc/group_replication.inc
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
--source include/rpl_sync.inc


--echo
--echo ############################################################
--echo # 2. Force a new group membership with 2 members: server 1 and 2.
--let $rpl_connection_name= server_2
--source include/rpl_connection.inc
--let $local_address_server2= `SELECT @@GLOBAL.group_replication_local_address`
--let $uuid_server2= `SELECT @@GLOBAL.SERVER_UUID`

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $local_address_server1= `SELECT @@GLOBAL.group_replication_local_address`
--let $uuid_server1= `SELECT @@GLOBAL.SERVER_UUID`

--disable_query_log
--eval SET GLOBAL group_replication_force_members= "$local_address_server1,$local_address_server2"
--enable_query_log

--let $assert_text= group_replication_force_members is correct
--let $assert_cond= "[SELECT @@GLOBAL.group_replication_force_members]" = "$local_address_server1,$local_address_server2"
--source include/assert.inc


--echo
--echo ############################################################
--echo # 3. Assert that group has 2 members: server 1 and 2.
# Server 1
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $group_replication_number_of_members= 2
--source ../inc/gr_wait_for_number_of_members.inc

--let $assert_text= Server 1 must be present on group members
--let $assert_cond= [SELECT COUNT(*) FROM performance_schema.replication_group_members WHERE member_id="$uuid_server1"] = 1
--source include/assert.inc
--let $assert_text= Server 2 must be present on group members
--let $assert_cond= [SELECT COUNT(*) FROM performance_schema.replication_group_members WHERE member_id="$uuid_server2"] = 1
--source include/assert.inc

--let $raw_view_id= query_get_value(SELECT view_id FROM performance_schema.replication_group_member_stats, view_id, 1)
--let $view_id= `SELECT RIGHT('$raw_view_id', 1)`
--let $assert_text= The value of view_id must be random:4
--let $assert_cond= $view_id >= 4
--source include/assert.inc

# Server 2
--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $group_replication_number_of_members= 2
--source ../inc/gr_wait_for_number_of_members.inc

--let $assert_text= Server 1 must be present on group members
--let $assert_cond= [SELECT COUNT(*) FROM performance_schema.replication_group_members WHERE member_id="$uuid_server1"] = 1
--source include/assert.inc
--let $assert_text= Server 2 must be present on group members
--let $assert_cond= [SELECT COUNT(*) FROM performance_schema.replication_group_members WHERE member_id="$uuid_server2"] = 1
--source include/assert.inc

--let $raw_view_id= query_get_value(SELECT view_id FROM performance_schema.replication_group_member_stats, view_id, 1)
--let $view_id= `SELECT RIGHT('$raw_view_id', 1)`
--let $assert_text= The value of view_id must be random:4
--let $assert_cond= $view_id >= 4
--source include/assert.inc


--echo
--echo ############################################################
--echo # 4. Execute a transaction in order to prove liveness.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
INSERT INTO t1 VALUES (1);
# We cannot use rpl_sync.inc because it will include server3,
# which is blocked and will make rpl_sync.inc to fail.
--let $sync_slave_connection= server1
--source include/sync_slave_sql_with_master.inc

--let $assert_text= 'There is one value in table t1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1, count, 1] = 1
--source include/assert.inc

--let $diff_tables= server1:test.t1, server2:test.t1
--source include/diff_tables.inc


--echo
--echo ############################################################
--echo # 5. Kill the member that did not receive the new
--echo #    membership: server 3, which is blocked.
--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--source ../inc/kill_and_restart_mysqld.inc
--let $rpl_server_number= 3
--source include/rpl_reconnect.inc

--let $assert_text= 'There are no values in table t1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1, count, 1] = 0
--source include/assert.inc

DROP TABLE t1;


--echo
--echo ############################################################
--echo # 6. Clean up.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
DROP TABLE t1;
--source ../inc/group_replication_end.inc
