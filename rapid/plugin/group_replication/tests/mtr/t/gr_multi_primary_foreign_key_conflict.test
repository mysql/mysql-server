################################################################################
# Test case to verify that concurrent transactions with intersecting
# write set, on table with multiple primary and foreign key.
#
# Scenario 8.3: on WL#6834 page
#
# T1: WS={t3.(c1,c2)=(1,5), t3.c2=5, t2.b=5, t1.a=1}
#
# T2: WS={t1.a=1}
#         {t1.a=2}
#
# Outcome: T1 must abort, T2 must commit.
#
# Full details on WL#6834 QA notes.
#
# Test:
# 0. The test requires two servers: M1 and M2.
# 1. With both the members ONLINE. Create a table on M1.
# 2. Set a DEBUG sync before broadcast message to group on connection M1.
#    Commit a transaction that will be block before broadcast.
# 3. Wait until connection reaches DEBUG sync point.
# 4. Execute a transaction on M2, that will reach first certification,
#    since M1 is blocked before broadcast.
# 5. Signal the waiting thread on M1 to resume.
# 6. It will end up in an error stating that it was aborted, since
#    transactions are conflicting and M2 was ordered first.
# 7. Assert that number of certified transactions are the expected one.
#
# Checking the positive case in which there is no conflict.
# 8. Set a DEBUG sync before broadcast message to group on connection M1.
#    Commit a transaction that will be block before broadcast.
# 9. Wait until connection reaches DEBUG sync point.
# 10. Execute a transaction on M2, that will reach first certification,
#    since M1 is blocked before broadcast.
# 11. Signal the waiting thread on M1 to resume.
# 12. It will execute without error as the conflicting transactions have been
#     removed.
# 13. Assert that number of certified transactions are the expected one.
# 14. Clean up.
################################################################################

--source include/have_debug_sync.inc
--source ../inc/have_group_replication_plugin.inc
--source ../inc/group_replication.inc

--echo
--echo ############################################################
--echo # 1. Create a table on server1.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
CREATE TABLE t1 (a INT PRIMARY KEY);
CREATE TABLE t2 (b INT PRIMARY KEY);
CREATE TABLE t3 (c1 INT, c2 INT UNIQUE KEY, PRIMARY KEY(c1, c2), FOREIGN KEY(c1) REFERENCES t1(a), FOREIGN KEY(c2) REFERENCES t2(b));
INSERT INTO t1 VALUES (1);
INSERT INTO t2 VALUES (5);
--source include/rpl_sync.inc

--echo
--echo ############################################################
--echo # 2. Set a debug sync before broadcast message to group on
--echo #    connection server_1.
--echo #    Commit a transaction that will be block before broadcast.
--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
SET @debug_save= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG='d,group_replication_before_message_broadcast';
BEGIN;
INSERT INTO t3 values(1,5);
--send COMMIT

--echo
--echo ############################################################
--echo # 3. Wait until server_1 connection reaches the
--echo # group_replication_before_message_broadcast debug sync point.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $wait_condition=SELECT COUNT(*)=1 FROM INFORMATION_SCHEMA.PROCESSLIST WHERE State = 'debug sync point: now'
--source include/wait_condition.inc

--echo
--echo ############################################################
--echo # 4. Execute a transaction on server2, that will reach first
--echo #    certification, since server_1 is blocked before broadcast.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
UPDATE t1 SET a=2 WHERE a=1;

--echo
--echo ############################################################
--echo # 5. Signal the waiting thread on server_1 to resume.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SET DEBUG_SYNC='now SIGNAL waiting';
SET @@GLOBAL.DEBUG= @debug_save;

--echo
--echo ############################################################
--echo # 6. It will end up in an error stating that it was aborted,
--echo #    since transactions are conflicting and server2 was
--echo #    ordered first.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--let $sync_slave_connection= server1
--source include/sync_slave_sql_with_master.inc

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
--error ER_TRANSACTION_ROLLBACK_DURING_COMMIT
--reap

--echo
--echo ############################################################
--echo # 7. Assert that number of certified transactions are the
--echo #    expected ones.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $certified_transactions= query_get_value(SELECT Count_Transactions_Checked from performance_schema.replication_group_member_stats, Count_Transactions_Checked, 1)
--let $assert_text= The value of Count_Transactions_Checked should be 7 after starting group replication
--let $assert_cond= "$certified_transactions" = 7
--source include/assert.inc

--let $negatively_certified= query_get_value(SELECT Count_Conflicts_Detected from performance_schema.replication_group_member_stats, Count_Conflicts_Detected, 1)
--let $assert_text= The value of Count_Conflicts_Detected should be 1 after starting group replication
--let $assert_cond= "$negatively_certified" = 1
--source include/assert.inc


--echo
--echo ############################################################
--echo # Checking the positive case in which there is no conflict.
--echo ############################################################
--echo
INSERT INTO t1 VALUES (6);
INSERT INTO t1 VALUES (7);
INSERT INTO t2 VALUES (8);
--source include/rpl_sync.inc
--echo
--echo ############################################################
--echo # 1. Set a debug sync before broadcast message to group on
--echo #    connection server_1.
--echo #    Commit a transaction that will be block before broadcast.
--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
SET @@GLOBAL.DEBUG='d,group_replication_before_message_broadcast';
BEGIN;
INSERT INTO t3 values(6,8);
--send COMMIT

--echo
--echo ############################################################
--echo # 2. Wait until server_1 connection reaches the
--echo # group_replication_before_message_broadcast debug sync point.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $wait_condition=SELECT COUNT(*)=1 FROM INFORMATION_SCHEMA.PROCESSLIST WHERE State = 'debug sync point: now'
--source include/wait_condition.inc

--echo
--echo ############################################################
--echo # 3. Execute a transaction on server2, that will reach first
--echo #    certification, since server_1 is blocked before broadcast.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
UPDATE t1 SET a=9 WHERE a=7;
--let $sync_slave_connection= server1
--source include/sync_slave_sql_with_master.inc

--echo
--echo ############################################################
--echo # 4. Signal the waiting thread on server_1 to resume.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SET DEBUG_SYNC='now SIGNAL waiting';
SET @@GLOBAL.DEBUG= @debug_save;

--echo
--echo ########################################################################
--echo # 5. It will execute without error as the conflicting transactions have
--echo #    been removed.
--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
--reap

--source include/rpl_sync.inc
--echo
--echo ############################################################
--echo # 6. Assert that number of certified transactions are the
--echo #    expected ones.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $assert_text= Table t1 will contain row after the above execution
--let $assert_cond= "[SELECT COUNT(*) AS count FROM t1 WHERE t1.a = 2, count, 1]" = "1"
--source include/assert.inc

--let $assert_text= Table t1 will contain row after the above execution
--let $assert_cond= "[SELECT COUNT(*) AS count FROM t1 WHERE t1.a = 6, count, 1]" = "1"
--source include/assert.inc

--let $assert_text= Table t1 will contain row after the above execution
--let $assert_cond= "[SELECT COUNT(*) AS count FROM t1 WHERE t1.a = 9, count, 1]" = "1"
--source include/assert.inc

--let $assert_text= Table t1 will contain row after the above execution
--let $assert_cond= "[SELECT COUNT(*) AS count FROM t2 WHERE t2.b = 5, count, 1]" = "1"
--source include/assert.inc

--let $assert_text= Table t1 will contain row after the above execution
--let $assert_cond= "[SELECT COUNT(*) AS count FROM t2 WHERE t2.b = 8, count, 1]" = "1"
--source include/assert.inc

--let $assert_text= Table t1 will contain row after the above execution
--let $assert_cond= "[SELECT COUNT(*) AS count FROM t3 WHERE t3.c1 = 6 AND t3.c2 = 8, count, 1]" = "1"
--source include/assert.inc

--let $assert_text= Table t3 will contain 1 rows after the above execution
--let $assert_cond= "[SELECT COUNT(*) FROM t3]" = "1"
--source include/assert.inc

--let $assert_text= Table t2 will contain 2 rows after the above execution
--let $assert_cond= "[SELECT COUNT(*) FROM t2]" = "2"
--source include/assert.inc

--let $assert_text= Table t1 will contain 3 rows after the above execution
--let $assert_cond= "[SELECT COUNT(*) FROM t1]" = "3"
--source include/assert.inc

--let $certified_transactions= query_get_value(SELECT Count_Transactions_Checked from performance_schema.replication_group_member_stats, Count_Transactions_Checked, 1)
--let $assert_text= The value of Count_Transactions_Checked should be 12 after starting group replication
--let $assert_cond= "$certified_transactions" = 12
--source include/assert.inc

--let $negatively_certified= query_get_value(SELECT Count_Conflicts_Detected from performance_schema.replication_group_member_stats, Count_Conflicts_Detected, 1)
--let $assert_text= The value of Count_Conflicts_Detected should be 1 after starting group replication
--let $assert_cond= "$negatively_certified" = 1
--source include/assert.inc

--echo
--echo ############################################################
--echo # Clean up.
DROP TABLE t3;
DROP TABLE t2;
DROP TABLE t1;

--source ../inc/group_replication_end.inc
