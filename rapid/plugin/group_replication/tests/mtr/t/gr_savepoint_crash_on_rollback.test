################################################################################
# This test verifies the impact when a server is crashed during a incomplete
# transaction when 'rollback to savepoint' is in progress
#
# Test:
# 0. The test requires two servers: M1, M2
# 1. Create a table on M1.
# 2. Start a transaction t1 on M1, crash the server when 'rollback [work] to
#    savepoint' in progress.
# 3. Check that incomplete transaction t1 is rolled back.
# 4. Clean up
################################################################################

# This test does crashes servers, thence we skip it on asan and valgrind.
--source include/not_asan.inc
--source include/not_valgrind.inc
--source include/big_test.inc
--source include/force_restart.inc
--source include/have_debug.inc
--source include/have_debug_sync.inc

--source ../inc/have_group_replication_plugin.inc
--source ../inc/group_replication.inc

--let $member1_group_replication_local_address= `SELECT @@GLOBAL.group_replication_local_address`
--let $group_replication_group_seeds= `SELECT @@GLOBAL.group_replication_group_seeds`
SET @debug_save= @@GLOBAL.DEBUG;

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--let $member2_group_replication_local_address= `SELECT @@GLOBAL.group_replication_local_address`

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--echo #1. Create table t1 on M1
CREATE TABLE table1(a int primary key);
# Insert some values
INSERT INTO table1 values (1),(2);

--source include/rpl_sync.inc

--echo #2. Start a transaction t1 on M1, crash the server when 'rollback [work] to savepoint' in progress
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/rpl_sync.inc

connect(server1_1,localhost,root,,test,$SERVER_MYPORT_1,$SERVER_MYSOCK_1);
--echo [connection M1]
--connection server1_1
--enable_reconnect

# Set sync point such that M1 waits during rollback
SET @@GLOBAL.DEBUG='d,transaction_write_set_savepoint_block_before_rollback';

# Transaction t1.
BEGIN;
INSERT INTO table1 VALUES (3);
SAVEPOINT s1;
UPDATE table1 SET a= -1 where a=1;
SAVEPOINT s2;
--send ROLLBACK TO SAVEPOINT s1

# Crash server
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $wait_condition=SELECT COUNT(*)=1 FROM INFORMATION_SCHEMA.PROCESSLIST WHERE State = 'debug sync point: now'
--source include/wait_condition.inc
--replace_result $member1_group_replication_local_address GROUP_REPLICATION_LOCAL_ADDRESS1 $group_replication_group_seeds GROUP_REPLICATION_GROUP_SEEDS $group_replication_group_name GROUP_REPLICATION_GROUP_NAME
--let $restart_parameters=restart:--group_replication_local_address=$member1_group_replication_local_address --group_replication_group_seeds=$group_replication_group_seeds --group_replication_group_name=$group_replication_group_name
--source ../inc/kill_and_restart_mysqld.inc

#reconnect clients
--disconnect server1_1
--let $rpl_server_number= 1
--source include/rpl_reconnect.inc

# unblock group
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--replace_result $member2_group_replication_local_address GROUP_REPLICATION_LOCAL_ADDRESS1
eval SET GLOBAL group_replication_force_members= "$member2_group_replication_local_address";

# rejoin M1 to group
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--source include/start_group_replication.inc

# Upon start wait until server M1 comes online.
let $wait_condition= SELECT COUNT(*)=2 FROM performance_schema.replication_group_members where member_state= "ONLINE";
--source include/wait_condition.inc

--echo #3. check that incomplete transaction t1 is rolled back, table1 should have only 2 tuples.
--let $assert_text= 'There should be two values in table1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM table1, count, 1] = 2
--source include/assert.inc

--echo #4. Clean-up
DROP TABLE table1;
SET @@GLOBAL.DEBUG=@debug_save;

--source ../inc/group_replication_end.inc
