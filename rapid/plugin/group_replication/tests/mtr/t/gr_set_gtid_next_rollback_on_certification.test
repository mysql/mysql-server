################################################################################
# Validate that transactions with GTID_NEXT specified do behave
# properly when present to conflicts and/or before commit errors.
#
# Test:
# 0. The test requires two servers: M1 and M2.
# 1. With both members ONLINE. Execute some transactions on M1.
# 2. On M2 set DEBUG point to force negative certification outcome of the next
#    transaction. Set DEBUG point on M1.
#  - With GTID_NEXT set, try to insert data. It must fail.
#  - Reset DEBUG point and GTID_NEXT.
#  - Now, insert data must succeed.
#  - Validate data and GTID_EXECUTED on the member.
# 3. On M1 set DEBUG point to force error on before commit hook.
#  - With GTID_NEXT set, try to insert data. It must fail.
#  - Try FLUSH RELAY LOGS command. It must fail.
#  - Reset DEBUG point and GTID_NEXT.
#  - Now, insert data must succeed.
#  - Validate data and GTID_EXECUTED on the member.
# 4. Clean up.
################################################################################
--source include/have_debug.inc
--source ../inc/have_group_replication_plugin.inc
--source ../inc/group_replication.inc


--echo
--echo ############################################################
--echo # 1. Execute some transactions on server 1 with and without
--echo #    GTID specified.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SET SESSION sql_log_bin= 0;
--source include/gtid_utils.inc
SET SESSION sql_log_bin= 1;

CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
--source include/rpl_sync.inc


--echo
--echo ############################################################
--echo # 2. Force negative certification outcome of the next
--echo #    transaction.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
SET @debug_save= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG= '+d,certifier_force_1_negative_certification';
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SET @debug_save= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG= '+d,certifier_force_1_negative_certification';

SET GTID_NEXT= 'aaaaaaaa-aaaa-aaaa-aaaa-bbbbbbbbbbbb:1';
--error ER_TRANSACTION_ROLLBACK_DURING_COMMIT
INSERT INTO t1 VALUES (1);

--let $assert_text= 'GTID_OWNED is empty'
--let $assert_cond= "[SELECT @@SESSION.GTID_OWNED]" = ""
--source include/assert.inc

SET GTID_NEXT= AUTOMATIC;

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
SET @@GLOBAL.DEBUG= @debug_saved;
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SET @@GLOBAL.DEBUG= @debug_saved;

INSERT INTO t1 VALUES (2);

--let $assert_text= 'There is no value 1 in table t1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 1, count, 1] = 0
--source include/assert.inc
--let $assert_text= 'There is a value 2 in table t1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 2, count, 1] = 1
--source include/assert.inc

--let $assert_text= GTID_EXECUTED must contain 4 group transactions
--let $assert_cond= GTID_IS_EQUAL(@@GLOBAL.GTID_EXECUTED,"$group_replication_group_name:1-4")
--source include/assert.inc


--echo
--echo ############################################################
--echo # 3. Force error on before commit hook.
SET SESSION sql_log_bin= 0;
call mtr.add_suppression("Run function 'before_commit' in plugin 'group_replication' failed");
SET SESSION sql_log_bin= 1;

SET @@GLOBAL.DEBUG= '+d,group_replication_force_error_on_before_commit_listener';
SET GTID_NEXT= 'aaaaaaaa-aaaa-aaaa-aaaa-bbbbbbbbbbbb:2';
--error ER_RUN_HOOK_ERROR
INSERT INTO t1 VALUES (3);

--let $assert_text= 'GTID_OWNED is empty'
--let $assert_cond= "[SELECT @@SESSION.GTID_OWNED]" = ""
--source include/assert.inc

SET GTID_NEXT= 'aaaaaaaa-aaaa-aaaa-aaaa-bbbbbbbbbbbb:3';
--error ER_RUN_HOOK_ERROR
FLUSH RELAY LOGS;

--let $assert_text= 'GTID_OWNED is empty'
--let $assert_cond= "[SELECT @@SESSION.GTID_OWNED]" = ""
--source include/assert.inc

SET GTID_NEXT= AUTOMATIC;
SET @@GLOBAL.DEBUG= @debug_saved;

INSERT INTO t1 VALUES (4);

--let $assert_text= 'There is no value 3 in table t1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 3, count, 1] = 0
--source include/assert.inc
--let $assert_text= 'There is a value 4 in table t1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 4, count, 1] = 1
--source include/assert.inc

--let $assert_text= GTID_EXECUTED must contain 5 group transactions
--let $assert_cond= GTID_IS_EQUAL(@@GLOBAL.GTID_EXECUTED,"$group_replication_group_name:1-5")
--source include/assert.inc


--echo
--echo ############################################################
--echo # 4. Clean up.
DROP TABLE t1;

SET SESSION sql_log_bin= 0;
--source include/gtid_utils_end.inc
SET SESSION sql_log_bin= 1;

--source ../inc/group_replication_end.inc
