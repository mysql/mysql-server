################################################################################
# WL9426: MySQL NG: Single Primary Mode in Group Replication
#
# This test verifies that DMLs on tables with '..CASCADE' foreign keys are
# allowed in Single Primary Mode (S=ON, E=OFF).
#
# NOTE: The below mentioned limitation is lifted in Single Primary Mode.
# BUG#21918361 GR CAN GENERATE INCONSISTENCIES IF THERE ARE MULTIPLE FK
# DEPENDENCIES. The decision is to block DML updates if the table contains
# foreign key with 'CASCADE' clause.
# For single_primary_mode=off check:- group_replication_runtime_verifications.test
#
# Test:
# 1. The test requires two servers.
# 2. Bootstrap start GR on server1 (Primary). Start GR on server2 (Secondary).
# 3. On server1:
#  - Create parent table with primary key and with InnoDB engine.
#  - Create child tables with 'ON UPDATE CASCADE' foreign key.
#  - Create child tables with 'ON DELETE CASCADE' foreign key.
# 4. Test following DMLs on child tables will SUCCEED on single primary mode:
#    INSERT,  UPDATE,  INSERT...SELECT,  DELETE,  LOAD DATA,  REPLACE,
#    REPLACE...SELECT,  DELETE_MULTI,  UPDATE_MULTI
# 5. Clean up.
################################################################################

--source ../inc/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_group_replication_single_primary_mode=1
--source ../inc/group_replication.inc

--echo #
--echo # Bootstrap start GR on server1 (Primary). Start GR on server2 (Secondary).
--echo #
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $server1_uuid= `SELECT @@server_uuid`
--source ../inc/start_and_bootstrap_group_replication.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/start_group_replication.inc

# Make sure server1 is Primary
--let $assert_text= Verify group_replication_primary_member is SERVER_UUID
--let $assert_cond= "[SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME= \'group_replication_primary_member\', VARIABLE_VALUE, 1]" = "$server1_uuid"
--source include/assert.inc

--echo #
--echo # Create parent and child tables.
--echo #
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
# Parent table
CREATE TABLE tp1 (c1 char(50) NOT NULL PRIMARY KEY) ENGINE=InnoDB;

# Child table with 'ON UPDATE CASCADE' foreign key.
CREATE TABLE tc1 (c1 char(50) NOT NULL PRIMARY KEY, FOREIGN KEY (c1) REFERENCES tp1(c1) ON UPDATE CASCADE) ENGINE = InnoDB;

# Child table with 'ON UPDATE CASCADE' foreign key.
CREATE TABLE tc2 (c1 char(50) NOT NULL PRIMARY KEY, FOREIGN KEY (c1) REFERENCES
                  tp1(c1) ON UPDATE CASCADE ON DELETE RESTRICT) ENGINE = InnoDB;

# Child table with 'ON DELETE CASCADE' foreign key.
CREATE TABLE tc3 (c1 char(50) NOT NULL PRIMARY KEY, FOREIGN KEY (c1) REFERENCES tp1(c1) ON DELETE CASCADE) ENGINE = InnoDB;

# Child table with 'ON DELETE CASCADE' foreign key.
CREATE TABLE tc4 (c1 char(50) NOT NULL PRIMARY KEY, FOREIGN KEY (c1) REFERENCES
                  tp1(c1) ON DELETE CASCADE ON UPDATE RESTRICT) ENGINE = InnoDB;

--echo #
--echo # Test child tables that fail due to ER_BEFORE_DML_VALIDATION_ERROR
--echo # when single_primary_mode=off; are allowed when single_primary_mode=ON.
--echo #

--let $child_tables_count=4
while ($child_tables_count)
{
  #Test the INSERT instruction
  --eval INSERT INTO tp1 VALUES('a')
  --eval INSERT INTO tc$child_tables_count VALUES('a')

  #Test the UPDATE instruction
  --eval UPDATE tc$child_tables_count SET c1 = 'a'

  #Test the DELETE instruction
  --eval DELETE FROM tc$child_tables_count

  #Test the INSERT...SELECT instruction
  --eval INSERT INTO tc$child_tables_count (c1) SELECT tp1.c1 FROM tp1

  #Test the DELETE_MULTI instruction
  --eval DELETE tc$child_tables_count, tp1 FROM tc$child_tables_count, tp1

  #Test the load instruction
  --eval LOAD DATA INFILE '../../std_data/words2.dat' INTO TABLE tp1
  --eval LOAD DATA INFILE '../../std_data/words2.dat' INTO TABLE tc$child_tables_count

  #Test the REPLACE instruction
  --eval REPLACE INTO tp1 VALUES('a')
  --eval REPLACE INTO tc$child_tables_count(c1) VALUES('a')

  #Test the REPLACE...SELECT instruction
  --eval REPLACE INTO tc$child_tables_count (c1) SELECT tp1.c1 FROM tp1

  --eval DELETE tc$child_tables_count, tp1 FROM tc$child_tables_count, tp1
  #Test the UPDATE_MULTI instruction
  --eval UPDATE tc$child_tables_count, tp1 SET tc$child_tables_count.c1 = 'a'

  #clean up this table
  --eval DROP TABLE tc$child_tables_count

  --dec $child_tables_count
}

--echo #
--echo # Clean up.
--echo #
DROP TABLE tp1;

--source ../inc/group_replication_end.inc
