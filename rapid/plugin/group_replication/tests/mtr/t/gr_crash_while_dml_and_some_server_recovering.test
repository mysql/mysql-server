################################################################################
# This test verifies whether the group_replication works fine when the server
# in a group goes down while there are dml operations running on it and some
# server in a group is in recovery state.
#
# Test:
# 0. The test requires Three servers: M1,M2 and M3.
# 1. Start GR on server M1 and M2.
# 2. CREATE TABLE ON M1 and perform some inserts on it.
# 3. Join server M3 to the group and wait until it is in RECOVERING state.
# 4. start executing transactions on non-donor server by calling procedure
#    using send.
# 5. Kill and restart the non-donor server.
# 6. wait until there are two members in the group
# 7. Start GR on non-donor server and wait until it is ONLINE.
# 8. Verify that table t1 has same data across all the members.
# 9. Clean up
################################################################################

# This test does crashes servers, thence we skip it on asan and valgrind.
--source include/not_asan.inc
--source include/not_valgrind.inc
--source include/big_test.inc
--source include/force_restart.inc

--source ../inc/have_group_replication_plugin.inc
--let $rpl_server_count= 3
--let $rpl_skip_group_replication_start= 1
--source ../inc/group_replication.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

SET sql_log_bin=0;
CREATE TABLE t1(a int primary key);
SET sql_log_bin=1;

--source ../inc/start_and_bootstrap_group_replication.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SET sql_log_bin=0;
CREATE TABLE t1(a int primary key);
SET sql_log_bin=1;

--source include/start_group_replication.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

# Insert some data into the table

--let $i=1
--disable_query_log
while ($i < 100)
{
  --eval insert into t1 values($i)
  --inc $i
}
--enable_query_log

--source include/rpl_sync.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

SET sql_log_bin=0;
CREATE TABLE t1(a int primary key);
SET sql_log_bin=1;
LOCK TABLES t1 READ;

--let $rpl_connection_name= server_3
--source include/rpl_connection.inc

--let $group_replication_start_member_state= RECOVERING
--source include/start_group_replication.inc

# Obtain the server_id of non_donor.
--let $wait_timeout= 100
--let $wait_condition= SELECT COUNT(*)=1 FROM performance_schema.replication_connection_status WHERE channel_name='group_replication_recovery' AND service_state='ON'
--source include/wait_condition.inc

let $donor_id= 1;
let $non_donor_id= 2;

if(`SELECT COUNT(*)=1 FROM performance_schema.replication_connection_status WHERE channel_name='group_replication_recovery' AND service_state='ON' AND source_uuid='$server2_uuid'`)
{
  let $donor_id= 2;
  let $non_donor_id= 1;
}

--let $rpl_connection_silent= 1
--let $rpl_connection_name= server$non_donor_id
--source include/rpl_connection.inc

delimiter $$;
CREATE PROCEDURE dml_operations()
     BEGIN
     declare x INT;
     set x=100;
     while x<200 do
     insert into t1 values (x);
     update t1 set a=x+200 where a=x;
     delete from t1 where a<310;
     set x=x+1;
     end  while;
     end$$
delimiter ;$$
--echo

--echo ----call procedure----
--send call dml_operations()
--echo

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
UNLOCK TABLES;

--let $rpl_connection_name= server_$non_donor_id
--source include/rpl_connection.inc
# kill non-donor server
--echo # killing
--let $group_replication_local_address= `SELECT @@GLOBAL.group_replication_local_address`
--let $group_replication_group_seeds= `SELECT @@GLOBAL.group_replication_group_seeds`
--let $restart_parameters=restart:--group_replication_local_address=$group_replication_local_address --group_replication_group_seeds=$group_replication_group_seeds --group_replication_group_name=$group_replication_group_name
--replace_result $group_replication_local_address GROUP_REPLICATION_LOCAL_ADDRESS $group_replication_group_seeds GROUP_REPLICATION_GROUP_SEEDS $group_replication_group_name GROUP_REPLICATION_GROUP_NAME

--source ../inc/kill_and_restart_mysqld.inc
--echo # restarting

# Needed as we are not using rpl_restart_server.inc
--let $rpl_server_number= $non_donor_id
--source include/rpl_reconnect.inc

--let $rpl_connection_name= server_$donor_id
--source include/rpl_connection.inc
# Wait until group has only 2 members, that is, non-donor server's death
# is detected by the group.
--echo # check that there are 2 mebers in the group
--let $group_replication_number_of_members= 2
--source ../inc/gr_wait_for_number_of_members.inc

# Wait for some time before joining the restarted member back to the group
--sleep 5

# Join server non-donor server back to the group.
--let $rpl_connection_name= server_$non_donor_id
--source include/rpl_connection.inc

--source include/start_group_replication.inc

# Wait until all the servers are in ONLINE state.
--let $wait_timeout= 200
--let $wait_condition= SELECT COUNT(*) = 3 FROM performance_schema.replication_group_members WHERE member_state='ONLINE';
--source include/wait_condition.inc

--source include/rpl_sync.inc

# Verify that all the all the servers have same data.
--let $diff_tables= server_1:t1, server_2:t1, server3:t1
--source include/diff_tables.inc

# Clean Up
drop table t1;
drop procedure dml_operations;

--let $skip_restore_connection= 0
--source ../inc/group_replication_end.inc
