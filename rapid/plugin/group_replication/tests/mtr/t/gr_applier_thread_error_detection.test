################################################################################
# This test evaluates the plugin ability to detect error in the applier thread.
#
# Test:
# 0) The test requires two servers.
# 1) Start a 2 member group and create a table.
# 2) Without logging, add a row to the table on server 1.
# 3) Insert the same row on server 2. Check that server 1 errors out. After the
#    stop server 1 goes to OFFLINE.
# 4) Clean the state.
################################################################################

--source ../inc/have_group_replication_plugin.inc
--source ../inc/group_replication.inc

--echo #
--echo # Create a table replicated to the group
--echo #

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

SET SESSION sql_log_bin= 0;
call mtr.add_suppression("Slave SQL for channel 'group_replication_applier': Could not execute Write_rows event on table test.t1;*");
call mtr.add_suppression("The applier thread execution was aborted. Unable to process more transactions, this member will now leave the group.");
call mtr.add_suppression("Slave SQL for channel 'group_replication_applier': Worker .* failed executing transaction .*; Could not execute Write_rows event on table test.t1; Duplicate entry '1' for key 'PRIMARY'.*");
call mtr.add_suppression("Slave SQL for channel 'group_replication_applier': ... The slave coordinator and worker threads are stopped.*");
call mtr.add_suppression("Fatal error during execution on the Applier process of Group Replication. The server will now leave the group.");
call mtr.add_suppression("The member is leaving a group without being on one");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("The member is already leaving or joining a group.");
call mtr.add_suppression("Error leaving the group");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
SET SESSION sql_log_bin= 1;

CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
--source include/rpl_sync.inc

--echo #
--echo # Insert a row on server 1 assuring it is not replicated
--echo #

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

SET SESSION sql_log_bin= 0;
INSERT INTO t1 VALUES (1);
SET SESSION sql_log_bin= 1;

--echo #
--echo # Insert the same row on server 2
--echo #

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

INSERT INTO t1 VALUES (1);

--echo #
--echo # Server 1 should error out and leave the group
--echo # The member state should be ERROR
--echo #

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $group_replication_member_state= ERROR
--source ../inc/gr_wait_for_member_state.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $group_replication_number_of_members= 1
--source ../inc/gr_wait_for_number_of_members.inc

--echo #
--echo # After the stop, the state goes to OFFLINE
--echo #

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/stop_group_replication.inc

--let $group_replication_member_state= OFFLINE
--source ../inc/gr_wait_for_member_state.inc

--echo #
--echo # Clean
--echo #

SET SESSION sql_log_bin= 0;
DELETE FROM t1 WHERE c1=1;
SET SESSION sql_log_bin= 1;

--source include/start_group_replication.inc

DROP TABLE t1;

--source ../inc/group_replication_end.inc
