################################################################################
# This basic test verifies FILTERS in group replication environment.
#
# Test:
# 0. Initialization:
#  - The test requires three servers: M1, M2, and M3.
# 1. Bootstrap start a group on M1. Start GR on M2.
# 2. Create filters on M2.
# 3. Execute some DDLs on M1 to check that filters are working fine on M2.
# 4. Stop applier thread on M1 and M2 so that M3 will stay in RECOVERING state.
# 5. Start GR on M3 and check donor's server_uuid.
# 6. Start applier thread on M1 and M2.
# 7. Allow member M3 to come ONLINE, then verify data.
# 8. Clean up.
################################################################################

--source ../inc/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_server_count= 3
--source ../inc/group_replication.inc

--echo #
--echo # 1. Bootstrap start a group on M1. Start GR on M2.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--source ../inc/start_and_bootstrap_group_replication.inc
--let $server_uuid_m1 = `SELECT @@GLOBAL.SERVER_UUID`

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/start_group_replication.inc
--let $server_uuid_m2 = `SELECT @@GLOBAL.SERVER_UUID`

--echo #
--echo # 2. Create filters on M2.
CHANGE REPLICATION FILTER
 Replicate_Rewrite_DB=((db1,db2)),
 Replicate_Ignore_Table=(db2.itab1),
 Replicate_Wild_Do_Table = ('test.%', 'db1.t%', 'db2.t%'),
 Replicate_Wild_Ignore_Table=('db2.ig%'),
 Replicate_Ignore_DB=(nodb),
 Replicate_Do_DB=(test, db1, db2);

--echo #
--echo # 3. Execute some DDLs on M1 to check that filters are working fine on M2.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
CREATE DATABASE nodb;
CREATE DATABASE db1;
CREATE DATABASE db2;

USE nodb;
CREATE TABLE tab1 (a INT PRIMARY KEY);
CREATE TABLE itab1 (a INT PRIMARY KEY);
CREATE TABLE igtab1 (a INT PRIMARY KEY);

USE db1;
CREATE TABLE tab1 (a INT PRIMARY KEY);
CREATE TABLE itab1 (a INT PRIMARY KEY);
CREATE TABLE igtab1 (a INT PRIMARY KEY);

USE db2;
CREATE TABLE IF NOT EXISTS tab1 (a INT PRIMARY KEY);
CREATE TABLE IF NOT EXISTS itab1 (a INT PRIMARY KEY);
CREATE TABLE IF NOT EXISTS igtab1 (a INT PRIMARY KEY);

USE test;
CREATE TABLE tab1 (a INT PRIMARY KEY);
CREATE TABLE itab1 (a INT PRIMARY KEY);
CREATE TABLE igtab1 (a INT PRIMARY KEY);

--echo # M1: Should display 4 databases
SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME IN ('test', 'db1', 'db2', 'nodb') ORDER BY 1;

--echo # M1: Should display 12 tables
SELECT CONCAT(TABLE_SCHEMA,'.',TABLE_NAME) AS TABNAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA IN ('test', 'db1', 'db2', 'nodb') ORDER BY 1;

# Sync to the group.
--source include/rpl_sync.inc

--echo # Verify filtered data on M2
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--echo # M2: Should display 3 databases
SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME IN ('test', 'db1', 'db2', 'nodb') ORDER BY 1;

--echo # M2: Should display 4 tables
SELECT CONCAT(TABLE_SCHEMA,'.',TABLE_NAME) AS TABNAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA IN ('test', 'db1', 'db2', 'nodb') ORDER BY 1;

--echo #
--echo # 4. Stop applier thread on M1 and M2 so that M3 will stay in RECOVERING state.
--echo #    And, we can fetch donor's server_uuid.
STOP SLAVE SQL_THREAD FOR CHANNEL 'group_replication_applier';

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
STOP SLAVE SQL_THREAD FOR CHANNEL 'group_replication_applier';

--echo #
--echo # 5. Start GR on M3 and check donor's server_uuid.
--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--let $server_uuid_m3 = `SELECT @@GLOBAL.SERVER_UUID`
--replace_result $group_replication_group_name GROUP_REPLICATION_GROUP_NAME
--eval SET GLOBAL group_replication_group_name= "$group_replication_group_name"
START GROUP_REPLICATION;

--echo # Wait until donor is confirmed
--let $wait_condition= SELECT source_uuid <> "" FROM performance_schema.replication_connection_status WHERE channel_name="group_replication_recovery" AND service_state="ON"
--source include/wait_condition.inc

--let $donor_server_uuid = `SELECT source_uuid FROM performance_schema.replication_connection_status WHERE channel_name="group_replication_recovery" AND service_state="ON"`

--echo #
--echo # 6. Start applier thread on M1 and M2.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
START SLAVE SQL_THREAD FOR CHANNEL 'group_replication_applier';

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
START SLAVE SQL_THREAD FOR CHANNEL 'group_replication_applier';

--echo #
--echo # 7. Allow member M3 to come ONLINE, then verify data.
--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--let $group_replication_member_state= ONLINE
--source ../inc/gr_wait_for_member_state.inc

# Verify data on M3.
if ( $donor_server_uuid == $server_uuid_m1 )
{
 --let $assert_text= There are [3] or [4] databases
 --let $assert_cond= "[SELECT COUNT(*) FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME IN (\'test\', \'db1\', \'db2\', \'nodb\')]" = 4
 --source include/assert.inc

 --let $assert_text= There are [4] or [12] tables
 --let $assert_cond= "[SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA IN (\'test\', \'db1\', \'db2\', \'nodb\')]" = 12
 --source include/assert.inc
}

if ( $donor_server_uuid == $server_uuid_m2 )
{
 --let $assert_text= There are [3] or [4] databases
 --let $assert_cond= "[SELECT COUNT(*) FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME IN (\'test\', \'db1\', \'db2\', \'nodb\')]" = 3
 --source include/assert.inc

 --let $assert_text= There are [4] or [12] tables
 --let $assert_cond= "[SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA IN (\'test\', \'db1\', \'db2\', \'nodb\')]" = 4
 --source include/assert.inc
}

--echo #
--echo # 8. Clean up
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
CHANGE REPLICATION FILTER
 Replicate_Rewrite_DB=(),
 Replicate_Ignore_Table=(),
 Replicate_Wild_Do_Table = (),
 Replicate_Wild_Ignore_Table=(),
 Replicate_Ignore_DB=(),
 Replicate_Do_DB=();

--disable_result_log
DROP DATABASE IF EXISTS nodb;
DROP DATABASE db1;
DROP DATABASE db2;
DROP TABLES test.tab1, test.itab1, test.igtab1;
--enable_result_log

--source ../inc/group_replication_end.inc
