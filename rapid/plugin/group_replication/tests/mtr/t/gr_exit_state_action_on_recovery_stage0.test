###############################################################################
#
# group_replication_exit_state_action sysvar specifies which action is taken by
# a server once it has involuntarily left the group. Currently there are only
# two actions: either the server continues running but with super_read_only
# enabled (READ_ONLY) or it aborts (ABORT_SERVER).
#
# This test shall verify that the correct exit state action is executed when
# an error occurs during the stage 0 of distributed recovery.
#
# Test:
# 0) Setup group of 2 members (M1 and M2).
# 1) Stop the applier on M2.
# 2) Replicate TRX from M1 to M2 but without M2 applying it.
# 3) Stop GR on M2.
# 4) Start GR on M2 again so he tries to join the group. M2 should go to
#    OFFLINE state.
# 5) Set group_replication_exit_state_action sysvar to ABORT_SERVER on M2.
# 6) Start GR on M2 again, so he tries to join the group. M2 should not abort.
# 7) Cleanup.
#
################################################################################
--source include/have_debug.inc
--source include/have_debug_sync.inc
--source include/big_test.inc
--source ../inc/have_group_replication_plugin.inc

--echo
--echo #########################################################################
--echo # 0) Setup group of 3 members (M1, M2 and M3).
--echo #########################################################################
--echo
--source ../inc/group_replication.inc
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--let $member2_uuid= `SELECT @@GLOBAL.server_uuid`
--let $local_address_server2= `SELECT @@GLOBAL.group_replication_local_address`
--let $group_seeds_server2= `SELECT @@GLOBAL.group_replication_group_seeds`

# Suppress expected errors and warnings
--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $error_file = $MYSQLTEST_VARDIR/tmp/gr_exit_state_action_on_recovery_stage0.2.err

SET sql_log_bin = 0;
call mtr.add_suppression("Slave SQL for channel 'group_replication_applier': Error 'Table 't1'*");
call mtr.add_suppression("Slave SQL for channel 'group_replication_applier': Worker [0-9] failed executing transaction*");
call mtr.add_suppression("Error writing relay log configuration.");
call mtr.add_suppression("Slave SQL for channel 'group_replication_applier': ... The slave coordinator and worker threads are stopped,*");
call mtr.add_suppression("Slave: Table 't1' already exists Error_code:*");
call mtr.add_suppression("The applier thread execution was aborted. Unable to process more transactions, this member will now leave the group.");
call mtr.add_suppression("Fatal error during execution on the Applier process of Group Replication. The server will now leave the group.");
call mtr.add_suppression("Unable to confirm whether the server has left the group or not. Check performance_schema.replication_group_members to check group membership information.");
call mtr.add_suppression("There was a previous plugin error while the member joined the group. The member will now exit the group.");
call mtr.add_suppression("On shutdown there was a timeout receiving a view change. This can lead to a possible inconsistent state. Check the log for more details");
SET sql_log_bin = 1;

--echo
--echo #########################################################################
--echo # 1) Stop the applier on M2.
--echo #########################################################################
--echo
--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--source ../inc/gr_stop_applier_sql_thread.inc

--echo
--echo #########################################################################
--echo # 2) Replicate TRX from M1 to M2 but without M2 applying it.
--echo #########################################################################
--echo
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

CREATE TABLE t1 (a INT PRIMARY KEY);

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

# Verify that M2 certified one transaction but hasn't yet applied any
--let $wait_condition= SELECT COUNT(*) = 1 FROM performance_schema.replication_group_member_stats WHERE member_id='$member2_uuid' AND count_transactions_checked = 1
--source include/wait_condition.inc

--echo
--echo #########################################################################
--echo # 3) Stop GR on M2.
--echo #########################################################################
--echo
--source include/stop_group_replication.inc

--echo
--echo #########################################################################
--echo # 4) Start GR on M2 again so he tries to join the group.
--echo #########################################################################
--echo
SET SESSION sql_log_bin = 0;
CREATE TABLE t1 (a INT PRIMARY KEY);
SET SESSION sql_log_bin = 1;

# Start GR
--error ER_GROUP_REPLICATION_CONFIGURATION,ER_GROUP_REPLICATION_APPLIER_INIT_ERROR
START GROUP_REPLICATION;

# Verify that the applier errored out
--let $assert_file = $error_file
--let $assert_text = The applier should error out trying to create an already existing table
--let $assert_select = Error 'Table 't1' already exists' on query.
--let $assert_count = 1
--source include/assert_grep.inc

--let $assert_file = $error_file
--let $assert_text = The applier should error out trying to create an already existing table
--let $assert_select = The applier thread execution was aborted. Unable to process more transactions, this member will now leave the group.
--let $assert_count = 1
--source include/assert_grep.inc

--let $assert_file = $error_file
--let $assert_text = The applier should error out trying to create an already existing table
--let $assert_select = Fatal error during execution on the Applier process of Group Replication. The server will now leave the group.
--let $assert_count = 1
--source include/assert_grep.inc

# Verify that M2 goes into OFFLINE state
--let $group_replication_member_state= OFFLINE
--let $group_replication_member_id= $member2_uuid
--source ../inc/gr_wait_for_member_state.inc

# Lastly, verify that the member is not viewed as part of the group on M1
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $group_replication_number_of_members= 1
--source ../inc/gr_wait_for_number_of_members.inc

--echo
--echo #########################################################################
--echo # 5) Set group_replication_exit_state_action sysvar to ABORT_SERVER on
--echo # M2.
--echo #########################################################################
--echo
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
SET @group_replication_exit_state_action_saved = @@GLOBAL.group_replication_exit_state_action;
SET GLOBAL group_replication_exit_state_action = ABORT_SERVER;

--echo
--echo #########################################################################
--echo # 6) Start GR on M2 again, so he tries to join the group. M2 should
--echo # not abort.
--echo #########################################################################
--echo
# Start GR on M2
--error ER_GROUP_REPLICATION_CONFIGURATION,ER_GROUP_REPLICATION_APPLIER_INIT_ERROR
START GROUP_REPLICATION;

# Verify that the applier errored out
--let $assert_file = $error_file
--let $assert_text = The applier should error out trying to create an already existing table
--let $assert_select = Error 'Table 't1' already exists' on query.
--let $assert_count = 2
--source include/assert_grep.inc

--let $assert_file = $error_file
--let $assert_text = The applier should error out trying to create an already existing table
--let $assert_select = The applier thread execution was aborted. Unable to process more transactions, this member will now leave the group.
--let $assert_count = 2
--source include/assert_grep.inc

--let $assert_file = $error_file
--let $assert_text = The applier should error out trying to create an already existing table
--let $assert_select = Fatal error during execution on the Applier process of Group Replication. The server will now leave the group.
--let $assert_count = 2
--source include/assert_grep.inc

# Verify that M2 goes into OFFLINE state
--let $group_replication_member_state= OFFLINE
--let $group_replication_member_id= $member2_uuid
--source ../inc/gr_wait_for_member_state.inc

# Lastly, verify that the member is not viewed as part of the group on M1
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $group_replication_number_of_members= 1
--source ../inc/gr_wait_for_number_of_members.inc

--echo
--echo #########################################################################
--echo # 7) Cleanup.
--echo #########################################################################
--echo
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
DROP TABLE t1;

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
SET SESSION sql_log_bin = 0;
DROP TABLE t1;
SET SESSION sql_log_bin = 1;
SET GLOBAL group_replication_exit_state_action = @group_replication_exit_state_action_saved;

--source ../inc/group_replication_end.inc
