################################################################################
# Verify that a blocked group, a group with 5 members on which 3 do crash
# (without executing STOP GROUP_REPLICATION), can be unblocked by DBA.
#
# Test:
#   0) The test requires five servers: M1, M2, M3, M4 and M5.
#   1) Create a group with 5 members. Bring all ONLINE and create a table.
#   2) Crash 3 members: M3, M4, M5.
#    - A transaction is executed on one blocked server (M2),
#      which will be committed when group is unblocked.
#   3) Unblock the group with the alive member (M1).
#   4) Assert check that group has 2 members on M1 and M2.
#   5) Execute a transaction on M1 in order to prove liveness. Assert check that
#      the blocked transaction from M2 is replicated in the new configuration.
#   6) Clean up.
################################################################################
# This test does crashes servers, thence we skip it on asan and valgrind.
--source include/not_asan.inc
--source include/not_valgrind.inc
--source include/big_test.inc
--source include/force_restart.inc
--source ../inc/have_group_replication_plugin.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $member1_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--let $member2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--let $member3_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--let $rpl_connection_name= server4
--source include/rpl_connection.inc
--let $member4_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--let $rpl_connection_name= server5
--source include/rpl_connection.inc
--let $member5_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--echo
--echo ############################################################
--echo # 1. Create a group with 5 members and a table on it.
--let $rpl_server_count= 5
--source ../inc/group_replication.inc
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
--source include/rpl_sync.inc

--echo
--echo ############################################################
--echo # 2. Crash three members.
# We do kill the servers, using shutdown_server 0, and then MTR will
# follow the expect file and restart the server, but we do not wait
# for the server restart.
# Since the servers loose its GCS configuration they will not rejoin
# the group.
--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.3.expect
--shutdown_server 0
--source include/wait_until_disconnected.inc

--let $rpl_connection_name= server4
--source include/rpl_connection.inc
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.4.expect
--shutdown_server 0
--source include/wait_until_disconnected.inc

--let $rpl_connection_name= server5
--source include/rpl_connection.inc
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.5.expect
--shutdown_server 0
--source include/wait_until_disconnected.inc

#
# Wait until all members are marked unreachable in
# the remaining servers
#

# server1

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $i=5
while($i>2)
{
  if ($i == 5)
  {
    --let $member_uuid= $member5_uuid
  }

  if ($i == 4)
  {
    --let $member_uuid= $member4_uuid
  }

  if ($i == 3)
  {
    --let $member_uuid= $member3_uuid
  }

  --let $group_replication_member_state= UNREACHABLE
  --let $group_replication_member_id= $member_uuid
  --source ../inc/gr_wait_for_member_state.inc
  --echo member$i @ server1 is marked as UNREACHABLE
  --dec $i
}
--let $group_replication_member_id= $member1_uuid

# server2

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $i=5
while($i>2)
{
  if ($i == 5)
  {
    --let $member_uuid= $member5_uuid
  }

  if ($i == 4)
  {
    --let $member_uuid= $member4_uuid
  }

  if ($i == 3)
  {
    --let $member_uuid= $member3_uuid
  }

  --let $group_replication_member_state= UNREACHABLE
  --let $group_replication_member_id= $member_uuid
  --source ../inc/gr_wait_for_member_state.inc
  --echo member$i @ server2 is marked as UNREACHABLE
  --dec $i
}
--let $group_replication_member_id= $member2_uuid

# Group is blocked and so cannot change its configuration.
--let $local_address_server2= `SELECT @@GLOBAL.group_replication_local_address`

# This transaction will be blocked since group lost its majority.
# Though it needs to be delivered to the group when unblocked.
--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--send INSERT INTO t1 VALUES (2)


--echo
--echo ############################################################
--echo # 3. Unblock the group with the alive members: server 1 and 2.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $local_address_server1= `SELECT @@GLOBAL.group_replication_local_address`

--disable_query_log
--eval SET GLOBAL group_replication_force_members= "$local_address_server1,$local_address_server2"
--enable_query_log

--let $assert_text= group_replication_force_members is correct
--let $assert_cond= "[SELECT @@GLOBAL.group_replication_force_members]" = "$local_address_server1,$local_address_server2"
--source include/assert.inc

--echo
--echo ############################################################
--echo # 4. Assert that group has 2 members: server 1 and 2.
# Server 1
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $group_replication_number_of_members= 2
--source ../inc/gr_wait_for_number_of_members.inc

--let $assert_text= Server 1 must be present on group members
--let $assert_cond= [SELECT COUNT(*) FROM performance_schema.replication_group_members WHERE member_id="$member1_uuid"] = 1
--source include/assert.inc
--let $assert_text= Server 2 must be present on group members
--let $assert_cond= [SELECT COUNT(*) FROM performance_schema.replication_group_members WHERE member_id="$member2_uuid"] = 1
--source include/assert.inc

--let $raw_view_id= query_get_value(SELECT view_id FROM performance_schema.replication_group_member_stats, view_id, 1)
--let $view_id= `SELECT RIGHT('$raw_view_id', 1)`
--let $assert_text= The value of view_id must be random:6
--let $assert_cond= $view_id >= 6
--source include/assert.inc

# Server 2

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $group_replication_number_of_members= 2
--source ../inc/gr_wait_for_number_of_members.inc

--let $assert_text= Server 1 must be present on group members
--let $assert_cond= [SELECT COUNT(*) FROM performance_schema.replication_group_members WHERE member_id="$member1_uuid"] = 1
--source include/assert.inc
--let $assert_text= Server 2 must be present on group members
--let $assert_cond= [SELECT COUNT(*) FROM performance_schema.replication_group_members WHERE member_id="$member2_uuid"] = 1
--source include/assert.inc

--let $raw_view_id= query_get_value(SELECT view_id FROM performance_schema.replication_group_member_stats, view_id, 1)
--let $view_id= `SELECT RIGHT('$raw_view_id', 1)`
--let $assert_text= The value of view_id must be random:6
--let $assert_cond= $view_id >= 6
--source include/assert.inc


--echo
--echo ############################################################
--echo # 5. Execute a transaction in order to prove liveness and
--echo #    assert that the blocked transaction was replicated in
--echo #    the new configuration.
--let $rpl_connection_name= server_2
--source include/rpl_connection.inc
--reap

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
INSERT INTO t1 VALUES (1);
# We cannot use rpl_sync.inc because it will include servers 3, 4 and 5
# which are dead and will make rpl_sync.inc to fail.
--let $sync_slave_connection= server2
--source include/sync_slave_sql_with_master.inc

--let $assert_text= 'There are two values in table t1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1, count, 1] = 2
--source include/assert.inc

--let $diff_tables= server1:test.t1, server2:test.t1
--source include/diff_tables.inc


--echo
--echo ############################################################
--echo # 6. Clean up.
--let $rpl_connection_name= server_3
--source include/rpl_connection.inc
--let $rpl_server_number= 3
--source include/rpl_reconnect.inc
--let $assert_text= 'There are no values in table t1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1, count, 1] = 0
--source include/assert.inc
DROP TABLE t1;

--let $rpl_connection_name= server_4
--source include/rpl_connection.inc
--let $rpl_server_number= 4
--source include/rpl_reconnect.inc
--let $assert_text= 'There are no values in table t1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1, count, 1] = 0
--source include/assert.inc
DROP TABLE t1;

--let $rpl_connection_name= server_5
--source include/rpl_connection.inc
--let $rpl_server_number= 5
--source include/rpl_reconnect.inc
--let $assert_text= 'There are no values in table t1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1, count, 1] = 0
--source include/assert.inc
DROP TABLE t1;

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
DROP TABLE t1;
--source ../inc/group_replication_end.inc
