include/group_replication.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]
#
# Start group replication on the first server
#
server1
include/start_and_bootstrap_group_replication.inc
#
# Start group replication on server 2
# Wait right before the process decides if the server is alone.
#
server2
SET SESSION sql_log_bin= 0;
call mtr.add_suppression("\\[GCS\\] Error pushing message into group communication engine.");
call mtr.add_suppression("Error while sending stats message");
SET SESSION sql_log_bin= 1;
SET @debug_save= @@GLOBAL.DEBUG;
# Set the debug flag to block recovery
SET @@GLOBAL.DEBUG='d,recovery_thread_start_wait_num_of_members';
SET GLOBAL group_replication_group_name= "572e4320-cd68-11e4-8830-0800200c9a66";
START GROUP_REPLICATION;
include/gr_wait_for_member_state.inc
#
# On another connection stop group replication on server 2
#
STOP GROUP_REPLICATION;
#
# Continue with recovery.
#
SET DEBUG_SYNC= "now SIGNAL signal.recovery_continue";
SET @@GLOBAL.DEBUG= @debug_save;
include/gr_wait_for_member_state.inc
#
# Test if the servers are working properly
#
server1
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);
server2
include/start_group_replication.inc
include/assert.inc [On the recovered member, the table should exist and have 1 elements;]
#
# Clean up
#
DROP TABLE t1;
include/group_replication_end.inc
