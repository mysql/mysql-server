include/group_replication.inc [rpl_server_count=3]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]
#
# 1. Bootstrap start a group on M1. Start GR on M2.
[connection server1]
include/start_and_bootstrap_group_replication.inc
[connection server2]
include/start_group_replication.inc
#
# 2. Create filters on M2.
CHANGE REPLICATION FILTER
Replicate_Rewrite_DB=((db1,db2)),
Replicate_Ignore_Table=(db2.itab1),
Replicate_Wild_Do_Table = ('test.%', 'db1.t%', 'db2.t%'),
Replicate_Wild_Ignore_Table=('db2.ig%'),
Replicate_Ignore_DB=(nodb),
Replicate_Do_DB=(test, db1, db2);
#
# 3. Execute some DDLs on M1 to check that filters are working fine on M2.
[connection server1]
CREATE DATABASE nodb;
CREATE DATABASE db1;
CREATE DATABASE db2;
USE nodb;
CREATE TABLE tab1 (a INT PRIMARY KEY);
CREATE TABLE itab1 (a INT PRIMARY KEY);
CREATE TABLE igtab1 (a INT PRIMARY KEY);
USE db1;
CREATE TABLE tab1 (a INT PRIMARY KEY);
CREATE TABLE itab1 (a INT PRIMARY KEY);
CREATE TABLE igtab1 (a INT PRIMARY KEY);
USE db2;
CREATE TABLE IF NOT EXISTS tab1 (a INT PRIMARY KEY);
CREATE TABLE IF NOT EXISTS itab1 (a INT PRIMARY KEY);
CREATE TABLE IF NOT EXISTS igtab1 (a INT PRIMARY KEY);
USE test;
CREATE TABLE tab1 (a INT PRIMARY KEY);
CREATE TABLE itab1 (a INT PRIMARY KEY);
CREATE TABLE igtab1 (a INT PRIMARY KEY);
# M1: Should display 4 databases
SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME IN ('test', 'db1', 'db2', 'nodb') ORDER BY 1;
SCHEMA_NAME
db1
db2
nodb
test
# M1: Should display 12 tables
SELECT CONCAT(TABLE_SCHEMA,'.',TABLE_NAME) AS TABNAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA IN ('test', 'db1', 'db2', 'nodb') ORDER BY 1;
TABNAME
db1.igtab1
db1.itab1
db1.tab1
db2.igtab1
db2.itab1
db2.tab1
nodb.igtab1
nodb.itab1
nodb.tab1
test.igtab1
test.itab1
test.tab1
include/rpl_sync.inc
# Verify filtered data on M2
[connection server2]
# M2: Should display 3 databases
SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME IN ('test', 'db1', 'db2', 'nodb') ORDER BY 1;
SCHEMA_NAME
db1
db2
test
# M2: Should display 4 tables
SELECT CONCAT(TABLE_SCHEMA,'.',TABLE_NAME) AS TABNAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA IN ('test', 'db1', 'db2', 'nodb') ORDER BY 1;
TABNAME
db2.tab1
test.igtab1
test.itab1
test.tab1
#
# 4. Stop applier thread on M1 and M2 so that M3 will stay in RECOVERING state.
#    And, we can fetch donor's server_uuid.
STOP SLAVE SQL_THREAD FOR CHANNEL 'group_replication_applier';
[connection server1]
STOP SLAVE SQL_THREAD FOR CHANNEL 'group_replication_applier';
#
# 5. Start GR on M3 and check donor's server_uuid.
[connection server3]
SET GLOBAL group_replication_group_name= "GROUP_REPLICATION_GROUP_NAME";
START GROUP_REPLICATION;
# Wait until donor is confirmed
#
# 6. Start applier thread on M1 and M2.
[connection server1]
START SLAVE SQL_THREAD FOR CHANNEL 'group_replication_applier';
[connection server2]
START SLAVE SQL_THREAD FOR CHANNEL 'group_replication_applier';
#
# 7. Allow member M3 to come ONLINE, then verify data.
[connection server3]
include/gr_wait_for_member_state.inc
include/assert.inc [There are [3] or [4] databases]
include/assert.inc [There are [4] or [12] tables]
#
# 8. Clean up
[connection server2]
CHANGE REPLICATION FILTER
Replicate_Rewrite_DB=(),
Replicate_Ignore_Table=(),
Replicate_Wild_Do_Table = (),
Replicate_Wild_Ignore_Table=(),
Replicate_Ignore_DB=(),
Replicate_Do_DB=();
DROP DATABASE IF EXISTS nodb;
DROP DATABASE db1;
DROP DATABASE db2;
DROP TABLES test.tab1, test.itab1, test.igtab1;
include/group_replication_end.inc
