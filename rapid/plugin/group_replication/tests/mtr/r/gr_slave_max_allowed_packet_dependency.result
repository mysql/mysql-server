include/group_replication.inc [rpl_server_count=3]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]

# 1.  Start three server(disable certification database garbage collection).

# 1A. Bootstrap server1.
[connection server1]
include/start_and_bootstrap_group_replication.inc
SET @debug_save1= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG= 'd,group_replication_do_not_clear_certification_database';
# 1B. Set slave_max_allowed_packet to lowest value and start server2.
[connection server2]
SET @debug_save_slave_max_allowed_packet= @@GLOBAL.slave_max_allowed_packet;
SET GLOBAL slave_max_allowed_packet=1024;
include/start_group_replication.inc
SET @debug_save2= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG= 'd,group_replication_do_not_clear_certification_database';
set session sql_log_bin=0;
call mtr.add_suppression("Unable to convert the event into a packet on the applier.*");
call mtr.add_suppression("Failed to fetch transaction data containing required transaction info for applier");
call mtr.add_suppression("Error at event handling.*");
call mtr.add_suppression("Fatal error during execution on the Applier process of Group Replication. The server will now leave the group.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("Slave SQL for channel 'group_replication_applier'.*");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
set session sql_log_bin=1;
# 1C. Setup environment on server3, do not start GR yet.
[connection server3]
SET @debug_save3= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG= 'd,group_replication_do_not_clear_certification_database';

# 2.  Generate 200 transactions on server1 to increase
#     certification database size.

[connection server1]
CREATE TABLE t1 (a INT PRIMARY KEY);

# 3.  Start GR on server3, View_change packet will be high in size.

[connection server3]
include/start_group_replication.inc

# 4.  Server2 can only handle small packet sizes, so it will go in error state.

[connection server2]
include/gr_wait_for_member_state.inc
include/assert_grep.inc [Found the expected error about log event entry exceeded slave_max_allowed_packet.]

# 5.  Server1 can handle 1GB packet size(default) so it will become donor and
#     assist server3 to come ONLINE.

[connection server1]
include/rpl_gr_wait_for_number_of_members.inc

# 6.  Restart GR on server2 with large value of slave_max_allowed_packet
#     to make it ONLINE.

[connection server2]
include/stop_group_replication.inc
SET @@GLOBAL.slave_max_allowed_packet=@debug_save_slave_max_allowed_packet;
include/start_group_replication.inc
[connection server1]
include/rpl_gr_wait_for_number_of_members.inc

# 7.  Verification.

include/diff_tables.inc [server1:t1, server2:t1, server3:t1]

# 8.  Cleanup.

DROP TABLE t1;
[connection server1]
SET @@GLOBAL.DEBUG= @debug_save1;
[connection server2]
SET @@GLOBAL.DEBUG= @debug_save2;
[connection server3]
SET @@GLOBAL.DEBUG= @debug_save3;
include/group_replication_end.inc
