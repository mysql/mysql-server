include/group_replication.inc [rpl_server_count=3]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]
#
# Setup a new 2 member group
#
include/start_and_bootstrap_group_replication.inc
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);
include/start_group_replication.inc
#
# Purge member 1 binlog after a flush and create a replication user
#
FLUSH BINARY LOGS;
include/stop_dump_threads.inc
include/wait_for_file_closed.inc
SET SESSION sql_log_bin= 0;
CREATE USER "recovery_user" IDENTIFIED BY "recovery_password";
GRANT REPLICATION SLAVE ON *.* TO "recovery_user";
FLUSH PRIVILEGES;
SET SESSION sql_log_bin= 1;
#
# Start recovery and watch it fail for a bit as:
# 1) Server 1 has purged GTIDs
# 2) Server 2 does not has the correct replication user
#
SET SESSION sql_log_bin= 0;
call mtr.add_suppression("There was an error when connecting to the donor*");
call mtr.add_suppression("For details please check performance_schema.replication_connection_status table and error log messages of Slave I/O for channel group_replication_recovery.");
call mtr.add_suppression("Slave I/O for channel 'group_replication_recovery': Got fatal error 1236*");
call mtr.add_suppression("Error while starting the group replication recovery receiver/applier threads");
call mtr.add_suppression("Slave I/O for channel 'group_replication_recovery': Master command COM_REGISTER_SLAVE failed: Access denied for user 'recovery_user'.*");
call mtr.add_suppression("Slave I/O for channel 'group_replication_recovery': Master command COM_REGISTER_SLAVE failed: failed registering on master, reconnecting to try again.*");
call mtr.add_suppression("Slave I/O thread couldn't register on master");
call mtr.add_suppression("Error while creating the group replication recovery channel with donor.*");
call mtr.add_suppression("Error when configuring the group recovery connection to the donor.*");
SET SESSION sql_log_bin= 1;
CHANGE MASTER TO MASTER_USER= 'recovery_user', MASTER_PASSWORD= 'recovery_password' FOR CHANNEL 'group_replication_recovery';
SET @debug_save_rec_int= @@GLOBAL.group_replication_recovery_reconnect_interval;
SET GLOBAL group_replication_recovery_reconnect_interval= 1 # seconds;
START GROUP_REPLICATION;
include/gr_wait_for_member_state.inc
#
# Create the recovery user on server 2
# The joiner should now be able to connect to server 2 when failing over.
#
SET SESSION sql_log_bin= 0;
CREATE USER "recovery_user" IDENTIFIED BY "recovery_password";
GRANT REPLICATION SLAVE ON *.* TO "recovery_user";
FLUSH PRIVILEGES;
SET SESSION sql_log_bin= 1;
include/gr_wait_for_member_state.inc
include/assert.inc [On the recovered member, the table should exist and have 1 elements]
#
# Cleaning up
#
SET @@GLOBAL.group_replication_recovery_reconnect_interval= @debug_save_rec_int;
DROP TABLE t1;
SET SESSION sql_log_bin= 0;
DROP USER "recovery_user";
SET SESSION sql_log_bin= 1;
SET SESSION sql_log_bin= 0;
DROP USER "recovery_user";
SET SESSION sql_log_bin= 1;
include/group_replication_end.inc
