include/group_replication.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]
#
# 1. Test local recovery
# Start group_replication on the first node after setting the debug
# point to block recovery. Check whether transactions can be executed.
#
SET @debug_save= @@GLOBAL.DEBUG;
# Set the debug flag to block recovery at different stages.
SET @@GLOBAL.DEBUG='+d,recovery_thread_start_wait';
START GROUP_REPLICATION;
include/gr_wait_for_member_state.inc
CREATE TABLE t1 (i INT NOT NULL PRIMARY KEY);
ERROR HY000: The MySQL server is running with the --super-read-only option so it cannot execute this statement
SET DEBUG_SYNC= "now SIGNAL signal.recovery_continue";
# Now wait for the node to be online
include/gr_wait_for_member_state.inc
# Table creation should pass as the single member is now recovered.
CREATE TABLE t1 (i INT NOT NULL PRIMARY KEY);
SET @@GLOBAL.DEBUG= @debug_save;
#
# 2. Test for a joining member
# Start group_replication on the second member and block state transfer
# Query execution should not be allowed
#
STOP SLAVE SQL_THREAD FOR CHANNEL "group_replication_applier";
START GROUP_REPLICATION;
include/gr_wait_for_member_state.inc
CREATE TABLE t2 (i INT NOT NULL PRIMARY KEY);
ERROR HY000: The MySQL server is running with the --super-read-only option so it cannot execute this statement
START SLAVE SQL_THREAD FOR CHANNEL "group_replication_applier";
include/gr_wait_for_member_state.inc
# Table creation should pass as this node has now recovered.
CREATE TABLE t2 (i INT NOT NULL PRIMARY KEY);
#
# Cleanup
#
DROP TABLE t1;
DROP TABLE t2;
include/group_replication_end.inc
