include/group_replication.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]

############################################################
# Create two tables on server1.
# t1 : parent table with a primary key and unique key.
# t2 : child table with a primary key and foreign key referring
#      t1's unique key.

[connection server1]
CREATE TABLE t1 (c1 INT PRIMARY KEY, c2 INT UNIQUE KEY NOT NULL);
CREATE TABLE t2 (c1 INT PRIMARY KEY, c2 INT, FOREIGN KEY (c2) REFERENCES t1(c2));
INSERT INTO t1 VALUES(1, 1);
INSERT INTO t1 VALUES(2, 2);
include/rpl_sync.inc

############################################################
# Scenario 1: FOREIGN KEY referring an UNIQUE KEY
#   conflicting case: updating referring tuple while
#   the tuple with referring key is getting inserted
#   in child table

############################################################
# 0. Initial setup and checks.
[connection server_1]
SET SESSION sql_log_bin= 0;
include/gtid_utils.inc
SET SESSION sql_log_bin= 1;
include/gtid_step_reset.inc

############################################################
# 1. Set a debug sync before broadcast message to group on
#    connection local_server_connection1.
[connection server_1]
SET @debug_save= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG='d,group_replication_before_message_broadcast';

#####################################################################
# 2. Commit local_transaction that will be blocked before broadcast.
BEGIN;
INSERT INTO t2 VALUES (1, 1);
COMMIT;

############################################################
# 3. Wait until local transaction reaches the
# group_replication_before_message_broadcast debug sync point.
[connection server1]

############################################################
# 4. Execute a transaction on remote server, that will reach first
#    certification, since transaction on the local server
#    is blocked before broadcast.
[connection server2]
BEGIN;
UPDATE t1 SET c2=3 WHERE c1=1;
COMMIT;

############################################################
# 5. Signal the waiting thread on local server to resume the
#    transaction.
[connection server1]
SET DEBUG_SYNC='now SIGNAL waiting';
SET @@GLOBAL.DEBUG= @debug_save;

############################################################
# 6. Wait for remote transaction to be executed succesfully
on local server.
[connection server2]
include/sync_slave_sql_with_master.inc
############################################################
# 7. If the test case is conflict scenario, local transaction
#    will end up in an error stating that it was aborted,
#    since transactions are conflicting and transaction on
#    remote server was ordered first. If the test case is
#    is positive scenario, no error will be seen here.
[connection server_1]
ERROR HY000: Plugin instructed the server to rollback the current transaction.
[connection server_1]
SET @@GLOBAL.DEBUG=@debug_save;
############################################################
# 8. Sync everything
include/rpl_sync.inc
############################################################
# 9. Assert that number of certified transactions are the
#    expected ones.
include/assert.inc [The value of Count_Transactions_Checked should be 6 after starting group replication]
include/assert.inc [The value of Count_Conflicts_Detected should be 1 after starting group replication]
############################################################
# 10. Assert that GTID is increased as expected
include/gtid_step_assert.inc [count=1, only_count=1]
[connection server_1]
SET SESSION sql_log_bin= 0;
include/gtid_utils_end.inc
SET SESSION sql_log_bin= 1;
############################################################
# 11. Cleanup (restore the connection back to original)
[connection server1]
############################################################
# check data sanity
[connection server1]
include/assert.inc [Table t1 will contain update row after the above execution]
include/assert.inc [Table t2 should have zero rows after the above conflict]

############################################################
# Scenario 2: FOREIGN KEY referring an UNIQUE KEY
#   non-conflicting case: inserting a tuple in child's table
#   while updating a tuple in parent's table which is not getting
#   referred

############################################################
# 0. Initial setup and checks.
[connection server_1]
SET SESSION sql_log_bin= 0;
include/gtid_utils.inc
SET SESSION sql_log_bin= 1;
include/gtid_step_reset.inc

############################################################
# 1. Set a debug sync before broadcast message to group on
#    connection local_server_connection1.
[connection server_1]
SET @debug_save= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG='d,group_replication_before_message_broadcast';

#####################################################################
# 2. Commit local_transaction that will be blocked before broadcast.
BEGIN;
INSERT INTO t2 VALUES (1, 3);
COMMIT;

############################################################
# 3. Wait until local transaction reaches the
# group_replication_before_message_broadcast debug sync point.
[connection server1]

############################################################
# 4. Execute a transaction on remote server, that will reach first
#    certification, since transaction on the local server
#    is blocked before broadcast.
[connection server2]
BEGIN;
UPDATE t1 SET c2=4 WHERE c1=2;
COMMIT;

############################################################
# 5. Signal the waiting thread on local server to resume the
#    transaction.
[connection server1]
SET DEBUG_SYNC='now SIGNAL waiting';
SET @@GLOBAL.DEBUG= @debug_save;

############################################################
# 6. Wait for remote transaction to be executed succesfully
on local server.
[connection server2]
include/sync_slave_sql_with_master.inc
############################################################
# 7. If the test case is conflict scenario, local transaction
#    will end up in an error stating that it was aborted,
#    since transactions are conflicting and transaction on
#    remote server was ordered first. If the test case is
#    is positive scenario, no error will be seen here.
[connection server_1]
[connection server_1]
SET @@GLOBAL.DEBUG=@debug_save;
############################################################
# 8. Sync everything
include/rpl_sync.inc
############################################################
# 9. Assert that number of certified transactions are the
#    expected ones.
include/assert.inc [The value of Count_Transactions_Checked should be 8 after starting group replication]
include/assert.inc [The value of Count_Conflicts_Detected should be 1 after starting group replication]
############################################################
# 10. Assert that GTID is increased as expected
include/gtid_step_assert.inc [count=2, only_count=1]
[connection server_1]
SET SESSION sql_log_bin= 0;
include/gtid_utils_end.inc
SET SESSION sql_log_bin= 1;
############################################################
# 11. Cleanup (restore the connection back to original)
[connection server1]
############################################################
# check data sanity
[connection server1]
include/assert.inc [Table t1 will contain update row after the above execution]
include/assert.inc [Table t2 will contain one tuple]

############################################################
# Clean up.
DROP TABLE t2;
DROP TABLE t1;
include/rpl_sync.inc

##################################################################
# Scenario: Check the group replication parallel applier indexes
# of the DMLs that involves foreign key which is referring
# an unique key.

[connection server2]
include/stop_group_replication.inc
include/start_group_replication.inc

#####################################################################
# Create two tables on server1.
# t1 : parent table with a primary key and unique key.
# t2 : child table with a primary key and foreign key referring
#      t1's unique key.

[connection server1]
CREATE TABLE t1 (a INT,b INT UNIQUE NOT NULL, PRIMARY KEY(a));
CREATE TABLE t2 (c1 INT PRIMARY KEY,c2 INT,FOREIGN KEY(c2) REFERENCES t1(b));

#####################################################################
# Execute few DMLs on these two tables

INSERT INTO t1 VALUES(11,1);
INSERT INTO t1 VALUES(12,2);
INSERT INTO t2 VALUES(31,1);
INSERT INTO t2 VALUES(32,2);
UPDATE t2 SET c1=21 WHERE c2=1;
DELETE FROM t2 WHERE c2=2;
DELETE FROM t1 WHERE b=2;
DELETE FROM t2 WHERE c1=21;
DROP TABLE t2;
DROP TABLE t1;
include/rpl_sync.inc

#####################################################
# Dump Group Replication applier channel relay log

[connection server2]
Matching lines are:
#time# ##:##:## server id 2  end_log_pos ## 	GTID	last_committed=0	sequence_number=0
#time# ##:##:## server id 1  end_log_pos ## 	GTID	last_committed=1	sequence_number=2
#time# ##:##:## server id 1  end_log_pos ## 	GTID	last_committed=2	sequence_number=3
#time# ##:##:## server id 1  end_log_pos ## 	GTID	last_committed=3	sequence_number=4
#time# ##:##:## server id 1  end_log_pos ## 	GTID	last_committed=3	sequence_number=5
#time# ##:##:## server id 1  end_log_pos ## 	GTID	last_committed=4	sequence_number=6
#time# ##:##:## server id 1  end_log_pos ## 	GTID	last_committed=5	sequence_number=7
#time# ##:##:## server id 1  end_log_pos ## 	GTID	last_committed=6	sequence_number=8
#time# ##:##:## server id 1  end_log_pos ## 	GTID	last_committed=7	sequence_number=9
#time# ##:##:## server id 1  end_log_pos ## 	GTID	last_committed=9	sequence_number=10
#time# ##:##:## server id 1  end_log_pos ## 	GTID	last_committed=8	sequence_number=11
#time# ##:##:## server id 1  end_log_pos ## 	GTID	last_committed=11	sequence_number=12
#time# ##:##:## server id 1  end_log_pos ## 	GTID	last_committed=12	sequence_number=13
Occurrences of 'last_committed' in the input file: 13

################################
# Validate indexes on member 2.
#
include/include/assert_logical_timestamps.inc [0 0;1 2;2 3;3 4;3 5;4 6;5 7;6 8;7 9;9 10;8 11;11 12;12 13]
include/group_replication_end.inc
