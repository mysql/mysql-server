include/group_replication.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]

############################################################
# Create a table with Nullable UNIQUEY KEY
CREATE TABLE t1 (c1 INT PRIMARY KEY, c2 INT UNIQUE KEY);
include/rpl_sync.inc

###########################################################
# Scenario 1: UNIQUE NULL KEY, conflicting case

############################################################
# 0. Initial setup and checks.
[connection server1]
SET SESSION sql_log_bin= 0;
include/gtid_utils.inc
SET SESSION sql_log_bin= 1;
include/gtid_step_reset.inc

############################################################
# 1. Set a debug sync before broadcast message to group on
#    connection local_server_connection1.
[connection server1]
SET @debug_save= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG='d,group_replication_before_message_broadcast';

#####################################################################
# 2. Commit local_transaction that will be blocked before broadcast.
BEGIN;
INSERT INTO t1 VALUES (1, 2);
COMMIT;

############################################################
# 3. Wait until local transaction reaches the
# group_replication_before_message_broadcast debug sync point.
[connection server_1]

############################################################
# 4. Execute a transaction on remote server, that will reach first
#    certification, since transaction on the local server
#    is blocked before broadcast.
[connection server2]
BEGIN;
INSERT INTO t1 VALUES (3, 2);
COMMIT;

############################################################
# 5. Signal the waiting thread on local server to resume the
#    transaction.
[connection server_1]
SET DEBUG_SYNC='now SIGNAL waiting';
SET @@GLOBAL.DEBUG= @debug_save;

############################################################
# 6. Wait for remote transaction to be executed succesfully
on local server.
[connection server2]
include/sync_slave_sql_with_master.inc
############################################################
# 7. If the test case is conflict scenario, local transaction
#    will end up in an error stating that it was aborted,
#    since transactions are conflicting and transaction on
#    remote server was ordered first. If the test case is
#    is positive scenario, no error will be seen here.
[connection server1]
ERROR 40000: Plugin instructed the server to rollback the current transaction.
[connection server1]
SET @@GLOBAL.DEBUG=@debug_save;
############################################################
# 8. Sync everything
include/rpl_sync.inc
############################################################
# 9. Assert that number of certified transactions are the
#    expected ones.
include/assert.inc [The value of Count_Transactions_Checked should be 3 after starting group replication]
include/assert.inc [The value of Count_Conflicts_Detected should be 1 after starting group replication]
############################################################
# 10. Assert that GTID is increased as expected
include/gtid_step_assert.inc [count=1, only_count=1]
[connection server1]
SET SESSION sql_log_bin= 0;
include/gtid_utils_end.inc
SET SESSION sql_log_bin= 1;
############################################################
# 11. Cleanup (restore the connection back to original)
[connection server1]

############################################################
# Scenario 2: UNIQUE NULL KEY, non-conflicting case


############################################################
# 0. Initial setup and checks.
[connection server1]
SET SESSION sql_log_bin= 0;
include/gtid_utils.inc
SET SESSION sql_log_bin= 1;
include/gtid_step_reset.inc

############################################################
# 1. Set a debug sync before broadcast message to group on
#    connection local_server_connection1.
[connection server1]
SET @debug_save= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG='d,group_replication_before_message_broadcast';

#####################################################################
# 2. Commit local_transaction that will be blocked before broadcast.
BEGIN;
INSERT INTO t1 VALUES (5, 6);
COMMIT;

############################################################
# 3. Wait until local transaction reaches the
# group_replication_before_message_broadcast debug sync point.
[connection server_1]

############################################################
# 4. Execute a transaction on remote server, that will reach first
#    certification, since transaction on the local server
#    is blocked before broadcast.
[connection server2]
BEGIN;
INSERT INTO t1 VALUES (7, 8);
COMMIT;

############################################################
# 5. Signal the waiting thread on local server to resume the
#    transaction.
[connection server_1]
SET DEBUG_SYNC='now SIGNAL waiting';
SET @@GLOBAL.DEBUG= @debug_save;

############################################################
# 6. Wait for remote transaction to be executed succesfully
on local server.
[connection server2]
include/sync_slave_sql_with_master.inc
############################################################
# 7. If the test case is conflict scenario, local transaction
#    will end up in an error stating that it was aborted,
#    since transactions are conflicting and transaction on
#    remote server was ordered first. If the test case is
#    is positive scenario, no error will be seen here.
[connection server1]
[connection server1]
SET @@GLOBAL.DEBUG=@debug_save;
############################################################
# 8. Sync everything
include/rpl_sync.inc
############################################################
# 9. Assert that number of certified transactions are the
#    expected ones.
include/assert.inc [The value of Count_Transactions_Checked should be 5 after starting group replication]
include/assert.inc [The value of Count_Conflicts_Detected should be 1 after starting group replication]
############################################################
# 10. Assert that GTID is increased as expected
include/gtid_step_assert.inc [count=2, only_count=1]
[connection server1]
SET SESSION sql_log_bin= 0;
include/gtid_utils_end.inc
SET SESSION sql_log_bin= 1;
############################################################
# 11. Cleanup (restore the connection back to original)
[connection server1]

############################################################
# Check the data sanity
[connection server1]
include/assert.inc [Table t1 will contain row after the above execution]
include/assert.inc [Table t1 will contain row after the above execution]
include/assert.inc [Table t1 will contain row after the above execution]
include/assert.inc [Table t1 will contain 3 rows after the above execution]

##################################################################
# Scenario 3: UNIQUE NULL KEY, non-conflicting case (NULL vs NULL)


############################################################
# 0. Initial setup and checks.
[connection server1]
SET SESSION sql_log_bin= 0;
include/gtid_utils.inc
SET SESSION sql_log_bin= 1;
include/gtid_step_reset.inc

############################################################
# 1. Set a debug sync before broadcast message to group on
#    connection local_server_connection1.
[connection server1]
SET @debug_save= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG='d,group_replication_before_message_broadcast';

#####################################################################
# 2. Commit local_transaction that will be blocked before broadcast.
BEGIN;
INSERT INTO t1 VALUES (8, NULL);
COMMIT;

############################################################
# 3. Wait until local transaction reaches the
# group_replication_before_message_broadcast debug sync point.
[connection server_1]

############################################################
# 4. Execute a transaction on remote server, that will reach first
#    certification, since transaction on the local server
#    is blocked before broadcast.
[connection server2]
BEGIN;
INSERT INTO t1 VALUES (9, NULL);
COMMIT;

############################################################
# 5. Signal the waiting thread on local server to resume the
#    transaction.
[connection server_1]
SET DEBUG_SYNC='now SIGNAL waiting';
SET @@GLOBAL.DEBUG= @debug_save;

############################################################
# 6. Wait for remote transaction to be executed succesfully
on local server.
[connection server2]
include/sync_slave_sql_with_master.inc
############################################################
# 7. If the test case is conflict scenario, local transaction
#    will end up in an error stating that it was aborted,
#    since transactions are conflicting and transaction on
#    remote server was ordered first. If the test case is
#    is positive scenario, no error will be seen here.
[connection server1]
[connection server1]
SET @@GLOBAL.DEBUG=@debug_save;
############################################################
# 8. Sync everything
include/rpl_sync.inc
############################################################
# 9. Assert that number of certified transactions are the
#    expected ones.
include/assert.inc [The value of Count_Transactions_Checked should be 7 after starting group replication]
include/assert.inc [The value of Count_Conflicts_Detected should be 1 after starting group replication]
############################################################
# 10. Assert that GTID is increased as expected
include/gtid_step_assert.inc [count=2, only_count=1]
[connection server1]
SET SESSION sql_log_bin= 0;
include/gtid_utils_end.inc
SET SESSION sql_log_bin= 1;
############################################################
# 11. Cleanup (restore the connection back to original)
[connection server1]

############################################################
# Check the data sanity
[connection server1]
include/assert.inc [Table t1 will contain row after the above execution]
include/assert.inc [Table t1 will contain 5 rows after the above execution]

############################################################
# Create a table with composite UNIQUE KEY on server1.
DROP TABLE t1;
CREATE TABLE t1 (c1 INT PRIMARY KEY, c2 INT, c3 INT, UNIQUE KEY(c2,c3));
include/rpl_sync.inc

##################################################################
# Scenario 4: COMPOSITE UNIQUE KEY
#    non-conflicting case (x,NULL) vs (x,NULL)
##################################################################

############################################################
# 0. Initial setup and checks.
[connection server1]
SET SESSION sql_log_bin= 0;
include/gtid_utils.inc
SET SESSION sql_log_bin= 1;
include/gtid_step_reset.inc

############################################################
# 1. Set a debug sync before broadcast message to group on
#    connection local_server_connection1.
[connection server1]
SET @debug_save= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG='d,group_replication_before_message_broadcast';

#####################################################################
# 2. Commit local_transaction that will be blocked before broadcast.
BEGIN;
INSERT INTO t1 VALUES (1, 2, NULL);
COMMIT;

############################################################
# 3. Wait until local transaction reaches the
# group_replication_before_message_broadcast debug sync point.
[connection server_1]

############################################################
# 4. Execute a transaction on remote server, that will reach first
#    certification, since transaction on the local server
#    is blocked before broadcast.
[connection server2]
BEGIN;
INSERT INTO t1 VALUES (2, 2, NULL);
COMMIT;

############################################################
# 5. Signal the waiting thread on local server to resume the
#    transaction.
[connection server_1]
SET DEBUG_SYNC='now SIGNAL waiting';
SET @@GLOBAL.DEBUG= @debug_save;

############################################################
# 6. Wait for remote transaction to be executed succesfully
on local server.
[connection server2]
include/sync_slave_sql_with_master.inc
############################################################
# 7. If the test case is conflict scenario, local transaction
#    will end up in an error stating that it was aborted,
#    since transactions are conflicting and transaction on
#    remote server was ordered first. If the test case is
#    is positive scenario, no error will be seen here.
[connection server1]
[connection server1]
SET @@GLOBAL.DEBUG=@debug_save;
############################################################
# 8. Sync everything
include/rpl_sync.inc
############################################################
# 9. Assert that number of certified transactions are the
#    expected ones.
include/assert.inc [The value of Count_Transactions_Checked should be 11 after starting group replication]
include/assert.inc [The value of Count_Conflicts_Detected should be 1 after starting group replication]
############################################################
# 10. Assert that GTID is increased as expected
include/gtid_step_assert.inc [count=2, only_count=1]
[connection server1]
SET SESSION sql_log_bin= 0;
include/gtid_utils_end.inc
SET SESSION sql_log_bin= 1;
############################################################
# 11. Cleanup (restore the connection back to original)
[connection server1]

##################################################################
# Scenario 5: COMPOSITE UNIQUE KEY
#    (non-conflicting case (NULL,NULL) vs (NULL,NULL)
##################################################################


############################################################
# 0. Initial setup and checks.
[connection server1]
SET SESSION sql_log_bin= 0;
include/gtid_utils.inc
SET SESSION sql_log_bin= 1;
include/gtid_step_reset.inc

############################################################
# 1. Set a debug sync before broadcast message to group on
#    connection local_server_connection1.
[connection server1]
SET @debug_save= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG='d,group_replication_before_message_broadcast';

#####################################################################
# 2. Commit local_transaction that will be blocked before broadcast.
BEGIN;
INSERT INTO t1 VALUES (3, NULL, NULL);
COMMIT;

############################################################
# 3. Wait until local transaction reaches the
# group_replication_before_message_broadcast debug sync point.
[connection server_1]

############################################################
# 4. Execute a transaction on remote server, that will reach first
#    certification, since transaction on the local server
#    is blocked before broadcast.
[connection server2]
BEGIN;
INSERT INTO t1 VALUES (4, NULL, NULL);
COMMIT;

############################################################
# 5. Signal the waiting thread on local server to resume the
#    transaction.
[connection server_1]
SET DEBUG_SYNC='now SIGNAL waiting';
SET @@GLOBAL.DEBUG= @debug_save;

############################################################
# 6. Wait for remote transaction to be executed succesfully
on local server.
[connection server2]
include/sync_slave_sql_with_master.inc
############################################################
# 7. If the test case is conflict scenario, local transaction
#    will end up in an error stating that it was aborted,
#    since transactions are conflicting and transaction on
#    remote server was ordered first. If the test case is
#    is positive scenario, no error will be seen here.
[connection server1]
[connection server1]
SET @@GLOBAL.DEBUG=@debug_save;
############################################################
# 8. Sync everything
include/rpl_sync.inc
############################################################
# 9. Assert that number of certified transactions are the
#    expected ones.
include/assert.inc [The value of Count_Transactions_Checked should be 13 after starting group replication]
include/assert.inc [The value of Count_Conflicts_Detected should be 1 after starting group replication]
############################################################
# 10. Assert that GTID is increased as expected
include/gtid_step_assert.inc [count=2, only_count=1]
[connection server1]
SET SESSION sql_log_bin= 0;
include/gtid_utils_end.inc
SET SESSION sql_log_bin= 1;
############################################################
# 11. Cleanup (restore the connection back to original)
[connection server1]

############################################################
# Check the data sanity
[connection server1]
include/assert.inc [Table t1 will contain row after the above execution]
include/assert.inc [Table t1 will contain 4 rows after the above execution]

###################################################################
# Create two tables (parent and child) and create a foreign key in
# child table that refers Nullable Unique key of the parent table
DROP TABLE t1;
CREATE TABLE t1 (c1 INT PRIMARY KEY, c2 INT UNIQUE KEY);
CREATE TABLE t2 (c1 INT PRIMARY KEY, c2 INT, FOREIGN KEY (c2) REFERENCES t1(c2));
INSERT INTO t1 VALUES (1, NULL);
include/rpl_sync.inc

##################################################################
# Scenario 6: Non-conflicting case (NULL tuple does not care for
#  a matching tuple in parent table)


############################################################
# 0. Initial setup and checks.
[connection server1]
SET SESSION sql_log_bin= 0;
include/gtid_utils.inc
SET SESSION sql_log_bin= 1;
include/gtid_step_reset.inc

############################################################
# 1. Set a debug sync before broadcast message to group on
#    connection local_server_connection1.
[connection server1]
SET @debug_save= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG='d,group_replication_before_message_broadcast';

#####################################################################
# 2. Commit local_transaction that will be blocked before broadcast.
BEGIN;
UPDATE t1 SET c2=10;
COMMIT;

############################################################
# 3. Wait until local transaction reaches the
# group_replication_before_message_broadcast debug sync point.
[connection server_1]

############################################################
# 4. Execute a transaction on remote server, that will reach first
#    certification, since transaction on the local server
#    is blocked before broadcast.
[connection server2]
BEGIN;
INSERT INTO t2 VALUES (1, NULL);;
COMMIT;

############################################################
# 5. Signal the waiting thread on local server to resume the
#    transaction.
[connection server_1]
SET DEBUG_SYNC='now SIGNAL waiting';
SET @@GLOBAL.DEBUG= @debug_save;

############################################################
# 6. Wait for remote transaction to be executed succesfully
on local server.
[connection server2]
include/sync_slave_sql_with_master.inc
############################################################
# 7. If the test case is conflict scenario, local transaction
#    will end up in an error stating that it was aborted,
#    since transactions are conflicting and transaction on
#    remote server was ordered first. If the test case is
#    is positive scenario, no error will be seen here.
[connection server1]
[connection server1]
SET @@GLOBAL.DEBUG=@debug_save;
############################################################
# 8. Sync everything
include/rpl_sync.inc
############################################################
# 9. Assert that number of certified transactions are the
#    expected ones.
include/assert.inc [The value of Count_Transactions_Checked should be 19 after starting group replication]
include/assert.inc [The value of Count_Conflicts_Detected should be 1 after starting group replication]
############################################################
# 10. Assert that GTID is increased as expected
include/gtid_step_assert.inc [count=2, only_count=1]
[connection server1]
SET SESSION sql_log_bin= 0;
include/gtid_utils_end.inc
SET SESSION sql_log_bin= 1;
############################################################
# 11. Cleanup (restore the connection back to original)
[connection server1]

############################################################
# Check the data sanity
[connection server1]
include/assert.inc [Table t1 will contain row after the above execution]
include/assert.inc [Table t1 will contain row after the above execution]

######################################################################
# Scenario 7: After all the above experiments, check that server's
# (server1's and server2's) binlog content is good for replay purpose.

include/stop_group_replication.inc
SET SQL_LOG_BIN=0;
RENAME TABLE t2 TO t4;
RENAME TABLE t1 TO t3;
RESET MASTER;
include/diff_tables.inc [server1:t1,server1:t3]
include/diff_tables.inc [server1:t2,server1:t4]
DROP TABLE t2, t1;
RESET MASTER;
include/diff_tables.inc [server1:t1,server1:t3]
include/diff_tables.inc [server1:t2,server1:t4]
DROP TABLE t4, t3, t2, t1;
RESET MASTER;
SET SQL_LOG_BIN=1;
include/start_group_replication.inc

############
# Cleanup

DROP TABLE t2;
DROP TABLE t1;
include/group_replication_end.inc
