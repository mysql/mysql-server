RESET MASTER;
SET @@GLOBAL.DEBUG= '+d, disable_gtid_background_persister';
CREATE TABLE t1 (c1 INT) Engine=InnoDB;
CREATE TABLE t2 (c1 INT) Engine=InnoDB;
SET @free_intervals_mutex_before= (
SELECT COUNT_STAR
FROM performance_schema.events_waits_summary_global_by_event_name WHERE
EVENT_NAME='wait/synch/mutex/sql/Gtid_set::gtid_executed::free_intervals_mutex');
SET GLOBAL binlog_group_commit_sync_delay=1000000;
# Create two new connections: con1 and con2
# At con1
SET DEBUG_SYNC='reached_finish_commit SIGNAL go_con2 WAIT_FOR go_con1';
INSERT INTO t1 VALUES (1);
# At con2
# Adding debug point 'leaving_finish_commit' to @@SESSION.debug
SET DEBUG_SYNC='now WAIT_FOR go_con2';
INSERT INTO t2 VALUES (2);
SET DEBUG_SYNC='now WAIT_FOR signal_leaving_finish_commit';
SET DEBUG_SYNC='now SIGNAL go_con1';
# Removing debug point 'leaving_finish_commit' from @@SESSION.debug
# At default connection
include/assert.inc ["The first insert has finished"]
include/assert.inc ["No gaps should exist in gtid_executed after the second insert"]
SET @free_intervals_mutex_after= (
SELECT COUNT_STAR
FROM performance_schema.events_waits_summary_global_by_event_name WHERE
EVENT_NAME='wait/synch/mutex/sql/Gtid_set::gtid_executed::free_intervals_mutex');
include/assert.inc ["gtid_executed::free_intervals_mutex wasn't used"]
SET GLOBAL binlog_group_commit_sync_delay=0;
SET @@GLOBAL.DEBUG= '-d, disable_gtid_background_persister';
DROP TABLE t1, t2;
RESET MASTER;
