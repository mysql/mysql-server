# ==== Purpose ====
#
# Verify that a partially failed 'GRANT' statement does not save its gtid
# into @@GLOBAL.GTID_EXECUTED and is not binlogged when binlog is enabled.
#
# ==== Implementation ====
#
# 1) Execute a partially failed 'GRANT' statement.
# 2) Verify that the partially failed statement does not save its gtid
#    into @@GLOBAL.GTID_EXECUTED, since it is not binlogged when binlog
#    is enabled.
# 3) Execute above two steps for all different types of statements.
#
# ==== References ====
#
# Bug#21686749  PARTIALLY FAILED DROP OR ACL STMT FAILS TO CONSUME GTID ON BINLOGLESS SLAVE
# See mysql-test/t/no_binlog_gtid_next_partially_failed_stmts.test
# See mysql-test/t/no_binlog_gtid_next_partially_failed_stmts_error.test
# See mysql-test/suite/binlog/t/binlog_gtid_next_partially_failed_stmts.test
# See mysql-test/t/no_binlog_gtid_next_partially_failed_stmts_anonymous.test
#

# Test in this file is binlog format agnostic, thus no need
# to rerun it for every format.
--source include/have_binlog_format_row.inc

# Make sure the test is repeatable
RESET MASTER;

call mtr.add_suppression("REVOKE/GRANT failed while storing table level and column level grants in the privilege tables. An incident event has been written to the binary log which will stop the slaves.");

--let $master_uuid= `SELECT @@GLOBAL.SERVER_UUID`

CREATE TABLE t1(a INT, b INT);
CREATE USER u1@h;
--echo #
--echo # Verify that u1 is added into mysql.user.
--echo #
SELECT user FROM mysql.user where user='u1';

--let $saved_master_pos=query_get_value('SHOW MASTER STATUS', Position, 1)
--error ER_CANT_CREATE_USER_WITH_GRANT
GRANT SELECT(a) ON t1 TO u1@h, u2@h;
--echo #
--echo # u1@h should not have been granted any permission
--echo #
SELECT user, column_name, column_priv FROM mysql.columns_priv;
--echo #
--echo # Verify that the partially failed GRANT statement does not generate
--echo # a gtid and save the gtid into @@GLOBAL.GTID_EXECUTED.
--echo #
--replace_result $master_uuid MASTER_UUID
--let $assert_text= Does not generate MASTER_UUID:4 and commit it into @@GLOBAL.GTID_EXECUTED
--let $assert_cond= "[SELECT @@GLOBAL.GTID_EXECUTED]" = "$master_uuid:1-3"
--source include/assert.inc
--echo #
--echo # Verify that the partially failed GRANT statement is not binlogged.
--echo #
--let $binlog_start= $saved_master_pos
--source include/show_binlog_events.inc

DROP USER u1@h;
DROP TABLE t1;

