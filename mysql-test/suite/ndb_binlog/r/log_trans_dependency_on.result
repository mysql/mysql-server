#
# Check behaviour of logical clock timestamps in binlog generated
# by ndb_binlog thread with transaction dependcy calculations turned on.
# The timestamps should indicate that each epoch transaction depends on
# the previous transaction that modified same row.
#
# Test requires that binlog transaction dependency has been turned on
select @@ndb_log_transaction_dependency;
@@ndb_log_transaction_dependency
1
#
# Check that the --ndb-log-transaction-dependency=[ON|OFF] is a readonly
# variable and thus not possible to change at runtime.
#
set @@ndb_log_transaction_dependency=ON;
ERROR HY000: Variable 'ndb_log_transaction_dependency' is a read only variable
# Test assumes that WRITESET is used for dependency tracking as otherwise
# the hash values calculated by ndb_binlog thread will not be used
select @@binlog_transaction_dependency_tracking;
@@binlog_transaction_dependency_tracking
WRITESET
CREATE TABLE t1 (
a INT PRIMARY KEY,
b CHAR(10)
) engine=ndb;
include/include/assert_logical_timestamps.inc [0 1]
INSERT INTO t1 VALUES (1, 'a');
# Wait for changes to be injected, then check timestamps
# Wait for ndb_binlog thread...
include/include/assert_logical_timestamps.inc [1 2]
INSERT INTO t1 VALUES (2, 'b');
# Wait for changes to be injected, then check timestamps
# Wait for ndb_binlog thread...
include/include/assert_logical_timestamps.inc [1 3]
CREATE TABLE t2 (
a INT PRIMARY KEY,
b CHAR(10)
) engine=ndb;
BEGIN;
INSERT INTO t1 VALUES (3, 'c');
INSERT INTO t2 VALUES (23, 'bc');
COMMIT;
# Wait for changes to be injected, then check timestamps
# Wait for ndb_binlog thread...
include/include/assert_logical_timestamps.inc [4 5]
BEGIN;
INSERT INTO t1 VALUES (4, 'd');
INSERT INTO t2 VALUES (24, 'bd');
COMMIT;
# Wait for changes to be injected, then check timestamps
# Wait for ndb_binlog thread...
include/include/assert_logical_timestamps.inc [4 6]
#
# Do a longer sequence of transactions that does not
# have dependencies
BEGIN;
INSERT INTO t1 VALUES (5, 'e');
INSERT INTO t2 VALUES (25, 'be');
COMMIT;
# Wait for changes to be injected, then check timestamps
# Wait for ndb_binlog thread...
include/include/assert_logical_timestamps.inc [4 7]
BEGIN;
INSERT INTO t1 VALUES (6, 'f');
INSERT INTO t2 VALUES (26, 'bf');
COMMIT;
# Wait for changes to be injected, then check timestamps
# Wait for ndb_binlog thread...
include/include/assert_logical_timestamps.inc [4 8]
#
# Do update values dependent on previous transactions
UPDATE t1 SET b = 'updated' WHERE a in (4,5);
# Wait for changes to be injected, then check timestamps
# Wait for ndb_binlog thread...
include/include/assert_logical_timestamps.inc [7 9]
UPDATE t2 SET b = 'updated' WHERE a in (24, 26);
# Wait for changes to be injected, then check timestamps
# Wait for ndb_binlog thread...
include/include/assert_logical_timestamps.inc [8 10]
# Cleanup
DROP TABLE t1;
DROP TABLE t2;
