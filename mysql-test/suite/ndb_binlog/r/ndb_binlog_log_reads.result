create table test.t1 (
a int primary key,
b varchar(2000),
c int not null unique,
d int,
key(d)) engine=ndb;
insert into test.t1 values
(1, "Initial data 1", 1, 1),
(2, "Initial data 2", 2, 2),
(3, "Initial data 3", 3, 3),
(4, "Initial data 4", 4, 4),
(5, "Initial data 5", 5, 5),
(6, "Initial data 6", 6, 6),
(7, "Initial data 7", 7, 7),
(8, "Initial data 8", 8, 8),
(9, "Initial data 9", 9, 9),
(10, "Initial data 10", 10, 10);
create table test.synch(x int primary key) engine=ndb;
Test 1: Testing logging of pk reads
reset master;
show create table test.synch;
reset master;
show create table test.synch;
reset master;
show create table test.synch;
reset master;
SET ndb_log_exclusive_reads= 1;
select * from test.t1 where a = 7 order by a for update;
a	b	c	d
7	Initial data 7	7	7
"Check that the binlog contains the AnyValue bit set in extra row data for a WRITE_ROW since ndb-log-update-as-write=1"
mysqld1:	txt
mysqld1:	### Extra row ndb info: data_format: 0, len: 4, data: 0x02000400
mysqld1:	### INSERT INTO `test`.`t1`
"Check that the binlog contains the AnyValue bit set in extra row data for a WRITE_ROW since ndb-log-update-as-write=1"
mysqld2:	txt
mysqld2:	### Extra row ndb info: data_format: 0, len: 4, data: 0x02000400
mysqld2:	### INSERT INTO `test`.`t1`
"Check that the binlog contains the AnyValue bit set in extra row data for a UPDATE_ROW since ndb-log-update-as-write=0"
mysqld3:	txt
mysqld3:	### Extra row ndb info: data_format: 0, len: 4, data: 0x02000400
mysqld3:	### UPDATE `test`.`t1`
"Check that the binlog contains the AnyValue bit set in extra row data for a UPDATE_ROW since ndb-log-update-as-write=0"
mysqld4:	txt
mysqld4:	### Extra row ndb info: data_format: 0, len: 4, data: 0x02000400
mysqld4:	### UPDATE `test`.`t1`
SET ndb_log_exclusive_reads= 0;
Test 2: Testing logging of unique index reads
reset master;
delete from test.synch;
show create table test.synch;
reset master;
show create table test.synch;
reset master;
show create table test.synch;
reset master;
SET ndb_log_exclusive_reads= 1;
select * from test.t1 where c = 7 order by a for update;
a	b	c	d
7	Initial data 7	7	7
"Check that the binlog contains the AnyValue bit set in extra row data for a WRITE_ROW since ndb-log-update-as-write=1"
mysqld1:	txt
mysqld1:	### Extra row ndb info: data_format: 0, len: 4, data: 0x02000400
mysqld1:	### INSERT INTO `test`.`t1`
"Check that the binlog contains the AnyValue bit set in extra row data for a WRITE_ROW since ndb-log-update-as-write=1"
mysqld2:	txt
mysqld2:	### Extra row ndb info: data_format: 0, len: 4, data: 0x02000400
mysqld2:	### INSERT INTO `test`.`t1`
"Check that the binlog contains the AnyValue bit set in extra row data for a UPDATE_ROW since ndb-log-update-as-write=0"
mysqld3:	txt
mysqld3:	### Extra row ndb info: data_format: 0, len: 4, data: 0x02000400
mysqld3:	### UPDATE `test`.`t1`
"Check that the binlog contains the AnyValue bit set in extra row data for a UPDATE_ROW since ndb-log-update-as-write=0"
mysqld4:	txt
mysqld4:	### Extra row ndb info: data_format: 0, len: 4, data: 0x02000400
mysqld4:	### UPDATE `test`.`t1`
SET ndb_log_exclusive_reads= 0;
Test 3: Testing logging of ordered index scans
reset master;
delete from test.synch;
show create table test.synch;
reset master;
show create table test.synch;
reset master;
show create table test.synch;
reset master;
SET ndb_log_exclusive_reads= 1;
select * from test.t1 where d = 7 order by a for update;
a	b	c	d
7	Initial data 7	7	7
"Check that the binlog contains the AnyValue bit set in extra row data for a WRITE_ROW since ndb-log-update-as-write=1"
mysqld1:	txt
mysqld1:	### Extra row ndb info: data_format: 0, len: 4, data: 0x02000400
mysqld1:	### INSERT INTO `test`.`t1`
"Check that the binlog contains the AnyValue bit set in extra row data for a WRITE_ROW since ndb-log-update-as-write=1"
mysqld2:	txt
mysqld2:	### Extra row ndb info: data_format: 0, len: 4, data: 0x02000400
mysqld2:	### INSERT INTO `test`.`t1`
"Check that the binlog contains the AnyValue bit set in extra row data for a UPDATE_ROW since ndb-log-update-as-write=0"
mysqld3:	txt
mysqld3:	### Extra row ndb info: data_format: 0, len: 4, data: 0x02000400
mysqld3:	### UPDATE `test`.`t1`
"Check that the binlog contains the AnyValue bit set in extra row data for a UPDATE_ROW since ndb-log-update-as-write=0"
mysqld4:	txt
mysqld4:	### Extra row ndb info: data_format: 0, len: 4, data: 0x02000400
mysqld4:	### UPDATE `test`.`t1`
SET ndb_log_exclusive_reads= 0;
Test 4: Testing logging of table scans
reset master;
delete from test.synch;
show create table test.synch;
reset master;
show create table test.synch;
reset master;
show create table test.synch;
reset master;
SET ndb_log_exclusive_reads= 1;
select * from test.t1 where b like "Initial data 7" order by a for update;
a	b	c	d
7	Initial data 7	7	7
"Check that the binlog contains the AnyValue bit set in extra row data for a WRITE_ROW since ndb-log-update-as-write=1"
mysqld1:	txt
mysqld1:	### Extra row ndb info: data_format: 0, len: 4, data: 0x02000400
mysqld1:	### INSERT INTO `test`.`t1`
"Check that the binlog contains the AnyValue bit set in extra row data for a WRITE_ROW since ndb-log-update-as-write=1"
mysqld2:	txt
mysqld2:	### Extra row ndb info: data_format: 0, len: 4, data: 0x02000400
mysqld2:	### INSERT INTO `test`.`t1`
"Check that the binlog contains the AnyValue bit set in extra row data for a UPDATE_ROW since ndb-log-update-as-write=0"
mysqld3:	txt
mysqld3:	### Extra row ndb info: data_format: 0, len: 4, data: 0x02000400
mysqld3:	### UPDATE `test`.`t1`
"Check that the binlog contains the AnyValue bit set in extra row data for a UPDATE_ROW since ndb-log-update-as-write=0"
mysqld4:	txt
mysqld4:	### Extra row ndb info: data_format: 0, len: 4, data: 0x02000400
mysqld4:	### UPDATE `test`.`t1`
SET ndb_log_exclusive_reads= 0;
drop table test.synch, test.t1;
