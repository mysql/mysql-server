# ==== Purpose ====
#
# This test will ensure that the I/O thread is failing with correct
# errors when something wrong happens while writing the ignored events
# information to the relay log to be consumed by the SQL thread.
#
# Step 1 is preventing the Rotate log event to be generated on memory (OOM).
# Step 2 is preventing the Rotate event to be written to the relay log.
# Step 3 is preventing the flush master info to succeed.
#
# ==== Related Bugs and Worklogs ====
#
# WL#8599: Reduce contention in IO and SQL threads
#

--source include/have_debug.inc
# This test case is binary log format agnostic
--source include/have_binlog_format_row.inc
--let $rpl_skip_start_slave=1
--source include/master-slave.inc

#
# Step 1
#

--source include/rpl_connection_slave.inc
# Suppression of error messages
CALL mtr.add_suppression('Failed to create Rotate_event .out of memory');
CHANGE MASTER TO IGNORE_SERVER_IDS = (1);
--source include/start_slave_io.inc

--source include/rpl_connection_master.inc
CREATE TABLE t1 (c1 INT);
DROP TABLE t1;

--source include/sync_slave_io_with_master.inc
SET @@GLOBAL.debug="+d,fail_generating_rotate_event_on_write_rotate_to_master_pos";
--let $slave_io_errno= convert_error(ER_SLAVE_CREATE_EVENT_FAILURE)
--source include/stop_slave_io.inc
SET @@GLOBAL.debug="-d,fail_generating_rotate_event_on_write_rotate_to_master_pos";

--let $slave_io_errno= convert_error(ER_SLAVE_CREATE_EVENT_FAILURE)
--let $show_slave_io_error= 1
--disable_warnings
--source include/wait_for_slave_io_error.inc
--enable_warnings
CHANGE MASTER TO IGNORE_SERVER_IDS = ();
--source include/start_slave.inc

--source include/rpl_connection_master.inc
CREATE TABLE t1 (c1 INT);
INSERT INTO t1 (c1) VALUES (1);
DROP TABLE t1;
--source include/sync_slave_sql_with_master.inc
--source include/rpl_reset.inc

#
# Step 2
#

--source include/rpl_connection_slave.inc
--source include/stop_slave.inc
# Suppression of error messages
CALL mtr.add_suppression('failed to write a Rotate event to the relay log');
CHANGE MASTER TO IGNORE_SERVER_IDS = (1);
--source include/start_slave_io.inc

--source include/rpl_connection_master.inc
CREATE TABLE t1 (c1 INT);
DROP TABLE t1;

--source include/sync_slave_io_with_master.inc
SET @@GLOBAL.debug="+d,fail_to_write_ignored_event_to_relay_log";
--let $slave_io_errno= convert_error(ER_SLAVE_RELAY_LOG_WRITE_FAILURE)
--source include/stop_slave_io.inc
SET @@GLOBAL.debug="-d,fail_to_write_ignored_event_to_relay_log";

--let $slave_io_errno= convert_error(ER_SLAVE_RELAY_LOG_WRITE_FAILURE)
--let $show_slave_io_error= 1
--disable_warnings
--source include/wait_for_slave_io_error.inc
--enable_warnings
CHANGE MASTER TO IGNORE_SERVER_IDS = ();
--source include/start_slave.inc

--source include/rpl_connection_master.inc
CREATE TABLE t1 (c1 INT);
INSERT INTO t1 (c1) VALUES (1);
DROP TABLE t1;
--source include/rpl_reset.inc

#
# Step 3
#

--source include/rpl_connection_slave.inc
--source include/stop_slave.inc
# Suppression of error messages
CALL mtr.add_suppression('Failed to flush master info file');
CHANGE MASTER TO IGNORE_SERVER_IDS = (1);
--source include/start_slave_io.inc

--source include/rpl_connection_master.inc
CREATE TABLE t1 (c1 INT);
DROP TABLE t1;

--source include/sync_slave_io_with_master.inc
SET @@GLOBAL.debug="+d,fail_to_flush_master_info";
--source include/stop_slave_io.inc
SET @@GLOBAL.debug="-d,fail_to_flush_master_info";

# The failure while flushing master info is not considered an I/O thread error

CHANGE MASTER TO IGNORE_SERVER_IDS = ();
--source include/start_slave.inc

--source include/rpl_connection_master.inc
CREATE TABLE t1 (c1 INT);
INSERT INTO t1 (c1) VALUES (1);
DROP TABLE t1;
--source include/rpl_end.inc
