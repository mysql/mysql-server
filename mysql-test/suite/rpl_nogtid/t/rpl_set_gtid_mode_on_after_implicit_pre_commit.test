# ==== Purpose ====
#
# Verify that a DBUG assert failure does not happen any more
# when changing GTID_MODE to ON/ON_PERMISSIVE and/or
# ENFORCE_GTID_CONSISTENCY to ON from OFF right after the
# ongoing GTID-violating statement causes to implicitly commit
# the previous transaction.
#
# ==== Implementation ====
#
# 1. SET GLOBAL GTID_MODE to OFF_PERMISSIVE.
# 2. Execute a GTID-violating DDL statement
#    "CREATE TABLE t1 (a INT) SELECT 1".
# 3. Stop at sync_point "after_implicit_pre_commit".
# 4. SET GLOBAL ENFORCE_GTID_CONSISTENCY to ON and
#    SET GLOBAL GTID_MODE to ON_PERMISSIVE.
# 5. Resume the GTID-violating statement from the
#    sync_point "after_implicit_pre_commit", there
#    is no DBUG assert failure any more.
#
# ==== References ====
#
# Bug#21895421  DEBUG ASSERT AFTER 'SET GTID_MODE' DURING PRECOMMIT OF GTID-VIOLATING STATEMENT

--let $rpl_server_count= 1
--let $rpl_topology= none
--source include/rpl_init.inc
--source include/rpl_default_connections.inc
--source include/have_binlog_format_row.inc
# Verifying a DEBUG ASSERT
--source include/have_debug.inc
# Using a debug sync point
--source include/have_debug_sync.inc

--connection default
SET GLOBAL GTID_MODE= OFF_PERMISSIVE;

# Execute a GTID-violating DDL statement and stop at
# sync_point "after_implicit_pre_commit".
--let $statement_connection= server_1
--let $statement= CREATE TABLE t1 (a INT) SELECT 1
--let $sync_point= after_implicit_pre_commit
--source include/execute_to_sync_point.inc

SET GLOBAL ENFORCE_GTID_CONSISTENCY= ON;
SET GLOBAL GTID_MODE= ON_PERMISSIVE;

# Resume the GTID-violating statement.
--let $suppress_error_number= ER_GTID_UNSAFE_CREATE_SELECT
--source include/execute_from_sync_point_with_err.inc

SET GLOBAL GTID_MODE= OFF_PERMISSIVE;
SET GLOBAL ENFORCE_GTID_CONSISTENCY= OFF;
SET GLOBAL GTID_MODE= OFF;
