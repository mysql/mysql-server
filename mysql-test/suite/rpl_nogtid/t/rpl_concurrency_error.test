###############################################################################
#BUG#44581 Slave stops when transaction with non-transactional table gets
#lock wait timeout
#
# In STMT and MIXED modes, a statement that changes both non-transactional and
# transactional tables must be written to the binary log whenever there are
# changes to non-transactional tables. This means that the statement gets into
# the # binary log even when the changes to the transactional tables fail. In
# particular, in the presence of a failure such statement is annotated with the
# error number and wrapped in a begin/rollback. On the slave, while applying
# the statement, it is expected the same failure and the rollback prevents the
# transactional changes to be persisted.

# This test aims to verify if a statement that updates both transactional and
# non-transacitonal tables and fails due to concurrency problems is correctly
# processed by the slave in the sense that the statements get into the binary
# log, the error is ignored and only the non-transactional tables are changed.
###############################################################################

--source include/not_group_replication_plugin.inc
--source include/force_myisam_default.inc
--source include/have_myisam.inc
--source include/have_binlog_format_statement.inc
--source include/master-slave.inc

call mtr.add_suppression("Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT");

--echo ########################################################################
--echo #                             Environment
--echo ########################################################################
connection master;

CREATE TABLE t (i INT, PRIMARY KEY(i), f CHAR(8)) engine = Innodb;
CREATE TABLE n (d DATETIME, f CHAR(32)) engine = MyIsam;

DELIMITER |;
CREATE TRIGGER tr AFTER UPDATE ON t FOR EACH ROW 
BEGIN 
  INSERT INTO n VALUES ( now(), concat( 'updated t: ', old.f, ' -> ', new.f ) ); 
END |
DELIMITER ;|

INSERT INTO t VALUES (4,'black'), (2,'red'), (3,'yelow'), (1,'cyan');

connect (conn1, 127.0.0.1,root,,);
connect (conn2, 127.0.0.1,root,,);

--echo ########################################################################
--echo #                     Testing ER_LOCK_WAIT_TIMEOUT
--echo ########################################################################

let $type=2;

while ($type)
{
  let $binlog_start= query_get_value("SHOW MASTER STATUS", Position, 1);
  connection conn1;
  if ($type == 2)
  {
    SET AUTOCOMMIT = 1;
    BEGIN;
  }
  if ($type == 1)
  {
    SET AUTOCOMMIT = 0;
  }
  eval UPDATE t SET f = 'yellow $type' WHERE i = 3;
  
  connection conn2;
  if ($type == 2)
  {
    SET AUTOCOMMIT = 1;
    BEGIN;
  }
  if ($type == 1)
  {
    SET AUTOCOMMIT = 0;
  }
  --error ER_LOCK_WAIT_TIMEOUT
  eval UPDATE IGNORE t SET f = 'magenta $type' WHERE f = 'red';
  eval INSERT INTO t VALUES (5 + ($type * 10),"brown");
  INSERT INTO n VALUES (now(),"brown");
  
  connection conn1;
  COMMIT;
  
  connection conn2;
  ROLLBACK;
  --source include/show_binlog_events.inc

  let $binlog_start= query_get_value("SHOW MASTER STATUS", Position, 1);
  connection conn1;
  if ($type == 2)
  {
    SET AUTOCOMMIT = 1;
    BEGIN;
  }
  if ($type == 1)
  {
    SET AUTOCOMMIT = 0;
  }
  eval UPDATE t SET f = 'gray $type' WHERE i = 3;
  
  connection conn2;
  if ($type == 2)
  {
    SET AUTOCOMMIT = 1;
    BEGIN;
  }
  if ($type == 1)
  {
    SET AUTOCOMMIT = 0;
  }
  --error ER_LOCK_WAIT_TIMEOUT
  eval UPDATE IGNORE t SET f = 'dark blue $type' WHERE f = 'red';
  eval INSERT INTO t VALUES (6 + ($type * 10),"brown");
  INSERT INTO n VALUES (now(),"brown");
  
  connection conn1;
  COMMIT;
  
  connection conn2;
  COMMIT;
  --source include/show_binlog_events.inc
  
  dec $type;
}

connection master;
--source include/sync_slave_sql_with_master.inc

let $rpl_diff_statement= SELECT * FROM t order by i;
source include/rpl_diff.inc;

let $rpl_diff_statement= SELECT * FROM n order by d, f;
source include/rpl_diff.inc;

--echo ########################################################################
--echo #                                Cleanup
--echo ########################################################################

connection master;
DROP TRIGGER tr;
DROP TABLE t;
DROP TABLE n;

--source include/sync_slave_sql_with_master.inc

connection master;
disconnect conn1;
disconnect conn2;
--source include/rpl_end.inc
