# We use a separate test wrapper for engines not supporting native partitioning
# since the test results will be different due to deprecation warnings. This test
# expects to either be executed directly with InnoDB as default engine, or to be
# executed indirectly by being included in a test wrapper  setting the ENGINE
# variable.
--disable_warnings
if (!$ENGINE)
{
  let $ENGINE=`SELECT variable_value FROM performance_schema.global_variables
               WHERE variable_name = 'DEFAULT_STORAGE_ENGINE'`;
  if ($ENGINE != "InnoDB")
  {
    skip Engines not supporting native partitioning are tested using a test wrapper;
  }
}
--enable_warnings

--disable_warnings
DROP TABLE IF EXISTS t1;
--enable_warnings
 CREATE TABLE t1 ( c1 INTEGER NOT NULL PRIMARY KEY, c2 CHAR(10)) PARTITION BY RANGE (c1) (
    PARTITION p0 VALUES LESS THAN (100),
    PARTITION p1 VALUES LESS THAN (200),
    PARTITION p2 VALUES LESS THAN (300),
    PARTITION p3 VALUES LESS THAN (400),
    PARTITION p4 VALUES LESS THAN (500),
    PARTITION p5 VALUES LESS THAN MAXVALUE);
SHOW TABLES; 
INSERT INTO t1 VALUES(0,'abc'),(100,'abc'),(200,'abc'),(300,'abc'),(400,'abc');
SELECT * FROM t1 ORDER BY c1;
--replace_result $ENGINE ENGINE 
SHOW CREATE TABLE t1;
--disable_result_log
#the output depends on engine (engine dependent)
ALTER TABLE t1 OPTIMIZE PARTITION p1,p2;
--enable_result_log
SELECT * FROM t1 ORDER BY c1;
--replace_result $ENGINE ENGINE 
 SHOW CREATE TABLE t1;
 DROP TABLE t1; SHOW TABLES;

