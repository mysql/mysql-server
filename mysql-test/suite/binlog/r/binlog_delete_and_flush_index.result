RESET MASTER;
CREATE TABLE t1 (a int);
### assertion: index file contains regular entries
SET @index=LOAD_FILE('MYSQLTEST_VARDIR/mysqld.1/data//binlog.index');
SELECT @index;
@index
binlog.000001

### assertion: show original binlogs
show binary logs;
Log_name	File_size	Encrypted
binlog.000001	#	#
### assertion: binlog contents from regular entries
include/show_binlog_events.inc
Log_name	Pos	Event_type	Server_id	End_log_pos	Info
binlog.000001	#	Query	#	#	use `test`; CREATE TABLE t1 (a int)
FLUSH LOGS;
### assertion: index file contains renamed binlog and the new one
SET @index=LOAD_FILE('MYSQLTEST_VARDIR/mysqld.1/data//binlog.index');
SELECT @index;
@index
binlog-b34582.000001
binlog.000002

### assertion: original binlog content still exists, despite we
###            renamed and changed the index file 
include/show_binlog_events.inc
Log_name	Pos	Event_type	Server_id	End_log_pos	Info
binlog-b34582.000001	#	Query	#	#	use `test`; CREATE TABLE t1 (a int)
### assertion: user changed binlog index shows correct entries
show binary logs;
Log_name	File_size	Encrypted
binlog-b34582.000001	#	#
binlog.000002	#	#
DROP TABLE t1;
### assertion: purging binlogs up to binlog created after instrumenting index file should work
PURGE BINARY LOGS TO 'binlog.000002';
### assertion: show binary logs should only contain latest binlog
show binary logs;
Log_name	File_size	Encrypted
binlog.000002	#	#
### assertion: assert that binlog files were indeed purged (using file_exists calls)
### assertion: assert that not purged binlog file exists
### assertion: show index file contents and these should match show binary logs issued above
SET @index=LOAD_FILE('MYSQLTEST_VARDIR/mysqld.1/data//binlog.index');
SELECT @index;
@index
binlog.000002

RESET MASTER;
