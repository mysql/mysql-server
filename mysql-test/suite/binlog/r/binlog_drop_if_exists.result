RESET MASTER;
DROP PROCEDURE IF EXISTS db_bug_13684.p;
DROP FUNCTION IF EXISTS db_bug_13684.f;
DROP TRIGGER IF EXISTS db_bug_13684.tr;
DROP VIEW IF EXISTS db_bug_13684.v;
DROP EVENT IF EXISTS db_bug_13684.e;
DROP TABLE IF EXISTS db_bug_13684.t;
DROP DATABASE IF EXISTS db_bug_13684;
include/show_binlog_events.inc
Log_name	Pos	Event_type	Server_id	End_log_pos	Info
binlog.000001	#	Query	#	#	use `test`; DROP PROCEDURE IF EXISTS db_bug_13684.p
binlog.000001	#	Query	#	#	use `test`; DROP FUNCTION IF EXISTS db_bug_13684.f
binlog.000001	#	Query	#	#	use `test`; DROP TRIGGER IF EXISTS db_bug_13684.tr
binlog.000001	#	Query	#	#	use `test`; DROP VIEW IF EXISTS db_bug_13684.v
binlog.000001	#	Query	#	#	use `test`; DROP EVENT IF EXISTS db_bug_13684.e
binlog.000001	#	Query	#	#	use `test`; DROP TABLE IF EXISTS `db_bug_13684`.`t` /* generated by server */
binlog.000001	#	Query	#	#	DROP DATABASE IF EXISTS db_bug_13684
CREATE DATABASE db_bug_13684;
CREATE TABLE db_bug_13684.t (a int);
CREATE EVENT db_bug_13684.e
ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 HOUR
DO
UPDATE db_bug_13684.t SET a = a + 1;
CREATE VIEW db_bug_13684.v 
AS SELECT * FROM db_bug_13684.t;
CREATE TRIGGER db_bug_13684.tr BEFORE INSERT ON db_bug_13684.t
FOR EACH ROW BEGIN
END;
CREATE PROCEDURE db_bug_13684.p (OUT p1 INT)
BEGIN
END;
CREATE FUNCTION db_bug_13684.f (s CHAR(20))
RETURNS CHAR(50) DETERMINISTIC
RETURN s;
include/show_binlog_events.inc
Log_name	Pos	Event_type	Server_id	End_log_pos	Info
binlog.000001	#	Query	#	#	use `test`; DROP PROCEDURE IF EXISTS db_bug_13684.p
binlog.000001	#	Query	#	#	use `test`; DROP FUNCTION IF EXISTS db_bug_13684.f
binlog.000001	#	Query	#	#	use `test`; DROP TRIGGER IF EXISTS db_bug_13684.tr
binlog.000001	#	Query	#	#	use `test`; DROP VIEW IF EXISTS db_bug_13684.v
binlog.000001	#	Query	#	#	use `test`; DROP EVENT IF EXISTS db_bug_13684.e
binlog.000001	#	Query	#	#	use `test`; DROP TABLE IF EXISTS `db_bug_13684`.`t` /* generated by server */
binlog.000001	#	Query	#	#	DROP DATABASE IF EXISTS db_bug_13684
binlog.000001	#	Query	#	#	CREATE DATABASE db_bug_13684
binlog.000001	#	Query	#	#	use `test`; CREATE TABLE db_bug_13684.t (a int)
binlog.000001	#	Query	#	#	use `test`; CREATE DEFINER=`root`@`localhost` EVENT db_bug_13684.e
ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 HOUR
DO
UPDATE db_bug_13684.t SET a = a + 1
binlog.000001	#	Query	#	#	use `test`; CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `db_bug_13684`.`v` AS SELECT * FROM db_bug_13684.t
binlog.000001	#	Query	#	#	use `test`; CREATE DEFINER=`root`@`localhost` TRIGGER db_bug_13684.tr BEFORE INSERT ON db_bug_13684.t
FOR EACH ROW BEGIN
END
binlog.000001	#	Query	#	#	use `test`; CREATE DEFINER=`root`@`localhost` PROCEDURE `db_bug_13684`.`p`(OUT p1 INT)
BEGIN
END
binlog.000001	#	Query	#	#	use `test`; CREATE DEFINER=`root`@`localhost` FUNCTION `db_bug_13684`.`f`(s CHAR(20)) RETURNS char(50) CHARSET utf8mb4
    DETERMINISTIC
RETURN s
DROP PROCEDURE IF EXISTS db_bug_13684.p;
DROP FUNCTION IF EXISTS db_bug_13684.f;
DROP TRIGGER IF EXISTS db_bug_13684.tr;
DROP VIEW IF EXISTS db_bug_13684.v;
DROP EVENT IF EXISTS db_bug_13684.e;
DROP TABLE IF EXISTS db_bug_13684.t;
DROP DATABASE IF EXISTS db_bug_13684;
include/show_binlog_events.inc
Log_name	Pos	Event_type	Server_id	End_log_pos	Info
binlog.000001	#	Query	#	#	use `test`; DROP PROCEDURE IF EXISTS db_bug_13684.p
binlog.000001	#	Query	#	#	use `test`; DROP FUNCTION IF EXISTS db_bug_13684.f
binlog.000001	#	Query	#	#	use `test`; DROP TRIGGER IF EXISTS db_bug_13684.tr
binlog.000001	#	Query	#	#	use `test`; DROP VIEW IF EXISTS db_bug_13684.v
binlog.000001	#	Query	#	#	use `test`; DROP EVENT IF EXISTS db_bug_13684.e
binlog.000001	#	Query	#	#	use `test`; DROP TABLE IF EXISTS `db_bug_13684`.`t` /* generated by server */
binlog.000001	#	Query	#	#	DROP DATABASE IF EXISTS db_bug_13684
binlog.000001	#	Query	#	#	CREATE DATABASE db_bug_13684
binlog.000001	#	Query	#	#	use `test`; CREATE TABLE db_bug_13684.t (a int)
binlog.000001	#	Query	#	#	use `test`; CREATE DEFINER=`root`@`localhost` EVENT db_bug_13684.e
ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 1 HOUR
DO
UPDATE db_bug_13684.t SET a = a + 1
binlog.000001	#	Query	#	#	use `test`; CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `db_bug_13684`.`v` AS SELECT * FROM db_bug_13684.t
binlog.000001	#	Query	#	#	use `test`; CREATE DEFINER=`root`@`localhost` TRIGGER db_bug_13684.tr BEFORE INSERT ON db_bug_13684.t
FOR EACH ROW BEGIN
END
binlog.000001	#	Query	#	#	use `test`; CREATE DEFINER=`root`@`localhost` PROCEDURE `db_bug_13684`.`p`(OUT p1 INT)
BEGIN
END
binlog.000001	#	Query	#	#	use `test`; CREATE DEFINER=`root`@`localhost` FUNCTION `db_bug_13684`.`f`(s CHAR(20)) RETURNS char(50) CHARSET utf8mb4
    DETERMINISTIC
RETURN s
binlog.000001	#	Query	#	#	use `test`; DROP PROCEDURE IF EXISTS db_bug_13684.p
binlog.000001	#	Query	#	#	use `test`; DROP FUNCTION IF EXISTS db_bug_13684.f
binlog.000001	#	Query	#	#	use `test`; DROP TRIGGER IF EXISTS db_bug_13684.tr
binlog.000001	#	Query	#	#	use `test`; DROP VIEW IF EXISTS db_bug_13684.v
binlog.000001	#	Query	#	#	use `test`; DROP EVENT IF EXISTS db_bug_13684.e
binlog.000001	#	Query	#	#	use `test`; DROP TABLE IF EXISTS `db_bug_13684`.`t` /* generated by server */
binlog.000001	#	Query	#	#	DROP DATABASE IF EXISTS db_bug_13684
