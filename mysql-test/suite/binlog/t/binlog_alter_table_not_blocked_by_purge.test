# === Purpose ===
# Check ALTER TABLE operation can be executed with PURGE BINARY LOGS.
#
# === Requirements ===
# R1. ALTER TABLE can be executed with PURGE BINARY LOGS statement.
#
# === Implementation ===
# 1. Create table
# 2. Run PURGE BINARY LOGS statement but stop on a sync point
# 3. Check ALTER TABLE statement can be executed
# 4. Cleanup
#
# === References ===
#
# Bug#35342521	Binary log purge should hold IX backup lock
#
--source include/have_debug_sync.inc
--source include/have_binlog_format_row.inc

--echo #
--echo # Initialization
--echo #

RESET MASTER;
CREATE TABLE t1 (c1 INT PRIMARY KEY) SECONDARY_ENGINE rapid;

--let $binlog_file = query_get_value(SHOW MASTER STATUS, File, 1)
FLUSH BINARY LOGS;
--replace_column 2 SIZE
SHOW BINARY LOGS;

--echo #
--echo # Run PURGE BINARY LOGS in separate connection
--echo #

--connect (con1, localhost, root,,)

--let $rpl_connection_name = default
--source include/rpl_connection.inc

--eval PURGE BINARY LOGS TO '$binlog_file'
--let $statement_connection = con1
--let $statement = PURGE BINARY LOGS TO '$binlog_file'
--let $sync_point = before_purge_logs
--source include/execute_to_sync_point.inc

--echo #
--echo # Check ALTER TABLE statement can be executed
--echo #

--disable_warnings
ALTER TABLE t1 SECONDARY_LOAD;
--enable_warnings

--echo #
--echo # Continue PURGE BINARY LOGS statement
--echo #

--source include/execute_from_sync_point.inc

--echo #
--echo # Cleanup
--echo #

DROP TABLE t1;
