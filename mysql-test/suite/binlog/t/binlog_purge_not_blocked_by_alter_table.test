# === Purpose ===
# Check PURGE BINARY LOGS operation can be executed with ALTER TABLE.
#
# === Requirements ===
# R1. PURGE BINARY LOGS can be executed in parallel with ALTER TABLE statement.
#
# === Implementation ===
# 1. Create table
# 2. Run ALTER TABLE statement but stop on a sync point
# 3. Check PURGE BINARY LOGS statement can be executed in parallel
#    with ALTER TABLE
# 4. Cleanup
#
# === References ===
#
# Bug#35342521	Binary log purge should hold IX backup lock
#
--source include/have_debug_sync.inc
--source include/have_binlog_format_row.inc

--echo #
--echo # Initialization
--echo #

RESET MASTER;
CREATE TABLE t1 (c1 INT PRIMARY KEY) SECONDARY_ENGINE rapid;

--let $binlog_file = query_get_value(SHOW MASTER STATUS, File, 1)
FLUSH BINARY LOGS;
--replace_column 2 SIZE
SHOW BINARY LOGS;

--echo #
--echo # Run ALTER TABLE in separate connection
--echo #

--connect (con1, localhost, root,,)

--let $rpl_connection_name = default
--source include/rpl_connection.inc

--let $statement_connection = con1
--let $statement = ALTER TABLE t1 SECONDARY_LOAD
--let $sync_point = before_secondary_engine_load_table
--source include/execute_to_sync_point.inc

--echo #
--echo # Check PURGE BINARY LOGS can be executed
--echo #

--replace_result $binlog_file BINLOG_FILE
--eval PURGE BINARY LOGS TO '$binlog_file'

--echo #
--echo # Continue ALTER TABLE statement
--echo #

--disable_warnings
--source include/execute_from_sync_point.inc
--enable_warnings

--echo #
--echo # Cleanup
--echo #

DROP TABLE t1;
