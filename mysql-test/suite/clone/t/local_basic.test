# Test clone command

--source include/have_example_plugin.inc
--source ../include/clone_connection_begin.inc
--let $CLONE_DATADIR = $MYSQL_TMP_DIR/data_new

--disable_query_log
call mtr.add_suppression("\\[Warning\\] .*MY-\\d+.* Non innodb table: .* is not cloned and is empty.");
call mtr.add_suppression("\\[Warning\\] .*MY-\\d+.* Clone removing all user data for provisioning: .*");
--enable_query_log

CREATE TABLE t1(col1 INT PRIMARY KEY, col2 char(64), FULLTEXT KEY fts_index(col2));

INSERT INTO t1 VALUES(10, 'clone row 1');
INSERT INTO t1 VALUES(20, 'clone row 2');
INSERT INTO t1 VALUES(30, 'clone row 3');

SELECT * from t1 ORDER BY col1;

SELECT count(*) FROM mysql.general_log;
SELECT count(*) FROM mysql.slow_log;

# Create MyIsam and CSV tables in common schema
CREATE TABLE t_myisam(col1 INT PRIMARY KEY, col2 char(64)) ENGINE=MyISAM;
INSERT INTO t_myisam VALUES(10, 'myisam not cloned row 1');
SELECT * from t_myisam ORDER BY col1;

CREATE TABLE t_csv(col1 INT NOT NULL, col2 char(64) NOT NULL) ENGINE=CSV;
INSERT INTO t_csv VALUES(10, 'csv not cloned row 1');
SELECT * from t_csv ORDER BY col1;

# Create MyIsam and CSV tables in separate schema
CREATE SCHEMA non_innodb;
CREATE TABLE non_innodb.t_myisam(col1 INT PRIMARY KEY, col2 char(64)) ENGINE=MyISAM;
INSERT INTO non_innodb.t_myisam VALUES(10, 'myisam not cloned row 1');
INSERT INTO non_innodb.t_myisam VALUES(20, 'myisam not cloned row 2');
INSERT INTO non_innodb.t_myisam VALUES(30, 'myisam not cloned row 3');
SELECT * from non_innodb.t_myisam ORDER BY col1;

CREATE TABLE non_innodb.t_csv(col1 INT NOT NULL, col2 char(64) NOT NULL) ENGINE=CSV;
INSERT INTO non_innodb.t_csv VALUES(10, 'csv not cloned row 1');
INSERT INTO non_innodb.t_csv VALUES(20, 'csv not cloned row 2');
INSERT INTO non_innodb.t_csv VALUES(30, 'csv not cloned row 3');
SELECT * from non_innodb.t_csv ORDER BY col1;

# Create MyIsam, CSV and InnoDB tables in separate schema, set it to read only
CREATE SCHEMA schema_read_only;
CREATE TABLE schema_read_only.t_myisam(col1 INT PRIMARY KEY, col2 char(64))
  ENGINE=MyISAM;
INSERT INTO schema_read_only.t_myisam VALUES(10, 'myisam not cloned row 1');
INSERT INTO schema_read_only.t_myisam VALUES(20, 'myisam not cloned row 2');
INSERT INTO schema_read_only.t_myisam VALUES(30, 'myisam not cloned row 3');
SELECT * from schema_read_only.t_myisam ORDER BY col1;

CREATE TABLE schema_read_only.t_csv(col1 INT NOT NULL, col2 char(64) NOT NULL)
  ENGINE=CSV;
INSERT INTO schema_read_only.t_csv VALUES(10, 'csv not cloned row 1');
INSERT INTO schema_read_only.t_csv VALUES(20, 'csv not cloned row 2');
INSERT INTO schema_read_only.t_csv VALUES(30, 'csv not cloned row 3');
SELECT * from schema_read_only.t_csv ORDER BY col1;

CREATE TABLE schema_read_only.t_innodb(col1 INT PRIMARY KEY, col2 char(64))
  ENGINE=InnoDB;
INSERT INTO schema_read_only.t_innodb VALUES(10, 'innodb cloned row 1');
INSERT INTO schema_read_only.t_innodb VALUES(20, 'innodb cloned row 2');
INSERT INTO schema_read_only.t_innodb VALUES(30, 'innodb cloned row 3');
SELECT * from schema_read_only.t_innodb ORDER BY col1;

ALTER SCHEMA schema_read_only READ ONLY=1;

--echo #BEGIN Bug 32199611: CLONE PLUGIN INSTALLATION FAILS IN PFS TABLE CREATION
# We would need to remove it once this deprecated variable is removed. Currently
# it is required for clone to work with this variable as some users are using it.
SET LOCAL explicit_defaults_for_timestamp = OFF;
SHOW VARIABLES LIKE 'explicit_defaults_for_timestamp';

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

UNINSTALL PLUGIN clone;
SET LOCAL explicit_defaults_for_timestamp = default;
--echo #End Bug 32199611: CLONE PLUGIN INSTALLATION FAILS IN PFS TABLE CREATION

# Install Clone Plugin
--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

# Install optional dynamic example plugin
--replace_result $EXAMPLE_PLUGIN EXAMPLE_PLUGIN
--eval INSTALL PLUGIN example SONAME '$EXAMPLE_PLUGIN'

SELECT PLUGIN_NAME, PLUGIN_STATUS FROM INFORMATION_SCHEMA.PLUGINS
WHERE PLUGIN_NAME LIKE '%clone%';

if ($skip_space_validation) {
  # Bug#32354908 CLONE DONOR'S INNODB_VALIDATE_TABLESPACE_PATHS=OFF LEADS ER_TABLESPACE_MISSING
  # Restart DB with tablespace validation skipped.
  --source ../include/clone_connection_end.inc
  --let restart_parameters="restart: --skip-innodb-validate-tablespace-paths"
  --source include/restart_mysqld.inc
  --source ../include/clone_connection_begin.inc
}

# Clone data
--connection clone_conn_1
--source ../include/clone_command.inc

if (!$clone_remote_replace) {
  --connection default
  # Restart server on cloned data directory
  --replace_result $CLONE_DATADIR CLONE_DATADIR
  --let restart_parameters="restart: --datadir=$CLONE_DATADIR"
  --source include/restart_mysqld.inc
}

# Validate data
SELECT * from t1 ORDER BY col1;
INSERT INTO t1 VALUES(40, 'clone row 4');
SELECT * from t1 ORDER BY col1;

# Check MyISAM and CSV table data
INSERT INTO t_myisam VALUES(40, 'myisam not cloned row 4');
SELECT * from t_myisam ORDER BY col1;

INSERT INTO t_csv VALUES(40, 'csv not cloned row 4');
SELECT * from t_csv ORDER BY col1;

INSERT INTO non_innodb.t_myisam VALUES(40, 'myisam not cloned row 4');
SELECT * from non_innodb.t_myisam ORDER BY col1;

INSERT INTO non_innodb.t_csv VALUES(40, 'csv not cloned row 4');
SELECT * from non_innodb.t_csv ORDER BY col1;

# Check tables in read only schema
--error ER_SCHEMA_READ_ONLY
INSERT INTO schema_read_only.t_myisam VALUES(40, 'myisam not cloned row 4');
SELECT * from schema_read_only.t_myisam ORDER BY col1;

--error ER_SCHEMA_READ_ONLY
INSERT INTO schema_read_only.t_csv VALUES(40, 'csv not cloned row 4');
SELECT * from schema_read_only.t_csv ORDER BY col1;

--error ER_SCHEMA_READ_ONLY
INSERT INTO schema_read_only.t_innodb VALUES(40, 'innodb cloned row 4');
SELECT * from schema_read_only.t_innodb ORDER BY col1;

SHOW CREATE SCHEMA schema_read_only;

# Validate query log tables;
SELECT count(*) FROM mysql.general_log;
SELECT count(*) FROM mysql.slow_log;

SET GLOBAL general_log = ON;
SET GLOBAL slow_query_log = ON;

#Cleanup
if (!$clone_remote_replace) {
  --let restart_parameters="restart:"
  --source include/restart_mysqld.inc
}
--connection default

SELECT * from t1 ORDER BY col1;

DROP TABLE t1;

DROP TABLE t_myisam;
DROP TABLE t_csv;

DROP TABLE non_innodb.t_myisam;
DROP TABLE non_innodb.t_csv;

DROP SCHEMA non_innodb;

ALTER SCHEMA schema_read_only READ ONLY=0;
DROP SCHEMA schema_read_only;

if (!$clone_remote_replace) {
  --force-rmdir $CLONE_DATADIR
}

UNINSTALL PLUGIN example;

# Clean recipient by cloning the cleaned up donor
if ($clone_remote_replace) {
  --connection clone_conn_1
  --let $clone_err = ER_SCHEMA_READ_ONLY
  --source ../include/clone_command.inc
  --let $clone_err = 0

  ALTER SCHEMA schema_read_only READ ONLY=0;
  --source ../include/clone_command.inc
}
--source ../include/clone_connection_end.inc

UNINSTALL PLUGIN clone;

--echo #
--echo # BUG#34828542: P_S.clone_status.gtid_executed does not have enough
--echo #               column size
--echo #

--echo # Install Plugin
--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

--echo # Test case set up.
SET @gtid_next_saved = @@SESSION.GTID_NEXT;
SET @gtid_mode_saved = @@GLOBAL.GTID_MODE;
SET @enforce_gtid_consistency_saved = @@GLOBAL.ENFORCE_GTID_CONSISTENCY;

SET @@GLOBAL.ENFORCE_GTID_CONSISTENCY=ON;
SET @@GLOBAL.GTID_MODE=OFF_PERMISSIVE;
SET @@GLOBAL.GTID_MODE=ON_PERMISSIVE;
SET @@GLOBAL.GTID_MODE=ON;

delimiter //;
CREATE PROCEDURE p1()
BEGIN
   DECLARE x INT DEFAULT 0;
   WHILE x <= 2000 DO
     SET gtid_next=CONCAT(UUID(),':',4000);
     COMMIT;
     SET x = x + 1;
   END WHILE;
END//

DELIMITER ;//
CALL p1();

--echo # Restore GTID settings.
SET @@SESSION.GTID_NEXT= @gtid_next_saved;
SET @@GLOBAL.GTID_MODE=ON_PERMISSIVE;
SET @@GLOBAL.GTID_MODE=OFF_PERMISSIVE;
SET @@GLOBAL.GTID_MODE= @gtid_mode_saved;
SET @@GLOBAL.ENFORCE_GTID_CONSISTENCY=@enforce_gtid_consistency_saved;

--echo # Clone database.
--source ../include/clone_command_send.inc
--reap

--echo # Restart cloned database
--replace_result $CLONE_DATADIR CLONE_DATADIR
--let restart_parameters="restart: --datadir=$CLONE_DATADIR"
--source include/restart_mysqld.inc

--echo # Check the length of gtid_executed > 4096 after bug fix.
SELECT length(gtid_executed) from performance_schema.clone_status;

#Cleanup
--let restart_parameters="restart:"
--source include/restart_mysqld.inc

DROP PROCEDURE p1;

UNINSTALL PLUGIN clone;

--force-rmdir $CLONE_DATADIR
