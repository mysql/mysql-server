################################################################################
# This test is to test if mysqld can dump a core without large memory buffers.
# We start the server with --innodb-buffer-pool-in-core-file ON, then
# we dynamically set it to OFF.
# Just to play with possible race conditions we switch it to ON and OFF one
# more time.
# Finally we cause core dump to happen.
# See opt file for the config:
#   (1) --innodb-buffer-pool-in-core-file is set to ON initially
#   (2) the buffer pool is set to be 1G so that with the large
#       memory buffers the core size would be much greater than 1.3GB
#       (the actual observed size is ~1.7GB for 64k and ~2.1GB for 4k pages)
#       and without them is less then 1.3GB
#       (the actual observed size is ~0.7GB for 64k and ~0.9GB for 4k pages)

# madvise MADV_DONTDUMP is non-posix extension available in Linux 3.4
--let $minimum_required_linux_version = 3.4
--source include/linux-version.inc

# Unless /proc/sys/kernel/core_pattern is core, it's not possible to locate core file to verify size
--source include/linux_core_pattern.inc

--source include/not_valgrind.inc

# ASAN disables core dumps
--source include/not_asan.inc

--echo # Shutdown server
--source include/shutdown_mysqld.inc

--echo # Restart server with --log-error
--exec echo "restart:--log-error=$MYSQLTEST_VARDIR/log/core_dump.err" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--enable_reconnect
--source include/wait_until_connected_again.inc

SELECT @@global.innodb_buffer_pool_in_core_file;
SET GLOBAL innodb_buffer_pool_in_core_file = OFF;
SELECT @@global.innodb_buffer_pool_in_core_file;
SET GLOBAL innodb_buffer_pool_in_core_file = ON;
SELECT @@global.innodb_buffer_pool_in_core_file;
SET GLOBAL innodb_buffer_pool_in_core_file = OFF;
SELECT @@global.innodb_buffer_pool_in_core_file;

--let $expected_max_core_size = 1300
--source include/mysqld_core_dump.inc
