# Check how the set of tablespace.open.<number> files (WL#9499) gets used.
# ------------------------------------------------------------------------
# 1. Per theory/design/... tablespaces.open.* files get written in case for
#    example some InnoDB table created with TABLESPACE = innodb_file_per_table
#    gets renamed.
#    We use here that case and check hereby if the system does exact that.
#    It is expected that n of such renames cause n of such writes.
# 2. The numbering of the tablespaces.open.<number> files must be dense
#    without holes. 1, 2, 3, ....
# 3. The system might add a tablespaces.open.<number> file but it must never
# 4. The use of the tablespaces.open.* files should be round robin.
#    --> Equal distribution of writes over the tablespaces.open.* files.
#    Checking for this property alone cannot not reveal if its really round
#    robin or all time round robin but
#    - the equal distribution persists independent of the number of renames
#      and the system does not know in advance how many renames will come
#    - derived tests show that it seems to be exact round robin.

--source include/have_debug.inc

# The current test uses some a bit complicated infrastructure which makes
# trouble with the not that perfect implemented sp|cursor|view - protocols.
--source include/no_cursor_protocol.inc
--source include/no_sp_protocol.inc
--source include/no_view_protocol.inc
#
# The InnoDB tables belonging to the test infrastructure require quite big
# key sizes, column file_name VARCHAR(511), which InnoDB page sizes like 2k
# or 4k do not allow.
# Solutions which would remove that limitation or look interesting have often
# unfortunate side effects or do not help:
#    We need up to ~ 10 characters for internal purposes.
# a) Don't use CHARSET UTF8 for the table.
#    Risky because the information_schema tables which are used as source
#    of data use UTF8. Trouble around string comparison is feared.
# b) Use a VARCHAR column significant smaller than 511 characters.
#    Risky because
#    - maximum observed:
#      Currently at least '<schema>/<table>' goes up till
#      ~ 70 characters for some performance_schema tables
#    - Maximum 1 in theory:
#      'table_schema' and 'table_name' in information_schema . table are
#      both VARCHAR(64) --> 128 characters
#    - Maximum 2 in theory:
#      'file_name' in information_schema . files is VARCHAR(4000).
#    - who knows what we will get in future
#      - in some standard MySQL setup (non user defined schemas and tables)
#      - in some test within the current suite
#        I guess the worst case is ~ 300
# c) Have all the infrastructure tables in some tablespace which has
#    its "own" sufficient big enough InnoDB page size no matter what the
#    default page size is. Impossible in 5.7.
# d) Use an artificial key instead of 'file_name', normalize the tables
#       and have "fun" with joins. IMHO just too expensive.
--source include/have_innodb_min_8k.inc


##### Script debugging
# Set $script_debug to 1 in case needing to debug the scripts.
# Far way more queries and result sets will get printed and so some diff to the
# file with expected results will show up.
# MTR will valuate the test run as "failed" because the file with the expected
# results was generated with $script_debug set to 0.
# Protocols of test runs with $script_debug set to 1 were neither
# - portable (MySQL setup on local box, especially paths)
# nor
# - reproducible (timestamps, LSN or MD5 values of it or ...)
let $script_debug= 0;


--disable_query_log
if($script_debug)
{
   --enable_query_log
}
--echo ### Build infrastructure typical for the current suite ------------ START
if (!$script_debug)
{
   --echo # In this phase printing of statements and responses is disabled.
   --disable_query_log
   --disable_result_log
}
let $MYSQLD_DATADIR=   `SELECT @@datadir`;
let MYSQLD_DATADIR=    $MYSQLD_DATADIR;

# LOAD_FILE might be run later per tablespace.open.<number> file.
# In order to be able to handle huge files of that kind max_allowed_packet
# must be big. The value will be flipped back at test end.
let $max_allowed_packet_save= `SELECT @@global.max_allowed_packet`;
SET GLOBAL max_allowed_packet = 1024 * 1024 * 64;

# We want to discover if the set of tablespace.open.<number> files gets changed
# by executing the query (usually DDL). In order to not measure the impact of
# the asynchronous InnoDB checkpoints we need to disable temporary the
# checkpointing.  The value will be flipped back at test end.
let $innodb_checkpoint_disabled_save= `SELECT @@innodb_checkpoint_disabled`;


# SCHEMA for keeping the infrastructure (base tables and views) of the test
# -------------------------------------------------------------------------
# Advantage: Simplified cleanup via dropping that schema at test end.
CREATE SCHEMA test_infrastructure;
USE test_infrastructure;

# Points within the work flow where data could be collected -- Variables
# ----------------------------------------------------------------------
# Before starting the query of interest.
let $point_before=    '   before';
# After the query of interest crashed the server and before restarting the
# server which invokes automatic crash recovery.
let $point_postcrash= 'postcrash';
# After finishing the query of interest without crash or after restarting the
# server (automatic crash recovery is finished).
let $point_after=     '    after';
# User defined point 'baseline' is optional and can be used for freezing one
# state we later refer to during testing.
let $point_baseline=  ' baseline';
let $point_list= $point_before, $point_postcrash, $point_after, $point_baseline;

# WL#9535 TODO: Remove this suppression. Currently, some mysql temporary
# tables could be left during a crashed ALTER TABLE.
let $p= InnoDB: Cannot load table db_test_a;
let $suppress_pattern= $p;
eval CALL mtr.add_suppression("$suppress_pattern");

# For the tablespaces.open.<number> files used by InnoDB.
eval
CREATE TABLE tablespaces_open_content (
   when_taken SET($point_list) NOT NULL,
   object VARCHAR(511),
   md5_value CHAR(32),
   PRIMARY KEY(object, when_taken)
) ENGINE = InnoDB CHARSET = UTF8;

CREATE TABLE tablespaces_open_files (
   object VARCHAR(511),
   counter1 INT DEFAULT 0,
   counter2 INT DEFAULT 0,
   PRIMARY KEY(object)
) ENGINE = InnoDB CHARSET = UTF8;

CREATE VIEW tablespaces_open_content_diff_a_b AS
SELECT '  added' AS state, object FROM tablespaces_open_content
WHERE when_taken = '    after'
  AND object NOT IN (SELECT object FROM tablespaces_open_content
                     WHERE when_taken = '   before')
UNION
SELECT 'dropped' AS state, object FROM tablespaces_open_content
WHERE when_taken = '   before'
  AND object NOT IN (SELECT object FROM tablespaces_open_content
                     WHERE when_taken = '    after')
UNION
SELECT 'changed' AS state, object FROM tablespaces_open_content AS t1
WHERE when_taken = '   before'
  AND EXISTS (SELECT 1 FROM tablespaces_open_content
              WHERE when_taken = '    after'
                AND object = t1.object AND md5_value <> t1.md5_value);


# tablespaces.open.* files get never dropped!
#    The AND EXISTS ... makes the view safe against too early use.
CREATE VIEW tsof_dropped AS
SELECT object FROM tablespaces_open_files
WHERE object NOT IN (SELECT object FROM tablespaces_open_content)
  AND EXISTS (SELECT 1 FROM tablespaces_open_content);
CREATE VIEW tsof_added AS
SELECT DISTINCT(object) FROM tablespaces_open_content
WHERE object NOT IN (SELECT object FROM tablespaces_open_files);

# Create a directory for storing copies of the tablespaces.open.* files
--mkdir $MYSQLTEST_VARDIR/tsof_copies


# Set the file system/OS specific line terminator
# -----------------------------------------------
# It gets currently used in suite/innodb/include/load_tsof_data.inc.
let $line_terminator= '\n';
if (`SELECT CONVERT(@@version_compile_os USING latin1)
         IN ('Win32','Win64','Windows') = 1`)
{
   # When running on WIN than the Perl sniplet above has produced the
   # WIN typic '\r\n' at line end.
   let $line_terminator= '\r\n';
}


--enable_query_log
--enable_result_log
--echo ### Build infrastructure typical for the current suite -------------- END

CREATE SCHEMA db_test_a;
CREATE TABLE db_test_a . t0 (col1 INT) TABLESPACE = innodb_file_per_table
ENGINE = InnoDB;
--disable_query_log
if($script_debug)
{
   --enable_query_log
}


# Collect the current state
let $when_taken= $point_before;
--source suite/innodb/include/load_tsof_data.inc
--disable_query_log
if($script_debug)
{
   --enable_query_log
}

SET GLOBAL innodb_log_checkpoint_now = ON;
SET GLOBAL innodb_checkpoint_disabled = 1;

# We are before beginning a sub test/beginning the measurement.
# So reset the columns "counter*" to 0.
UPDATE tablespaces_open_files SET counter1 = 0, counter2 = 0;
COMMIT;

let $rounds= 37;
let $t_num= 0;
let $t_num_up= 1;
let $has_failed= 0;
--echo # Run a big DDL round for the table "db_test_a . t0".
--echo #     RENAME TABLE t0 -> t1 -> ... -> <last_target_table_name>
--echo # Caused by using TABLESPACE = innodb_file_per_table tablespaces.open.*
--echo # files need to be used.
if(!$script_debug)
{
  --echo # In this phase printing of statements and responses is disabled.
}
while ($t_num < $rounds)
{
   let $source_table= t$t_num;
   let $target_table= t$t_num_up;
   eval RENAME TABLE db_test_a . $source_table TO db_test_a . $target_table;
   let $when_taken= $point_after;
   --source suite/innodb/include/load_tsof_data.inc
   --disable_query_log
   # If enabled the next block allows to see which tablespaces.open.* file was
   # used for the last RENAME.
   # 2016-11 : It seems to be round robin and
   # - the number of the tablespaces.open.* file used first depends on
   #   server history since restart or similar ==> not good predictable
   # - the queue is like ..., min, min+1, ..., max-1, max, min, min+1, ...
   # - at some point of time some additional tablespaces.open.<old max + 1>
   #   might show up. This will not change the logics in the queue.
   if ($script_debug)
   {
      --enable_query_log
      SELECT * FROM tablespaces_open_content_diff_a_b
      WHERE state IN ('changed', 'added');
      --disable_query_log
   }
   # The BETWEEN $t_num_up AND $t_num_up + ... was introduced because of the
   # following observation (2016-11) during high load tests:
   # - In most cases only one tablespaces.open.* file was touched per one DDL
   #   and "Number of touches == number of finished loops" was valid.
   # - In rare cases two tablespaces.open.* files were touched per one DDL.
   #   Variants:
   #   - Two tablespaces.open.* files changed.
   #   - One tablespaces.open.* file changed and one added.
   #   Impact: Number of touches >= number of finished loops.
   # - When that happens in the 37 rounds if at all is unstable.
   #   Cases observed:
   #   - In first loop --> Minimal diff if any at all is 1!
   #   - In middle loop
   #   - In last loop
   # - After the fix the instability was no more met.
   # I guess that there is some natural reason ala InnoDB performs some
   # asynchronous action which requires that some tablespaces.open.* must
   # get touched exact for that action. Savepoint?
   # Such asynchronous actions are usually triggered by the amount of
   # - time elapsed since last action
   # - left over free resources (last action freed a lot)
   # - data requiring some flush somewhere in future (last action flushed)
   # Their number during running the current test depends most probably on
   # the number of loops finished. So some linear growth is quite likely.
   let $pass= `SELECT SUM(counter1) BETWEEN $t_num_up
               AND $t_num_up + 1
               FROM tablespaces_open_files`;
   # For debugging: Simulate an error
   if(0)
   {
      if($t_num == 10)
      {
         --echo # ERROR_INJECTION
         let $pass= 0;
      }
   }
   if (!$pass)
   {
      let $has_failed= 1;
      --echo # FAIL: The number of "touches" of tablespaces.open.* files does
      --echo #       not equal the number of DDLs + small overhead.
      # Enforce that we leave the loop
      let $rounds= 0;
   }
   let $pass= `SELECT MAX(counter2) BETWEEN MIN(counter2) AND MIN(counter2) + 1
               FROM tablespaces_open_files`;
   if (!$pass)
   {
      let $has_failed= 1;
      --echo # FAIL: The number of DDLs does not cause some equal distributed
      --echo #       number of touches of tablespaces.open.* files.
      --echo #       MAX(counter2) is NOT BETWEEN MIN(counter2)
      --echo #                                AND MIN(counter2) + 1
      # Enforce that we leave the loop
      let $rounds= 0;
   }
   # For excessive experimenting/observing
   if (0)
   {
      if(`SELECT COUNT(*) > 1 FROM tablespaces_open_content_diff_a_b
         WHERE state IN ('changed', 'added')`)
      {
         --echo # INFO: More than one touched tablespaces.open.* file found
         SELECT * FROM tablespaces_open_content_diff_a_b
         WHERE state IN ('changed', 'added');
         --echo # Number of DDLs(RENAME TABLE ...) executed        : $t_num_up
      }
   }
   inc $t_num;
   inc $t_num_up;

   eval
   DELETE FROM test_infrastructure . tablespaces_open_content
   WHERE when_taken = $point_before;
   eval
   UPDATE test_infrastructure . tablespaces_open_content
   SET when_taken = $point_before
   WHERE when_taken = $point_after;
   COMMIT;
}
--enable_query_log

let $print_details= $script_debug;
if ($has_failed)
{
   let $print_details= 1;
}
if($print_details)
{
   --echo # Test details =======================================
   --echo # Number of DDLs(RENAME TABLE ...) executed             : $t_num
   let $val= `SELECT SUM(counter1) FROM tablespaces_open_files`;
   --echo # Total (all files) number of tablespaces.open.* touches: $val
   let $val= `SELECT  MAX(counter2) FROM tablespaces_open_files`;
   --echo # Max number of touches per tablespaces.open.* per file : $val
   let $val= `SELECT  Min(counter2) FROM tablespaces_open_files`;
   --echo # Min number of touches per tablespaces.open.* per file : $val
   --echo # Aggregate bookkeeping table (tablespaces_open_files) -----
   SELECT SUM(counter1), MAX(counter2), MIN(counter2)
   FROM tablespaces_open_files;
   SELECT * FROM tablespaces_open_files ORDER BY file_name;
   --echo # Sub test bookkeeping table (tablespaces_open_content) ----
   SELECT * FROM tablespaces_open_content
   WHERE when_taken = 'after'
   ORDER BY file_name;
   --echo # tablespaces.open.* below data directory ------------------
   --list_files $MYSQLD_DATADIR/ tablespaces.open.*
}
if ($has_failed)
{
   exit;
}
if (!$has_failed)
{
   --echo # For all checks : PASS
   --echo # 1. Every RENAME causes that the set of tablespaces.open.* files gets
   --echo #    modified (modify such a file or rather rare add one).
   --echo # 2. No tablespaces.open.* file was ever deleted.
   --echo # 3. The numbering of tablespaces.open.* files is dense 1,2,...
   --echo # 4. The tablespaces.open.* files are used round robin.
}
--replace_result $target_table <last_target_table_name>
eval DROP TABLE db_test_a . $target_table;

--echo # Cleanup

--disable_query_log
if ($script_debug)
{
   --enable_query_log
}
USE test;
eval
SET GLOBAL max_allowed_packet = $max_allowed_packet_save;
eval
SET GLOBAL innodb_checkpoint_disabled = $innodb_checkpoint_disabled_save;
--disable_warnings
DROP SCHEMA IF EXISTS db_test_a;
DROP SCHEMA IF EXISTS db_test_b;
DROP SCHEMA test_infrastructure;
--enable_query_log
--remove_files_wildcard $MYSQLTEST_VARDIR/tsof_copies *
--rmdir $MYSQLTEST_VARDIR/tsof_copies


