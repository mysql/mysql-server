# Purpose
# -------
# 1. Check that the system behaves right during crash recovery after
#    - suffering from more or less bad physical writes into some
#      tablespaces.open.* file immediate followed by some server crash
#      Basically: Emulate effects of a power loss and some small temporary
#                 hardware failure.
#    - having had some server crash and missing all tablespaces.open.* files
#      Emulate a mistake of the user.
#    - having had some server crash and meeting outdated tablespaces.open.*
#      files
#      Emulate a mistake of the user.
#    regarding: Does the server come up with success or not.
#    I do not claim that all of the cases above must end with success.
# 2. Check that the system responds with the right notes, warnings and error
#    messages in the server error log depending on the case met.
#    Checking the presence of error log messages regarding defects of the
#    tablespaces.open.* files
#          not found , too small , unknown format
#    is first priority.
#    Checking the presence of other messages like
#       [Note] InnoDB: Tablespace file './db_test_a/t1.ibd' ID mismatch,
#                      expected 86 but found 102
#    is only nice to have.
#
# WARNING
# -------
# When improving or extending this test its easy to implement nice to have
# checks (see 2. above) and also make restart attempts without extra options
# at most places but such tests have a strong tendency to be unstable under
# high load.
# Please be aware of that the current test goes often without control over
# when InnoDB makes checkpoints and that has some dramatic impact if
# - the final result of crash recovery attempts without extra options
#   (Example: "--innodb-scan-directories=$MYSQLD_DATADIR") end up with
#   is that the server comes up or aborts.
#   Example for all tablespaces.open.* files unusable (missing or rotten)
#   and more an impression than some exact description:
#   InnoDB will "criticize" the state of the tablespaces.open.* files first.
#   Than recovering will be tried.
#   During the recovery process InnoDB might detect that it cannot progress
#   without valid data from at least one tablespaces.open.* file.
#   If that happens than we get an abort of the recovery and need to go
#   with "--innodb-scan-directories=$MYSQLD_DATADIR".
# - we have messages like
#      [Note] InnoDB: Tablespace file './db_test_a/t1.ibd' ID mismatch,
#                     expected <number> but found <other number>
#   or others or not at all.
# It could be tried to get control over the checkpointing via
#   SET GLOBAL innodb_log_checkpoint_now = ON;
#   SET GLOBAL innodb_checkpoint_disabled = 1;
# but that leads often to sideeffects like that the server aborts because
# there is no more free space in the log or similar.
#
# Hints
# -----
# 1. It is NOT the goal of the current test to cover all scenarios/DDLs where
#    tablespaces.open.* files get used and might be harmed like described
#    above. Just two main reasons:
#    - Cramming many purposes into one test makes the test huge and vulnerable
#      against mistakes in many areas outside of the current WL9499.
#    - As long as the implementation of the new data dictionary is not finished
#      we would suffer from many problems with known reason.
#    Therefore we use mostly the move of tables between tablespaces only!
# 2. "search_pattern*.inc" gets used and not "assert_grep.inc" because
#    the latter requires that we know the number of hits ($assert_count)
#    in advance. But during test development were several cases where the number
#    of hits was unstable but with guarantee > 0.
#    The use of "search_pattern.inc" for processing the server error log
#    forces to delete that log before the next restart attempt in order to get
#    rid of warnings, error, notes belonging to the previous server startup.
# 3. Certain "UPDATE db_test_a.t_aux SET col2 = .." (autocommit is on)
#    and also moves of tables to other tablespaces serve only to achieve that
#    InnoDB processes "tablespaces.open.*" files during restart.
#    During experimenting were cases where this did not happen.
# 4. The often used sequence CREATE TABLE, "test it", DROP TABLE might look
#    "oversized" because we could reuse that already created table.
#    But it ensures that any "test it" meets a "fresh" table and so we cannot
#    suffer from some previous not detected error. It is the task of other
#    tests to detect such errors.
#
################################################################################

# We use SET ... DEBUG ...
--source include/have_debug.inc

# With valgrind the test falls asleep after the first injected crash.
--source include/not_valgrind.inc

# The test is not compatible with binlogging
--source include/not_log_bin.inc

# In case you are interested in the full content of the server error logs than
# set script_debug to 1.
--let $script_debug= 0;

--echo ### Build infrastructure required for the current test ------------ START
# Half arbitrary decision to go with 'traditional'
SET SQL_MODE = 'traditional';

SET GLOBAL innodb_log_checkpoint_now = ON;

# SCHEMAs and a TABLESPACE used within the current test.
CREATE SCHEMA db_test_a;
CREATE TABLESPACE ts1 ADD DATAFILE 'ts1.ibd' Engine = InnoDB;
CREATE TABLE db_test_a.t_aux (col1 INT, col2 VARCHAR(100)) Engine = InnoDB;
let $flip_count= 0;
let $max_num= 10;
let $num= $max_num;
while($num)
{
   eval
   CREATE TABLE db_test_a.t_aux_$num (col1 INT)
   Engine = InnoDB TABLESPACE = ts1;
   eval
   INSERT INTO db_test_a.t_aux
   SET col2 = CONCAT('$flip_count-', REPEAT('z', 90)), col1 = $num;
   dec $num;
}
SHOW CREATE TABLE db_test_a.t_aux_10;

# There will be messages within the server error log which MTR needs to ignore
let $p= InnoDB: File '.*tablespaces.open..*' size is .*;
let $suppress_pattern= $p Must be at least;
eval CALL mtr.add_suppression("$suppress_pattern");
let $p= InnoDB: File '.*tablespaces.open..*' size is .*;
let $suppress_pattern= $p should be at least;
eval CALL mtr.add_suppression("$suppress_pattern");
# [ERROR] InnoDB: No space ID to filename mapping file found
let $p= InnoDB: No space ID to filename mapping file found;
let $suppress_pattern= $p;
eval CALL mtr.add_suppression("$suppress_pattern");
# WL#9535 TODO: Remove this suppression. Currently, some mysql temporary
# tables could be left during a crashed ALTER TABLE.
let $p= InnoDB: Cannot load table db_test_a;
let $suppress_pattern= $p;
eval CALL mtr.add_suppression("$suppress_pattern");

# Frequent used statements and messages
let $create_table= CREATE TABLE db_test_a . t1 (col1 INT NOT NULL)
                   ENGINE = 'InnoDB' TABLESPACE = innodb_file_per_table;
let $check_cmd= SHOW CREATE TABLE db_test_a . t1;
let $drop_standard_table= DROP TABLE db_test_a . t1;
let $ddl_cmd= ALTER TABLE db_test_a . t1 TABLESPACE = ts1;

--let $start_message= # Wait till the server crash is finished and the automatic
--let $start_message= $start_message restart with crash recovery has happened.
--let $comment_line0= # ========================================================
--let $comment_line1= # Restart with crash recovery

let $MYSQLD_DATADIR= `SELECT @@datadir`;
let $error_log= $MYSQLTEST_VARDIR/log/mysqld.1.err;
let SEARCH_FILE= $error_log;
let $tsof_copy_dir= $MYSQLTEST_VARDIR/tsof_copies;
--mkdir $tsof_copy_dir

--echo # Make backups of the existing tablespaces.open.* files.
--echo # We will use these files later.
--source suite/innodb/include/tablespacesopen_1.inc
# Attention:
# I had cases with SET GLOBAL innodb_checkpoint_disabled = 1; around begin of
# the test. And than the shutdown aborted.
--source ./include/shutdown_mysqld.inc
--copy_files_wildcard $MYSQLD_DATADIR $tsof_copy_dir tablespaces.open.*
--source include/start_mysqld.inc
SHOW CREATE TABLE db_test_a.t_aux_10;

--echo ### Build infrastructure required for the current test -------------- END


--echo $comment_line0
--echo # Restart after previous smooth shutdown.
--echo #    There is no valid tablespaces.open.*
--echo #    If we find one we use that to verify the location of the UNDO
--echo #    tablespaces. If we don't find one we don't verify the location
--echo #    of the undo tablespaces.
--echo # The server just comes up without error messages mentioning that state.
--echo #    No crash -> no look for tablespaces.open.* files
--source ./include/shutdown_mysqld.inc
--remove_files_wildcard $MYSQLD_DATADIR tablespaces.open.*
--remove_file $SEARCH_FILE
--source include/start_mysqld.inc
# The note which follows must be not found.
--let SEARCH_PATTERN= .* \[Note\] InnoDB: Starting crash recovery.
--source include/search_pattern.inc
# The note which follows must be found.
--let $p= .* \[Note\] InnoDB: Unable to read from '.*tablespaces.open.*',
--let SEARCH_PATTERN= $p the space ID to filename mapping file
--source include/search_pattern.inc
# The error message which follows must be found.
--let $p= .* \[ERROR\] InnoDB: No space ID to filename mapping file found
--let SEARCH_PATTERN= $p
--source include/search_pattern.inc


--echo $comment_line0
--echo # Restart after previous
--echo #    1. Have no open transaction
--echo #    2. Enforce making an InnnoDB checkpoint
--echo #    3. Kill of server
--echo #    There is no valid tablespaces.open.* file at all but we need none.
--echo # The server just comes up without error messages mentioning that state.
--echo #    The impact of crash is so minimal that InnoDB does detect it at all.
--echo #    -> no look for tablespaces.open.* files
SET GLOBAL innodb_log_checkpoint_now = ON;
--source include/expect_crash.inc
--source include/kill_mysqld.inc
--remove_files_wildcard $MYSQLD_DATADIR tablespaces.open.*
--remove_file $SEARCH_FILE
--source include/start_mysqld.inc
# The note which follows must be not found.
--let SEARCH_PATTERN= .* \[Note\] InnoDB: Starting crash recovery.
--source include/search_pattern.inc
# The note which follows must be not found.
--let $p= .* \[Note\] InnoDB: Unable to read from '.*tablespaces.open.*',
--let SEARCH_PATTERN= $p the space ID to filename mapping file
--source include/search_pattern.inc
# The error message which follows must be not found.
--let $p= .* \[ERROR\] InnoDB: No space ID to filename mapping file found
--let SEARCH_PATTERN= $p
--source include/search_pattern.inc


--echo $comment_line0
--echo $comment_line1
--echo #    There is no tablespaces.open.* file but we need at least one valid.
--echo #    A simple restart without extra options fails.
SET GLOBAL innodb_checkpoint_disabled = 1;
--source suite/innodb/include/tablespacesopen_1.inc
--source include/expect_crash.inc
--source include/kill_mysqld.inc
--remove_files_wildcard $MYSQLD_DATADIR tablespaces.open.*
--remove_file $SEARCH_FILE
--error 1
--exec $MYSQLD_CMD --restart > $error_log 2>&1
--echo # The restart attempt has failed like expected.
if($script_debug)
{
   --cat_file $SEARCH_FILE
   # The restart attempt above might have created some tablespaces.open.* file.
   # But that is not deterministic.
   --error 0, 2
   --exec ls -ld $MYSQLD_DATADIR/tablespaces.open.*
}
# The note which follows must be found.
--let SEARCH_PATTERN= .* \[Note\] InnoDB: Starting crash recovery.
--source include/search_pattern.inc
# The note which follows must be found.
--let $p= .* \[Note\] InnoDB: Unable to read from '.*tablespaces.open.*',
--let SEARCH_PATTERN= $p the space ID to filename mapping file
--source include/search_pattern.inc
# The error message which follows must be found.
--let $p= .* \[ERROR\] InnoDB: No space ID to filename mapping file found
--let SEARCH_PATTERN= $p
--source include/search_pattern.inc
# The next sequence is disabled because getting that message is unstable.
if(0)
{
# [ERROR] InnoDB: Could not find any file associated with the tablespace 62
--let $p= .* \[ERROR\] InnoDB: Could not find any file associated with
--let SEARCH_PATTERN= $p the tablespace .*
--source include/search_pattern.inc
}
--remove_file $SEARCH_FILE
# The restart attempt above might have created some tablespaces.open.* file.
# We remove it in order to make the test hopefully more deterministic.
--remove_files_wildcard $MYSQLD_DATADIR tablespaces.open.*
--let $restart_parameters= restart:--innodb-scan-directories=$MYSQLD_DATADIR
--replace_result $MYSQLD_DATADIR <MYSQLD_DATADIR>
--source include/start_mysqld.inc
--let $restart_parameters= restart
if($script_debug)
{
   --cat_file $SEARCH_FILE
   --error 0, 2
   --exec ls -ld $MYSQLD_DATADIR/tablespaces.open.*
}
# If the notes, warnings and error messages will show up again seems to depend
# on what InnoDb was able to achieve in the first restart attempt and this is
# unstable. So we do not check for them again.
SHOW CREATE TABLE db_test_a.t_aux_10;


--echo $comment_line0
--echo $comment_line1
--echo #    There is no tablespaces.open.* file but a restart with
--echo #       "--innodb-scan-directories=<MYSQLD_DATADIR>"
--echo #    reports that bad state and passes because it does not rely
--echo #    on at least one valid tablespaces.open.* file.
SET GLOBAL innodb_log_checkpoint_now = ON;
SET GLOBAL innodb_checkpoint_disabled = 1;
--source suite/innodb/include/tablespacesopen_1.inc
--source include/expect_crash.inc
--source include/kill_mysqld.inc
--remove_files_wildcard $MYSQLD_DATADIR tablespaces.open.*
--remove_file $SEARCH_FILE
--let $restart_parameters= restart:--innodb-scan-directories=$MYSQLD_DATADIR
--replace_result $MYSQLD_DATADIR <MYSQLD_DATADIR>
--source include/start_mysqld.inc
--let $restart_parameters= restart
if($script_debug)
{
   --cat_file $SEARCH_FILE
   --error 0, 2
   --exec ls -ld $MYSQLD_DATADIR/tablespaces.open.*
}
# The note which follows must be found.
--let SEARCH_PATTERN= .* \[Note\] InnoDB: Starting crash recovery.
--source include/search_pattern.inc
# The note which follows must be found.
--let $p= .* \[Note\] InnoDB: Unable to read from '.*tablespaces.open.*',
--let SEARCH_PATTERN= $p the space ID to filename mapping file
--source include/search_pattern.inc
# The error message which follows must be found.
--let $p= .* \[ERROR\] InnoDB: No space ID to filename mapping file found
--let SEARCH_PATTERN= $p
--source include/search_pattern.inc
SHOW CREATE TABLE db_test_a.t_aux_10;


--echo $comment_line0
--echo $comment_line1
--echo #    One of the tablespaces.open.* with complete rotten entry.
# Take care that we have two clean tablespaces.open.* files.
# If not we could end up with one not existing, the other rotten, the
# automatic crash recovery without extra options needs at least one valid
# end therefore fails.
SET GLOBAL innodb_log_checkpoint_now = ON;
SET GLOBAL innodb_checkpoint_disabled = 1;
--source suite/innodb/include/tablespacesopen_1.inc
if($script_debug)
{
   --error 0, 2
   --exec ls -ld $MYSQLD_DATADIR/tablespaces.open.*
}
eval $create_table;
--source include/expect_crash.inc
SET SESSION DEBUG = "+d,ib_tablespace_open_write_corrupt_0";
--error CR_SERVER_LOST
eval $ddl_cmd;
--remove_file $SEARCH_FILE
# So even one valid '.*tablespaces.open.*' is not sufficient.
--error 2
--exec $MYSQLD_CMD --restart > $error_log 2>&1
if($script_debug)
{
   --cat_file $SEARCH_FILE
   --exec ls -ld $MYSQLD_DATADIR/tablespaces.open.*
}
--echo # The restart attempt has failed like expected.
--echo # So even one valid '.*tablespaces.open.*' is not sufficient for success.
--let SEARCH_PATTERN= .* \[Note\] InnoDB: Starting crash recovery.
--source include/search_pattern.inc
# [ERROR] InnoDB: Unsupported file format 808530483 found in tablespace ID to
#                 filename mapping file: '.*tablespaces.open.2'. You can use
#                 --innodb-scan-directories to recover if the tablespaces.open.*
#                 files are unreadable or corrupt.
--let $p= .* \[ERROR\] InnoDB: Unsupported file format .* found in tablespace ID
--let $p= $p to filename mapping file: '.*tablespaces.open.*'.
--let $p= $p You can use --innodb-scan-directories to recover .*
--let SEARCH_PATTERN= $p
--source include/search_pattern.inc
# The next message is too rigorous.
# At least one '.*tablespaces.open.*' file is valid.
--let $p= .* \[ERROR\] \[FATAL\] InnoDB: Unable to read the space ID to
--let SEARCH_PATTERN= $p filename mapping file\(s\).
--source include/search_pattern.inc
--let SEARCH_PATTERN= .* \[ERROR\] InnoDB: Assertion failure: ut0ut.cc:
--source include/search_pattern.inc
--remove_file $SEARCH_FILE
--echo # The crash recovery fails even if
--echo #    "--innodb-scan-directories=<MYSQLD_DATADIR>"
--echo # is assigned as long as the tablespaces.open.* file with complete
--echo # rotten entry exists. So we delete all tablespaces.open.*.
--remove_files_wildcard $MYSQLD_DATADIR tablespaces.open.*
--let $restart_parameters= restart:--innodb-scan-directories=$MYSQLD_DATADIR
--replace_result $MYSQLD_DATADIR <MYSQLD_DATADIR>
--source include/start_mysqld.inc
--let $restart_parameters= restart
if($script_debug)
{
   --cat_file $SEARCH_FILE
   # The restart attempt above might have created some tablespaces.open.* file.
   # But that is not deterministic. So we will not check that.
   --error 0, 2
   --exec ls -ld $MYSQLD_DATADIR/tablespaces.open.*
}
eval $drop_standard_table;
SHOW CREATE TABLE db_test_a.t_aux_10;


--echo $comment_line0
--echo $comment_line1
--echo #    One of the tablespaces.open.* with incomplete header
--source suite/innodb/include/tablespacesopen_1.inc
eval $create_table;
--source include/expect_crash.inc
SET SESSION DEBUG = "+d,ib_tablespace_open_write_corrupt_1";
--error CR_SERVER_LOST
eval $ddl_cmd;
--remove_file $SEARCH_FILE
--source include/start_mysqld.inc
if($script_debug)
{
   --cat_file $SEARCH_FILE
   --error 0, 2
   --exec ls -ld $MYSQLD_DATADIR/tablespaces.open.*
}
# [Warning] InnoDB: File '.*tablespaces.open.2' size is 11 bytes.
#                   Must be at least 12 bytes
--let $p= .* \[Warning\] InnoDB: File '.*tablespaces.open.*' size is .* bytes.
--let $p= $p Must be at least .* bytes
--let SEARCH_PATTERN= $p
--echo # InnoDB warning about too small tablespaces.open.* file found in
--echo # server error log.
--source include/search_pattern.inc
eval $check_cmd;
eval $drop_standard_table;
SHOW CREATE TABLE db_test_a.t_aux_10;


--echo $comment_line0
--echo $comment_line1
--echo #   One of the tablespaces.open.* with incomplete data part
--source suite/innodb/include/tablespacesopen_1.inc
eval $create_table;
--source include/expect_crash.inc
SET SESSION DEBUG = "+d,ib_tablespace_open_write_corrupt_2";
--error CR_SERVER_LOST
eval $ddl_cmd;
--remove_file $SEARCH_FILE
--let $restart_parameters= restart
--source include/start_mysqld.inc
if($script_debug)
{
   --cat_file $SEARCH_FILE
   --error 0, 2
   --exec ls -ld $MYSQLD_DATADIR/tablespaces.open.*
}
#  [Warning] InnoDB: File '.*tablespaces.open.1' size is 1342 bytes,
#                    should be at least 1343 bytes
--let $p= .* \[Warning\] InnoDB: File '.*tablespaces.open.*' size is .* bytes,
--let $p= $p should be at least .* bytes
--let SEARCH_PATTERN= $p
--source include/search_pattern.inc
--echo # InnoDB warning about too small tablespaces.open.* file found in
--echo # server error log.
eval $check_cmd;
eval $drop_standard_table;
SHOW CREATE TABLE db_test_a.t_aux_10;


--echo $comment_line0
--echo $comment_line1
--echo #   Both tablespaces.open.* files are outdated.
--source suite/innodb/include/tablespacesopen_1.inc
eval $create_table;
eval $ddl_cmd;
--source include/expect_crash.inc
--source include/kill_mysqld.inc
--remove_files_wildcard $MYSQLD_DATADIR tablespaces.open.*
--copy_files_wildcard $tsof_copy_dir $MYSQLD_DATADIR tablespaces.open.*
--remove_file $SEARCH_FILE
--source include/start_mysqld.inc
if($script_debug)
{
   --cat_file $SEARCH_FILE
   --error 0, 2
   --exec ls -ld $MYSQLD_DATADIR/tablespaces.open.*
}
# There is no guarantee that the next error message shows up.
# Therefore the corresponding command sequence is disabled till some
# more reliable way is found.
if(0)
{
# [Note] InnoDB: Tablespace file './db_test_a/t1.ibd' ID mismatch,
#                expected 86 but found 102
--let $p= .* \[Note\] InnoDB: Tablespace file './db_test_a/t1.ibd' ID mismatch,
--let $p= $p expected .* but found .*
--let SEARCH_PATTERN= $p
--source include/search_pattern.inc
--echo # InnoDB note about Tablespace file './db_test_a/t1.ibd' ID mismatches
--echo # found in server error log.
# There were several tables db_test_a . t1 TABLESPACE innodb_file_per_table
# (--> './db_test_a/t1.ibd') created, moved to general tablespace t1 with
# success or crash, but all time finally dropped in history.
}
eval $check_cmd;
eval $drop_standard_table;
SHOW CREATE TABLE db_test_a.t_aux_10;


# Intentional sideeffect of the next sub test which follows:
# Most probably one of the current tablespaces.open.* files is exceptional evil.
# In order to avoid any thinkable bad impact on successing tests we take care
# to get with guarantee new usable tablespaces.open.* files.
--echo $comment_line0
--echo #    Shutdown smooth
--source include/shutdown_mysqld.inc
--echo #    Delete all tablespaces.open.* files.
--remove_files_wildcard $MYSQLD_DATADIR tablespaces.open.*
--remove_file $SEARCH_FILE
--echo #    Restart with --innodb-scan-directories
--let $restart_parameters= restart:--innodb-scan-directories=$MYSQLD_DATADIR
--replace_result $MYSQLD_DATADIR <MYSQLD_DATADIR>
--source include/start_mysqld.inc
--let $restart_parameters= restart
if($script_debug)
{
   --cat_file $SEARCH_FILE
   --error 0, 2
   --exec ls -ld $MYSQLD_DATADIR/tablespaces.open.*
}
--source suite/innodb/include/tablespacesopen_1.inc
SHOW CREATE TABLE db_test_a.t_aux_10;
if($script_debug)
{
   --error 0, 2
   --exec ls -ld $MYSQLD_DATADIR/tablespaces.open.*
}
--echo # We should have now one tablespaces.open.* file without defects.
--echo # Let's try the server crash just before tablespaces.open.* write.
eval $create_table;
--source include/expect_crash.inc
SET SESSION DEBUG = "+d,ib_tablespace_open_crash_before_write";
--error CR_SERVER_LOST
eval $ddl_cmd;
--remove_file $SEARCH_FILE
--source include/start_mysqld.inc
if($script_debug)
{
   --cat_file $SEARCH_FILE
   --error 0, 2
   --exec ls -ld $MYSQLD_DATADIR/tablespaces.open.*
}
eval $check_cmd;
eval $ddl_cmd;
eval $check_cmd;
--echo # We should have now two tablespaces.open.* files without defects.
eval $drop_standard_table;
SHOW CREATE TABLE db_test_a.t_aux_10;

# Some checks
# -----------
# $flip_count is the number of suite/innodb/include/tablespacesopen_1.inc calls.
# Sourcing suite/innodb/include/tablespacesopen_1.inc
# - changes the col2 values of 9 rows.
eval
SELECT COUNT(*) = 9 AS 'expect_1' FROM db_test_a.t_aux
WHERE col2 = CONCAT('$flip_count-', REPEAT('z', 90));
# - changes the col2 value of the row with col1 = 1 but this gets reverted by
#   ROLLBACK. So we should find in col2 the value from the INSERT.
SELECT COUNT(*) = 1 AS 'expect_1' FROM db_test_a.t_aux
WHERE col2 = CONCAT('0-', REPEAT('z', 90)) AND col1 = 1;
# - flips the tablespaces used by the db_test_a.t_aux_* tables from
#   "innodb_file_per_table" to "gts1" and back.
let $next_ts= `SELECT IF(MOD($flip_count,2) = 0,
                             'ts1', 'innodb_file_per_table')`;
let $show_val= `SHOW CREATE TABLE db_test_a.t_aux_10`;
eval SELECT '$show_val' LIKE '%$next_ts%' AS "expect_1";


# Cleanup
# -------
DROP SCHEMA db_test_a;
DROP TABLESPACE ts1;
--remove_files_wildcard $tsof_copy_dir tablespaces.open.*
--rmdir $tsof_copy_dir

