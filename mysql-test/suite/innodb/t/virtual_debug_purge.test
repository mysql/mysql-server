--source include/have_debug_sync.inc
--source include/have_debug.inc



CREATE TABLE `t` (
  `a` BLOB,
  `b` BLOB,
  `c` BLOB GENERATED ALWAYS AS (CONCAT(a,b)) VIRTUAL,
  `h` VARCHAR(10) DEFAULT NULL,
  `i` int
) ENGINE=InnoDB;

INSERT INTO t VALUES (REPEAT('g', 16000), REPEAT('x', 16000), DEFAULT, "kk", 1);
INSERT INTO t VALUES (REPEAT('a', 16000), REPEAT('b', 16000), DEFAULT, "mm", 2);

CREATE INDEX idx ON t(c(100));

SET global debug="+d,ib_purge_virtual_index_callback";
UPDATE t SET a = REPEAT('m', 16000) WHERE a like "aaa%";
select sleep(3);
SET global debug="-d,ib_purge_virtual_index_callback";
DROP TABLE t;


CREATE TABLE t (
  a TINYBLOB,
  b TINYBLOB,
  c TINYBLOB GENERATED ALWAYS AS (CONCAT(a,b)) VIRTUAL,
  h VARCHAR(10) DEFAULT NULL,
  i INT
) ROW_FORMAT=COMPACT ENGINE=InnoDB;

INSERT INTO t VALUES (REPEAT('g', 100), REPEAT('x', 100), DEFAULT, "kk", 1);
INSERT INTO t VALUES (REPEAT('a', 100), REPEAT('b', 100), DEFAULT, "mm", 2);

CREATE INDEX idx ON t(c(100));

SET global debug="+d,ib_purge_virtual_index_callback";
UPDATE t SET a = REPEAT('m', 100) WHERE a like "aaa%";
select sleep(3);
SET global debug="-d,ib_purge_virtual_index_callback";
DROP TABLE t;


CREATE TABLE t1 (
    id INT NOT NULL,
    store_id INT NOT NULL,
    x INT GENERATED ALWAYS AS (id + store_id)
)
PARTITION BY RANGE (store_id) (
    PARTITION p0 VALUES LESS THAN (6),
    PARTITION p1 VALUES LESS THAN (11),
    PARTITION p2 VALUES LESS THAN (16),
    PARTITION p3 VALUES LESS THAN (21)
);

insert into t1 values(1, 2, default);
insert into t1 values(3, 4, default);

insert into t1 values(3, 12, default);
insert into t1 values(4, 18, default);

CREATE INDEX idx ON t1(x);

SET global debug="+d,ib_purge_virtual_index_callback";
UPDATE t1 SET id = 10 WHERE id = 1;
select sleep(3);
SET global debug="-d,ib_purge_virtual_index_callback";
DROP TABLE t1;

#
# BUG#22082762 RE-ENABLE SUPPORT FOR ADDING VIRTUAL INDEX WHILE DROPPING VIRTUAL COLUMN
#
--source include/count_sessions.inc

connect (con1,localhost,root,,);
connection default;

# Test adding virtual index on newly added virtual column
CREATE TABLE t1 (a INT, b INT);

INSERT INTO t1(a, b) VALUES (1, 1), (2, 2), (3, 3);

connection con1;
--echo # disable purge
CREATE TABLE t0 (a INT) ENGINE=InnoDB;
BEGIN; SELECT * FROM t0;

connection default;
DELETE FROM t1 WHERE a = 1;

UPDATE t1 SET a = 4, b = 4 WHERE a = 3;

INSERT INTO t1(a, b) VALUES (5, 5);

SET DEBUG_SYNC= 'inplace_after_index_build SIGNAL uncommitted WAIT_FOR purged';
--error ER_ALTER_OPERATION_NOT_SUPPORTED_REASON
ALTER TABLE t1 ADD COLUMN c INT GENERATED ALWAYS AS(a+b), ADD INDEX idx (c), ALGORITHM=INPLACE, LOCK=NONE;
send ALTER TABLE t1 ADD COLUMN c INT GENERATED ALWAYS AS(a+b), ADD INDEX idx (c), ALGORITHM=INPLACE, LOCK=SHARED;

connection con1;
SET DEBUG_SYNC= 'now WAIT_FOR uncommitted';

--echo # enable purge
COMMIT;

# Note, the alter table would increase trx_sys->rw_max_trx_id
--echo # wait for purge to process the deleted records.
set global innodb_purge_run_now=ON;
select sleep(1);

SET DEBUG_SYNC= 'now SIGNAL purged';

connection default;
--echo /* connection default */ ALTER TABLE t1 ADD COLUMN c INT GENERATED ALWAYS AS(a+b), ADD INDEX idx (c), ALGORITHM=INPLACE, LOCK=SHARED;
--reap
SHOW CREATE TABLE t1;

SELECT * FROM t1;

DROP TABLE t1;

# Test adding virutal index on existing virtual column
CREATE TABLE t1 (a INT, b INT, c INT GENERATED ALWAYS AS(a+b));

INSERT INTO t1(a, b) VALUES (1, 1), (2, 2), (3, 3), (4, 4);

connection con1;
--echo # disable purge
BEGIN; SELECT * FROM t0;

connection default;
DELETE FROM t1 WHERE a = 1;

UPDATE t1 SET a = 2, b = 2 WHERE a = 5;

INSERT INTO t1(a, b) VALUES (6, 6);

SET DEBUG_SYNC= 'inplace_after_index_build SIGNAL uncommitted WAIT_FOR purged';
send ALTER TABLE t1 ADD INDEX idx (c), ALGORITHM=INPLACE, LOCK=NONE;

connection con1;
SET DEBUG_SYNC= 'now WAIT_FOR uncommitted';

DELETE FROM t1 WHERE a = 3;

UPDATE t1 SET a = 7, b = 7 WHERE a = 4;

INSERT INTO t1(a, b) VALUES (8, 8);

--echo # enable purge
COMMIT;

# Note, the alter table would increase trx_sys->rw_max_trx_id
--echo # wait for purge to process the deleted/updated records.
set global innodb_purge_run_now=ON;
select sleep(1);

SET DEBUG_SYNC= 'now SIGNAL purged';

disconnect con1;

connection default;
--echo /* connection default */ ALTER TABLE t1 ADD INDEX idx (c), ALGORITHM=INPLACE, LOCK=NONE;
--reap
SHOW CREATE TABLE t1;

SELECT * FROM t1;

DROP TABLE t0, t1;


--echo #
--echo # Bug#21869656 UNDO LOG DOES NOT CONTAIN ENOUGH INFORMATION
--echo # ON INDEXED VIRTUAL COLUMNS
--echo #

CREATE TABLE t1 (a INT, b INT,
 a1 INT GENERATED ALWAYS AS (a) VIRTUAL, INDEX(a1)
) ENGINE=InnoDB;

INSERT INTO t1 (a,b) VALUES(1,1);

connect (con1,localhost,root,,);
# disable purge
CREATE TABLE t0 (a INT) ENGINE=InnoDB;
BEGIN; SELECT * FROM t0;

connection default;
# write the problematic update_undo log record
UPDATE t1 SET a=0;

ALTER TABLE t1 DROP COLUMN a1, ALGORITHM=INPLACE;
ALTER TABLE t1 ADD COLUMN b1 INT GENERATED ALWAYS AS (b) VIRTUAL, ADD
INDEX(b1),
ALGORITHM=INPLACE;

connection con1;
# enable purge
COMMIT;
UPDATE t1 SET a=1;

connection default;
# wait for purge to process the update_undo record.
# Note, the alter table would increase trx_sys->rw_max_trx_id
set global innodb_purge_run_now=ON;
select sleep(1);

CHECK TABLE t1;
SELECT b1 FROM t1;


# Create multi-virtual column, more ADD/DROP to test it
ALTER TABLE t1
ADD COLUMN a1 INT GENERATED ALWAYS AS (a) VIRTUAL,
ADD COLUMN a2 INT GENERATED ALWAYS AS (a + b) VIRTUAL,
ADD COLUMN a3 INT GENERATED ALWAYS AS (a - b) VIRTUAL,
ADD COLUMN a4 INT GENERATED ALWAYS AS (a - b) VIRTUAL,
ADD INDEX(a1), ADD INDEX(a2), ADD INDEX(a3), ALGORITHM=INPLACE;

CREATE TABLE t2 (
  a BLOB,
  b BLOB,
  c BLOB GENERATED ALWAYS AS (CONCAT(a,b)) VIRTUAL,
  h VARCHAR(10) DEFAULT NULL
) ENGINE=InnoDB;

INSERT INTO t2 VALUES (REPEAT('g', 16000), REPEAT('x', 16000), DEFAULT, 'kk');

INSERT INTO t2 VALUES (REPEAT('a', 16000), REPEAT('b', 16000), DEFAULT, 'mm');

CREATE INDEX idx ON t2(c(100));

INSERT INTO t1 (a, b) VALUES(1,1);

connection con1;
# disable purge
BEGIN; SELECT * FROM t0;

connection default;
--enable_info

# write the problematic update_undo log record
UPDATE t1 SET a=0;
UPDATE t1 SET b=0;

ALTER TABLE t1 DROP COLUMN a3, ALGORITHM=INPLACE;

UPDATE t1 SET a=2;
ALTER TABLE t1 DROP COLUMN a2, ALGORITHM=INPLACE;
UPDATE t1 SET b=3;

ALTER TABLE t1 ADD COLUMN b2 INT GENERATED ALWAYS AS (b) VIRTUAL,
ADD INDEX(b2), ALGORITHM=INPLACE;
UPDATE t1 SET b=9;

ALTER TABLE t1 ADD COLUMN b3 INT GENERATED ALWAYS AS (a) VIRTUAL,
ADD INDEX(b3), ALGORITHM=INPLACE;

UPDATE t1 SET b=10;

ALTER TABLE t2 DROP COLUMN c;

UPDATE t2 SET a = REPEAT('s', 6000) WHERE a like 'aaa%';

ALTER TABLE t2 ADD COLUMN x1 BLOB GENERATED ALWAYS AS (CONCAT(a,b)) VIRTUAL,
ADD COLUMN x2 BLOB GENERATED ALWAYS AS (CONCAT(a,b)) VIRTUAL,
ADD INDEX(x1(100), x2(120)), ADD INDEX (x1(20));

UPDATE t1 SET a=5;

UPDATE t2 SET a = REPEAT('m', 16000) WHERE a like 'sss%';

ALTER TABLE t1 DROP COLUMN b2, ALGORITHM=INPLACE;

UPDATE t1 SET a=6;

ALTER TABLE t2 DROP COLUMN x1, DROP COLUMN x2, ALGORITHM=INPLACE;

UPDATE t2 SET a = REPEAT('x', 1000) WHERE a like 'mmm%';

ALTER TABLE t1 DROP INDEX b3;
UPDATE t1 SET a=100;
--disable_info

connection con1;
# enable purge
COMMIT;
disconnect con1;

connection default;
# wait for purge to process the update_undo record.
set global innodb_purge_run_now=ON;
select sleep(1);

CHECK TABLE t1;
SELECT b1 FROM t1;

SELECT * FROM t1;
CHECK TABLE t2;
DROP TABLE t2, t1, t0;

CREATE TABLE t1 (a VARCHAR(30), b INT, a2 VARCHAR(30) GENERATED ALWAYS AS (a) VIRTUAL);

--error ER_DUP_FIELDNAME
CREATE INDEX idx ON t1(a2(10), b, a2(20));

DROP TABLE t1;

--source include/wait_until_count_sessions.inc
