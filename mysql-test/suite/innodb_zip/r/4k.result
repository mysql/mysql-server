SET default_storage_engine=InnoDB;
# Test 1) Show the page size from Information Schema
SELECT variable_value FROM performance_schema.global_status
WHERE LOWER(variable_name) = 'innodb_page_size';
variable_value
4096
# Test 2) The number of buffer pool pages is dependent upon the page size.
SELECT variable_value FROM performance_schema.global_status
WHERE LOWER(variable_name) = 'innodb_buffer_pool_pages_total';
variable_value
{checked_valid}
# Test 3) Query some information_shema tables that are dependent upon
#         the page size.
SELECT	t.name table_name, t.n_cols, t.flag table_flags,
i.name index_name, i.page_no root_page, i.type,
i.n_fields, i.merge_threshold
FROM	INFORMATION_SCHEMA.INNODB_SYS_TABLES  t,
INFORMATION_SCHEMA.INNODB_SYS_INDEXES i
WHERE	t.table_id = i.table_id
AND	t.name LIKE 'mysql%'
        AND     t.name NOT LIKE 'mysql/ndb_binlog_index'
	ORDER BY t.name, i.index_id;
table_name	n_cols	table_flags	index_name	root_page	type	n_fields	merge_threshold
mysql/catalogs	7	33	PRIMARY	5	3	1	50
mysql/catalogs	7	33	name	6	2	1	50
mysql/character_sets	8	33	PRIMARY	5	3	1	50
mysql/character_sets	8	33	name	6	2	1	50
mysql/character_sets	8	33	default_collation_id	8	0	1	50
mysql/collations	9	33	PRIMARY	5	3	1	50
mysql/collations	9	33	name	6	2	1	50
mysql/collations	9	33	character_set_id	8	0	1	50
mysql/columns	31	33	PRIMARY	5	3	1	50
mysql/columns	31	33	table_id	6	2	2	50
mysql/columns	31	33	table_id_2	8	2	2	50
mysql/columns	31	33	collation_id	9	0	1	50
mysql/columns_priv	10	33	PRIMARY	5	3	5	50
mysql/column_stats	7	33	PRIMARY	5	3	3	50
mysql/column_type_elements	6	33	PRIMARY	5	3	2	50
mysql/component	6	33	PRIMARY	5	3	1	50
mysql/db	25	33	PRIMARY	5	3	3	50
mysql/db	25	33	User	6	0	1	50
mysql/default_roles	7	33	PRIMARY	5	3	4	50
mysql/engine_cost	9	33	PRIMARY	5	3	3	50
mysql/events	26	33	PRIMARY	5	3	1	50
mysql/events	26	33	schema_id	6	2	2	50
mysql/events	26	33	client_collation_id	8	0	1	50
mysql/events	26	33	connection_collation_id	9	0	1	50
mysql/events	26	33	schema_collation_id	10	0	1	50
mysql/foreign_keys	14	33	PRIMARY	5	3	1	50
mysql/foreign_keys	14	33	schema_id	6	2	2	50
mysql/foreign_keys	14	33	table_id	8	2	2	50
mysql/foreign_keys	14	33	unique_constraint_id	9	0	1	50
mysql/foreign_key_column_usage	7	33	PRIMARY	5	3	2	50
mysql/foreign_key_column_usage	7	33	foreign_key_id	6	2	3	50
mysql/foreign_key_column_usage	7	33	column_id	8	0	1	50
mysql/func	7	33	PRIMARY	5	3	1	50
mysql/global_grants	7	33	PRIMARY	5	3	3	50
mysql/gtid_executed	6	33	PRIMARY	5	3	2	50
mysql/help_category	7	33	PRIMARY	5	3	1	50
mysql/help_category	7	33	name	6	2	1	50
mysql/help_keyword	5	33	PRIMARY	5	3	1	50
mysql/help_keyword	5	33	name	6	2	1	50
mysql/help_relation	5	33	PRIMARY	5	3	2	50
mysql/help_topic	9	33	PRIMARY	5	3	1	50
mysql/help_topic	9	33	name	6	2	1	50
mysql/indexes	18	33	PRIMARY	5	3	1	50
mysql/indexes	18	33	table_id	6	2	2	50
mysql/indexes	18	33	tablespace_id	8	0	1	50
mysql/index_column_usage	9	33	index_id	5	3	2	50
mysql/index_column_usage	9	33	index_id_2	6	2	3	50
mysql/index_column_usage	9	33	f2	8	0	1	50
mysql/index_partitions	8	33	PRIMARY	5	3	2	50
mysql/index_partitions	8	33	index_id	6	0	1	50
mysql/index_partitions	8	33	tablespace_id	8	0	1	50
mysql/index_stats	8	33	schema_name	5	3	4	50
mysql/innodb_index_stats	11	33	PRIMARY	5	3	4	50
mysql/innodb_table_stats	9	33	PRIMARY	5	3	2	50
mysql/parameters	18	33	PRIMARY	5	3	1	50
mysql/parameters	18	33	routine_id	6	2	2	50
mysql/parameters	18	33	collation_id	8	0	1	50
mysql/parameter_type_elements	6	33	PRIMARY	5	3	2	50
mysql/plugin	5	33	PRIMARY	5	3	1	50
mysql/procs_priv	11	33	PRIMARY	5	3	5	50
mysql/procs_priv	11	33	Grantor	6	0	1	50
mysql/proxies_priv	10	33	PRIMARY	5	3	4	50
mysql/proxies_priv	10	33	Grantor	6	0	1	50
mysql/role_edges	8	33	PRIMARY	5	3	4	50
mysql/routines	30	33	PRIMARY	5	3	1	50
mysql/routines	30	33	schema_id	6	2	3	50
mysql/routines	30	33	result_collation_id	8	0	1	50
mysql/routines	30	33	client_collation_id	9	0	1	50
mysql/routines	30	33	connection_collation_id	10	0	1	50
mysql/routines	30	33	schema_collation_id	12	0	1	50
mysql/schemata	9	33	PRIMARY	5	3	1	50
mysql/schemata	9	33	catalog_id	6	2	2	50
mysql/schemata	9	33	default_collation_id	8	0	1	50
mysql/servers	12	33	PRIMARY	5	3	1	50
mysql/server_cost	7	33	PRIMARY	5	3	1	50
mysql/slave_master_info	28	33	PRIMARY	5	3	1	50
mysql/slave_relay_log_info	12	33	PRIMARY	5	3	1	50
mysql/slave_worker_info	16	33	PRIMARY	5	3	2	50
mysql/st_spatial_reference_systems	12	33	PRIMARY	5	3	1	50
mysql/st_spatial_reference_systems	12	33	catalog_id	6	2	2	50
mysql/tables	35	33	PRIMARY	5	3	1	50
mysql/tables	35	33	schema_id	6	2	2	50
mysql/tables	35	33	engine	8	2	2	50
mysql/tables	35	33	engine_2	9	0	1	50
mysql/tables	35	33	collation_id	10	0	1	50
mysql/tables	35	33	tablespace_id	12	0	1	50
mysql/tablespaces	9	33	PRIMARY	5	3	1	50
mysql/tablespaces	9	33	name	6	2	1	50
mysql/tablespace_files	7	33	tablespace_id	5	3	2	50
mysql/tablespace_files	7	33	file_name	6	2	1	50
mysql/tables_priv	11	33	PRIMARY	5	3	4	50
mysql/tables_priv	11	33	Grantor	6	0	1	50
mysql/table_partitions	14	33	PRIMARY	5	3	1	50
mysql/table_partitions	14	33	table_id	6	2	2	50
mysql/table_partitions	14	33	table_id_2	8	2	3	50
mysql/table_partitions	14	33	engine	9	2	2	50
mysql/table_partitions	14	33	engine_2	10	0	1	50
mysql/table_partitions	14	33	tablespace_id	12	0	1	50
mysql/table_partition_values	8	33	PRIMARY	5	3	3	50
mysql/table_stats	15	33	PRIMARY	5	3	2	50
mysql/time_zone	5	33	PRIMARY	5	3	1	50
mysql/time_zone_leap_second	5	33	PRIMARY	5	3	1	50
mysql/time_zone_name	5	33	PRIMARY	5	3	1	50
mysql/time_zone_transition	6	33	PRIMARY	5	3	2	50
mysql/time_zone_transition_type	8	33	PRIMARY	5	3	2	50
mysql/triggers	19	33	PRIMARY	5	3	1	50
mysql/triggers	19	33	schema_id	6	2	2	50
mysql/triggers	19	33	table_id	8	2	4	50
mysql/triggers	19	33	client_collation_id	9	0	1	50
mysql/triggers	19	33	connection_collation_id	10	0	1	50
mysql/triggers	19	33	schema_collation_id	12	0	1	50
mysql/user	50	33	PRIMARY	5	3	2	50
mysql/version	4	33	PRIMARY	5	3	1	50
mysql/view_routine_usage	7	33	PRIMARY	5	3	4	50
mysql/view_routine_usage	7	33	routine_catalog	6	0	3	50
mysql/view_table_usage	7	33	PRIMARY	5	3	4	50
mysql/view_table_usage	7	33	table_catalog	6	0	3	50
CREATE TABLE t1 (a INT KEY, b TEXT) ROW_FORMAT=REDUNDANT ENGINE=innodb;
CREATE TABLE t2 (a INT KEY, b TEXT) ROW_FORMAT=COMPACT ENGINE=innodb;
CREATE TABLE t3 (a INT KEY, b TEXT) ROW_FORMAT=COMPRESSED ENGINE=innodb;
CREATE TABLE t4 (a INT KEY, b TEXT) ROW_FORMAT=DYNAMIC ENGINE=innodb;
SELECT	t.name table_name, t.n_cols, t.flag table_flags,
i.name index_name, i.page_no root_page, i.type,
i.n_fields, i.merge_threshold
FROM	INFORMATION_SCHEMA.INNODB_SYS_TABLES  t,
INFORMATION_SCHEMA.INNODB_SYS_INDEXES i
WHERE	t.table_id = i.table_id
AND	t.name LIKE 'test%'
	ORDER BY t.name, i.name;
table_name	n_cols	table_flags	index_name	root_page	type	n_fields	merge_threshold
test/t1	5	0	PRIMARY	5	3	1	50
test/t2	5	1	PRIMARY	5	3	1	50
test/t3	5	37	PRIMARY	6	3	1	50
test/t4	5	33	PRIMARY	5	3	1	50
=== information_schema.innodb_sys_tablespaces and innodb_sys_datafiles ===
Space_Name	Space_Type	Page_Size	Zip_Size	Formats_Permitted	Path
test/t1	Single	DEFAULT	0	Compact or Redundant	MYSQLD_DATADIR/test/t1.ibd
test/t2	Single	DEFAULT	0	Compact or Redundant	MYSQLD_DATADIR/test/t2.ibd
test/t3	Single	DEFAULT	2048	Compressed	MYSQLD_DATADIR/test/t3.ibd
test/t4	Single	DEFAULT	0	Dynamic	MYSQLD_DATADIR/test/t4.ibd
=== information_schema.files ===
Space_Name	File_Type	Engine	Status	Tablespace_Name	Path
test/t1	TABLESPACE	InnoDB	NORMAL	innodb_file_per_table.##	MYSQLD_DATADIR/test/t1.ibd
test/t2	TABLESPACE	InnoDB	NORMAL	innodb_file_per_table.##	MYSQLD_DATADIR/test/t2.ibd
test/t3	TABLESPACE	InnoDB	NORMAL	innodb_file_per_table.##	MYSQLD_DATADIR/test/t3.ibd
test/t4	TABLESPACE	InnoDB	NORMAL	innodb_file_per_table.##	MYSQLD_DATADIR/test/t4.ibd
DROP TABLE t1, t2, t3, t4;
# Test 4) The maximum row size is dependent upon the page size.
#         Redundant: 1979, Compact: 1982.
#         Compressed: 1982, Dynamic: 1982.
#         Each row format has its own amount of overhead that
#         varies depending on number of fields and other overhead.
SET SESSION innodb_strict_mode = ON;
CREATE TABLE t1 (
c01 char(200), c02 char(200), c03 char(200), c04 char(200), c05 char(200),
c06 char(200), c07 char(200), c08 char(200), c09 char(200), c10 char(127)
) ROW_FORMAT=redundant;
DROP TABLE t1;
CREATE TABLE t1 (
c01 char(200), c02 char(200), c03 char(200), c04 char(200), c05 char(200),
c06 char(200), c07 char(200), c08 char(200), c09 char(200), c10 char(128)
) ROW_FORMAT=redundant;
ERROR 42000: Row size too large (> max_row_size). Changing some columns to TEXT or BLOB or using ROW_FORMAT=DYNAMIC or ROW_FORMAT=COMPRESSED may help. In current row format, BLOB prefix of 768 bytes is stored inline.
CREATE TABLE t1 (
c01 char(200), c02 char(200), c03 char(200), c04 char(200), c05 char(200),
c06 char(200), c07 char(200), c08 char(200), c09 char(200), c10 char(155)
) ROW_FORMAT=compact;
DROP TABLE t1;
CREATE TABLE t1 (
c01 char(200), c02 char(200), c03 char(200), c04 char(200), c05 char(200),
c06 char(200), c07 char(200), c08 char(200), c09 char(200), c10 char(156)
) ROW_FORMAT=compact;
ERROR 42000: Row size too large (> max_row_size). Changing some columns to TEXT or BLOB or using ROW_FORMAT=DYNAMIC or ROW_FORMAT=COMPRESSED may help. In current row format, BLOB prefix of 768 bytes is stored inline.
CREATE TABLE t1 (
c01 char(200), c02 char(200), c03 char(200), c04 char(200), c05 char(200),
c06 char(200), c07 char(200), c08 char(200), c09 char(200), c10 char(76)
) ROW_FORMAT=compressed;
DROP TABLE t1;
CREATE TABLE t1 (
c01 char(200), c02 char(200), c03 char(200), c04 char(200), c05 char(200),
c06 char(200), c07 char(200), c08 char(200), c09 char(200), c10 char(79)
) ROW_FORMAT=compressed;
ERROR 42000: Row size too large (> max_row_size). Changing some columns to TEXT or BLOB may help. In current row format, BLOB prefix of 0 bytes is stored inline.
CREATE TABLE t1 (
c01 char(200), c02 char(200), c03 char(200), c04 char(200), c05 char(200),
c06 char(200), c07 char(200), c08 char(200), c09 char(200), c10 char(155)
) ROW_FORMAT=dynamic;
DROP TABLE t1;
CREATE TABLE t1 (
c01 char(200), c02 char(200), c03 char(200), c04 char(200), c05 char(200),
c06 char(200), c07 char(200), c08 char(200), c09 char(200), c10 char(156)
) ROW_FORMAT=dynamic;
ERROR 42000: Row size too large (> max_row_size). Changing some columns to TEXT or BLOB may help. In current row format, BLOB prefix of 0 bytes is stored inline.
CREATE TABLE t1 (a varchar(64) character set utf8,
b varchar(64) character set utf8,
c varchar(64) character set utf8,
d varchar(64) character set utf8,
PRIMARY KEY (a,b,c,d))
ENGINE=innodb;
DROP TABLE t1;
CREATE TABLE t1 (a varchar(64) character set utf8,
b varchar(64) character set utf8,
c varchar(64) character set utf8,
d varchar(65) character set utf8,
PRIMARY KEY (a,b,c,d))
ENGINE=innodb;
ERROR 42000: Specified key was too long; max key length is 768 bytes
CREATE TABLE t1 (a varchar(64) character set utf8,
b varchar(64) character set utf8,
c varchar(64) character set utf8,
d varchar(64) character set utf8,
e varchar(64) character set utf8,
PRIMARY KEY (a), KEY (b,c,d,e))
ENGINE=innodb;
DROP TABLE t1;
CREATE TABLE t1 (a varchar(64) character set utf8,
b varchar(64) character set utf8,
c varchar(64) character set utf8,
d varchar(64) character set utf8,
e varchar(65) character set utf8,
PRIMARY KEY (a), KEY (b,c,d,e))
ENGINE=innodb;
ERROR 42000: Specified key was too long; max key length is 768 bytes
# Test 5) Make sure that KEY_BLOCK_SIZE=4, 2 & 1 are all
#         accepted and that KEY_BLOCK_SIZE=16 & 8 are rejected
#         in strict mode and converted to 4 in non-strict mode.
SET SESSION innodb_strict_mode = ON;
CREATE TABLE t1 (i int) ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=16;
ERROR HY000: Table storage engine for 't1' doesn't have this option
SHOW WARNINGS;
Level	Code	Message
Warning	1478	InnoDB: KEY_BLOCK_SIZE=16 cannot be larger than 4.
Error	1031	Table storage engine for 't1' doesn't have this option
CREATE TABLE t1 ( i INT ) ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8;
ERROR HY000: Table storage engine for 't1' doesn't have this option
SHOW WARNINGS;
Level	Code	Message
Warning	1478	InnoDB: KEY_BLOCK_SIZE=8 cannot be larger than 4.
Error	1031	Table storage engine for 't1' doesn't have this option
CREATE TABLE t1 ( i INT ) ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=4;
SHOW WARNINGS;
Level	Code	Message
SELECT table_name, row_format, create_options
FROM information_schema.tables WHERE table_name = 't1';
TABLE_NAME	ROW_FORMAT	CREATE_OPTIONS
t1	Compressed	row_format=COMPRESSED KEY_BLOCK_SIZE=4
ALTER TABLE t1 KEY_BLOCK_SIZE=2;
SHOW WARNINGS;
Level	Code	Message
SELECT table_name, row_format, create_options
FROM information_schema.tables WHERE table_name = 't1';
TABLE_NAME	ROW_FORMAT	CREATE_OPTIONS
t1	Compressed	row_format=COMPRESSED KEY_BLOCK_SIZE=2
ALTER TABLE t1 KEY_BLOCK_SIZE=1;
SHOW WARNINGS;
Level	Code	Message
SELECT table_name, row_format, create_options
FROM information_schema.tables WHERE table_name = 't1';
TABLE_NAME	ROW_FORMAT	CREATE_OPTIONS
t1	Compressed	row_format=COMPRESSED KEY_BLOCK_SIZE=1
ALTER TABLE t1 KEY_BLOCK_SIZE=0;
SHOW WARNINGS;
Level	Code	Message
SELECT table_name, row_format, create_options
FROM information_schema.tables WHERE table_name = 't1';
TABLE_NAME	ROW_FORMAT	CREATE_OPTIONS
t1	Compressed	row_format=COMPRESSED
DROP TABLE t1;
SET SESSION innodb_strict_mode = OFF;
CREATE TABLE t1 (i int) ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=16;
Warnings:
Warning	1478	InnoDB: ignoring KEY_BLOCK_SIZE=16.
SHOW WARNINGS;
Level	Code	Message
Warning	1478	InnoDB: ignoring KEY_BLOCK_SIZE=16.
SELECT table_name, row_format, create_options
FROM information_schema.tables WHERE table_name = 't1';
TABLE_NAME	ROW_FORMAT	CREATE_OPTIONS
t1	Compressed	row_format=COMPRESSED KEY_BLOCK_SIZE=16
DROP TABLE t1;
CREATE TABLE t1 ( i INT ) ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=8;
Warnings:
Warning	1478	InnoDB: ignoring KEY_BLOCK_SIZE=8.
SHOW WARNINGS;
Level	Code	Message
Warning	1478	InnoDB: ignoring KEY_BLOCK_SIZE=8.
SELECT table_name, row_format, create_options
FROM information_schema.tables WHERE table_name = 't1';
TABLE_NAME	ROW_FORMAT	CREATE_OPTIONS
t1	Compressed	row_format=COMPRESSED KEY_BLOCK_SIZE=8
DROP TABLE t1;
CREATE TABLE t1 ( i INT ) ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=4;
SHOW WARNINGS;
Level	Code	Message
SELECT table_name, row_format, create_options
FROM information_schema.tables WHERE table_name = 't1';
TABLE_NAME	ROW_FORMAT	CREATE_OPTIONS
t1	Compressed	row_format=COMPRESSED KEY_BLOCK_SIZE=4
ALTER TABLE t1 KEY_BLOCK_SIZE=2;
SHOW WARNINGS;
Level	Code	Message
SELECT table_name, row_format, create_options
FROM information_schema.tables WHERE table_name = 't1';
TABLE_NAME	ROW_FORMAT	CREATE_OPTIONS
t1	Compressed	row_format=COMPRESSED KEY_BLOCK_SIZE=2
ALTER TABLE t1 KEY_BLOCK_SIZE=1;
SHOW WARNINGS;
Level	Code	Message
SELECT table_name, row_format, create_options
FROM information_schema.tables WHERE table_name = 't1';
TABLE_NAME	ROW_FORMAT	CREATE_OPTIONS
t1	Compressed	row_format=COMPRESSED KEY_BLOCK_SIZE=1
ALTER TABLE t1 KEY_BLOCK_SIZE=0;
SHOW WARNINGS;
Level	Code	Message
SELECT table_name, row_format, create_options
FROM information_schema.tables WHERE table_name = 't1';
TABLE_NAME	ROW_FORMAT	CREATE_OPTIONS
t1	Compressed	row_format=COMPRESSED
DROP TABLE t1;
# Test 6) Make sure that KEY_BLOCK_SIZE = 8 and 16
# are both rejected when innodb_file_per_table=OFF
SET SESSION innodb_strict_mode = ON;
SET GLOBAL innodb_file_per_table = OFF;
SHOW VARIABLES LIKE 'innodb_file_per_table';
Variable_name	Value
innodb_file_per_table	OFF
CREATE TABLE t4 (id int PRIMARY KEY) ENGINE=innodb KEY_BLOCK_SIZE=8;
ERROR HY000: Table storage engine for 't4' doesn't have this option
SHOW WARNINGS;
Level	Code	Message
Warning	1478	InnoDB: KEY_BLOCK_SIZE=8 cannot be larger than 4.
Warning	1478	InnoDB: KEY_BLOCK_SIZE requires innodb_file_per_table.
Error	1031	Table storage engine for 't4' doesn't have this option
CREATE TABLE t5 (id int PRIMARY KEY) ENGINE=innodb KEY_BLOCK_SIZE=16;
ERROR HY000: Table storage engine for 't5' doesn't have this option
SHOW WARNINGS;
Level	Code	Message
Warning	1478	InnoDB: KEY_BLOCK_SIZE=16 cannot be larger than 4.
Warning	1478	InnoDB: KEY_BLOCK_SIZE requires innodb_file_per_table.
Error	1031	Table storage engine for 't5' doesn't have this option
SET GLOBAL innodb_file_per_table = ON;
CREATE TABLE t4 (id int PRIMARY KEY) ENGINE=innodb KEY_BLOCK_SIZE=8;
ERROR HY000: Table storage engine for 't4' doesn't have this option
SHOW WARNINGS;
Level	Code	Message
Warning	1478	InnoDB: KEY_BLOCK_SIZE=8 cannot be larger than 4.
Error	1031	Table storage engine for 't4' doesn't have this option
CREATE TABLE t5 (id int PRIMARY KEY) ENGINE=innodb KEY_BLOCK_SIZE=16;
ERROR HY000: Table storage engine for 't5' doesn't have this option
SHOW WARNINGS;
Level	Code	Message
Warning	1478	InnoDB: KEY_BLOCK_SIZE=16 cannot be larger than 4.
Error	1031	Table storage engine for 't5' doesn't have this option
# Test 7) Not included here; 16k only
# Test 8) Test creating a table that could lead to undo log overflow.
CREATE TABLE t1(a blob,b blob,c blob,d blob,e blob,f blob,g blob,
h blob,i blob,j blob,k blob,l blob,m blob,n blob,
o blob,p blob,q blob,r blob,s blob,t blob,u blob)
ENGINE=InnoDB ROW_FORMAT=dynamic;
SET @a = repeat('a', 767);
SET @b = repeat('b', 767);
SET @c = repeat('c', 767);
SET @d = repeat('d', 767);
SET @e = repeat('e', 767);
INSERT INTO t1 VALUES (@a,@a,@a,@a,@a,@a,@a,@a,@a,@a,@a,@a,@a,@a,@a,@a,@a,@a,@a,@a,@a);
UPDATE t1 SET a=@b,b=@b,c=@b,d=@b,e=@b,f=@b,g=@b,h=@b,i=@b,j=@b,
k=@b,l=@b,m=@b,n=@b,o=@b,p=@b,q=@b,r=@b,s=@b,t=@b,u=@b;
CREATE INDEX t1a ON t1 (a(767));
UPDATE t1 SET a=@c,b=@c,c=@c,d=@c,e=@c,f=@c,g=@c,h=@c,i=@c,j=@c,
k=@c,l=@c,m=@c,n=@c,o=@c,p=@c,q=@c,r=@c,s=@c,t=@c,u=@c;
CREATE INDEX t1b ON t1 (b(767));
UPDATE t1 SET a=@d,b=@d,c=@d,d=@d,e=@d,f=@d,g=@d,h=@d,i=@d,j=@d,
k=@d,l=@d,m=@d,n=@d,o=@d,p=@d,q=@d,r=@d,s=@d,t=@d,u=@d;
ERROR HY000: Undo log record is too big.
BEGIN;
UPDATE t1 SET a=@d,b=@d,c=@d,d=@d,e=@d;
UPDATE t1 SET f=@d,g=@d,h=@d,i=@d,j=@d,k=@d,l=@d,m=@d,
n=@d,o=@d,p=@d,q=@d,r=@d,s=@d,t=@d,u=@d;
COMMIT;
CREATE INDEX t1c ON t1 (c(767));
UPDATE t1 SET c=@e;
CREATE INDEX t1d ON t1 (d(767));
UPDATE t1 SET d=@e;
ERROR HY000: Undo log record is too big.
CREATE INDEX t1e ON t1 (e(767));
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` blob,
  `b` blob,
  `c` blob,
  `d` blob,
  `e` blob,
  `f` blob,
  `g` blob,
  `h` blob,
  `i` blob,
  `j` blob,
  `k` blob,
  `l` blob,
  `m` blob,
  `n` blob,
  `o` blob,
  `p` blob,
  `q` blob,
  `r` blob,
  `s` blob,
  `t` blob,
  `u` blob,
  KEY `t1a` (`a`(767)),
  KEY `t1b` (`b`(767)),
  KEY `t1c` (`c`(767)),
  KEY `t1d` (`d`(767)),
  KEY `t1e` (`e`(767))
) ENGINE=InnoDB DEFAULT CHARSET=latin1 ROW_FORMAT=DYNAMIC
DROP TABLE t1;
SET SESSION innodb_strict_mode = OFF;
CREATE TABLE t1(
pk01 varchar(48), pk02 varchar(48), pk03 varchar(48), pk04 varchar(48),
pk05 varchar(48), pk06 varchar(48), pk07 varchar(48), pk08 varchar(48),
pk09 varchar(48), pk10 varchar(48), pk11 varchar(48), pk12 varchar(48),
pk13 varchar(48), pk14 varchar(48), pk15 varchar(48), pk16 varchar(48),
sk01 varchar(48), sk02 varchar(48), sk03 varchar(48), sk04 varchar(48),
sk05 varchar(48), sk06 varchar(48), sk07 varchar(48), sk08 varchar(48),
sk09 varchar(48), sk10 varchar(48), sk11 varchar(48), sk12 varchar(48),
sk13 varchar(48), sk14 varchar(48), sk15 varchar(48), sk16 varchar(48),
PRIMARY KEY pk(pk01,pk02,pk03,pk04,pk05,pk06,pk07,pk08,
pk09,pk10,pk11,pk12,pk13,pk14,pk15,pk16),
KEY pk(sk01,sk02,sk03,sk04,sk05,sk06,sk07,sk08,
sk09,sk10,sk11,sk12,sk13,sk14,sk15,sk16))
ROW_FORMAT=Redundant ENGINE=InnoDB;
SET @r = repeat('a', 48);
INSERT INTO t1 VALUES(@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,
@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r);
SET @r = repeat('b', 48);
INSERT INTO t1 VALUES(@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,
@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r);
SET @r = repeat('c', 48);
INSERT INTO t1 VALUES(@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,
@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r);
SET @r = repeat('d', 48);
INSERT INTO t1 VALUES(@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,
@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r);
SET @r = repeat('e', 48);
INSERT INTO t1 VALUES(@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,
@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r);
DELETE from t1;
DROP TABLE t1;
CREATE TABLE t1(
pk01 varchar(48), pk02 varchar(48), pk03 varchar(48), pk04 varchar(48),
pk05 varchar(48), pk06 varchar(48), pk07 varchar(48), pk08 varchar(48),
pk09 varchar(48), pk10 varchar(48), pk11 varchar(48), pk12 varchar(48),
pk13 varchar(48), pk14 varchar(48), pk15 varchar(48), pk16 varchar(48),
sk01 varchar(48), sk02 varchar(48), sk03 varchar(48), sk04 varchar(48),
sk05 varchar(48), sk06 varchar(48), sk07 varchar(48), sk08 varchar(48),
sk09 varchar(48), sk10 varchar(48), sk11 varchar(48), sk12 varchar(48),
sk13 varchar(48), sk14 varchar(48), sk15 varchar(48), sk16 varchar(48),
PRIMARY KEY pk(pk01,pk02,pk03,pk04,pk05,pk06,pk07,pk08,
pk09,pk10,pk11,pk12,pk13,pk14,pk15,pk16),
KEY pk(sk01,sk02,sk03,sk04,sk05,sk06,sk07,sk08,
sk09,sk10,sk11,sk12,sk13,sk14,sk15,sk16))
ROW_FORMAT=Compressed KEY_BLOCK_SIZE=4 ENGINE=InnoDB;
SET @r = repeat('a', 48);
INSERT INTO t1 VALUES(@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,
@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r);
SET @r = repeat('b', 48);
INSERT INTO t1 VALUES(@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,
@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r);
SET @r = repeat('c', 48);
INSERT INTO t1 VALUES(@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,
@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r);
SET @r = repeat('d', 48);
INSERT INTO t1 VALUES(@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,
@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r);
SET @r = repeat('e', 48);
INSERT INTO t1 VALUES(@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,
@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r,@r);
DELETE from t1;
DROP TABLE t1;
SET SESSION innodb_strict_mode = off;
CREATE TABLE t1(
c text NOT NULL, d text NOT NULL,
PRIMARY KEY (c(767)))
ENGINE=InnoDB ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=1 CHARSET=ASCII;
Warnings:
Warning	139	Row size too large (> max_row_size). Changing some columns to TEXT or BLOB may help. In current row format, BLOB prefix of 0 bytes is stored inline.
DROP TABLE t1;
CREATE TABLE t1(
c text NOT NULL, d text NOT NULL,
PRIMARY KEY (c(767)))
ENGINE=InnoDB ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=2 CHARSET=ASCII;
drop table t1;
CREATE TABLE t1(
c text NOT NULL, d text NOT NULL,
PRIMARY KEY (c(767)))
ENGINE=InnoDB ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=4 CHARSET=ASCII;
drop table t1;
CREATE TABLE t1(c text, PRIMARY KEY (c(440)))
ENGINE=InnoDB ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=1 CHARSET=ASCII;
Warnings:
Warning	139	Row size too large (> max_row_size). Changing some columns to TEXT or BLOB may help. In current row format, BLOB prefix of 0 bytes is stored inline.
DROP TABLE t1;
CREATE TABLE t1(c text, PRIMARY KEY (c(438)))
ENGINE=InnoDB ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=1 CHARSET=ASCII;
INSERT INTO t1 VALUES(REPEAT('A',512)),(REPEAT('B',512));
DROP TABLE t1;
