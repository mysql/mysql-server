#
# Verifies that the original query ends up in the statements history in
# performance_schema, and that digests are calculated even though the
# statements_digest consumer is disabled.
#

SELECT enabled INTO @original_setting
FROM performance_schema.setup_consumers
WHERE NAME = 'statements_digest';

UPDATE performance_schema.setup_consumers
SET enabled = 'NO'
WHERE NAME = 'statements_digest';

SELECT 'original';
original
original

# The digest column is now NULL since no digest was asked for.
SELECT sql_text, digest
FROM performance_schema.events_statements_history
WHERE sql_text = "SELECT 'original'";
sql_text	digest
SELECT 'original'	NULL

# Query rewrite plugin was installed.

INSERT INTO query_rewrite.rewrite_rules ( pattern, replacement )
VALUES ( 'SELECT "original"', 'SELECT "rewritten"' );

CALL query_rewrite.flush_rewrite_rules();

SELECT 'original';
rewritten
rewritten
Warnings:
Note	1105	Query 'SELECT 'original'' rewritten to 'SELECT "rewritten"' by a query rewrite plugin

# Statements history displays queries after they've been parsed and rewritten
SELECT sql_text, digest
FROM performance_schema.events_statements_history
WHERE sql_text LIKE 'SELECT %' AND sql_text NOT LIKE '%@@skip_networking%@@skip_name_resolve%' ORDER BY event_id;
sql_text	digest
SELECT load_rewrite_rules() INTO message_text	NULL
SELECT "rewritten"	NULL

UPDATE performance_schema.setup_consumers
SET enabled = @original_setting
WHERE NAME = 'statements_digest';

Warnings:
Warning	1620	Plugin is busy and will be uninstalled on shutdown
# Query rewrite plugin was queued for uninstalling.
