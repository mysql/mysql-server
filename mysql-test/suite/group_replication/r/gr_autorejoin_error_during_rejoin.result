include/group_replication.inc [rpl_server_count=3]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]

####
# 0) The test requires three servers.
####

SET SESSION sql_log_bin = 0;
call mtr.add_suppression("This member could not reach a majority of the members for more than 10 seconds. The member will now leave the group as instructed by the group_replication_unreachable_majority_timeout option");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("\\[GCS\\] Timeout while waiting for the group communication engine to exit!");
call mtr.add_suppression("\\[GCS\\] The member has failed to gracefully leave the group.");
call mtr.add_suppression("Started auto-rejoin procedure attempt*");
call mtr.add_suppression("Auto-rejoin procedure attempt*");
call mtr.add_suppression("Unable to initialize the Group Replication applier module.");
call mtr.add_suppression("Slave SQL for channel 'group_replication_applier': Could not execute Update_rows event on table test.t1; Duplicate entry '1' for key 't1.PRIMARY'.*");
call mtr.add_suppression("Slave SQL for channel 'group_replication_applier': Worker .* failed executing transaction .*; Could not execute Update_rows event on table test.t1; Duplicate entry '1' for key 't1.PRIMARY'*");
call mtr.add_suppression("Slave SQL for channel 'group_replication_applier': ... The slave coordinator and worker threads are stopped,*");
call mtr.add_suppression("The applier thread execution was aborted. Unable to process more transactions, this member will now leave the group.");
call mtr.add_suppression("Fatal error during execution on the Applier process of Group Replication. The server will now leave the group.");
call mtr.add_suppression("Unable to confirm whether the server has left the group or not. Check performance_schema.replication_group_members to check group membership information.");
SET SESSION sql_log_bin = 1;
include/gr_autorejoin_monitoring.inc
SET @debug_saved = @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG='+d,group_replication_rejoin_short_retry';
SET @@GLOBAL.DEBUG='+d,group_replication_stop_before_rejoin_loop';
include/start_and_bootstrap_group_replication.inc
CREATE TABLE t1(a INT PRIMARY KEY);
[connection server2]
include/start_group_replication.inc
[connection server3]
include/start_group_replication.inc

####
# 1) Add a local transaction to server1 so that it does fail on rejoin.
####
[connection server1]
SET @@GLOBAL.DEBUG='+d,block_applier_updates';
[connection server2]
INSERT INTO t1 VALUES(0);
UPDATE t1 SET a=1 WHERE a=0;
[connection server3]
[connection server1]
SET DEBUG_SYNC = "now WAIT_FOR applier_read_blocked";
SET SESSION sql_log_bin= 0;
INSERT INTO t1 VALUES(1);
SET SESSION sql_log_bin= 1;

####
# 2) Provoke a majority loss.
####

[connection server1]
SET GLOBAL group_replication_autorejoin_tries = 1;
include/gr_provoke_majority_loss.inc
SET DEBUG_SYNC = "now WAIT_FOR signal.autorejoin_entering_loop";

####
# 3) Verify that the member in the partitioned group will try to rejoin the
#    group the number of it is configured in
#    group_replication_autorejoin_tries sysvar.
####
include/rpl_reconnect.inc
[connection server2]
SET @@global.group_replication_group_seeds="GROUP_SEEDS_SERVER2";
SET @@global.group_replication_local_address="LOCAL_ADDRESS_SERVER2";
include/start_and_bootstrap_group_replication.inc
include/rpl_reconnect.inc
[connection server3]
SET @@global.group_replication_group_seeds="LOCAL_ADDRESS_SERVER2";
SET @@global.group_replication_local_address="LOCAL_ADDRESS_SERVER3";
include/start_group_replication.inc
[connection server2]
include/rpl_gr_wait_for_number_of_members.inc
[connection server3]
include/rpl_gr_wait_for_number_of_members.inc
[connection server1]
SET DEBUG_SYNC = "now SIGNAL signal.autorejoin_enter_loop";
SET @@GLOBAL.DEBUG='-d,block_applier_updates';
SET DEBUG_SYNC = "now SIGNAL resume_applier_read";

####
# 4) Verify that once it rejoins the applier error is triggered and member
#    remains in ERROR state.
####

include/gr_wait_for_member_state.inc

####
# 5) Cleanup.
####

[connection server1]
include/stop_group_replication.inc
SET SESSION sql_log_bin= 0;
DROP TABLE t1;
SET SESSION sql_log_bin= 1;
RESET SLAVE ALL FOR CHANNEL "group_replication_applier";
Warnings:
Warning	1287	'RESET SLAVE' is deprecated and will be removed in a future release. Please use RESET REPLICA instead
SET @@GLOBAL.DEBUG = @debug_saved;
SET DEBUG_SYNC= 'RESET';
SET @@GLOBAL.group_replication_autorejoin_tries = default;
include/gr_end_autorejoin_monitoring.inc
[connection server2]
DROP TABLE t1;
include/group_replication_end.inc
