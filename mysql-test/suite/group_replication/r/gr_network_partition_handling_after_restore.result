#
# 1. Create a group with 3 members
#    Extract each server uuid
#    Create a table on it.
#
include/group_replication.inc [rpl_server_count=3]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]
[connection server1]
SET @@GLOBAL.group_replication_unreachable_majority_timeout= 150;
[connection server2]
[connection server3]
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
include/rpl_sync.inc
#
# 2. Crash server 2 and server 3
# Check they are marked as unreachable
#
[connection server2]
[connection server3]
[connection server1]
include/gr_wait_for_member_state.inc
include/gr_wait_for_member_state.inc
#
# 3. Execute a query that will block
#
INSERT INTO t1 VALUES (2);
#
# 4. Force a group with only M1
#    The blocked transaction should commit successfully
#
[connection server_1]
[connection server1]
# The server's super_read_only mode should be disabled
include/assert.inc [The super_read_only mode should be 0.]
#
# 5. After 150 seconds everything is still fine
#
include/gr_wait_for_member_state.inc
#
# 6. Clean up.
#
include/stop_group_replication.inc
[connection server1]
DROP TABLE t1;
set session sql_log_bin=0;
call mtr.add_suppression("The member lost contact with a majority of the members in the group. Until the network is restored.*");
call mtr.add_suppression("The member resumed contact with a majority of the members in the group.*");
set session sql_log_bin=1;
[connection server_2]
include/rpl_reconnect.inc
DROP TABLE t1;
[connection server_3]
include/rpl_reconnect.inc
DROP TABLE t1;
include/group_replication_end.inc
