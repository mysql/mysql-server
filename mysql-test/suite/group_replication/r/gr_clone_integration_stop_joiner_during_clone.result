include/group_replication.inc [rpl_server_count=3]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]

############################################################
# 1. Install clone plugin on server1.
[connection server1]
INSTALL PLUGIN clone SONAME 'CLONE_PLUGIN';

############################################################
# 2. Bootstrap server1 and add some data
include/start_and_bootstrap_group_replication.inc
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);
INSERT INTO t1 VALUES (2);

#################################################################
# 3. Install the clone plugin and start GR on server3
[connection server3]
INSTALL PLUGIN clone SONAME 'CLONE_PLUGIN';
include/start_group_replication.inc

#######################################################################
# 4. Restart server 2 with a monitoring process (mysqld_safe) if needed
#    Setup the server so group replication starts on boot
[connection server2]
include/spawn_monitoring_process.inc
INSTALL PLUGIN clone SONAME 'CLONE_PLUGIN';

############################################################
# 5. Start group replication on server 2
#    Set a debug point so clone blocks
SET GLOBAL group_replication_clone_threshold= 1;
SET GLOBAL clone_autotune_concurrency = OFF;
SET GLOBAL clone_max_concurrency = 1;
SET @@GLOBAL.DEBUG='+d,gr_clone_wait';
START GROUP_REPLICATION;
SET DEBUG_SYNC = 'now WAIT_FOR gr_clone_paused';

############################################################
# 6. Verify that the server state is RECOVERING during clone
include/gr_wait_for_member_state.inc

############################################################
# 7. Stop group replication on server 2
#    The clone process should have been killed
include/stop_group_replication.inc
include/assert.inc [Clone should have failed]
include/assert_grep.inc [Clone query was aborted]

############################################################
# 8. Start GR again on server 2
#    Clone should fix the server in proper way
SET DEBUG_SYNC = 'RESET';
SET @@GLOBAL.DEBUG = '-d,gr_clone_wait';
START GROUP_REPLICATION;
include/rpl_reconnect.inc
include/gr_wait_for_member_state.inc
include/assert.inc [Clone must be completed]
include/diff_tables.inc [server1:test.t1 ,server2:test.t1]

############################################################
# 9. Cleanup
SET GLOBAL group_replication_clone_threshold= 9223372036854775807;
RESET PERSIST IF EXISTS group_replication_group_name;
RESET PERSIST IF EXISTS group_replication_local_address;
RESET PERSIST IF EXISTS group_replication_group_seeds;
RESET PERSIST IF EXISTS group_replication_start_on_boot;
RESET PERSIST IF EXISTS group_replication_communication_stack;
DROP TABLE t1;
include/rpl_sync.inc
set session sql_log_bin=0;
call mtr.add_suppression("This member will start distributed recovery using clone. It is due to the number of missing transactions being higher than the configured threshold of 1.");
call mtr.add_suppression("Internal query: CLONE INSTANCE FROM \'root\'@\'127.0.0.1\':[0-9]+ IDENTIFIED BY \'\\*\\*\\*\\*\\*\' REQUIRE NO SSL; result in error. Error number:*");
call mtr.add_suppression("There was an issue when cloning from another server: Error number: 1317 Error message: Query execution was interrupted");
call mtr.add_suppression("Clone removing all user data for provisioning: Started");
call mtr.add_suppression("Clone removing all user data for provisioning: Finished");
set session sql_log_bin=1;
include/clean_monitoring_process.inc
include/group_replication_end.inc
