include/group_replication.inc [rpl_server_count=3]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]

############################################################
# 01. Create a table on the group.
[connection server1]
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY);

############################################################
# 02. Make server2 block before send its prepare message. This
#     will allow us to deterministically remove server3 before
#     any member send its acknowledge.
[connection server2]
SET @@GLOBAL.DEBUG= '+d,group_replication_wait_before_message_send_after_applier_prepare';

############################################################
# 03. Make server3 block before send its prepare message. This
#     will allow us to deterministically remove it from the
#     group while others are waiting for its acknowledge.
#     The not acknowledged transaction must rollback on server3.
[connection server3]
SET @@GLOBAL.DEBUG= '+d,group_replication_wait_on_supress_message_send_after_applier_prepare';
SET SESSION sql_log_bin= 0;
call mtr.add_suppression("Due to a plugin error, some transactions were unable to be certified and will now rollback.");
call mtr.add_suppression("Plugin group_replication reported: 'Error on transaction '.*:5' from session '.*' while waiting for being prepared on all group members.");
call mtr.add_suppression("Run function 'before_commit' in plugin 'group_replication' failed");
call mtr.add_suppression("Slave: Error on observer while running replication hook 'before_commit'. Error_code: MY-003100");
call mtr.add_suppression("Slave SQL for channel 'group_replication_applier': Error in Xid_log_event: Commit could not be completed, 'Error on observer while running replication hook 'before_commit'.', Error_code: MY-003100");
call mtr.add_suppression("Slave SQL for channel 'group_replication_applier': Worker 1 failed executing transaction '.*:5'; Error on observer while running replication hook 'before_commit'. Error_code: MY-003100");
call mtr.add_suppression("Slave SQL for channel 'group_replication_applier': ... The slave coordinator and worker threads are stopped.*");
call mtr.add_suppression("The applier thread execution was aborted. Unable to process more transactions, this member will now leave the group.");
call mtr.add_suppression("Fatal error during execution on the Applier process of Group Replication. The server will now leave the group.");
call mtr.add_suppression("Plugin group_replication reported: 'Skipping leave operation: concurrent attempt to leave the group is on-going.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
SET SESSION sql_log_bin= 1;

############################################################
# 04. Execute T1 on server1.
[connection server1]
INSERT INTO t1 VALUES (1);

############################################################
# 05. Wait until T1 is prepared on server2.
[connection server2]
SET DEBUG_SYNC= "now WAIT_FOR signal.after_before_message_send_after_applier_prepare_waiting";

############################################################
# 06. Wait until T1 is prepared on server3.
[connection server3]
SET DEBUG_SYNC= "now WAIT_FOR signal.after_supress_message_send_after_applier_prepare_waiting";

############################################################
# 07. Make server3 do not send its prepare message and remove
#     it from the group.
[connection server3]
SET DEBUG_SYNC= 'now SIGNAL signal.after_supress_message_send_after_applier_prepare_continue';
SET @@GLOBAL.DEBUG= '-d,group_replication_wait_on_supress_message_send_after_applier_prepare';
include/stop_group_replication.inc
include/assert.inc ['There are no values in table t1']

############################################################
# 08. Make server2 resume and send its prepare message.
[connection server2]
SET DEBUG_SYNC= 'now SIGNAL signal.after_before_message_send_after_applier_prepare_continue';
SET @@GLOBAL.DEBUG= '-d,group_replication_wait_before_message_send_after_applier_prepare';

############################################################
# 09. Wait until server3 is removed from the group. T1 will
#     commit on server 1 and 2.
[connection server_1]
include/rpl_gr_wait_for_number_of_members.inc
[connection server1]
include/assert.inc ['There is 1 value in table t1']
[connection server2]
include/assert.inc ['There is 1 value in table t1']
include/diff_tables.inc [server1:t1, server2:t1]

############################################################
# 10. Clean up.
[connection server1]
DROP TABLE t1;
[connection server3]
DROP TABLE t1;
include/group_replication_end.inc
