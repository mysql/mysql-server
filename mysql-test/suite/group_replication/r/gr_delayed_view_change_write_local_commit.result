
############################################################
#  1. Create a group with 3 members.
include/group_replication.inc [rpl_server_count=3]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]

############################################################
#  2. Start 2 servers.
#     Only setup recovery_user on server2 for force server3
#     to recover from it.
[connection server1]
include/start_and_bootstrap_group_replication.inc
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (0);
[connection server2]
SET SESSION sql_log_bin= 0;
CREATE USER "recovery_user" IDENTIFIED BY "recovery_password";
GRANT REPLICATION SLAVE ON *.* TO "recovery_user";
FLUSH PRIVILEGES;
SET SESSION sql_log_bin= 1;
include/start_group_replication.inc

############################################################
#  3. Stop applier on server 2 to force the delayed
#     View_change_log_event log to binary log.
[connection server2]
STOP SLAVE SQL_THREAD FOR CHANNEL "group_replication_applier";

############################################################
#  4. Start Group Replication on server3.
#     It will recover from server2 and will stay on
#     RECOVERING state waiting for View_change_log_event log.
[connection server3]
SET SESSION sql_log_bin= 0;
call mtr.add_suppression("There was an error when connecting to the donor server.*");
call mtr.add_suppression("For details please check performance_schema.replication_connection_status table and error log messages of Slave I/O for channel group_replication_recovery.");
SET SESSION sql_log_bin= 1;
CHANGE MASTER TO MASTER_USER= 'recovery_user', MASTER_PASSWORD= 'recovery_password' FOR CHANNEL 'group_replication_recovery';
include/start_group_replication.inc

############################################################
#  5. Execute 2 transactions on server1 and 1 while server3
#     is on RECOVERING.
#     Transaction on server2 will validate the
#     group_replication_gtid_assignment_block_size option.
[connection server1]
INSERT INTO t1 VALUES (1);
[connection server2]
INSERT INTO t1 VALUES (2);
include/assert_binlog_events.inc [Gtid # Query/BEGIN # View_change # Query/COMMIT # !Gtid_transaction # !Gtid_transaction # Gtid # Query/BEGIN # View_change # Query/COMMIT # !Gtid_transaction]

############################################################
#  6. Server 3 will apply INSERT (2) through recovery.
#     INSERT(1) will only be applied after member is ONLINE.
[connection server3]
include/assert_binlog_events.inc [Gtid # Query/BEGIN # View_change # Query/COMMIT # !Gtid_transaction # !Gtid_transaction # Gtid # Query/BEGIN # View_change # Query/COMMIT # !Gtid_transaction]
include/assert.inc ['There is no value 1 in table t1']
include/assert.inc ['There is a value 2 in table t1']

############################################################
#  7. Start applier on server2.
#     Server3 state will change to ONLINE.
[connection server2]
START SLAVE SQL_THREAD FOR CHANNEL "group_replication_applier";
[connection server3]
include/gr_wait_for_member_state.inc

############################################################
#  8. Sync all group members.
[connection server1]
[connection server2]
[connection server3]
include/assert_binlog_events.inc [Gtid # Query/BEGIN # View_change # Query/COMMIT # !Gtid_transaction # !Gtid_transaction # Gtid # Query/BEGIN # View_change # Query/COMMIT # !Gtid_transaction # Gtid # Query/BEGIN # View_change # Query/COMMIT # !Gtid_transaction]

############################################################
#  9. Execute more transactions on all members.
#     Transactions on server2 and 3 will validate the
#     group_replication_gtid_assignment_block_size option.
[connection server1]
INSERT INTO t1 VALUES (11);
[connection server2]
INSERT INTO t1 VALUES (22);
[connection server3]
INSERT INTO t1 VALUES (33);
include/rpl_sync.inc

############################################################
# 10. Sync all group members.
[connection server1]
include/assert.inc [GTID_EXECUTED must contain all committed GTIDs]
include/assert.inc ['There are 6 values in table t1']
[connection server2]
include/assert.inc [GTID_EXECUTED must contain all committed GTIDs]
include/assert.inc ['There are 6 values in table t1']
[connection server3]
include/assert.inc [GTID_EXECUTED must contain all committed GTIDs]
include/assert.inc ['There are 6 values in table t1']

############################################################
# 11. Clean up.
[connection server2]
DROP TABLE t1;
SET SESSION sql_log_bin= 0;
DROP USER "recovery_user";
SET SESSION sql_log_bin= 1;
include/group_replication_end.inc
