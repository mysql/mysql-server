include/group_replication.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]

############################################################
# 1. Install clone plugin on server1.
[connection server1]
INSTALL PLUGIN clone SONAME 'CLONE_PLUGIN';

############################################################
# 2. Bootstrap server1 and add some data
include/start_and_bootstrap_group_replication.inc
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);
INSERT INTO t1 VALUES (2);

#######################################################################
# 3. Configure globally and persist group_replication_consistency globally to AFTER.
#    Restart server 2 with a monitoring process (mysqld_safe) if needed
[connection server2]
SET PERSIST group_replication_consistency= AFTER;
include/spawn_monitoring_process.inc

############################################################
# 4. Setup the server so group replication starts on boot
#    Install the Clone plugin
INSTALL PLUGIN clone SONAME 'CLONE_PLUGIN';

############################################################
# 5. On a empty server2 start group replication
#    Wait for it to restart and come back
#    Check clone was completed
SET GLOBAL group_replication_clone_threshold= 1;
include/assert.inc [group_replication_consistency is AFTER]
START GROUP_REPLICATION;
include/rpl_reconnect.inc
include/gr_wait_for_member_state.inc
include/assert.inc [group_replication_consistency is AFTER]
include/assert.inc [Clone must be completed]
include/diff_tables.inc [server1:test.t1 ,server2:test.t1]

############################################################
# 6. Cleanup
[connection server1]
UNINSTALL PLUGIN clone;
DROP TABLE test.t1;
include/rpl_sync.inc
[connection server2]
UNINSTALL PLUGIN clone;
RESET PERSIST group_replication_group_name;
RESET PERSIST group_replication_local_address;
RESET PERSIST group_replication_group_seeds;
RESET PERSIST group_replication_start_on_boot;
RESET PERSIST group_replication_consistency;
RESET PERSIST group_replication_communication_stack;
SET GLOBAL group_replication_start_on_boot= START_ON_BOOT_VALUE;
SET GLOBAL group_replication_consistency = GROUP_REPLICATION_CONSISTENCY;
SET GLOBAL group_replication_clone_threshold= GROUP_REPLICATION_CLONE_THRESHOLD;
set session sql_log_bin=0;
call mtr.add_suppression("This member will start distributed recovery using clone. It is due to the number of missing transactions being higher than the configured threshold of*");
call mtr.add_suppression("Clone removing all user data for provisioning: Started");
call mtr.add_suppression("Clone removing all user data for provisioning: Finished");
set session sql_log_bin=1;
include/clean_monitoring_process.inc
include/group_replication_end.inc
