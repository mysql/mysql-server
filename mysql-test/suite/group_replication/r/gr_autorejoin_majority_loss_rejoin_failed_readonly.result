include/group_replication.inc [rpl_server_count=3]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]

#####
# 0) The test requires three servers.
#####

SET SESSION sql_log_bin = 0;
call mtr.add_suppression("This member could not reach a majority of the members for more than 10 seconds. The member will now leave the group as instructed by the group_replication_unreachable_majority_timeout option.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("\\[GCS\\] Timeout while waiting for the group communication engine to exit!");
call mtr.add_suppression("\\[GCS\\] The member has failed to gracefully leave the group.");
call mtr.add_suppression("Started auto-rejoin procedure attempt*");
call mtr.add_suppression("Auto-rejoin procedure attempt*");
call mtr.add_suppression("\\[GCS\\] Error connecting to all peers. Member join failed. Local port:*");
call mtr.add_suppression("\\[GCS\\] The member was unable to join the group.*");
call mtr.add_suppression("Timeout while waiting for a view change event during the auto-rejoin procedure");
call mtr.add_suppression("Unable to confirm whether the server has left the group or not. Check performance_schema.replication_group_members to check group membership information.");
SET SESSION sql_log_bin = 1;
include/gr_autorejoin_monitoring.inc
SET @debug_saved = @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG='+d,group_replication_rejoin_short_retry';
SET @@GLOBAL.DEBUG='+d,group_replication_stop_before_rejoin_loop';
SET @@GLOBAL.DEBUG='+d,group_replication_stop_before_rejoin';
include/start_and_bootstrap_group_replication.inc
[connection server2]
include/start_group_replication.inc
[connection server3]
include/start_group_replication.inc

####
# 1) Provoke a majority loss.
####

[connection server1]
SET GLOBAL group_replication_autorejoin_tries = 3;
include/gr_provoke_majority_loss.inc

####
# 2) Verify that the member in the partitioned group will try to rejoin
# the group the number of it is configured in
# group_replication_autorejoin_tries sysvar.
####

SET DEBUG_SYNC = "now WAIT_FOR signal.autorejoin_entering_loop";
include/assert.inc [Auto-rejoin should be running]
SET DEBUG_SYNC = "now SIGNAL signal.autorejoin_enter_loop";
SET DEBUG_SYNC = "now WAIT_FOR signal.autorejoin_waiting";
include/assert.inc [Auto-rejoin should be running]
include/assert.inc [super_read_only should be enabled]
include/assert.inc [We should have attempted 1 rejoins]
SET DEBUG_SYNC = "now SIGNAL signal.autorejoin_continue";
SET DEBUG_SYNC = "now WAIT_FOR signal.autorejoin_waiting";
include/assert.inc [Auto-rejoin should be running]
include/assert.inc [super_read_only should be enabled]
include/assert.inc [We should have attempted 2 rejoins]
SET DEBUG_SYNC = "now SIGNAL signal.autorejoin_continue";
SET DEBUG_SYNC = "now WAIT_FOR signal.autorejoin_waiting";
include/assert.inc [Auto-rejoin should be running]
include/assert.inc [super_read_only should be enabled]
include/assert.inc [We should have attempted 3 rejoins]
SET DEBUG_SYNC = "now SIGNAL signal.autorejoin_continue";

####
# 2.1) Since group_replication_exit_state_action is set to READ_ONLY,
# the member will enter the ERROR state and enable super_read_only mode.
####

include/gr_wait_for_member_state.inc
include/assert.inc [super_read_only should be enabled]

####
# 4) Cleanup.
####

include/stop_group_replication.inc
include/start_and_bootstrap_group_replication.inc
SET @@GLOBAL.DEBUG = @debug_saved;
SET @@GLOBAL.group_replication_autorejoin_tries = default;
include/gr_end_autorejoin_monitoring.inc
include/group_replication_end.inc
