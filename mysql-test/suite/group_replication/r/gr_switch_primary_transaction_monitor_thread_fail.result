include/group_replication.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]

# 1. Setup group of 2 servers, M1(primary) and M2(secondary).
[connection server1]
SET SESSION sql_log_bin= 0;
call mtr.add_suppression("A configuration change was killed in this member. The member will now leave the group as its configuration may have diverged.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("The function 'group_replication_set_as_primary' failed. A critical error occurred during the local execution of this action. This operation ended in error as it was not possible to stop the ongoing transactions. The member will now leave the group.");
SET SESSION sql_log_bin= 1;
include/start_and_bootstrap_group_replication.inc
[connection server2]
SET SESSION sql_log_bin= 0;
call mtr.add_suppression("A configuration change was killed in this member. The member will now leave the group as its configuration may have diverged.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("Error while executing a group configuration operation: A critical error occurred during the local execution of this action. This operation ended in error as it was not possible to stop the ongoing transactions. The member will now leave the group.");
SET SESSION sql_log_bin= 1;
include/start_group_replication.inc

# 2. Add debug point to fail transaction monitor thread creation.
#    Execute change primary from server1(primary). It will fail.
[connection server1]
SET @@GLOBAL.DEBUG= '+d,group_replication_transaction_monitor_thread_creation_failed';
SELECT group_replication_set_as_primary("SERVER2_UUID", 1);;
ERROR HY000: The function 'group_replication_set_as_primary' failed. A critical error occurred during the local execution of this action. This operation ended in error as it was not possible to stop the ongoing transactions. The member will now leave the group.
SET @@GLOBAL.DEBUG= '-d,group_replication_transaction_monitor_thread_creation_failed';

# 3. Assert M1 old primary is in ERROR state.
#    Assert primary changed.
#    Assert error is logged indicating ongoing transactions were not stopped.
[connection server1]
include/gr_wait_for_member_state.inc
[connection server2]
include/gr_wait_primary_member_uuid.inc

# 4. Add debug point to fail transaction monitor thread creation.
#    Restarted M1. Execute change primary from M1(secondary).
[connection server2]
SET @@GLOBAL.DEBUG= '+d,group_replication_transaction_monitor_thread_creation_failed';
[connection server1]
include/stop_group_replication.inc
include/start_group_replication.inc
SELECT group_replication_set_as_primary("SERVER1_UUID", 1);;
group_replication_set_as_primary("SERVER1_UUID", 1)
Primary server switched to: SERVER1_UUID
[connection server2]
SET @@GLOBAL.DEBUG= '-d,group_replication_transaction_monitor_thread_creation_failed';

# 5. Assert M2 old primary is in ERROR state.
#    Assert primary changed since old PRIMARY left the group.
#    Assert error is logged indicating ongoing transactions were not stopped.
[connection server2]
include/gr_wait_for_member_state.inc
[connection server1]
include/gr_wait_primary_member_uuid.inc

# 6. Cleanup.
include/group_replication_end.inc
