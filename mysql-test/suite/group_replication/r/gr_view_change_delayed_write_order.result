include/group_replication.inc [rpl_server_count=3]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]
#
# 1. Create a user to ensure server 3 recovery comes from server 1
[connection server1]
SET SESSION sql_log_bin= 0;
CREATE USER "recovery_user" IDENTIFIED BY "recovery_password";
GRANT REPLICATION SLAVE ON *.* TO "recovery_user";
FLUSH PRIVILEGES;
SET SESSION sql_log_bin= 1;
#
# 2. Start group replication in server 1 and 2
[connection server1]
include/start_and_bootstrap_group_replication.inc
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
[connection server2]
include/start_group_replication.inc
#
# 3. Block a local transaction on server 1
[connection server1]
SET @@GLOBAL.DEBUG='+d,group_replication_after_before_commit_hook';
INSERT INTO t1 VALUES (1);
#
# 4. Start server 3, it should be stuck in recovery
#    Even after 15 seconds it should still be stuck
[connection server3]
CHANGE MASTER TO MASTER_USER= 'recovery_user', MASTER_PASSWORD= 'recovery_password' FOR CHANNEL 'group_replication_recovery';
include/start_group_replication.inc
include/gr_wait_for_member_state.inc
#
# 5. Execute something on server 2, it should appear on server 3
[connection server2]
INSERT INTO t1 VALUES (2);
[connection server3]
#
# 6. Unblock the local transaction on server 1
[connection server_1]
SET @@GLOBAL.DEBUG='-d,group_replication_after_before_commit_hook';
SET DEBUG_SYNC= "now SIGNAL signal.commit_continue";
[connection server1]
#
# 7. Server 3 should now be online
[connection server3]
include/gr_wait_for_member_state.inc
#
# 8. Check the logged event order in all servers
[connection server1]
include/assert_binlog_events.inc [Gtid # Query/BEGIN # View_change # Query/COMMIT # !Gtid_transaction # Gtid # Query/BEGIN # View_change # Query/COMMIT # !Gtid_transaction # !Gtid_transaction # Gtid # Query/BEGIN # View_change # Query/COMMIT]
[connection server2]
include/assert_binlog_events.inc [Gtid # Query/BEGIN # View_change # Query/COMMIT # !Gtid_transaction # Gtid # Query/BEGIN # View_change # Query/COMMIT # !Gtid_transaction # Gtid # Query/BEGIN # View_change # Query/COMMIT # !Gtid_transaction]
[connection server3]
include/assert_binlog_events.inc [Gtid # Query/BEGIN # View_change # Query/COMMIT # !Gtid_transaction # Gtid # Query/BEGIN # View_change # Query/COMMIT # !Gtid_transaction # !Gtid_transaction # Gtid # Query/BEGIN # View_change # Query/COMMIT]
#
# 9. Clean up.
[connection server1]
DROP TABLE t1;
SET SESSION sql_log_bin= 0;
DROP USER "recovery_user";
SET SESSION sql_log_bin= 1;
SET SESSION sql_log_bin= 0;
call mtr.add_suppression("Timeout when waiting for the server to execute local transactions*");
call mtr.add_suppression("Unable to log the group change View log event in its exaction position in the log.*");
SET SESSION sql_log_bin= 1;
[connection server3]
SET SESSION sql_log_bin= 0;
call mtr.add_suppression("There was an error when connecting to the donor server.*");
call mtr.add_suppression("For details please check performance_schema.replication_connection_status table and error log messages of Slave I/O for channel group_replication_recovery.");
SET SESSION sql_log_bin= 1;
include/group_replication_end.inc
