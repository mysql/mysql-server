include/group_replication.inc [rpl_server_count=3]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]
#
# Setup a new 2 member group
#
include/start_and_bootstrap_group_replication.inc
include/rpl_gr_wait_for_number_of_members.inc
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);
include/start_group_replication.inc
include/rpl_gr_wait_for_number_of_members.inc
STOP SLAVE SQL_THREAD FOR CHANNEL "group_replication_applier";
STOP SLAVE SQL_THREAD FOR CHANNEL "group_replication_applier";
#
# Start recovery on a new member and kill the donor
#
SET SESSION sql_log_bin= 0;
call mtr.add_suppression(".*Error when configuring the group recovery connection *.*");
SET SESSION sql_log_bin= 1;
include/start_group_replication.inc
# Find if server 1 or 2 is the donor
# Stop group replication on the donor making it leave the group
include/stop_group_replication.inc
# Unblock recovery and watch the member go online despite the donor exit
START SLAVE SQL_THREAD FOR CHANNEL "group_replication_applier";
include/gr_wait_for_member_state.inc
include/assert.inc [On the recovered member, the table should exist and have 1 elements;]
include/assert.inc [On the recovered member, the executed GTID should be the same as on the donor plus the view changes]
#
# Cleaning up
#
include/start_group_replication.inc
DROP TABLE t1;
include/group_replication_end.inc
