include/group_replication.inc [rpl_server_count=3]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]

# 1. Start 2 servers.
#    Only setup recovery_user with GRANT REPLICATION SLAVE on server2
#    for force server3 to recover from it.
[connection server1]
SET SESSION sql_log_bin= 0;
CREATE USER "recovery_user" IDENTIFIED BY "recovery_password";
GRANT GROUP_REPLICATION_STREAM ON *.* TO "recovery_user";
FLUSH PRIVILEGES;
SET SESSION sql_log_bin= 1;
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (0);
include/start_and_bootstrap_group_replication.inc
[connection server2]
SET SESSION sql_log_bin= 0;
CREATE USER "recovery_user" IDENTIFIED BY "recovery_password";
GRANT REPLICATION SLAVE ON *.* TO "recovery_user";
GRANT GROUP_REPLICATION_STREAM ON *.* TO "recovery_user";
FLUSH PRIVILEGES;
SET SESSION sql_log_bin= 1;
include/start_group_replication.inc

# 2. Block applier on server 2 to force the delayed
#    View_change_log_event log to binary log.
[connection server2]
SET @@GLOBAL.DEBUG='+d,block_applier_updates';

# 3. Start Group Replication on server3.
#    It will recover from server2 and will stay on
#    RECOVERING state waiting for View_change_log_event log.
[connection server3]
SET SESSION sql_log_bin= 0;
CREATE USER "recovery_user" IDENTIFIED BY "recovery_password";
GRANT GROUP_REPLICATION_STREAM ON *.* TO "recovery_user";
FLUSH PRIVILEGES;
SET SESSION sql_log_bin= 1;
SET SESSION sql_log_bin= 0;
call mtr.add_suppression("There was an error when connecting to the donor server.*");
call mtr.add_suppression("For details please check performance_schema.replication_connection_status table and error log messages of Slave I/O for channel group_replication_recovery.");
call mtr.add_suppression("Slave I/O for channel 'group_replication_recovery': Master command COM_REGISTER_SLAVE failed*");
call mtr.add_suppression("Slave I/O thread couldn't register on master*");
SET SESSION sql_log_bin= 1;
CHANGE REPLICATION SOURCE TO SOURCE_USER= 'recovery_user', SOURCE_PASSWORD= 'recovery_password' FOR CHANNEL 'group_replication_recovery';
include/start_group_replication.inc

# 4. Execute 2 transactions on server1 and 2 while server3
#    is on RECOVERING.
[connection server1]
INSERT INTO t1 VALUES (1);
[connection server_2]
INSERT INTO t1 VALUES (2);

# 5. INSERT(1) will only be applied after member is ONLINE.
#    INSERT(2) will only be applied after member is ONLINE.
[connection server3]
include/assert.inc [value of 1 is not received.]
include/assert.inc [value of 2 is not received.]

# 6. Resume applier on server2.
#    Server3 state will change to ONLINE.
[connection server2]
SET DEBUG_SYNC = "now WAIT_FOR applier_read_blocked";
SET @@GLOBAL.DEBUG='-d,block_applier_updates';
SET DEBUG_SYNC = "now SIGNAL resume_applier_read";
[connection server_2]
[connection server3]
include/gr_wait_for_member_state.inc
include/rpl_sync.inc

# 7. Assert COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE is 0 on all servers.
[connection server1]
[connection server2]
[connection server3]
include/diff_tables.inc [server1:test.t1, server2:test.t1, server3:test.t1]
[connection server1]
include/show_binlog_events.inc
Log_name	Pos	Event_type	Server_id	End_log_pos	Info
server-binary-log.000001	#	Previous_gtids	#	#	
server-binary-log.000001	#	Gtid	#	#	SET @@SESSION.GTID_NEXT= 'Gtid_set'
server-binary-log.000001	#	Query	#	#	use `test`; CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB
server-binary-log.000001	#	Gtid	#	#	SET @@SESSION.GTID_NEXT= 'Gtid_set'
server-binary-log.000001	#	Query	#	#	BEGIN
server-binary-log.000001	#	Table_map	#	#	table_id: # (test.t1)
server-binary-log.000001	#	Write_rows	#	#	table_id: # flags: STMT_END_F
server-binary-log.000001	#	Xid	#	#	COMMIT /* XID */
server-binary-log.000001	#	Gtid	#	#	SET @@SESSION.GTID_NEXT= 'Gtid_set'
server-binary-log.000001	#	Query	#	#	BEGIN
server-binary-log.000001	#	Query	#	#	COMMIT
server-binary-log.000001	#	Gtid	#	#	SET @@SESSION.GTID_NEXT= 'Gtid_set'
server-binary-log.000001	#	Query	#	#	BEGIN
server-binary-log.000001	#	Query	#	#	COMMIT
server-binary-log.000001	#	Gtid	#	#	SET @@SESSION.GTID_NEXT= 'Gtid_set'
server-binary-log.000001	#	Query	#	#	BEGIN
server-binary-log.000001	#	Query	#	#	COMMIT
server-binary-log.000001	#	Gtid	#	#	SET @@SESSION.GTID_NEXT= 'Gtid_set'
server-binary-log.000001	#	Query	#	#	BEGIN
server-binary-log.000001	#	Table_map	#	#	table_id: # (test.t1)
server-binary-log.000001	#	Write_rows	#	#	table_id: # flags: STMT_END_F
server-binary-log.000001	#	Xid	#	#	COMMIT /* XID */
server-binary-log.000001	#	Gtid	#	#	SET @@SESSION.GTID_NEXT= 'Gtid_set'
server-binary-log.000001	#	Query	#	#	BEGIN
server-binary-log.000001	#	Table_map	#	#	table_id: # (test.t1)
server-binary-log.000001	#	Write_rows	#	#	table_id: # flags: STMT_END_F
server-binary-log.000001	#	Xid	#	#	COMMIT /* XID */
[connection server2]
include/show_binlog_events.inc
Log_name	Pos	Event_type	Server_id	End_log_pos	Info
server-binary-log.000001	#	Previous_gtids	#	#	
server-binary-log.000001	#	Gtid	#	#	SET @@SESSION.GTID_NEXT= 'Gtid_set'
server-binary-log.000001	#	Query	#	#	use `test`; CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB
server-binary-log.000001	#	Gtid	#	#	SET @@SESSION.GTID_NEXT= 'Gtid_set'
server-binary-log.000001	#	Query	#	#	BEGIN
server-binary-log.000001	#	Table_map	#	#	table_id: # (test.t1)
server-binary-log.000001	#	Write_rows	#	#	table_id: # flags: STMT_END_F
server-binary-log.000001	#	Xid	#	#	COMMIT /* XID */
server-binary-log.000001	#	Gtid	#	#	SET @@SESSION.GTID_NEXT= 'Gtid_set'
server-binary-log.000001	#	Query	#	#	BEGIN
server-binary-log.000001	#	Query	#	#	COMMIT
server-binary-log.000001	#	Gtid	#	#	SET @@SESSION.GTID_NEXT= 'Gtid_set'
server-binary-log.000001	#	Query	#	#	BEGIN
server-binary-log.000001	#	Query	#	#	COMMIT
server-binary-log.000001	#	Gtid	#	#	SET @@SESSION.GTID_NEXT= 'Gtid_set'
server-binary-log.000001	#	Query	#	#	BEGIN
server-binary-log.000001	#	Query	#	#	COMMIT
server-binary-log.000001	#	Gtid	#	#	SET @@SESSION.GTID_NEXT= 'Gtid_set'
server-binary-log.000001	#	Query	#	#	BEGIN
server-binary-log.000001	#	Table_map	#	#	table_id: # (test.t1)
server-binary-log.000001	#	Write_rows	#	#	table_id: # flags: STMT_END_F
server-binary-log.000001	#	Xid	#	#	COMMIT /* XID */
server-binary-log.000001	#	Gtid	#	#	SET @@SESSION.GTID_NEXT= 'Gtid_set'
server-binary-log.000001	#	Query	#	#	BEGIN
server-binary-log.000001	#	Table_map	#	#	table_id: # (test.t1)
server-binary-log.000001	#	Write_rows	#	#	table_id: # flags: STMT_END_F
server-binary-log.000001	#	Xid	#	#	COMMIT /* XID */
[connection server3]
include/show_binlog_events.inc
Log_name	Pos	Event_type	Server_id	End_log_pos	Info
server-binary-log.000001	#	Previous_gtids	#	#	
server-binary-log.000001	#	Gtid	#	#	SET @@SESSION.GTID_NEXT= 'Gtid_set'
server-binary-log.000001	#	Query	#	#	use `test`; CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB
server-binary-log.000001	#	Gtid	#	#	SET @@SESSION.GTID_NEXT= 'Gtid_set'
server-binary-log.000001	#	Query	#	#	BEGIN
server-binary-log.000001	#	Table_map	#	#	table_id: # (test.t1)
server-binary-log.000001	#	Write_rows	#	#	table_id: # flags: STMT_END_F
server-binary-log.000001	#	Xid	#	#	COMMIT /* XID */
server-binary-log.000001	#	Gtid	#	#	SET @@SESSION.GTID_NEXT= 'Gtid_set'
server-binary-log.000001	#	Query	#	#	BEGIN
server-binary-log.000001	#	Query	#	#	COMMIT
server-binary-log.000001	#	Gtid	#	#	SET @@SESSION.GTID_NEXT= 'Gtid_set'
server-binary-log.000001	#	Query	#	#	BEGIN
server-binary-log.000001	#	Query	#	#	COMMIT
server-binary-log.000001	#	Gtid	#	#	SET @@SESSION.GTID_NEXT= 'Gtid_set'
server-binary-log.000001	#	Query	#	#	BEGIN
server-binary-log.000001	#	Query	#	#	COMMIT
server-binary-log.000001	#	Gtid	#	#	SET @@SESSION.GTID_NEXT= 'Gtid_set'
server-binary-log.000001	#	Query	#	#	BEGIN
server-binary-log.000001	#	Table_map	#	#	table_id: # (test.t1)
server-binary-log.000001	#	Write_rows	#	#	table_id: # flags: STMT_END_F
server-binary-log.000001	#	Xid	#	#	COMMIT /* XID */
server-binary-log.000001	#	Gtid	#	#	SET @@SESSION.GTID_NEXT= 'Gtid_set'
server-binary-log.000001	#	Query	#	#	BEGIN
server-binary-log.000001	#	Table_map	#	#	table_id: # (test.t1)
server-binary-log.000001	#	Write_rows	#	#	table_id: # flags: STMT_END_F
server-binary-log.000001	#	Xid	#	#	COMMIT /* XID */

# 8. Clean up.
[connection server1]
SET SESSION sql_log_bin= 0;
DROP USER "recovery_user";
SET SESSION sql_log_bin= 1;
[connection server2]
SET DEBUG_SYNC= 'RESET';
DROP TABLE t1;
SET SESSION sql_log_bin= 0;
DROP USER "recovery_user";
SET SESSION sql_log_bin= 1;
[connection server3]
SET SESSION sql_log_bin= 0;
DROP USER "recovery_user";
SET SESSION sql_log_bin= 1;
include/group_replication_end.inc
