include/group_replication.inc [rpl_server_count=4]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]

# 1. Bootstrap M1 with 8.0.15 version.
#    Start GR on M2 with base version.
#    Start GR on M3 with higher minor version and member weight 80.
#    Start GR on M4 with higher major version and member weight 90.

SET @debug1_save= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG= 'd,group_replication_legacy_election_version2';
include/start_and_bootstrap_group_replication.inc
[connection server2]
SET SESSION sql_log_bin=0;
call mtr.add_suppression("Member version is read compatible with the group.");
SET SESSION sql_log_bin=1;
include/start_group_replication.inc
[connection server3]
SET @debug3_save= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG= 'd,group_replication_compatibility_higher_minor_version';
SET @member_weight3_save= @@GLOBAL.group_replication_member_weight;
SET GLOBAL group_replication_member_weight= 80;
SET SESSION sql_log_bin=0;
call mtr.add_suppression("Member version is read compatible with the group.");
SET SESSION sql_log_bin=1;
include/start_group_replication.inc
[connection server4]
SET @debug4_save= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG= 'd,group_replication_compatibility_higher_major_version';
SET @member_weight4_save= @@GLOBAL.group_replication_member_weight;
SET GLOBAL group_replication_member_weight= 90;
SET SESSION sql_log_bin=0;
call mtr.add_suppression("Member version is read compatible with the group.");
SET SESSION sql_log_bin=1;
include/start_group_replication.inc

# 2. Make M2 primary using UDF and stop GR on M2.
#    M3 becomes primary due to member weight.
#    M4 due to major version is not considered.
#    Version rule is ignored due to 8.0.15 presence in group.

[connection server2]
SELECT group_replication_set_as_primary("MEMBER_UUID");;
group_replication_set_as_primary("MEMBER_UUID")
Primary server switched to: MEMBER_UUID
include/gr_assert_spm_consistency.inc
include/stop_group_replication.inc
include/gr_assert_spm_consistency.inc

# 3. Start GR on M2 and make it primary using UDF.
#    Reset member weight on M3 and stop GR on M2.
#    Lowest server_uuid between M1 or M3 becomes primary.
#    Version rule is ignored due to 8.0.15 presence in group.

include/start_group_replication.inc
SELECT group_replication_set_as_primary("MEMBER_UUID");;
group_replication_set_as_primary("MEMBER_UUID")
Primary server switched to: MEMBER_UUID
include/gr_assert_spm_consistency.inc
[connection server3]
SET @@GLOBAL.group_replication_member_weight = @member_weight3_save;
[connection server2]
include/stop_group_replication.inc
[connection server3]
include/gr_assert_spm_consistency.inc

# 4. Make M1 primary using UDF and stop GR on M1.
#    M3 becomes primary due to lowest major version rule.

[connection server1]
SELECT group_replication_set_as_primary("MEMBER_UUID");;
include/stop_group_replication.inc
include/gr_assert_spm_consistency.inc

# 5. Cleanup.

[connection server4]
SET @@GLOBAL.DEBUG= @debug4_save;
SET @@GLOBAL.group_replication_member_weight = @member_weight4_save;
include/stop_group_replication.inc
[connection server3]
SET @@GLOBAL.DEBUG= @debug3_save;
include/stop_group_replication.inc
[connection server1]
SET @@GLOBAL.DEBUG= @debug1_save;
include/group_replication_end.inc
