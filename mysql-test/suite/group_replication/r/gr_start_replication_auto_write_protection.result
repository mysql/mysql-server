include/group_replication.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]
#
# Start the member 1 and 2 and add some data
#
include/start_and_bootstrap_group_replication.inc
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);
include/start_group_replication.inc
include/stop_group_replication.inc
#
# Block the applier on server 1 to block recovery on server 2
#
SET @@GLOBAL.DEBUG='+d,block_applier_updates';
#
# On server 2 restart the server. Group replication should start at boot
#
# restart:--group_replication_local_address=GROUP_REPLICATION_LOCAL_ADDRESS --group_replication_group_seeds=GROUP_REPLICATION_GROUP_SEEDS --group_replication_start_on_boot=1 --group-replication-group-name=f68d2bd0-8964-11e5-a837-0800200c9a66
[connection server_2]
[connection server2]
include/gr_wait_for_member_state.inc
#
# On server 2 after restart, recovery should be stuck
# Query execution is not allowed
#
INSERT INTO t1 VALUES (2);
ERROR HY000: The MySQL server is running with the --super-read-only option so it cannot execute this statement
include/assert.inc [On the recovered member, the table should exist and have 1 elements;]
#
# Unblock recovery by resuming the applier on server 1
#
SET DEBUG_SYNC = "now WAIT_FOR applier_read_blocked";
SET @@GLOBAL.DEBUG='-d,block_applier_updates';
SET DEBUG_SYNC = "now SIGNAL resume_applier_read";
include/gr_wait_for_member_state.inc
INSERT INTO t1 VALUES (2);
#
# Cleanup
#
SET DEBUG_SYNC= 'RESET';
DROP TABLE t1;
include/group_replication_end.inc
