include/group_replication.inc [rpl_server_count=3]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]

############################################################
# 01. Increase the expel timeout.
[connection server1]
SET GLOBAL group_replication_member_expel_timeout = 300;
SELECT @@GLOBAL.group_replication_member_expel_timeout;
@@GLOBAL.group_replication_member_expel_timeout
300
[connection server2]
SET GLOBAL group_replication_member_expel_timeout = 300;
SELECT @@GLOBAL.group_replication_member_expel_timeout;
@@GLOBAL.group_replication_member_expel_timeout
300
[connection server3]
SET GLOBAL group_replication_member_expel_timeout = 300;
SELECT @@GLOBAL.group_replication_member_expel_timeout;
@@GLOBAL.group_replication_member_expel_timeout
300
SET SESSION sql_log_bin = 0;
CREATE TABLE pid_table(pid_no INT PRIMARY KEY);
LOAD DATA LOCAL INFILE 'pid_file' INTO TABLE pid_table;
DROP TABLE pid_table;
SET SESSION sql_log_bin = 1;

############################################################
# 02. Create a table on the group.
[connection server1]
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY);
[connection server1]
[connection server2]
[connection server3]

############################################################
# 03. Make server 3 block before send its prepare message.
#     This will allow us to deterministically make it
#     UNREACHABLE while others are waiting for its acknowledge.
[connection server3]
SET @@GLOBAL.DEBUG= '+d,group_replication_wait_before_message_send_after_applier_prepare';

############################################################
# 04. Execute T1 on server1.
[connection server1]
INSERT INTO t1 VALUES (1);

############################################################
# 05. Wait until T1 is prepared on server3.
[connection server3]
SET DEBUG_SYNC= "now WAIT_FOR signal.after_before_message_send_after_applier_prepare_waiting";

############################################################
# 06. Make server 3 UNREACHABLE.
[connection server_3]
[connection server_1]
include/gr_wait_for_member_state.inc
[connection server2]
include/gr_wait_for_member_state.inc

############################################################
# 07. server 1 and 2 are waiting for the acknowledges, they
#     will not proceed until server3 acknowledges or leaves
#     the group.
[connection server_1]
[connection server2]

############################################################
# 08. Make server 3 ONLINE.
[connection server_3]
[connection server_1]
include/gr_wait_for_member_state.inc
[connection server2]
include/gr_wait_for_member_state.inc

############################################################
# 09. Unblock T1 prepare on server3.
[connection server3]
SET DEBUG_SYNC= 'now SIGNAL signal.after_before_message_send_after_applier_prepare_continue';
SET @@GLOBAL.DEBUG= '-d,group_replication_wait_before_message_send_after_applier_prepare';

############################################################
# 10. T1 is committed on all servers.
[connection server1]
include/assert.inc ['There is 1 value in table t1']
[connection server2]
include/assert.inc ['There is 1 value in table t1']
[connection server3]
include/assert.inc ['There is 1 value in table t1']
include/diff_tables.inc [server1:t1, server2:t1, server3:t1]

############################################################
# 11. Clean up.
[connection server1]
DROP TABLE t1;
include/group_replication_end.inc
