include/group_replication.inc [rpl_server_count=3]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]

####
# 0) The test requires three servers.
####

SET SESSION sql_log_bin = 0;
call mtr.add_suppression("This member could not reach a majority of the members for more than 10 seconds. The member will now leave the group as instructed by the group_replication_unreachable_majority_timeout option");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("\\[GCS\\] Timeout while waiting for the group communication engine to exit!");
call mtr.add_suppression("\\[GCS\\] The member has failed to gracefully leave the group.");
call mtr.add_suppression("Started auto-rejoin procedure attempt*");
call mtr.add_suppression("Auto-rejoin procedure attempt*");
SET SESSION sql_log_bin = 1;
include/gr_autorejoin_monitoring.inc
SET @debug_saved = @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG='+d,group_replication_rejoin_short_retry';
SET @@GLOBAL.DEBUG='+d,group_replication_stop_before_rejoin_loop';
include/start_and_bootstrap_group_replication.inc
[connection server2]
include/start_group_replication.inc
[connection server3]
include/start_group_replication.inc

####
# 1) Provoke a majority loss.
####

[connection server1]
SET GLOBAL group_replication_autorejoin_tries = 1;
SET @@GLOBAL.DEBUG='+d,recovery_thread_start_wait';
include/gr_provoke_majority_loss.inc
SET DEBUG_SYNC = "now WAIT_FOR signal.autorejoin_entering_loop";
include/rpl_reconnect.inc
[connection server2]
SET @@global.group_replication_group_seeds="GROUP_SEEDS_SERVER2";
SET @@global.group_replication_local_address="LOCAL_ADDRESS_SERVER2";
include/start_and_bootstrap_group_replication.inc
CREATE TABLE t1(a INT PRIMARY KEY);
INSERT INTO t1 VALUES(1);
INSERT INTO t1 VALUES(2);
INSERT INTO t1 VALUES(3);
INSERT INTO t1 VALUES(4);
include/rpl_reconnect.inc
[connection server3]
SET @@global.group_replication_group_seeds="LOCAL_ADDRESS_SERVER2";
SET @@global.group_replication_local_address="LOCAL_ADDRESS_SERVER3";
include/start_group_replication.inc
[connection server2]
include/rpl_gr_wait_for_number_of_members.inc
[connection server3]
include/rpl_gr_wait_for_number_of_members.inc
[connection server1]
SET DEBUG_SYNC = "now SIGNAL signal.autorejoin_enter_loop";

####
# 2) Verify that once it successfully rejoins the group before depleting
# all tries, it will go through the usual RECOVERY phase and becomes
# ONLINE.
####

SET DEBUG_SYNC = "now WAIT_FOR signal.recovery_waiting";
include/gr_wait_for_member_state.inc
[connection server2]
include/gr_wait_for_member_state.inc
[connection server3]
include/gr_wait_for_member_state.inc
[connection server1]
SET DEBUG_SYNC = "now SIGNAL signal.recovery_continue";
SET @@GLOBAL.DEBUG='-d,recovery_thread_start_wait';
include/gr_wait_for_member_state.inc
include/rpl_gr_wait_for_number_of_members.inc
[connection server2]
include/rpl_gr_wait_for_number_of_members.inc
include/gr_wait_for_member_state.inc
[connection server3]
include/rpl_gr_wait_for_number_of_members.inc

####
# 3) Cleanup.
####

[connection server1]
DROP TABLE t1;
SET @@GLOBAL.DEBUG = @debug_saved;
SET @@GLOBAL.group_replication_autorejoin_tries = default;
include/gr_end_autorejoin_monitoring.inc
include/group_replication_end.inc
