include/group_replication.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]

############################################################
# 1. Start Group Replication on server1 and check the memory used
#    by 'memory/group_rpl/sql_service_command_data'.
[connection server1]
SET @@GLOBAL.DEBUG= '+d,group_replication_session_plugin_handler_before_pop';
SET GLOBAL group_replication_bootstrap_group= 1;
[connection server_1]
START GROUP_REPLICATION;
[connection server1]
SET DEBUG_SYNC= "now WAIT_FOR signal.group_replication_session_plugin_handler_before_pop_reached";
include/assert.inc ['The sum of bytes allocated must be greater than zero']
SET @@GLOBAL.DEBUG= '-d,group_replication_session_plugin_handler_before_pop';
SET DEBUG_SYNC= "now SIGNAL signal.group_replication_session_plugin_handler_before_pop_continue";
include/gr_wait_for_member_state.inc
[connection server_1]

############################################################
# 2. Verify that the entries corresponding to the
#    instrumented memory are in the setup instruments
#    table and the memory summary tables.
[connection server1]
SELECT * FROM performance_schema.setup_instruments WHERE NAME LIKE 'memory/group_rpl/sql_service_command_data';
NAME	ENABLED	TIMED	PROPERTIES	FLAGS	VOLATILITY	DOCUMENTATION
memory/group_rpl/sql_service_command_data	YES	NULL	global_statistics		0	Memory gets allocated when internal sql service commands is added to queue to process in orderly manner.
include/assert.inc ['There should be 1 entry corresponding to the sql_service_command_data in the setup_instruments table after starting GR']
SELECT EVENT_NAME FROM performance_schema.memory_summary_global_by_event_name WHERE EVENT_NAME LIKE 'memory/group_rpl/sql_service_command_data';
EVENT_NAME
memory/group_rpl/sql_service_command_data
include/assert.inc ['There should be 1 entry corresponding to the sql_service_command_data in the memory_summary_global_by_event_name table after starting GR']

##############################################################
# 3. Verify that the entries corresponding to the instrumented
#    sql_service_command_data remain in the tables after stopping GR.
[connection server1]
include/stop_group_replication.inc
include/assert.inc ['There should be 1 entry corresponding to the sql_service_command_data in the setup_instruments table after stopping GR']
include/assert.inc ['There should be 1 entry corresponding to the sql_service_command_data in the memory_summary_global_by_event_name table after stopping GR']

#################################################################
# 4. Assert that the number of bytes allocated for
#    sql_service_command_data event must be 0.
include/assert.inc ['The sum of bytes allocated must be zero after stopping GR']

#################################################################
# 5. Clean up
include/group_replication_end.inc
