include/group_replication.inc [rpl_server_count=4]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]

############################################################
# 1. Deploy a 3 members group in single primary mode.
[connection server1]
include/start_and_bootstrap_group_replication.inc
[connection server2]
include/start_group_replication.inc
[connection server3]
include/start_group_replication.inc

############################################################
# 2. Add manually the third member of group to the list of
#    unmanaged sources of the replica.
[connection server4]
SELECT asynchronous_connection_failover_add_source('ch1', '127.0.0.1', SERVER_MYPORT_3, '', 90);;
asynchronous_connection_failover_add_source('ch1', '127.0.0.1', SERVER_MYPORT_3, '', 90)
The UDF asynchronous_connection_failover_add_source() executed successfully.
############################################################
# 3. Configure replica to manage the asynchronous connection
#    to group A.

[connection server4]
SELECT asynchronous_connection_failover_add_managed('ch1', 'GroupReplication', 'GROUP', '127.0.0.1', SERVER_MYPORT_2, '', 80, 70);;
asynchronous_connection_failover_add_managed('ch1', 'GroupReplication', 'GROUP', '127.0.0.1', SERVER_MYPORT_2, '', 80, 70)
The UDF asynchronous_connection_failover_add_managed() executed successfully.
############################################################
# 4. Create and start the managed channel.
#    Replica will connect to server3 (weigth: 90).
[connection server4]
CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_USER='root', SOURCE_AUTO_POSITION=1, SOURCE_CONNECTION_AUTO_FAILOVER=1, SOURCE_PORT=SERVER_1_PORT, SOURCE_CONNECT_RETRY=1, SOURCE_RETRY_COUNT=1 FOR CHANNEL 'ch1';
Warnings:
Note	1759	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	1760	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
include/start_slave.inc [FOR CHANNEL 'ch1']
SELECT * FROM performance_schema.replication_asynchronous_connection_failover ORDER BY weight DESC;
CHANNEL_NAME	HOST	PORT	NETWORK_NAMESPACE	WEIGHT	MANAGED_NAME
ch1	127.0.0.1	PORT		90	
ch1	127.0.0.1	PORT		80	aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa
ch1	127.0.0.1	PORT		70	aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa
ch1	127.0.0.1	PORT		70	aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa
Wait until ch1 IO_THREAD is connected to server3
############################################################
# 5. Remove the manually added server3 from the sources list.
#    Replica will connect to server1 (weigth: 80).
[connection server4]
SELECT asynchronous_connection_failover_delete_source('ch1', '127.0.0.1', SERVER_MYPORT_3, '');;
asynchronous_connection_failover_delete_source('ch1', '127.0.0.1', SERVER_MYPORT_3, '')
The UDF asynchronous_connection_failover_delete_source() executed successfully.
include/assert.inc ['There are 0 rows in performance_schema.replication_asynchronous_connection_failover for single servers']
include/assert.inc ['There are 3 rows in performance_schema.replication_asynchronous_connection_failover belonging to the group']
SELECT * FROM performance_schema.replication_asynchronous_connection_failover ORDER BY weight DESC;
CHANNEL_NAME	HOST	PORT	NETWORK_NAMESPACE	WEIGHT	MANAGED_NAME
ch1	127.0.0.1	PORT		80	aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa
ch1	127.0.0.1	PORT		70	aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa
ch1	127.0.0.1	PORT		70	aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa
Wait until ch1 IO_THREAD is connected to server1
############################################################
# 6. Clean up.
[connection server4]
SET SESSION sql_log_bin = 0;
call mtr.add_suppression("The source .* for channel 'ch1' has joined the group .*, and so added its entry into replication_asynchronous_connection_failover table.");
call mtr.add_suppression("The master's UUID has changed, although this should not happen unless you have changed it manually.");
call mtr.add_suppression("The group .* for the channel .* has been removed, and so removed its entry from replication_asynchronous_connection_failover_managed and all the group members from replication_asynchronous_connection_failover table.");
call mtr.add_suppression("The group .* for the channel .* has been added, and so added its entry in replication_asynchronous_connection_failover_managed and source to replication_asynchronous_connection_failover table.");
SET SESSION sql_log_bin = 1;
include/stop_slave.inc [FOR CHANNEL 'ch1']
include/rpl_reset_slave.inc
SELECT asynchronous_connection_failover_delete_managed('ch1', 'GROUP');
asynchronous_connection_failover_delete_managed('ch1', 'GROUP')
The UDF asynchronous_connection_failover_delete_managed() executed successfully.
[connection server3]
include/stop_group_replication.inc
[connection server2]
include/stop_group_replication.inc
[connection server1]
include/stop_group_replication.inc
include/group_replication_end.inc
