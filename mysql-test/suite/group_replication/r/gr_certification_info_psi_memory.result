include/group_replication.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]

############################################################
# 1. Verify that the entries corresponding to the
#    instrumented memory are in the setup instruments
#    table and the memory summary tables.
SELECT * FROM performance_schema.setup_instruments WHERE NAME LIKE 'memory/group_rpl/certification_info';
NAME	ENABLED	TIMED	PROPERTIES	FLAGS	VOLATILITY	DOCUMENTATION
memory/group_rpl/certification_info	YES	NULL	global_statistics		0	Memory used to store certification information which is used to handle conflict resolution between transactions that execute concurrently.
include/assert.inc ['There should be 1 entry corresponding to the certification_info in the setup_instruments table after starting GR']
SELECT EVENT_NAME FROM performance_schema.memory_summary_global_by_event_name WHERE EVENT_NAME LIKE 'memory/group_rpl/certification_info';
EVENT_NAME
memory/group_rpl/certification_info
include/assert.inc ['There should be 1 entry corresponding to the certification_info in the memory_summary_global_by_event_name table after starting GR']

############################################################
# 2. Verify that the sum of bytes allocated is greater than
#    zero for a transaction.
CREATE TABLE t1(c1 INT PRIMARY KEY) ENGINE=innodb;
SET @@GLOBAL.DEBUG= '+d,group_replication_certifier_after_add_item';
INSERT INTO t1 VALUES(1);;
[connection server_1]
SET DEBUG_SYNC= "now WAIT_FOR signal.group_replication_certifier_after_add_item_reached";
include/assert.inc ['The sum bytes allocated must be greater than 0']
SET @@GLOBAL.DEBUG= '-d,group_replication_certifier_after_add_item';
SET DEBUG_SYNC= "now SIGNAL signal.group_replication_certifier_after_add_item_continue";
[connection server1]
DROP TABLE t1;

############################################################
# 3. Stop GR
include/stop_group_replication.inc

##############################################################
# 4. Verify that the entries corresponding to the instrumented
#    certification_info remain in the tables after stopping GR.
SELECT * FROM performance_schema.setup_instruments WHERE NAME LIKE 'memory/group_rpl/certification_info';
NAME	ENABLED	TIMED	PROPERTIES	FLAGS	VOLATILITY	DOCUMENTATION
memory/group_rpl/certification_info	YES	NULL	global_statistics		0	Memory used to store certification information which is used to handle conflict resolution between transactions that execute concurrently.
include/assert.inc ['There should be 1 entry corresponding to the certification_info in the setup_instruments table after stopping GR']
SELECT EVENT_NAME, CURRENT_NUMBER_OF_BYTES_USED FROM performance_schema.memory_summary_global_by_event_name WHERE EVENT_NAME LIKE 'memory/group_rpl/certification_info';
EVENT_NAME	CURRENT_NUMBER_OF_BYTES_USED
memory/group_rpl/certification_info	0
include/assert.inc ['There should be 1 entry corresponding to the certification_info in the memory_summary_global_by_event_name table after stopping GR']

#################################################################
# 5. Assert that the number of bytes allocated for
#    certification_info event must be 0.
include/assert.inc ['The sum of bytes allocated must be zero after stopping GR']

include/group_replication_end.inc
