include/group_replication.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]
#
# 2 member group
# Force a pipeline error on certification handler.
#
[connection server1]
SET SESSION sql_log_bin= 0;
call mtr.add_suppression("Failed to fetch Transaction_context_log_event containing required transaction info for certification");
call mtr.add_suppression("Fatal error during execution on the Applier process of Group Replication. The server will now leave the group.");
call mtr.add_suppression("Error at event handling! Got error: 1");
call mtr.add_suppression("The member is leaving a group without being on one");
call mtr.add_suppression("Due to a plugin error, some transactions were unable to be certified and will now rollback.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("Error while waiting for conflict detection procedure to finish on session .*");
call mtr.add_suppression("Run function 'before_commit' in plugin 'group_replication' failed");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
SET SESSION sql_log_bin= 1;
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
SET @@GLOBAL.DEBUG= '+d,certification_handler_force_error_on_pipeline';
#
# Execute a transaction on member 1 causing the applier to error out
# The member should leave the group
#
INSERT INTO t1 VALUES (1);
Got one of the listed errors
#
# Wait until member 1 Group Replication applier errors out.
#
include/gr_wait_for_member_state.inc
#
# Assert that the transaction was roll backed locally
#
include/assert.inc ['There is no value 1 in table t1']
#
# Assert that the read mode is active
#
include/assert.inc [The super_read_only mode should be active.]
#
# Stop the member and join it again.
#
SET @@GLOBAL.DEBUG= '-d,certification_handler_force_error_on_pipeline';
include/stop_group_replication.inc
include/start_group_replication.inc
#
# Check that table 1 now has a value
#
include/assert.inc ['There is now a value 1 in table t1']
#
# Check that GTID_EXECUTED on server 1 contains all transactions.
#
include/assert.inc [GTID_EXECUTED must contain all committed GTIDs]
#
# Check that GTID_EXECUTED on server 2 contains all transactions.
#
[connection server2]
include/assert.inc [GTID_EXECUTED must contain all committed GTIDs]
#
# Test cleanup.
#
DROP TABLE t1;
include/group_replication_end.inc
