include/group_replication.inc [rpl_server_count=3]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]
[connection server1]
[connection server2]
[connection server3]
Starting GR on server 1
RUN SET GLOBAL GROUP_REPLICATION_GROUP_NAME = 'aaaaaaaa-bbbb-aaaa-aaaa-aaaaaaaaaaaa'

0 rows affected
RUN SET GLOBAL GROUP_REPLICATION_BOOTSTRAP_GROUP=1

0 rows affected
RUN START GROUP_REPLICATION

0 rows affected
RUN SET GLOBAL GROUP_REPLICATION_BOOTSTRAP_GROUP=0

0 rows affected
Mysqlx.Ok {
  msg: "bye!"
}
ok
Starting GR on server 2
RUN SET GLOBAL GROUP_REPLICATION_GROUP_NAME = 'aaaaaaaa-bbbb-aaaa-aaaa-aaaaaaaaaaaa'

0 rows affected
RUN CHANGE MASTER TO MASTER_USER='root' FOR CHANNEL 'group_replication_recovery'

0 rows affected
RUN START GROUP_REPLICATION

0 rows affected
Mysqlx.Ok {
  msg: "bye!"
}
ok
Starting GR on server 3
RUN SET GLOBAL GROUP_REPLICATION_GROUP_NAME = 'aaaaaaaa-bbbb-aaaa-aaaa-aaaaaaaaaaaa'

0 rows affected
RUN CHANGE MASTER TO MASTER_USER='root' FOR CHANNEL 'group_replication_recovery'

0 rows affected
RUN START GROUP_REPLICATION

0 rows affected
Mysqlx.Ok {
  msg: "bye!"
}
ok
Waiting for GR members to come online.
send Mysqlx.Sql.StmtExecute {
  stmt: "list_objects"
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "test"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: ""
      }
    }
  }
  namespace: "xplugin"
}

name	type
command ok
Namespace 'xplugin' is deprecated, please use 'mysqlx' instead
send Mysqlx.Sql.StmtExecute {
  stmt: "create_collection"
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "test"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "characters"
      }
    }
  }
  namespace: "xplugin"
}


command ok
send Mysqlx.Crud.Insert {
  collection {
    name: "characters"
    schema: "test"
  }
  data_model: DOCUMENT
  row {
    field {
      type: OBJECT
      object {
        fld {
          key: "House"
          value {
            type: LITERAL
            literal {
              type: V_OCTETS
              v_octets {
                value: "Stark"
              }
            }
          }
        }
        fld {
          key: "_id"
          value {
            type: LITERAL
            literal {
              type: V_OCTETS
              v_octets {
                value: "6c706242055ae611fd36b86b23c1b9b9"
              }
            }
          }
        }
        fld {
          key: "name"
          value {
            type: LITERAL
            literal {
              type: V_OCTETS
              v_octets {
                value: "John Snow"
              }
            }
          }
        }
      }
    }
  }
}


1 rows affected
send Mysqlx.Crud.Insert {
  collection {
    name: "characters"
    schema: "test"
  }
  data_model: DOCUMENT
  row {
    field {
      type: OBJECT
      object {
        fld {
          key: "House"
          value {
            type: LITERAL
            literal {
              type: V_OCTETS
              v_octets {
                value: "Stark"
              }
            }
          }
        }
        fld {
          key: "_id"
          value {
            type: LITERAL
            literal {
              type: V_OCTETS
              v_octets {
                value: "ac1fc3b0055ae611fd36b86b23c1b9b9"
              }
            }
          }
        }
        fld {
          key: "name"
          value {
            type: LITERAL
            literal {
              type: V_OCTETS
              v_octets {
                value: "Rob Stark"
              }
            }
          }
        }
      }
    }
  }
  row {
    field {
      type: OBJECT
      object {
        fld {
          key: "House"
          value {
            type: LITERAL
            literal {
              type: V_OCTETS
              v_octets {
                value: "Stark"
              }
            }
          }
        }
        fld {
          key: "_id"
          value {
            type: LITERAL
            literal {
              type: V_OCTETS
              v_octets {
                value: "4261c3b0055ae611fd36b86b23c1b9b9"
              }
            }
          }
        }
        fld {
          key: "name"
          value {
            type: LITERAL
            literal {
              type: V_OCTETS
              v_octets {
                value: "Arya Stark"
              }
            }
          }
        }
      }
    }
  }
  row {
    field {
      type: OBJECT
      object {
        fld {
          key: "House"
          value {
            type: LITERAL
            literal {
              type: V_OCTETS
              v_octets {
                value: "Stark"
              }
            }
          }
        }
        fld {
          key: "_id"
          value {
            type: LITERAL
            literal {
              type: V_OCTETS
              v_octets {
                value: "6e62c3b0055ae611fd36b86b23c1b9b9"
              }
            }
          }
        }
        fld {
          key: "name"
          value {
            type: LITERAL
            literal {
              type: V_OCTETS
              v_octets {
                value: "Brandon Stark"
              }
            }
          }
        }
      }
    }
  }
}


3 rows affected
Records: 3  Duplicates: 0  Warnings: 0
send Mysqlx.Crud.Update {
  collection {
    name: "characters"
    schema: "test"
  }
  data_model: DOCUMENT
  criteria {
    type: OPERATOR
    operator {
      name: "=="
      param {
        type: IDENT
        identifier {
          document_path {
            type: MEMBER
            value: "name"
          }
        }
      }
      param {
        type: LITERAL
        literal {
          type: V_OCTETS
          v_octets {
            value: "John Snow"
          }
        }
      }
    }
  }
  operation {
    source {
      document_path {
        type: MEMBER
        value: "House"
      }
    }
    operation: ITEM_SET
    value {
      type: LITERAL
      literal {
        type: V_STRING
        v_string {
          value: "Targaryen"
        }
      }
    }
  }
}


1 rows affected
Rows matched: 1  Changed: 1  Warnings: 0
send Mysqlx.Crud.Find {
  collection {
    name: "characters"
    schema: "test"
  }
  data_model: DOCUMENT
}

doc
{"_id": "4261c3b0055ae611fd36b86b23c1b9b9", "name": "Arya Stark", "House": "Stark"}
{"_id": "6c706242055ae611fd36b86b23c1b9b9", "name": "John Snow", "House": "Targaryen"}
{"_id": "6e62c3b0055ae611fd36b86b23c1b9b9", "name": "Brandon Stark", "House": "Stark"}
{"_id": "ac1fc3b0055ae611fd36b86b23c1b9b9", "name": "Rob Stark", "House": "Stark"}
command ok
Mysqlx.Ok {
  msg: "bye!"
}
ok
include/rpl_sync.inc
send Mysqlx.Crud.Update {
  collection {
    name: "characters"
    schema: "test"
  }
  data_model: DOCUMENT
  criteria {
    type: OPERATOR
    operator {
      name: "&&"
      param {
        type: OPERATOR
        operator {
          name: "=="
          param {
            type: IDENT
            identifier {
              document_path {
                type: MEMBER
                value: "House"
              }
            }
          }
          param {
            type: LITERAL
            literal {
              type: V_OCTETS
              v_octets {
                value: "Targaryen"
              }
            }
          }
        }
      }
      param {
        type: OPERATOR
        operator {
          name: "=="
          param {
            type: IDENT
            identifier {
              document_path {
                type: MEMBER
                value: "name"
              }
            }
          }
          param {
            type: LITERAL
            literal {
              type: V_OCTETS
              v_octets {
                value: "John Snow"
              }
            }
          }
        }
      }
    }
  }
  operation {
    source {
      document_path {
        type: MEMBER
        value: "House"
      }
    }
    operation: ARRAY_APPEND
    value {
      type: LITERAL
      literal {
        type: V_STRING
        v_string {
          value: "Stark"
        }
      }
    }
  }
}


1 rows affected
Rows matched: 1  Changed: 1  Warnings: 0
send Mysqlx.Crud.Insert {
  collection {
    name: "characters"
    schema: "test"
  }
  data_model: DOCUMENT
  row {
    field {
      type: OBJECT
      object {
        fld {
          key: "House"
          value {
            type: LITERAL
            literal {
              type: V_OCTETS
              v_octets {
                value: "Stark "
              }
            }
          }
        }
        fld {
          key: "_id"
          value {
            type: LITERAL
            literal {
              type: V_OCTETS
              v_octets {
                value: "1616f2480b5ae611c319b86b23c1b9b9"
              }
            }
          }
        }
        fld {
          key: "name"
          value {
            type: LITERAL
            literal {
              type: V_OCTETS
              v_octets {
                value: "Sansa Stark"
              }
            }
          }
        }
      }
    }
  }
}


1 rows affected
send Mysqlx.Crud.Delete {
  collection {
    name: "characters"
    schema: "test"
  }
  data_model: DOCUMENT
  criteria {
    type: OPERATOR
    operator {
      name: "like"
      param {
        type: IDENT
        identifier {
          document_path {
            type: MEMBER
            value: "name"
          }
        }
      }
      param {
        type: LITERAL
        literal {
          type: V_OCTETS
          v_octets {
            value: "Robb%"
          }
        }
      }
    }
  }
}


0 rows affected
send Mysqlx.Crud.Find {
  collection {
    name: "characters"
    schema: "test"
  }
  data_model: DOCUMENT
}

doc
{"_id": "1616f2480b5ae611c319b86b23c1b9b9", "name": "Sansa Stark", "House": "Stark "}
{"_id": "4261c3b0055ae611fd36b86b23c1b9b9", "name": "Arya Stark", "House": "Stark"}
{"_id": "6c706242055ae611fd36b86b23c1b9b9", "name": "John Snow", "House": ["Targaryen", "Stark"]}
{"_id": "6e62c3b0055ae611fd36b86b23c1b9b9", "name": "Brandon Stark", "House": "Stark"}
{"_id": "ac1fc3b0055ae611fd36b86b23c1b9b9", "name": "Rob Stark", "House": "Stark"}
command ok
Mysqlx.Ok {
  msg: "bye!"
}
ok
include/rpl_sync.inc
send Mysqlx.Crud.Insert {
  collection {
    name: "characters"
    schema: "test"
  }
  data_model: DOCUMENT
  row {
    field {
      type: OBJECT
      object {
        fld {
          key: "House"
          value {
            type: LITERAL
            literal {
              type: V_OCTETS
              v_octets {
                value: "Stark"
              }
            }
          }
        }
        fld {
          key: "_id"
          value {
            type: LITERAL
            literal {
              type: V_OCTETS
              v_octets {
                value: "8cd5d2d90e5ae611e325b86b23c1b9b9"
              }
            }
          }
        }
        fld {
          key: "name"
          value {
            type: LITERAL
            literal {
              type: V_OCTETS
              v_octets {
                value: "Benjen Stark"
              }
            }
          }
        }
      }
    }
  }
  row {
    field {
      type: OBJECT
      object {
        fld {
          key: "House"
          value {
            type: LITERAL
            literal {
              type: V_OCTETS
              v_octets {
                value: "Stark"
              }
            }
          }
        }
        fld {
          key: "_id"
          value {
            type: LITERAL
            literal {
              type: V_OCTETS
              v_octets {
                value: "b2d7d2d90e5ae611e325b86b23c1b9b9"
              }
            }
          }
        }
        fld {
          key: "name"
          value {
            type: LITERAL
            literal {
              type: V_OCTETS
              v_octets {
                value: "Ned Stark"
              }
            }
          }
        }
      }
    }
  }
}


2 rows affected
Records: 2  Duplicates: 0  Warnings: 0
send Mysqlx.Crud.Update {
  collection {
    name: "characters"
    schema: "test"
  }
  data_model: DOCUMENT
  criteria {
    type: OPERATOR
    operator {
      name: "=="
      param {
        type: IDENT
        identifier {
          document_path {
            type: MEMBER
            value: "name"
          }
        }
      }
      param {
        type: LITERAL
        literal {
          type: V_OCTETS
          v_octets {
            value: "Arya Stark"
          }
        }
      }
    }
  }
  operation {
    source {
      document_path {
        type: MEMBER
        value: "name"
      }
    }
    operation: ITEM_SET
    value {
      type: LITERAL
      literal {
        type: V_STRING
        v_string {
          value: "A girl has NoName"
        }
      }
    }
  }
}


1 rows affected
Rows matched: 1  Changed: 1  Warnings: 0
send Mysqlx.Crud.Delete {
  collection {
    name: "characters"
    schema: "test"
  }
  data_model: DOCUMENT
  limit {
    row_count: 3
  }
}


3 rows affected
send Mysqlx.Crud.Find {
  collection {
    name: "characters"
    schema: "test"
  }
  data_model: DOCUMENT
}

doc
{"_id": "6e62c3b0055ae611fd36b86b23c1b9b9", "name": "Brandon Stark", "House": "Stark"}
{"_id": "8cd5d2d90e5ae611e325b86b23c1b9b9", "name": "Benjen Stark", "House": "Stark"}
{"_id": "ac1fc3b0055ae611fd36b86b23c1b9b9", "name": "Rob Stark", "House": "Stark"}
{"_id": "b2d7d2d90e5ae611e325b86b23c1b9b9", "name": "Ned Stark", "House": "Stark"}
command ok
send Mysqlx.Sql.StmtExecute {
  stmt: "drop_collection"
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "test"
      }
    }
  }
  args {
    type: SCALAR
    scalar {
      type: V_STRING
      v_string {
        value: "characters"
      }
    }
  }
  namespace: "xplugin"
}


command ok
Namespace 'xplugin' is deprecated, please use 'mysqlx' instead
Mysqlx.Ok {
  msg: "bye!"
}
ok
include/rpl_sync.inc
Stopping GR on server 1
RUN STOP GROUP_REPLICATION;

0 rows affected
Mysqlx.Ok {
  msg: "bye!"
}
ok
Stopping GR on server 2
RUN STOP GROUP_REPLICATION;

0 rows affected
Mysqlx.Ok {
  msg: "bye!"
}
ok
Stopping GR on server 3
RUN STOP GROUP_REPLICATION;

0 rows affected
Mysqlx.Ok {
  msg: "bye!"
}
ok
[connection server1]
include/gr_wait_for_member_state.inc
include/assert_and_disable_read_only.inc
[connection server2]
include/gr_wait_for_member_state.inc
include/assert_and_disable_read_only.inc
[connection server3]
include/gr_wait_for_member_state.inc
include/assert_and_disable_read_only.inc
include/group_replication_end.inc
