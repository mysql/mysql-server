include/group_replication.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]

############################################################
# 1. Install clone plugin on server1.
#    Bootstrap server1 and add some data.
[connection server1]
INSTALL PLUGIN clone SONAME 'CLONE_PLUGIN';
include/start_and_bootstrap_group_replication.inc
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY);
INSERT INTO t1 VALUES (1);

############################################################
# 2. Restart server2 with a monitoring process (mysqld_safe)
#    if needed.
#    Install clone plugin on server2.
[connection server2]
include/spawn_monitoring_process.inc
INSTALL PLUGIN clone SONAME 'CLONE_PLUGIN';

############################################################
# 3. Start GR on server2, forcing clone.
SET GLOBAL group_replication_clone_threshold= 1;
START GROUP_REPLICATION;
include/rpl_reconnect.inc
include/gr_wait_for_member_state.inc
include/assert.inc [Clone must be completed]
include/diff_tables.inc [server1:t1, server2:t1]
# group_replication_applier channel relay log files
server-relay-log-group_replication_applier.000001
server-relay-log-group_replication_applier.000002
server-relay-log-group_replication_applier.index
include/show_relaylog_events.inc [FOR CHANNEL 'group_replication_applier']
Log_name	Pos	Event_type	Server_id	End_log_pos	Info
server-relay-log-group_replication_applier.000001	#	Rotate	#	#	server-relay-log-group_replication_applier.000002;pos=4
include/show_relaylog_events.inc [FOR CHANNEL 'group_replication_applier']
Log_name	Pos	Event_type	Server_id	End_log_pos	Info
server-relay-log-group_replication_applier.000002	#	Format_desc	#	#	SERVER_VERSION, BINLOG_VERSION
server-relay-log-group_replication_applier.000002	#	Query	#	#	BEGIN
server-relay-log-group_replication_applier.000002	#	Query	#	#	COMMIT
############################################################
# 4. Stop GR applier on server2 so that all remote
#    transactions are only queued on relay log.
#    Execute some transactions on server1.
[connection server2]
SET @@GLOBAL.DEBUG='+d,block_applier_updates';
[connection server1]
INSERT INTO t1 VALUES (2);

################################################################
# 5. Wait until server2 receives and certifies the transaction.
#    Make both members leave the group.
[connection server2]
SET DEBUG_SYNC = "now WAIT_FOR applier_read_blocked";
SET @@GLOBAL.DEBUG='-d,block_applier_updates';
SET @@GLOBAL.DEBUG='+d,force_sql_thread_error';
SET DEBUG_SYNC = "now SIGNAL resume_applier_read";
include/gr_wait_for_member_state.inc
SET @@GLOBAL.DEBUG='-d,force_sql_thread_error';
include/stop_group_replication.inc
SET DEBUG_SYNC= 'RESET';
[connection server1]
include/stop_group_replication.inc

############################################################
# 6. Start Group Replication only on server2.
#    Assert that server1 and server2 have the same data.
[connection server2]
include/start_and_bootstrap_group_replication.inc
[connection server1]
include/assert.inc ['There are two rows in table t1 on server1']
[connection server2]
include/assert.inc ['There are two rows in table t1 on server2']
include/diff_tables.inc [server1:t1, server2:t1]
# group_replication_applier channel relay log files
server-relay-log-group_replication_applier.000002
server-relay-log-group_replication_applier.000003
server-relay-log-group_replication_applier.index
include/show_relaylog_events.inc [FOR CHANNEL 'group_replication_applier']
Log_name	Pos	Event_type	Server_id	End_log_pos	Info
server-relay-log-group_replication_applier.000002	#	Format_desc	#	#	SERVER_VERSION, BINLOG_VERSION
server-relay-log-group_replication_applier.000002	#	Query	#	#	BEGIN
server-relay-log-group_replication_applier.000002	#	Query	#	#	COMMIT
server-relay-log-group_replication_applier.000002	#	Query	#	#	BEGIN
server-relay-log-group_replication_applier.000002	#	Table_map	#	#	table_id: # (test.t1)
server-relay-log-group_replication_applier.000002	#	Write_rows	#	#	table_id: # flags: STMT_END_F
server-relay-log-group_replication_applier.000002	#	Xid	#	#	COMMIT /* XID */
server-relay-log-group_replication_applier.000002	#	Rotate	#	#	server-relay-log-group_replication_applier.000003;pos=4
include/show_relaylog_events.inc [FOR CHANNEL 'group_replication_applier']
Log_name	Pos	Event_type	Server_id	End_log_pos	Info
server-relay-log-group_replication_applier.000003	#	Format_desc	#	#	SERVER_VERSION, BINLOG_VERSION
server-relay-log-group_replication_applier.000003	#	Query	#	#	BEGIN
server-relay-log-group_replication_applier.000003	#	Query	#	#	COMMIT

############################################################
# 7. Clean up.
[connection server1]
DROP TABLE t1;
UNINSTALL PLUGIN clone;
[connection server2]
include/stop_group_replication.inc
DROP TABLE t1;
RESET PERSIST group_replication_group_name;
RESET PERSIST group_replication_local_address;
RESET PERSIST group_replication_group_seeds;
RESET PERSIST group_replication_start_on_boot;
RESET PERSIST IF EXISTS group_replication_communication_stack;
SET GLOBAL group_replication_clone_threshold= GROUP_REPLICATION_CLONE_THRESHOLD;
SET GLOBAL group_replication_start_on_boot= START_ON_BOOT_VALUE;
UNINSTALL PLUGIN clone;
SET SESSION sql_log_bin= 0;
call mtr.add_suppression("Due to the number of missing transactions being higher than the configured threshold of*");
call mtr.add_suppression("Clone removing all user data for provisioning: Started");
call mtr.add_suppression("Clone removing all user data for provisioning: Finished");
call mtr.add_suppression("Slave SQL for channel 'group_replication_applier': Relay log read failure: Could not parse relay log event entry.*");
call mtr.add_suppression("The applier thread execution was aborted. Unable to process more transactions, this member will now leave the group.");
call mtr.add_suppression("Fatal error during execution on the Applier process of Group Replication. The server will now leave the group.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
SET SESSION sql_log_bin= 1;
include/clean_monitoring_process.inc
include/group_replication_end.inc
