include/group_replication.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]
#
# TU#1: Test that group_replication_primary_member is SERVER_UUID when PRIMARY is in ONLINE state.
#
[connection server1]
include/start_and_bootstrap_group_replication.inc
include/gr_wait_for_member_state.inc
include/assert.inc [Verify MEMBER_STATE is ONLINE]
include/assert.inc [Verify group_replication_primary_member is SERVER_UUID]
#
# TU#2: Test that group_replication_primary_member is EMPTY when SECONDARY is in OFFLINE state.
#
[connection server2]
SET SESSION sql_log_bin= 0;
call mtr.add_suppression("Table 't1' already exists");
call mtr.add_suppression("The applier thread execution was aborted. Unable to process more transactions, this member will now leave the group");
call mtr.add_suppression("Fatal error during execution on the Applier process of Group Replication. The server will now leave the group.");
call mtr.add_suppression("Unable to ensure the execution of group transactions received during recovery.");
call mtr.add_suppression("Fatal error during the Recovery process of Group Replication. The server will leave the group.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
call mtr.add_suppression("Slave SQL for channel 'group_replication_applier': ... The slave coordinator and worker threads are stopped,*");
call mtr.add_suppression("Skipping leave operation: member already left the group.");
SET SESSION sql_log_bin= 1;
include/assert.inc [Verify MEMBER_STATE is OFFLINE]
include/assert.inc [Verify group_replication_primary_member is EMPTY("")]
#
# TU#3: Test that group_replication_primary_member is SERVER_UUID when SECONDARY is in RECOVERING state.
#
SET sql_log_bin=0;
CREATE TABLE t1 (a INT PRIMARY KEY NOT NULL);
SET sql_log_bin=1;
SET @@GLOBAL.DEBUG='+d,recovery_thread_wait_before_finish';
include/start_group_replication.inc
include/assert.inc [Verify MEMBER_STATE is RECOVERING]
include/assert.inc [Verify group_replication_primary_member is SERVER_UUID]
#
# TU#4: Test that group_replication_primary_member is UNDEFINED when SECONDARY is in ERROR state.
#
[connection server2]
SET DEBUG_SYNC= "now WAIT_FOR signal.recovery_thread_wait_before_finish_reached";
SET @@GLOBAL.DEBUG='-d,recovery_thread_wait_before_finish';
SET DEBUG_SYNC= "now SIGNAL signal.recovery_end";
include/gr_wait_for_member_state.inc
SET DEBUG_SYNC= 'RESET';
[connection server1]
CREATE TABLE t1 (a INT PRIMARY KEY NOT NULL);
[connection server2]
include/gr_wait_for_member_state.inc
include/rpl_gr_wait_for_number_of_members.inc
include/assert.inc [Verify MEMBER_STATE is ERROR]
include/assert.inc [Verify group_replication_primary_member is UNDEFINED]
#
# TU#5: Test that group_replication_primary_member is SERVER_UUID when SECONDARY is in ONLINE state.
#
include/stop_group_replication.inc
SET sql_log_bin=0;
DROP TABLE t1;
SET sql_log_bin=1;
include/start_group_replication.inc
include/gr_wait_for_member_state.inc
include/assert.inc [Verify MEMBER_STATE is ONLINE]
include/assert.inc [Verify group_replication_primary_member is SERVER_UUID]
[connection server1]
DROP TABLE t1;
include/group_replication_end.inc
