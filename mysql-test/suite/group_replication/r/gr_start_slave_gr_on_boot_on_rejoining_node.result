include/group_replication.inc [rpl_server_count=3]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]

# 1. Start GR on server1 & 2
[connection server2]
include/start_and_bootstrap_group_replication.inc
[connection server1]
SET @@GLOBAL.DEBUG= @debug_save;
include/start_group_replication.inc

# 2. Start slave for channel 'ch3_1' between server1(slave) and server3(master)
CHANGE MASTER TO MASTER_HOST='localhost', MASTER_USER='root', MASTER_PORT=SERVER_3_PORT for channel 'ch3_1';
Warnings:
Note	1759	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	1760	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
include/start_slave.inc [FOR CHANNEL 'ch3_1']

# 3. Add some data to server3 & server2
[connection server3]
CREATE TABLE test.t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO test.t1 VALUES (1);
[connection server2]
CREATE TABLE test.t2 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO test.t2 VALUES (1);

# 4. Verify servers are in sync and data is replicated to server1
[connection server3]
include/sync_slave_sql_with_master.inc [FOR CHANNEL 'ch3_1']
include/rpl_sync.inc
[connection server1]
include/assert.inc [Verify two tables (t1 & t2) are present in test database]
include/assert.inc [Verify test.t2 is synced]

# 5. Restart server1 with group replication start on boot
[connection server1]
# restart:--group_replication_local_address=GROUP_REPLICATION_LOCAL_ADDRESS --group_replication_group_seeds=GROUP_REPLICATION_GROUP_SEEDS --group_replication_start_on_boot=1 --group-replication-group-name=GROUP_REPLICATION_GROUP_NAME --skip-slave-start=0 --log_error_verbosity=3 --log-error=MYSQLTEST_VARDIR/tmp/gr_start_slave_gr_on_boot_on_rejoining_node.err --loose-debug=d,group_replication_wait_thread_for_server_online
include/rpl_reconnect.inc

# 6. Verify on server1 that member is ONLINE and ch3_1 channel is running
#    but syncing of data gets timeout as applier thread is blocked
include/gr_wait_for_member_state.inc
[connection server3]
INSERT INTO test.t1 VALUES (2);
INSERT INTO test.t1 VALUES (3);
[connection server1]
include/assert.inc [The gtids are not synced as slave threads are blocked in group replication plugin]

# 7. Unblock the blocked IO and applier threads and assert that
#    threads started only after member become ONLINE
SET DEBUG_SYNC= "now SIGNAL signal.continue_applier_thread";
include/wait_for_slave_to_start.inc [FOR CHANNEL 'ch3_1']
include/assert_grep.inc [The slave IO thread of channel 'ch3_1' is unblocked as the member is declared ONLINE now]
include/assert_grep.inc [The slave applier thread of channel 'ch3_1' is unblocked as the member is declared ONLINE now]

# 8. Add more data to t2 on server2 and t1 on server3
[connection server2]
INSERT INTO test.t2 VALUES (2);
[connection server3]
INSERT INTO test.t1 VALUES (4);

# 9. Verify data is replicated to server1 and 2
[connection server3]
include/sync_slave_sql_with_master.inc [FOR CHANNEL 'ch3_1']
include/rpl_sync.inc
[connection server2]
include/assert.inc [Verify test.t1 is synced]
include/assert.inc [Verify test.t2 is synced]
[connection server1]
include/assert.inc [Verify test.t1 is synced]
include/assert.inc [Verify test.t2 is synced]

# 10. Clean Up
[connection server2]
DROP TABLE test.t2;
[connection server1]
include/stop_slave.inc [FOR CHANNEL 'ch3_1']
RESET SLAVE ALL FOR CHANNEL 'ch3_1';
DROP TABLE test.t1;
[connection server3]
DROP TABLE test.t1;
include/group_replication_end.inc
