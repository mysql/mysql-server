include/group_replication.inc [rpl_server_count=3]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]

############################################################
# 01. Boot start server1
[connection server1]
SET SESSION sql_log_bin = 0;
call mtr.add_suppression("This member was unable to log the View_change_log_event into the binary log, hence it will leave the group.*");
call mtr.add_suppression("Error at event handling! Got error: 1.");
call mtr.add_suppression("Fatal error during execution on the Applier process of Group Replication. The server will now leave the group.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
SET SESSION sql_log_bin = 1;
include/start_and_bootstrap_group_replication.inc

############################################################
# 02. Start server2 and set the necessary debug point
#     required for the simulation
[connection server2]
include/save_sysvars.inc [ "GLOBAL.group_replication_member_weight" ]
SET GLOBAL group_replication_member_weight= 70;
include/start_group_replication.inc
SET @@GLOBAL.DEBUG= '+d,group_replication_wait_before_message_send_after_applier_prepare';

############################################################
# 03. Execute a transaction on primary. This transaction
#     shall wait before sending transaction prepare ack
#     message on server2
[connection server1]
SET @@GLOBAL.DEBUG= '+d,simulate_delayed_view_change_resume_error';
CREATE TABLE test.t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;

############################################################
# 04. Wait for the transaction to reach the debug sync point
#     on server2
[connection server2]
SET DEBUG_SYNC= "now WAIT_FOR signal.after_before_message_send_after_applier_prepare_waiting";

############################################################
# 05. Start server3
[connection server3]
SET SESSION sql_log_bin = 0;
call mtr.add_suppression("There was an error when connecting to the donor server.*");
call mtr.add_suppression("For details please check performance_schema.replication_connection_status table and error log messages of Slave I/O for channel group_replication_recovery.");
SET SESSION sql_log_bin= 1;
include/save_sysvars.inc [ "GLOBAL.group_replication_recovery_reconnect_interval" ]
SET GLOBAL group_replication_recovery_reconnect_interval= 1;
include/start_group_replication.inc

############################################################
# 06. Continue the transaction on server2
[connection server2]
SET @@GLOBAL.DEBUG= '-d,group_replication_wait_before_message_send_after_applier_prepare';
SET DEBUG_SYNC= 'now SIGNAL signal.after_before_message_send_after_applier_prepare_continue';
SET DEBUG_SYNC= 'RESET';

############################################################
# 07. Reap the transaction server1
[connection server1]
include/gr_wait_for_member_state.inc

############################################################
# 08. Verify that server1 left the group
[connection server2]
include/rpl_gr_wait_for_number_of_members.inc
include/assert.inc [Server 1 left group]
############################################################
# 09. Cleaning up
[connection server3]
include/gr_wait_for_member_state.inc
include/restore_sysvars.inc
[connection server1]
SET @@GLOBAL.DEBUG= '-d,simulate_delayed_view_change_resume_error';
include/stop_group_replication.inc
include/start_group_replication.inc
[connection server2]
DROP TABLE t1;
include/restore_sysvars.inc
include/group_replication_end.inc
