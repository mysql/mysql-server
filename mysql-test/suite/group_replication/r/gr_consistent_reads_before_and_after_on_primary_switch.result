include/group_replication.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]

# 01. Bootstrap group with M1
[connection server1]
include/start_and_bootstrap_group_replication.inc

# 02. Create table and insert data
CREATE TABLE test.t1 (a INT PRIMARY KEY);
INSERT INTO t1 VALUES (1);

# 03. Join M2 to group
[connection server2]
include/start_group_replication.inc

# 04. Enable debug point that will block transaction with consistency
#     BEFORE_AND_AFTER
[connection server_2]
# Adding debug point 'group_replication_wait_on_observer_trans' to @@GLOBAL.debug

# 05. Send transaction with consistency BEFORE_AND_AFTER
SET @@SESSION.group_replication_consistency= 'BEFORE_AND_AFTER';
SELECT * FROM test.t1;

# 06. Wait for execution reach debug point
[connection server2]
SET DEBUG_SYNC= "now WAIT_FOR signal.group_replication_wait_on_observer_trans_waiting";

# 07. Force a primary election by calling set_as_primary on server2
[connection server1]
SELECT group_replication_set_as_primary("MEMBER_UUID");
group_replication_set_as_primary("MEMBER_UUID")
Primary server switched to: MEMBER_UUID

# 08. Assert server2 is primary and read only = 0
[connection server2]
include/gr_assert_primary_member.inc

# 09. Signal to resume blocked transaction
SET DEBUG_SYNC= 'now SIGNAL signal.group_replication_wait_on_observer_trans_continue';

# 10. Reap pending transaction
[connection server_2]
a
1

# 11. Clean up
[connection server2]
# Removing debug point 'group_replication_wait_on_observer_trans' from @@GLOBAL.debug
DROP TABLE test.t1;
include/group_replication_end.inc
