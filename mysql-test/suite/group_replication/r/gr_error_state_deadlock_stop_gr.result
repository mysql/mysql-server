include/group_replication.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]

# 1. Create a table on server 1 and replicate.

[connection server1]
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
include/rpl_sync.inc

# 2. Insert a row on server 2 with log to the binlog disabled.

[connection server2]
SET @debug_save= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG='+d,group_replication_applier_thread_wait_kill_pending_transaction';
SET SESSION sql_log_bin= 0;
call mtr.add_suppression("Slave SQL for channel 'group_replication_applier': Worker [0-9] failed executing transaction*");
call mtr.add_suppression("Slave SQL for channel 'group_replication_applier': ... The slave coordinator and worker threads are stopped,*");
call mtr.add_suppression("Slave SQL for channel 'group_replication_applier': Could not execute Write_rows event on table .*");
call mtr.add_suppression("The applier thread execution was aborted. Unable to process more transactions, this member will now leave the group.");
call mtr.add_suppression("Fatal error during execution on the Applier process of Group Replication. The server will now leave the group.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
INSERT INTO t1 VALUES (1);
SET SESSION sql_log_bin= 1;

# 3. Insert record in server1 to put server2 in error state.
#    Server2 will go in ERROR state due to PRIMARY key violation.

[connection server1]
INSERT INTO t1 VALUES (1);
[connection server2]
include/gr_wait_for_member_state.inc

# 4. Stop GR should succed when member is in ERROR state.

SET DEBUG_SYNC= 'RESET';
SET @@GLOBAL.DEBUG= @debug_save;
SET @@GLOBAL.DEBUG='+d,group_replication_continue_kill_pending_transaction';
include/stop_group_replication.inc

# 5. Clean up.

SET @@GLOBAL.DEBUG= @debug_save;
SET GLOBAL read_only= 0;
SET SESSION sql_log_bin= 0;
DELETE from t1;
SET SESSION sql_log_bin= 1;
include/start_group_replication.inc
DROP TABLE t1;
include/group_replication_end.inc
