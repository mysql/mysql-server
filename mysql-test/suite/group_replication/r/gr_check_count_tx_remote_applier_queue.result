include/group_replication.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]

# 2.  Prepare server1, creating some transactions for recovery.

[connection server1]
SET SESSION sql_log_bin=0;
CREATE TABLE test.t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
SET SESSION sql_log_bin=1;
include/start_and_bootstrap_group_replication.inc
INSERT INTO test.t1 VALUES (1);

3.  Prepare server2, block server2 on recovery.

[connection server2]
SET @debug_group_replication_recovery_complete_at= @@GLOBAL.group_replication_recovery_complete_at;
SET SESSION sql_log_bin=0;
CREATE TABLE test.t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
SET SESSION sql_log_bin=1;
SET @@global.group_replication_recovery_complete_at= "transactions_certified";
LOCK TABLE test.t1 READ;
[connection server_2]
include/start_group_replication.inc

# 4.  Create some transactions on server1 while server2 is in recovery.
#     This transactions will be applied by server2 when out of recovery.

[connection server1]
insert into test.t1 values(100);
insert into test.t1 values(102);

# 5.  Unlock all server2 tables and let recovery finish.

[connection server2]
unlock tables;

# 6.  Transactions received during recovery, when
#     group_replication_recovery_complete_at was set to
#     "transactions_certified", do not make counter go negative.

[connection server1]
[connection server2]

# 7.  Cleanup.

[connection server2]
SET @@GLOBAL.group_replication_recovery_complete_at= @debug_group_replication_recovery_complete_at;
[connection server1]
DROP TABLE test.t1;
include/group_replication_end.inc
