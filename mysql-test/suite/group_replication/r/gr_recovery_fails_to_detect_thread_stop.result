include/group_replication.inc [rpl_server_count=3]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]

#####################################################################
# 1. Create a table on server1 and generate workload to be recovered
include/start_and_bootstrap_group_replication.inc
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);

########################
# 2. SQL thread testing

#######################################################
# 2.1 Try to make server2 to join the group for 3 times
#     forcing the SQL thread to stop
[connection server2]
SET SESSION sql_log_bin= 0;
CALL mtr.add_suppression("Error while creating the group replication recovery channel with donor");
CALL mtr.add_suppression("Maximum number of retries when trying to connect to a donor reached");
CALL mtr.add_suppression("Fatal error during the incremental recovery process of Group Replication. The server will leave the group.");
CALL mtr.add_suppression("Already leaving or joining a group");
CALL mtr.add_suppression("Error leaving the group");
CALL mtr.add_suppression("Table 't1' already exists");
CALL mtr.add_suppression("Error while starting the group replication incremental recovery receiver/applier threads");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
SET SESSION sql_log_bin= 1;
SET @saved_reconnect_interval= @@GLOBAL.group_replication_recovery_reconnect_interval;
SET GLOBAL group_replication_recovery_reconnect_interval= 1 # second;
SET @saved_retry_count= @@GLOBAL.group_replication_recovery_retry_count;
SET GLOBAL group_replication_recovery_retry_count= 3;
SET SESSION sql_log_bin= 0;
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
SET SESSION sql_log_bin= 1;
# Adding debug point 'pause_after_sql_thread_stop_hook' to @@GLOBAL.debug

#####################################################
# 2.2 Wait until server2 gave up on joining the group
include/start_group_replication.inc
# Removing debug point 'pause_after_sql_thread_stop_hook' from @@GLOBAL.debug
SET @@GLOBAL.group_replication_recovery_reconnect_interval= @saved_reconnect_interval;
SET @@GLOBAL.group_replication_recovery_retry_count= @saved_retry_count;
include/stop_group_replication.inc
SET SESSION sql_log_bin= 0;
DROP TABLE t1;
SET SESSION sql_log_bin= 1;

#####################################################################
# 2.3 Wait until server2 had left the group to move to the next phase
include/rpl_gr_wait_for_number_of_members.inc

#######################
# 3. I/O thread testing

############################################################################
# 3.1 Rotate and purge the binary log on server1 to make recovery unfeasible
FLUSH BINARY LOGS;
include/stop_dump_threads.inc
PURGE BINARY LOGS TO 'CURRENT_BINLOG_FILE';
SET SESSION sql_log_bin= 0;
CALL mtr.add_suppression("Cannot replicate to server with server_uuid*");
SET SESSION sql_log_bin= 1;

#############################################################
# 3.2 Try to make server3 to join the group for up to 3 times
SET SESSION sql_log_bin= 0;
CALL mtr.add_suppression("Slave I/O for channel 'group_replication_recovery': Got fatal error 1236*");
CALL mtr.add_suppression("Maximum number of retries when trying to connect to a donor reached");
CALL mtr.add_suppression("Fatal error during the incremental recovery process of Group Replication. The server will leave the group.");
CALL mtr.add_suppression("Already leaving or joining a group");
CALL mtr.add_suppression("Error leaving the group");
CALL mtr.add_suppression("Error while starting the group replication incremental recovery");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
call mtr.add_suppression("This member will start distributed recovery using clone. It is due to no ONLINE member has the missing data for recovering in its binary logs.");
call mtr.add_suppression("There was an issue when configuring the remote cloning process: The clone plugin is not present or active in this server.");
call mtr.add_suppression("No valid or ONLINE members exist to get the missing data from the group. For cloning check if donors of the same version and with clone plugin installed exist. For incremental recovery check.*");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
SET SESSION sql_log_bin= 1;
SET @saved_reconnect_interval= @@GLOBAL.group_replication_recovery_reconnect_interval;
SET GLOBAL group_replication_recovery_reconnect_interval= 1 # second;
SET @saved_retry_count= @@GLOBAL.group_replication_recovery_retry_count;
SET GLOBAL group_replication_recovery_retry_count= 3;
# Adding debug point 'pause_after_io_thread_stop_hook' to @@GLOBAL.debug

#####################################################
# 3.3 Wait until server3 gave up on joining the group
include/start_group_replication.inc
SET @@GLOBAL.group_replication_recovery_reconnect_interval= @saved_reconnect_interval;
SET @@GLOBAL.group_replication_recovery_retry_count= @saved_retry_count;
# Removing debug point 'pause_after_io_thread_stop_hook' from @@GLOBAL.debug

################################################################
# 4. Wait until server1 be alone in the group to do the clean up
include/rpl_gr_wait_for_number_of_members.inc
DROP TABLE t1;
include/group_replication_end.inc
