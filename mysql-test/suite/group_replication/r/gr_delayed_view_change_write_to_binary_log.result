include/group_replication.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]

############################################################
# 1. Start a 1 member group, and block it on recovery start.
[connection server1]
SET @debug_save= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG= 'd,recovery_thread_start_wait';
SET GLOBAL group_replication_group_name= "e70f06d2-eb85-11e5-b3b5-00212844d44e";
SET GLOBAL group_replication_bootstrap_group= 1;
START GROUP_REPLICATION;
SET DEBUG_SYNC= "now WAIT_FOR signal.recovery_waiting";
include/gr_wait_for_member_state.inc
SET GLOBAL group_replication_bootstrap_group= 0;

############################################################
# 2. Stop applier channel in order to delay the view change
#    log event write to binary log.
STOP SLAVE SQL_THREAD FOR CHANNEL "group_replication_applier";

############################################################
# 3. Resume recovery, member will be online but view change
#    log event will still be queued to apply into binary log.
SET DEBUG_SYNC= "now SIGNAL signal.recovery_continue";
SET @@GLOBAL.DEBUG= @debug_save;
include/gr_wait_for_member_state.inc
include/assert.inc [GTID_EXECUTED must be empty]

############################################################
# 4. Execute a transaction T1, which snapshot version will
#    not include any group GTID.
#    Set a debug sync before broadcast message to group on
#    connection server_1.
#    Commit a transaction that will be blocked before broadcast.
[connection server_1]
SET @@GLOBAL.DEBUG='d,group_replication_before_message_broadcast';
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
[connection server1]

############################################################
# 5. Start applier channel and wait until the view change
#    log event is written into binary log.
START SLAVE SQL_THREAD FOR CHANNEL "group_replication_applier";
SELECT WAIT_FOR_EXECUTED_GTID_SET('e70f06d2-eb85-11e5-b3b5-00212844d44e:1');
WAIT_FOR_EXECUTED_GTID_SET('e70f06d2-eb85-11e5-b3b5-00212844d44e:1')
0

############################################################
# 6. Resume transaction T1, it will be send to the group for
#    conflict detection and apply.
SET DEBUG_SYNC='now SIGNAL waiting';
SET @@GLOBAL.DEBUG= @debug_save;
[connection server_1]
[connection server1]
include/assert.inc [GTID_EXECUTED must contain all group GTIDs]

############################################################
# 7. Clean up.
DROP TABLE t1;
include/group_replication_end.inc
