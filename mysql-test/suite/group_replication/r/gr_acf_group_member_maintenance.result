include/group_replication.inc [rpl_server_count=4]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]

############################################################
# 1. Deploy a 3 members group in single primary mode.
#    Set group_replication_member_expel_timeout to 3600, so
#    that a UNREACHABLE member is only expelled after 1 hour.
[connection server1]
SET GLOBAL group_replication_member_expel_timeout = 3600;
include/start_and_bootstrap_group_replication.inc
[connection server2]
SET GLOBAL group_replication_member_expel_timeout = 3600;
include/start_group_replication.inc
[connection server3]
SET GLOBAL group_replication_member_expel_timeout = 3600;
include/start_group_replication.inc

############################################################
# 2. Configure replica to manage the asynchronous connection
#    to group.
[connection server4]
SELECT asynchronous_connection_failover_add_managed('ch1', 'GroupReplication', 'GROUP_NAME', '127.0.0.1', SERVER_MYPORT_1, '', 90, 70);;
asynchronous_connection_failover_add_managed('ch1', 'GroupReplication', 'GROUP_NAME', '127.0.0.1', SERVER_MYPORT_1, '', 90, 70)
The UDF asynchronous_connection_failover_add_managed() executed successfully.
include/assert.inc ['There is one row in performance_schema.replication_asynchronous_connection_failover for server1']
include/assert.inc ['There is one row in performance_schema.replication_asynchronous_connection_failover_managed for server1']

############################################################
# 3. Create and start the managed channel connected to server1.
[connection server4]
CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_USER='root', SOURCE_AUTO_POSITION=1, SOURCE_CONNECTION_AUTO_FAILOVER=1, SOURCE_PORT=SERVER_1_PORT, SOURCE_RETRY_COUNT=1, SOURCE_CONNECT_RETRY=1 FOR CHANNEL 'ch1';
Warnings:
Note	1759	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	1760	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
include/start_slave.inc [FOR CHANNEL 'ch1']
include/assert.inc [Verify channel ch1 IO_THREAD is ON and connected to server1]

############################################################
# 4. Kill server1.
#    Server will return without starting Group Replication.
[connection server1]
# Kill and restart
include/rpl_reconnect.inc
[connection server2]
include/gr_wait_for_member_state.inc
[connection server3]
include/gr_wait_for_member_state.inc

############################################################
# 5. Validate that replica is connected to server2 or server3.
#    Server1 is back and has the highest weight, but since it
#    is not part of the group it cannot be selected as the sender.
[connection server4]
Wait until ch1 IO_THREAD is connected to server2 or server3

############################################################
# 6. Wait 30 seconds and validate that replica is still connected
#    to server2 or server3.
[connection server4]
include/assert.inc [Verify channel ch1 IO_THREAD is ON and connected to server2 or server3]

############################################################
# 7. Assert that group information did not change, since the
#    missing member is UNREACHABLE
[connection server4]
include/assert.inc ['There are 3 rows in performance_schema.replication_asynchronous_connection_failover']

############################################################
# 8. Revert group_replication_member_expel_timeout to the
#    default value on server2 and server3, which will cause
#    server1 to be expelled.
[connection server2]
SET GLOBAL group_replication_member_expel_timeout = DEFAULT;
[connection server3]
SET GLOBAL group_replication_member_expel_timeout = DEFAULT;

############################################################
# 9. server1 was removed from performance_schema.replication_asynchronous_connection_failover table.
#    server4 is connected to the group primary.
[connection server4]
include/assert.inc ['There is no row in performance_schema.replication_asynchronous_connection_failover for server1']
Wait until ch1 IO_THREAD is connected to the group primary

############################################################
# 10. Clean up.
[connection server4]
include/stop_slave.inc [FOR CHANNEL 'ch1']
include/rpl_reset_slave.inc
SELECT asynchronous_connection_failover_delete_managed('ch1', 'GROUP_NAME');
asynchronous_connection_failover_delete_managed('ch1', 'GROUP_NAME')
The UDF asynchronous_connection_failover_delete_managed() executed successfully.
include/assert.inc ['There are no rows in performance_schema.replication_asynchronous_connection_failover']
include/assert.inc ['There are no rows in performance_schema.replication_asynchronous_connection_failover_managed']
SET SESSION sql_log_bin = 0;
call mtr.add_suppression("The source .* for channel 'ch1' has joined the group .*, and so added its entry into replication_asynchronous_connection_failover table.");
call mtr.add_suppression("The master's UUID has changed, although this should not happen unless you have changed it manually.*");
call mtr.add_suppression("The Monitor IO thread detected that the source .* does not belong to the group majority, thence the channel .* will try to connect to another source.*");
call mtr.add_suppression("The IO thread detected that the source .* does not belong to the group majority, thence the channel .* will try to connect to another source.");
call mtr.add_suppression("The source .* for channel 'ch1' has left the group .*, and so removed its entry from replication_asynchronous_connection_failover table.");
call mtr.add_suppression("The group .* for the channel .* has been removed, and so removed its entry from replication_asynchronous_connection_failover_managed and all the group members from replication_asynchronous_connection_failover table.");
call mtr.add_suppression("The group .* for the channel .* has been added, and so added its entry in replication_asynchronous_connection_failover_managed and source to replication_asynchronous_connection_failover table.");
call mtr.add_suppression("The Monitor IO thread failed to connect to the source .* for channel .*, thence it will try to connect to another source.");
call mtr.add_suppression("Slave I/O for channel 'ch1': Master command COM_REGISTER_SLAVE failed: failed registering on master, reconnecting to try again.*");
SET SESSION sql_log_bin = 1;
[connection server3]
include/stop_group_replication.inc
[connection server2]
include/stop_group_replication.inc
[connection server1]
SET GLOBAL group_replication_member_expel_timeout = DEFAULT;
include/group_replication_end.inc
