include/group_replication.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]
include/start_and_bootstrap_group_replication.inc
include/gr_assert_primary_member.inc

# 1. Create table to test the transaction conflict
CREATE TABLE t1(a int primary key);
[connection server2]
include/start_group_replication.inc

# 2. Execute action to switch to multi primary mode
SELECT group_replication_switch_to_multi_primary_mode();
group_replication_switch_to_multi_primary_mode()
Mode switched to multi-primary successfully.

# 3. Assert on server2 that super_read_only is disabled and
#   group_replication_enforce_update_everywhere_checks is enabled
include/gr_assert_multi_primary_mode.inc

# 4. Assert on server1 that super_read_only is disabled and
#   group_replication_enforce_update_everywhere_checks is enabled
[connection server1]
include/gr_assert_multi_primary_mode.inc

# 5. Execute two transactions in parallel and confirm that will trigger
#    a conflict

############################################################
# 0. Initial setup and checks.
[connection server1]
SET SESSION sql_log_bin= 0;
include/gtid_utils.inc
SET SESSION sql_log_bin= 1;
include/gtid_step_reset.inc

############################################################
# 1. Set a debug sync before broadcast message to group on
#    connection local_server_connection1.
[connection server1]
SET @debug_save= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG='d,group_replication_before_message_broadcast';

#####################################################################
# 2. Commit local_transaction that will be blocked before broadcast.
BEGIN;
INSERT INTO t1 VALUES(3);
COMMIT;

############################################################
# 3. Wait until local transaction reaches the
# group_replication_before_message_broadcast debug sync point.
[connection server_1]

############################################################
# 4. Execute a transaction on remote server, that will reach first
#    certification, since transaction on the local server
#    is blocked before broadcast.
[connection server2]
BEGIN;
INSERT INTO t1 VALUES (3);
COMMIT;

############################################################
# 5. Signal the waiting thread on local server to resume the
#    transaction.
[connection server_1]
SET DEBUG_SYNC='now SIGNAL waiting';
SET @@GLOBAL.DEBUG= @debug_save;

############################################################
# 6. Wait for remote transaction to be executed succesfully
on local server.
[connection server2]
include/sync_slave_sql_with_master.inc
############################################################
# 7. If the test case is conflict scenario, local transaction
#    will end up in an error stating that it was aborted,
#    since transactions are conflicting and transaction on
#    remote server was ordered first. If the test case is
#    is positive scenario, no error will be seen here.
[connection server1]
ERROR 40000: Plugin instructed the server to rollback the current transaction.
[connection server1]
SET @@GLOBAL.DEBUG=@debug_save;
############################################################
# 8. Sync everything
include/rpl_sync.inc
############################################################
# 9. Assert that number of certified transactions are the
#    expected ones.
include/assert.inc [The value of Count_Transactions_Checked should be 3 after starting group replication]
include/assert.inc [The value of Count_Conflicts_Detected should be 1 after starting group replication]
############################################################
# 10. Assert that GTID is increased as expected
include/gtid_step_assert.inc [count=1, only_count=1]
[connection server1]
SET SESSION sql_log_bin= 0;
include/gtid_utils_end.inc
SET SESSION sql_log_bin= 1;
############################################################
# 11. Cleanup (restore the connection back to original)
[connection server1]

# 6. Cleanup
DROP TABLE t1;
include/group_replication_end.inc
