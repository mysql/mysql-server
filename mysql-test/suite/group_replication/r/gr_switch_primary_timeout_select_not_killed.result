include/group_replication.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection server1]

# 1. Start group in single primary mode.
#    Server1 will be primary and server2 secondary.
[connection server1]
CREATE TABLE test.t1(c1 int primary key);
include/start_and_bootstrap_group_replication.inc
[connection server2]
include/start_group_replication.inc

# 2. Start a read-only transaction on server1.
#    It should succeed with primary change initiated from server2(secondary).
[connection server2]

# Start a transaction on server1 and block it.
[connection server1]
SET DEBUG_SYNC="before_reset_query_plan SIGNAL before_reset_query_ongoing WAIT_FOR after_reset_query_finished";
SELECT * FROM test.t1;;;
[connection server_1]
SET DEBUG_SYNC="now WAIT_FOR before_reset_query_ongoing";

# Begin change of primary on server2.
[connection server2]
SELECT group_replication_set_as_primary("MEMBER_UUID", 1);
group_replication_set_as_primary("MEMBER_UUID", 1)
Primary server switched to: MEMBER_UUID

# Assert primary changed.
[connection server2]
include/gr_assert_primary_member.inc

# Reap the transaction.
[connection server_1]
SET DEBUG_SYNC="now SIGNAL after_reset_query_finished";
SET DEBUG_SYNC="now SIGNAL after_reset_query_finished";
[connection server1]
c1
SET DEBUG_SYNC="RESET";

# 3. Assert primary changed.
[connection server2]
include/gr_assert_primary_member.inc
[connection server1]
include/gr_assert_secondary_member.inc

# 4. Start a read-only transaction on server2.
#    It should succeed with primary change initiated from server2(primary).
[connection server1]

# Start a transaction on server2 and block it.
[connection server2]
SET DEBUG_SYNC="before_reset_query_plan SIGNAL before_reset_query_ongoing WAIT_FOR after_reset_query_finished";
SELECT * FROM test.t1;;;
[connection server_2]
SET DEBUG_SYNC="now WAIT_FOR before_reset_query_ongoing";

# Begin change of primary on server_2_1.
[connection server_2_1]
SELECT group_replication_set_as_primary("MEMBER_UUID", 1);
group_replication_set_as_primary("MEMBER_UUID", 1)
Primary server switched to: MEMBER_UUID

# Assert primary changed.
[connection server1]
include/gr_assert_primary_member.inc

# Reap the transaction.
[connection server_2]
SET DEBUG_SYNC="now SIGNAL after_reset_query_finished";
SET DEBUG_SYNC="now SIGNAL after_reset_query_finished";
[connection server2]
c1
SET DEBUG_SYNC="RESET";

# 5. Assert primary changed.
[connection server1]
include/gr_assert_primary_member.inc
[connection server2]
include/gr_assert_secondary_member.inc

# 6. Start a write transaction on server1.
#    Client connection will be dropped.
#    Primary change initiated from server2(secondary).
[connection server2]

# Start a transaction on server1 and block it.
[connection server1]
SET DEBUG_SYNC="before_reset_query_plan SIGNAL before_reset_query_ongoing WAIT_FOR after_reset_query_finished";
INSERT INTO test.t1 values (1);;;
[connection server_1]
SET DEBUG_SYNC="now WAIT_FOR before_reset_query_ongoing";

# Begin change of primary on server2.
[connection server2]
SELECT group_replication_set_as_primary("MEMBER_UUID", 1);
group_replication_set_as_primary("MEMBER_UUID", 1)
Primary server switched to: MEMBER_UUID

# Assert primary changed.
[connection server2]
include/gr_assert_primary_member.inc

# Reap the transaction.
[connection server_1]
SET DEBUG_SYNC="now SIGNAL after_reset_query_finished";
SET DEBUG_SYNC="now SIGNAL after_reset_query_finished";
[connection server1]
ERROR HY000: Lost connection to MySQL server during query
SET DEBUG_SYNC="RESET";

# 7. Assert primary changed.
[connection server2]
include/gr_assert_primary_member.inc
[connection server1]
include/gr_assert_secondary_member.inc
include/assert.inc ['There is no value 1 in table t1']
include/diff_tables.inc [server1:test.t1, server2:test.t1]

# 8. Start a write transaction on server2.
#    Client connection will be dropped.
#    Primary change initiated from server2(primary).
[connection server1]

# Start a transaction on server2 and block it.
[connection server2]
SET DEBUG_SYNC="before_reset_query_plan SIGNAL before_reset_query_ongoing WAIT_FOR after_reset_query_finished";
INSERT INTO test.t1 values (2);;;
[connection server_2]
SET DEBUG_SYNC="now WAIT_FOR before_reset_query_ongoing";

# Begin change of primary on server_2_1.
[connection server_2_1]
SELECT group_replication_set_as_primary("MEMBER_UUID", 1);
group_replication_set_as_primary("MEMBER_UUID", 1)
Primary server switched to: MEMBER_UUID

# Assert primary changed.
[connection server1]
include/gr_assert_primary_member.inc

# Reap the transaction.
[connection server_2]
SET DEBUG_SYNC="now SIGNAL after_reset_query_finished";
SET DEBUG_SYNC="now SIGNAL after_reset_query_finished";
[connection server2]
ERROR HY000: Lost connection to MySQL server during query
SET DEBUG_SYNC="RESET";

# 9. Assert primary changed.
[connection server1]
include/gr_assert_primary_member.inc
[connection server2]
include/gr_assert_secondary_member.inc
include/assert.inc ['There is no value 2 in table t1']
include/diff_tables.inc [server1:test.t1, server2:test.t1]

# 10. Cleanup.
[connection server1]
DROP TABLE test.t1;
include/group_replication_end.inc
