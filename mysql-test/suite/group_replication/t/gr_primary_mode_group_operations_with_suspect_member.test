#######################################################################################
# To execute a coordinated group configuration change, all members shall be reachable
#
# Test:
#   0. This test requires three servers with Group Replication running.
#      We start in Single primary mode
#   1. Create a group with 3 members
#   2. Set group_replication_member_expel_timeout to 300 seconds.
#   3. Suspend server 3 by sending signal SIGSTOP to it.
#      This will make server 3 not answer to "I am alive" GCS messages and it
#      will eventually be considered faulty.
#   4. Check server 3 is marked as unreachable.
#   5. Try to execute an group coordination action on one of the server.
#      Actions shall fail as a member is unreachable
#   6. Make the member rejoin the group
#      Actions are now accepted
#   7. Clean up.
#
# ==== References ====
#
# BUG#28284355: EXECUTING GROUP_ACTION SHOULD BE BLOCKED WHEN THERE ARE UNREACHABLE MEMBERS
#

# Don't test this under valgrind, memory leaks will occur
--source include/not_valgrind.inc
# Test involves sending SIGSTOP and SIGCONT signals using kill Linux command.
--source include/linux.inc
--source include/big_test.inc
--source include/have_group_replication_plugin.inc
--let $rpl_server_count= 3
--let $rpl_skip_group_replication_start= 1
--let $rpl_group_replication_single_primary_mode=1
--source include/group_replication.inc

--echo
--echo # 1. Create a group with 3 members

# Start GR on server1.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--source include/start_and_bootstrap_group_replication.inc
--let $server1_local_address= `SELECT @@GLOBAL.group_replication_local_address`

# Start GR on server2.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/start_group_replication.inc

# Get server 2 uuid.
--let $server2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

# Start GR on server3.
--let $rpl_connection_name= server3
--source include/rpl_connection.inc

# Get server 3 pid.
SET SESSION sql_log_bin= 0;
CREATE TABLE pid_table(pid_no INT);
--let $pid_file= `SELECT @@GLOBAL.pid_file`
--replace_result $pid_file pid_file
--eval LOAD DATA LOCAL INFILE '$pid_file' INTO TABLE pid_table
--let $server_pid=`SELECT pid_no FROM pid_table`
DROP TABLE pid_table;
SET SESSION sql_log_bin= 1;

--source include/start_group_replication.inc

--echo
--echo # 2. Set group_replication_member_expel_timeout to 300 seconds.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SET GLOBAL group_replication_member_expel_timeout = 300;

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
SET GLOBAL group_replication_member_expel_timeout = 300;

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
SET GLOBAL group_replication_member_expel_timeout = 300;

--echo
--echo # 3. Suspend server 3 by sending signal SIGSTOP to it.
--echo #    This will make server 3 not answer to "I am alive"
--echo #    GCS messages and it will eventually be considered
--echo #    faulty.
--let $rpl_connection_name= server3
--source include/rpl_connection.inc

# Suspending server 3...
--exec kill -19 $server_pid

--echo
--echo # 4. Check server 3 is marked as unreachable.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
let $wait_condition=SELECT COUNT(*)=2 FROM performance_schema.replication_group_members where MEMBER_STATE="ONLINE";
--source include/wait_condition.inc
let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.replication_group_members where MEMBER_STATE="UNREACHABLE";
--source include/wait_condition.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
let $wait_condition=SELECT COUNT(*)=2 FROM performance_schema.replication_group_members where MEMBER_STATE="ONLINE";
--source include/wait_condition.inc
let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.replication_group_members where MEMBER_STATE="UNREACHABLE";
--source include/wait_condition.inc

--echo
--echo # 5. Try to execute an group coordination action on one of the server.
--echo #     Actions shall fail as a member is unreachable

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_switch_to_multi_primary_mode();

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--replace_result $server2_uuid MEMBER2_UUID
--error ER_CANT_INITIALIZE_UDF
--eval SELECT group_replication_set_as_primary("$server2_uuid")

--echo
--echo # 6. Make the member rejoin the group
--echo #    Actions are now accepted

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--exec kill -18 $server_pid

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
let $wait_condition=SELECT COUNT(*)=3 FROM performance_schema.replication_group_members where MEMBER_STATE="ONLINE";
--source include/wait_condition.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
let $wait_condition=SELECT COUNT(*)=3 FROM performance_schema.replication_group_members where MEMBER_STATE="ONLINE";
--source include/wait_condition.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--replace_result $server2_uuid MEMBER2_UUID
--eval SELECT group_replication_set_as_primary("$server2_uuid")

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/gr_assert_primary_member.inc

--echo
--echo # 7. Clean up.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SET GLOBAL group_replication_member_expel_timeout = 0;

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
SET GLOBAL group_replication_member_expel_timeout = 0;

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
SET GLOBAL group_replication_member_expel_timeout = 0;

--let $rpl_group_replication_reset_persistent_vars=1
--source include/group_replication_end.inc
