################################################################################
# Validate that when a member joins a group, if the recovery user does not have
# clone privileges, recovery by binary logs will be used subsequently.
#
# Test:
# 0. The test requires two servers: M1 and M2.
# 1. Install clone plugin on server1.
#    Create a recovery user without clone privileges.
#    Bootstrap a group on server1.
# 2. Install clone plugin on server2.
#    Restart server with a monitoring process (mysqld_safe) if needed
# 3. Start group replication using the created user credentials
#    GR will attempt to clone a donor but due to the lack of
#    privileges, recovery by binary logs will be used subsequently.
# 4. Cleanup
#

--source include/have_mysqld_monitoring_process.inc
--source include/have_clone_plugin.inc
--source include/force_restart.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc

# Validate plugins
--let plugins = CLONE_PLUGIN,GROUP_REPLICATION
--source include/check_plugin_dir.inc

--echo
--echo ############################################################
--echo # 1. Install clone plugin on server1.
--echo #    Create a recovery user without clone privileges.
--echo #    Bootstrap a group on server1.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

# Install the clone plugin
--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

# Create a recovery user without clone privileges.
--let $recovery_user= recovery_user
--let $recovery_password= recovery_password
--eval CREATE USER "$recovery_user" IDENTIFIED BY "$recovery_password"
--eval GRANT REPLICATION SLAVE ON *.* TO "$recovery_user"

# Add some data for recovery
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);
INSERT INTO t1 VALUES (2);

--source include/start_and_bootstrap_group_replication.inc

--echo
--echo #####################################################################
--echo # 2. Install clone plugin on server2.
--echo #    Restart server with a monitoring process (mysqld_safe) if needed

# Install the clone plugin
--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

# Deal with server 2 that needs mysql safe
--let $_group_replication_local_address= `SELECT @@GLOBAL.group_replication_local_address`
--let $_group_replication_group_seeds= `SELECT @@GLOBAL.group_replication_group_seeds`

--let $plugin_list= $GROUP_REPLICATION
--source include/spawn_monitoring_process.inc

# Configure GR for starting now and after restart
--disable_query_log
--eval SET PERSIST  group_replication_group_name= "$group_replication_group_name"
--eval SET PERSIST  group_replication_local_address= "$_group_replication_local_address"
--eval SET PERSIST  group_replication_group_seeds= "$_group_replication_group_seeds"
SET PERSIST group_replication_start_on_boot= ON;
--enable_query_log

--echo
--echo #####################################################################
--echo # 3. Start group replication using the created user credentials
--echo #    GR will attempt to clone a donor but due to the lack of
--echo #    privileges, recovery by binary logs will be used subsequently.

--disable_warnings
--eval CHANGE MASTER TO MASTER_USER='$recovery_user', MASTER_PASSWORD='$recovery_password' FOR CHANNEL 'group_replication_recovery'
--enable_warnings

SET GLOBAL group_replication_clone_threshold= 1;
--source include/start_group_replication.inc

--let $assert_text= Clone status must be Failed
--let $assert_cond= [SELECT state="Failed" FROM performance_schema.clone_status] = 1;
--source include/assert.inc

--let $assert_text= Clone error message must be access denied
--let $assert_cond= [SELECT error_message="Clone Donor Error: 1227 : Access denied; you need (at least one of) the BACKUP_ADMIN privilege(s) for this operation." FROM performance_schema.clone_status] = 1;
--source include/assert.inc

--let $diff_tables= server1:test.t1, server2:test.t1
--source include/diff_tables.inc

--echo
--echo ############################################################
--echo # 4. Cleanup.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc

RESET PERSIST IF EXISTS group_replication_group_name;
RESET PERSIST IF EXISTS group_replication_local_address;
RESET PERSIST IF EXISTS group_replication_group_seeds;
RESET PERSIST IF EXISTS group_replication_start_on_boot;

DROP TABLE t1;
--eval DROP USER "$recovery_user"
--source include/rpl_sync.inc

SET SESSION sql_log_bin=0;
call mtr.add_suppression("Due to the number of missing transactions being higher than the configured threshold of 1, this member will start distributed recovery using clone.");
call mtr.add_suppression("Internal query: CLONE INSTANCE FROM \'recovery_user\'@\'127.0.0.1\':[0-9]+ IDENTIFIED BY \'\\*\\*\\*\\*\\*\' REQUIRE NO SSL; result in error. Error number:*");
call mtr.add_suppression("There was an issue when cloning from another server: Error number: 3862 Error message: Clone Donor Error: 1227 : Access denied; you need \\(at least one of\\) the BACKUP_ADMIN privilege\\(s\\) for this operation.");
call mtr.add_suppression("Due to some issue on the previous step distributed recovery is now executing: Incremental Recovery");
call mtr.add_suppression("Clone removing all user data for provisioning: Started");
call mtr.add_suppression("Clone removing all user data for provisioning: Finished");
SET SESSION sql_log_bin=1;

--source include/clean_monitoring_process.inc

--source include/group_replication_end.inc
