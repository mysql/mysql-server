################################################################################
## Test case to verify that asynchronous replication channel starting on boot
## waits till member becomes online.
##
## Test:
## 0. This test requires 3 members.
##    M1 and M2 are connected through GR.
##    M1 connects with M3 through asynchronous replication.
## 1. Start GR on server1 & 2
## 2. Start slave for channel 'ch3_1' between server1(slave) and server3(master)
## 3. Add some data to server3 & server2
## 4. Verify servers are in sync and data is replicated to server1
## 5. Restart server1 with missing group_replication_group_name variable value
## 6. Verify that server1 is OFFLINE
## 7. Verify that channel ch3_1 can be started
## 8. Start Group Replication on server1
## 9. Insert a row on server 1 with log to the binlog disabled
## 10. Write the same query in server 2.
##     On server 1 the duplicated key will make the applier fail.
##     Server 1 will leave.
## 11. Restart server1 with group replication start on boot.
## 12. Verify that server1 is still OFFLINE.
## 13. Verify that channel ch3_1 is not running
## 14. Cleanup
################################################################################

--source include/have_debug.inc
--source include/have_debug_sync.inc
--source include/big_test.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_server_count= 3
--source include/group_replication.inc


--echo
--echo # 1. Start GR on server1 & 2

# Boostrap start GR on server2 (Primary)
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/start_and_bootstrap_group_replication.inc

# Start GR on server1 (Secondary)
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

SET @@GLOBAL.DEBUG= @debug_save;

--source include/start_group_replication.inc

--echo
--echo # 2. Start slave for channel 'ch3_1' between server1(slave) and server3(master)
--replace_result $SERVER_MYPORT_3 SERVER_3_PORT
--eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='localhost', SOURCE_USER='root', SOURCE_PORT=$SERVER_MYPORT_3 for channel 'ch3_1'

--let $rpl_channel_name='ch3_1'
--source include/start_slave.inc


--echo
--echo # 3. Add some data to server3 & server2

# server3: create table t1 and add data
--let $rpl_connection_name= server3
--source include/rpl_connection.inc
CREATE TABLE test.t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO test.t1 VALUES (1);

# server2: create table t2 and add data
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
CREATE TABLE test.t2 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO test.t2 VALUES (1);


--echo
--echo # 4. Verify servers are in sync and data is replicated to server1

# Sync slave(server1) with master(server3)
--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--let $sync_slave_connection=server1
--source include/sync_slave_sql_with_master.inc

--let $rpl_channel_name=
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--let $sync_slave_connection=server1
--source include/sync_slave_sql_with_master.inc

# Wait for all servers to be in sync
--source include/rpl_sync.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $assert_text= Verify two tables (t1 & t2) are present in test database
--let $assert_cond= "[SELECT count(table_name) COUNT FROM INFORMATION_SCHEMA.TABLES WHERE table_schema = \'test\', COUNT, 1]" = "2"
--source include/assert.inc

--let $assert_text= Verify test.t2 is synced
--let $assert_cond= "[SELECT count(*) COUNT FROM test.t2, COUNT, 1]" = "1"
--source include/assert.inc


--echo
--echo # 5. Restart server1 with missing group_replication_group_name variable value

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $allow_rpl_inited=1
--let $_group_replication_local_address= `SELECT @@GLOBAL.group_replication_local_address`
--let $_group_replication_group_seeds= `SELECT @@GLOBAL.group_replication_group_seeds`

--let $restart_parameters=restart:--group_replication_local_address=$_group_replication_local_address --group_replication_group_seeds=$_group_replication_group_seeds --group_replication_start_on_boot=1 --skip-replica-start=1 --log_error_verbosity=3 --log-error=$MYSQLTEST_VARDIR/tmp/gr_start_slave_gr_on_boot_on_rejoining_node_error.err
--replace_result $_group_replication_local_address GROUP_REPLICATION_LOCAL_ADDRESS $_group_replication_group_seeds GROUP_REPLICATION_GROUP_SEEDS $MYSQLTEST_VARDIR MYSQLTEST_VARDIR
--source include/restart_mysqld.inc

--let $rpl_server_number= 1
--source include/rpl_reconnect.inc


--echo
--echo # 6. Verify that server1 is OFFLINE

let $wait_condition= SELECT COUNT(*)=0 FROM performance_schema.threads WHERE NAME = "thread/group_rpl/THD_delayed_initialization";
--source include/wait_condition.inc

--let $group_replication_number_of_members= 0
--source include/gr_wait_for_number_of_members.inc


--echo
--echo # 7. Verify that channel ch3_1 can be started

--let $rpl_channel_name='ch3_1'
--source include/start_slave.inc
--let rpl_channel_name=


--echo
--echo # 8. Start Group Replication on server1
--source include/start_group_replication.inc


--echo
--echo # 9. Insert a row on server 1 with log to the binlog disabled

SET SESSION sql_log_bin= 0;
INSERT INTO t2 VALUES (2);
SET SESSION sql_log_bin= 1;


--echo
--echo # 10. Write the same query in server 2
--echo #     On server 1 the duplicated key will make the applier fail.
--echo #     Server 1 will leave

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

INSERT INTO t2 VALUES (2);


--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--echo # Expect ERROR state.
--let $group_replication_member_state= ERROR
--source include/gr_wait_for_member_state.inc


--echo
--echo # 11. Restart server1 with group replication start on boot

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $allow_rpl_inited=1
--let $_group_replication_local_address= `SELECT @@GLOBAL.group_replication_local_address`
--let $_group_replication_group_seeds= `SELECT @@GLOBAL.group_replication_group_seeds`

--let $restart_parameters=restart:--group_replication_local_address=$_group_replication_local_address --group_replication_group_seeds=$_group_replication_group_seeds --group_replication_start_on_boot=1 --group-replication-group-name=$group_replication_group_name --skip-replica-start=0 --log_error_verbosity=3 --log-error=$MYSQLTEST_VARDIR/tmp/gr_start_slave_gr_on_boot_on_rejoining_node_error.err
--replace_result $_group_replication_local_address GROUP_REPLICATION_LOCAL_ADDRESS $_group_replication_group_seeds GROUP_REPLICATION_GROUP_SEEDS $group_replication_group_name GROUP_REPLICATION_GROUP_NAME $MYSQLTEST_VARDIR MYSQLTEST_VARDIR
--source include/restart_mysqld.inc

--let $rpl_server_number= 1
--source include/rpl_reconnect.inc


--echo
--echo # 12. Verify that server1 errors out

--let $group_replication_member_state= ERROR
--source include/gr_wait_for_member_state.inc

SET GLOBAL read_only= OFF;


--echo
--echo # 13. Verify that channel ch3_1 is not running

--let $rpl_channel_name= 'ch3_1'
--let $slave_sql_errno= convert_error(ER_SLAVE_FATAL_ERROR)
--source include/wait_for_slave_sql_error.inc
--let rpl_channel_name=

--let $grep_pattern= The slave applier thread of channel 'ch3_1' will error out as the member failed to come ONLINE
--let $grep_file= $MYSQLTEST_VARDIR/tmp/gr_start_slave_gr_on_boot_on_rejoining_node_error.err
--let $grep_output= boolean
--source include/grep_pattern.inc


--echo
--echo # 14. Clean Up

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--source include/stop_group_replication.inc

DROP TABLE test.t2;
DROP TABLE test.t1;

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

RESET SLAVE ALL FOR CHANNEL 'ch3_1';

DROP TABLE test.t1;

--let $skip_assert_read_only= 1
--source include/stop_group_replication.inc

SET SESSION sql_log_bin= 0;
call mtr.add_suppression("The applier thread execution was aborted. Unable to process more transactions, this member will now leave the group.");
call mtr.add_suppression("Fatal error during execution on the Applier process of Group Replication. The server will now leave the group.");
call mtr.add_suppression("Unable to confirm whether the server has left the group or not. Check *.*");
call mtr.add_suppression("Slave SQL for channel 'group_replication_applier': Could not execute Write_rows event on table");
call mtr.add_suppression("There was a previous plugin error while the member joined the group. The member will now exit the group.");
call mtr.add_suppression("Slave SQL for channel 'group_replication_applier': Worker [0-9] failed executing transaction*");
call mtr.add_suppression("Slave SQL for channel 'group_replication_applier': ... The slave coordinator and worker threads are stopped,*");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going");
SET SESSION sql_log_bin= 1;

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

DROP TABLE test.t1;

--source include/group_replication_end.inc
# Bug#27845579 - GR_START_SLAVE_GR_ON_BOOT_ON_REJOINING_NODE_ERROR FAILS CHECK-TESTCASE
# Restart is needed to get rid of the error file created due to --log-error option
--source include/force_restart.inc
