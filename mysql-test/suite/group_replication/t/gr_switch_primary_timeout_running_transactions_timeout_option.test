###############################################################################
#
# This test validates timeout parameter of UDF
# group_replication_set_as_primary().
#
# Test:
# 0. This test requires two servers.
# 1. Setup group of 2 servers, M1(primary) and M2(secondary).
# 2. Execute action of set a new primary:
# 2.1. With extra arguments it must fail.
# 2.2. With invalid values for running_transactions_timeout it must fail.
# 2.3. With invalid value range it must fail(valid range 0 - 3600).
# 2.4. With NULL values for running_transactions_timeout it must fail.
# 2.5. With empty string values for running_transactions_timeout it must fail.
# 3. Test corner values for running_transactions_timeout.
# 4. Create a table to test the functions with SQL outputs
# 5. Test group_replication_set_as_primary output (SQL parameter).
# 5.1. With invalid range for running_transactions_timeout it must fail.
# 5.2. With invalid range for running_transactions_timeout it must fail.
# 5.3. With NULL it must fail.
# 5.4. With invalid range for running_transactions_timeout it must fail.
# 5.5. Switch to another member
# 5.6. Switch to another member
# 6. Cleanup
#
###############################################################################

--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_group_replication_single_primary_mode=1
--source include/group_replication.inc

--echo
--echo # 1. Setup group of 2 servers, M1(primary) and M2(secondary).

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $server1_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--source include/start_and_bootstrap_group_replication.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $server2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--source include/start_group_replication.inc

--echo
--echo # 2. Execute action of set a new primary:
--echo # 2.1. With extra arguments it must fail.

--replace_result $server2_uuid MEMBER2_UUID
--error ER_CANT_INITIALIZE_UDF
--eval SELECT group_replication_set_as_primary("$server2_uuid", 20, "arguments")

--echo # 2.2. With invalid values for running_transactions_timeout it must fail.
--replace_result $server2_uuid MEMBER2_UUID
--error ER_BAD_FIELD_ERROR
--eval SELECT group_replication_set_as_primary("server2_uuid", 1a)

--replace_result $server2_uuid MEMBER2_UUID
--error ER_CANT_INITIALIZE_UDF
--eval SELECT group_replication_set_as_primary("$server2_uuid", "string")

--source include/gr_assert_secondary_member.inc

--echo # 2.3. With invalid value range it must fail(valid range 0 - 3600).
--replace_result $server2_uuid MEMBER2_UUID
--error ER_GRP_RPL_UDF_ERROR
--eval SELECT group_replication_set_as_primary("$server2_uuid", -1)

--replace_result $server2_uuid MEMBER2_UUID
--error ER_GRP_RPL_UDF_ERROR
--eval SELECT group_replication_set_as_primary("$server2_uuid", 3601);

--replace_result $server2_uuid MEMBER2_UUID
--error ER_GRP_RPL_UDF_ERROR
--eval SELECT group_replication_set_as_primary("$server2_uuid", 10000)

--source include/gr_assert_secondary_member.inc

--echo # 2.4. With NULL values for running_transactions_timeout it must fail.

--replace_result $server2_uuid MEMBER2_UUID
--error ER_CANT_INITIALIZE_UDF
--eval SELECT group_replication_set_as_primary("$server2_uuid", NULL)

--echo # 2.5. With empty string values for running_transactions_timeout it must fail.

--replace_result $server2_uuid MEMBER2_UUID
--error ER_PARSE_ERROR
--eval SELECT group_replication_set_as_primary("$server2_uuid", )

--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_set_as_primary();

--source include/gr_assert_secondary_member.inc

--echo
--echo # 3. Test corner values for running_transactions_timeout.

--replace_result $server2_uuid MEMBER2_UUID
--eval SELECT group_replication_set_as_primary("$server2_uuid", 0)

--replace_result $server1_uuid MEMBER1_UUID
--eval SELECT group_replication_set_as_primary("$server1_uuid", 3600)

--echo
--echo # 4. Create a table to test the functions with SQL outputs

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

CREATE TABLE test.t1 (a INT PRIMARY KEY NOT NULL AUTO_INCREMENT, b INT);
--disable_query_log
INSERT INTO test.t1 VALUES (1, -1);        # Invalid uuid.
INSERT INTO test.t1 VALUES (2, 3601);      # Valid but unknown uuid.
INSERT INTO test.t1 VALUES (3, NULL);      # NULL.
INSERT INTO test.t1 VALUES (4, 10000);     # Empty string.
INSERT INTO test.t1 VALUES (5, 0);         # Valid M1 uuid.
INSERT INTO test.t1 VALUES (6, 3600);      # Valid M2 uuid.
--enable_query_log

--echo
--echo # 5. Test group_replication_set_as_primary output (SQL parameter).

--echo # 5.1. With invalid range for running_transactions_timeout it must fail.
--replace_result $server2_uuid MEMBER2_UUID
--error ER_GRP_RPL_UDF_ERROR
--eval SELECT group_replication_set_as_primary("$server2_uuid", b) FROM test.t1 WHERE a=1

--echo # 5.2. With invalid range for running_transactions_timeout it must fail.
--replace_result $server2_uuid MEMBER2_UUID
--error ER_GRP_RPL_UDF_ERROR
--eval SELECT group_replication_set_as_primary("$server2_uuid", b) FROM test.t1 WHERE a=2

--echo # 5.3. With NULL it must fail.
--replace_result $server2_uuid MEMBER2_UUID
--error ER_GRP_RPL_UDF_ERROR
--eval SELECT group_replication_set_as_primary("$server2_uuid", b) FROM test.t1 WHERE a=3

--echo # 5.4. With invalid range for running_transactions_timeout it must fail.
--replace_result $server2_uuid MEMBER2_UUID
--error ER_GRP_RPL_UDF_ERROR
--eval SELECT group_replication_set_as_primary("$server2_uuid", b) FROM test.t1 WHERE a=4

--echo # 5.5. Switch to another member
--replace_result $server2_uuid MEMBER2_UUID
--eval SELECT group_replication_set_as_primary("$server2_uuid", b) FROM test.t1 WHERE a=5

--echo # 5.6. Switch to another member
--replace_result $server1_uuid MEMBER1_UUID
--eval SELECT group_replication_set_as_primary("$server1_uuid", b) FROM test.t1 WHERE a=6

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/gr_assert_primary_member.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--source include/gr_assert_secondary_member.inc

--echo
--echo # 6. Cleanup

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
DROP TABLE test.t1;
--source include/group_replication_end.inc
