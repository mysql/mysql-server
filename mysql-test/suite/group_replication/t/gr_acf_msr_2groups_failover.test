###########################################################
# Validate that the we can have several managed channels.
#
# Test:
#  0. The test requires 7 servers:
#       server1: group A primary
#       server2: group A secondary
#       server3: group A secondary
#       server4: group B primary
#       server5: group B secondary
#       server6: group B secondary
#       server7: replica server
#  1. Deploy a 3 members group A in single primary mode.
#  2. Deploy a 3 members group B in single primary mode.
#  3. Configure replica to manage the asynchronous connection
#     to groups A and B.
#  4. Create and start the managed channels.
#  5. Stop primary from group A (server1) and the replica
#     shall connect to new primary server2.
#  6. Stop primary from group B (server4) and the replica
#     shall connect to new primary server5.
#  7. Validate that channel ch1 did not reconnect to ch2 sources.
#  8. Validate that channel ch2 did not reconnect to ch1 sources.
#  9. Clean up.
###########################################################
--source include/big_test.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_server_count= 7
--source include/group_replication.inc

#check which stack are we using
--let $have_xcom_stack= `SELECT @@group_replication_communication_stack LIKE 'XCOM'`

--echo
--echo ############################################################
--echo # 1. Deploy a 3 members group A in single primary mode.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $server1_uuid= `SELECT @@server_uuid`
--let $group_replication_group_name= aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa
--let $group_a= $group_replication_group_name
--disable_query_log
if ($have_xcom_stack){
  --eval SET GLOBAL group_replication_group_seeds= "localhost:$SERVER_GR_PORT_1,localhost:$SERVER_GR_PORT_2,localhost:$SERVER_GR_PORT_3"
}
if (!$have_xcom_stack){
  --eval SET GLOBAL group_replication_group_seeds= "localhost:$SERVER_MYPORT_1,localhost:$SERVER_MYPORT_2,localhost:$SERVER_MYPORT_3"
}
--enable_query_log
--source include/start_and_bootstrap_group_replication.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--let $server2_uuid= `SELECT @@server_uuid`
--disable_query_log
if ($have_xcom_stack){
  --eval SET GLOBAL group_replication_group_seeds= "localhost:$SERVER_GR_PORT_1,localhost:$SERVER_GR_PORT_2,localhost:$SERVER_GR_PORT_3"
}
if (!$have_xcom_stack){
  --eval SET GLOBAL group_replication_group_seeds= "localhost:$SERVER_MYPORT_1,localhost:$SERVER_MYPORT_2,localhost:$SERVER_MYPORT_3"
}
--enable_query_log
SET GLOBAL group_replication_member_weight=99;
--source include/start_group_replication.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--let $server3_uuid= `SELECT @@server_uuid`
--disable_query_log
if ($have_xcom_stack){
  --eval SET GLOBAL group_replication_group_seeds= "localhost:$SERVER_GR_PORT_1,localhost:$SERVER_GR_PORT_2,localhost:$SERVER_GR_PORT_3"
}
if (!$have_xcom_stack){
  --eval SET GLOBAL group_replication_group_seeds= "localhost:$SERVER_MYPORT_1,localhost:$SERVER_MYPORT_2,localhost:$SERVER_MYPORT_3"
}
--enable_query_log
--source include/start_group_replication.inc


--echo
--echo ############################################################
--echo # 2. Deploy a 3 members group B in single primary mode.
--let $rpl_connection_name= server4
--source include/rpl_connection.inc
--let $server4_uuid= `SELECT @@server_uuid`
--let $group_replication_group_name= bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb
--let $group_b= $group_replication_group_name
--disable_query_log
if ($have_xcom_stack){
  --eval SET GLOBAL group_replication_group_seeds= "localhost:$SERVER_GR_PORT_4,localhost:$SERVER_GR_PORT_5,localhost:$SERVER_GR_PORT_6"
}
if (!$have_xcom_stack){
  --eval SET GLOBAL group_replication_group_seeds= "localhost:$SERVER_MYPORT_4,localhost:$SERVER_MYPORT_5,localhost:$SERVER_MYPORT_6"
}
--enable_query_log
--source include/start_and_bootstrap_group_replication.inc

--let $rpl_connection_name= server5
--source include/rpl_connection.inc
--let $server5_uuid= `SELECT @@server_uuid`
--disable_query_log
if ($have_xcom_stack){
  --eval SET GLOBAL group_replication_group_seeds= "localhost:$SERVER_GR_PORT_4,localhost:$SERVER_GR_PORT_5,localhost:$SERVER_GR_PORT_6"
}
if (!$have_xcom_stack){
  --eval SET GLOBAL group_replication_group_seeds= "localhost:$SERVER_MYPORT_4,localhost:$SERVER_MYPORT_5,localhost:$SERVER_MYPORT_6"
}
--enable_query_log
SET GLOBAL group_replication_member_weight=99;
--source include/start_group_replication.inc

--let $rpl_connection_name= server6
--source include/rpl_connection.inc
--let $server6_uuid= `SELECT @@server_uuid`
--disable_query_log
if ($have_xcom_stack){
  --eval SET GLOBAL group_replication_group_seeds= "localhost:$SERVER_GR_PORT_4,localhost:$SERVER_GR_PORT_5,localhost:$SERVER_GR_PORT_6"
}
if (!$have_xcom_stack){
  --eval SET GLOBAL group_replication_group_seeds= "localhost:$SERVER_MYPORT_4,localhost:$SERVER_MYPORT_5,localhost:$SERVER_MYPORT_6"
}
--enable_query_log
--source include/start_group_replication.inc


--echo
--echo ############################################################
--echo # 3. Configure replica to manage the asynchronous connection
--echo #    to groups A and B.
--let $rpl_connection_name= server7
--source include/rpl_connection.inc

--replace_result $SERVER_MYPORT_2 SERVER_MYPORT_2 $group_a GROUP_A
--eval SELECT asynchronous_connection_failover_add_managed('ch1', 'GroupReplication', '$group_a', '127.0.0.1', $SERVER_MYPORT_2, '', 90, 70);

--replace_result $SERVER_MYPORT_5 SERVER_MYPORT_5 $group_b GROUP_B
--eval SELECT asynchronous_connection_failover_add_managed('ch2', 'GroupReplication', '$group_b', '127.0.0.1', $SERVER_MYPORT_5, '', 85, 65);

--let $assert_text= 'There is one row in performance_schema.replication_asynchronous_connection_failover for server2'
--let $assert_cond= [SELECT COUNT(*) count FROM performance_schema.replication_asynchronous_connection_failover WHERE port=$SERVER_MYPORT_2, count, 1] = 1
--source include/assert.inc

--let $assert_text= 'There is one row in performance_schema.replication_asynchronous_connection_failover for server5'
--let $assert_cond= [SELECT COUNT(*) count FROM performance_schema.replication_asynchronous_connection_failover WHERE port=$SERVER_MYPORT_5, count, 1] = 1
--source include/assert.inc

--let $assert_text= 'There is one row in performance_schema.replication_asynchronous_connection_failover_managed for group A'
--let $assert_cond= [SELECT COUNT(*) count FROM performance_schema.replication_asynchronous_connection_failover_managed WHERE managed_name="$group_a", count, 1] = 1
--source include/assert.inc

--let $assert_text= 'There is one row in performance_schema.replication_asynchronous_connection_failover_managed for group B'
--let $assert_cond= [SELECT COUNT(*) count FROM performance_schema.replication_asynchronous_connection_failover_managed WHERE managed_name="$group_b", count, 1] = 1
--source include/assert.inc


--echo
--echo ############################################################
--echo # 4. Create and start the managed channels.
--let $rpl_connection_name= server7
--source include/rpl_connection.inc
--replace_result $SERVER_MYPORT_1 SERVER_1_PORT
--eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_USER='root', SOURCE_AUTO_POSITION=1, SOURCE_CONNECTION_AUTO_FAILOVER=1, SOURCE_PORT=$SERVER_MYPORT_1, SOURCE_CONNECT_RETRY=1, SOURCE_RETRY_COUNT=1 FOR CHANNEL 'ch1'

--replace_result $SERVER_MYPORT_4 SERVER_4_PORT
--eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_USER='root', SOURCE_AUTO_POSITION=1, SOURCE_CONNECTION_AUTO_FAILOVER=1, SOURCE_PORT=$SERVER_MYPORT_4, SOURCE_CONNECT_RETRY=1, SOURCE_RETRY_COUNT=1 FOR CHANNEL 'ch2'


--let $rpl_channel_name='ch1'
--source include/start_slave.inc
--let $rpl_channel_name=

--let $assert_text= Verify channel ch1 IO_THREAD is ON and connected to server1
--let $assert_cond= "[SELECT SERVICE_STATE FROM performance_schema.replication_connection_status WHERE channel_name=\'ch1\' AND source_uuid=\'$server1_uuid\', SERVICE_STATE, 1]" = "ON"
--source include/assert.inc

--let $wait_condition= SELECT COUNT(*)=6 FROM performance_schema.replication_asynchronous_connection_failover
--source include/wait_condition.inc


--let $rpl_channel_name='ch2'
--source include/start_slave.inc
--let $rpl_channel_name=

--let $assert_text= Verify channel ch2 IO_THREAD is ON and connected to server4
--let $assert_cond= "[SELECT SERVICE_STATE FROM performance_schema.replication_connection_status WHERE channel_name=\'ch2\' AND source_uuid=\'$server4_uuid\', SERVICE_STATE, 1]" = "ON"
--source include/assert.inc

--let $wait_condition= SELECT COUNT(*)=6 FROM performance_schema.replication_asynchronous_connection_failover
--source include/wait_condition.inc


--echo
--echo ############################################################
--echo # 5. Stop primary from group A (server1) and the replica
--echo #    shall connect to new primary server2.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--source include/stop_group_replication.inc

--let $rpl_connection_name= server7
--source include/rpl_connection.inc
--let $wait_condition= SELECT COUNT(*)=1 FROM performance_schema.replication_connection_status WHERE channel_name='ch1' AND source_uuid='$server2_uuid';
--source include/wait_condition.inc


--echo
--echo ############################################################
--echo # 6. Stop primary from group B (server4) and the replica
--echo #    shall connect to new primary server5.
--let $rpl_connection_name= server4
--source include/rpl_connection.inc
--source include/stop_group_replication.inc

--let $rpl_connection_name= server7
--source include/rpl_connection.inc
--let $wait_condition= SELECT COUNT(*)=1 FROM performance_schema.replication_connection_status WHERE channel_name='ch2' AND source_uuid='$server5_uuid';
--source include/wait_condition.inc


--echo
--echo ############################################################
--echo # 7. Validate that channel ch1 did not reconnect to ch2 sources.
--let $rpl_connection_name= server7
--source include/rpl_connection.inc

--let $assert_only_after = CURRENT_TEST: group_replication.gr_acf_msr_2groups_failover
--let $assert_file= $MYSQLTEST_VARDIR/log/mysqld.7.err
--let $assert_select=Slave I/O thread for channel 'ch1': connected to master 'root@127.0.0.1:$SERVER_MYPORT_4'.*
--let $assert_count= 0
--let $assert_text= ch1 did not reconnect to server4
--source include/assert_grep.inc

--let $assert_only_after = CURRENT_TEST: group_replication.gr_acf_msr_2groups_failover
--let $assert_file= $MYSQLTEST_VARDIR/log/mysqld.7.err
--let $assert_select=Slave I/O thread for channel 'ch1': connected to master 'root@127.0.0.1:$SERVER_MYPORT_5'.*
--let $assert_count= 0
--let $assert_text= ch1 did not reconnect to server5
--source include/assert_grep.inc

--let $assert_only_after = CURRENT_TEST: group_replication.gr_acf_msr_2groups_failover
--let $assert_file= $MYSQLTEST_VARDIR/log/mysqld.7.err
--let $assert_select=Slave I/O thread for channel 'ch1': connected to master 'root@127.0.0.1:$SERVER_MYPORT_6'.*
--let $assert_count= 0
--let $assert_text= ch1 did not reconnect to server6
--source include/assert_grep.inc


--echo
--echo ############################################################
--echo # 8. Validate that channel ch2 did not reconnect to ch1 sources.
--let $rpl_connection_name= server7
--source include/rpl_connection.inc

--let $assert_only_after = CURRENT_TEST: group_replication.gr_acf_msr_2groups_failover
--let $assert_file= $MYSQLTEST_VARDIR/log/mysqld.7.err
--let $assert_select=Slave I/O thread for channel 'ch2': connected to master 'root@127.0.0.1:$SERVER_MYPORT_1'.*
--let $assert_count= 0
--let $assert_text= ch2 did not reconnect to server1
--source include/assert_grep.inc

--let $assert_only_after = CURRENT_TEST: group_replication.gr_acf_msr_2groups_failover
--let $assert_file= $MYSQLTEST_VARDIR/log/mysqld.7.err
--let $assert_select=Slave I/O thread for channel 'ch2': connected to master 'root@127.0.0.1:$SERVER_MYPORT_2'.*
--let $assert_count= 0
--let $assert_text= ch2 did not reconnect to server2
--source include/assert_grep.inc

--let $assert_only_after = CURRENT_TEST: group_replication.gr_acf_msr_2groups_failover
--let $assert_file= $MYSQLTEST_VARDIR/log/mysqld.7.err
--let $assert_select=Slave I/O thread for channel 'ch2': connected to master 'root@127.0.0.1:$SERVER_MYPORT_3'.*
--let $assert_count= 0
--let $assert_text= ch2 did not reconnect to server3
--source include/assert_grep.inc


--echo
--echo ############################################################
--echo # 9. Clean up.
--let $rpl_connection_name= server7
--source include/rpl_connection.inc

SET SESSION sql_log_bin = 0;
call mtr.add_suppression("The IO thread detected that the source .* does not belong to the group majority, thence the channel .* will try to connect to another source.");
call mtr.add_suppression("The Monitor IO thread detected that the source .* does not belong to the group majority, thence the channel .* will try to connect to another source.");
call mtr.add_suppression("The master's UUID has changed, although this should not happen unless you have changed it manually. The old UUID was.*");
SET SESSION sql_log_bin = 1;

--let $rpl_channel_name='ch1'
--source include/stop_slave.inc
--let $rpl_reset_slave_all= 1
--let $rpl_multi_source= 1
--source include/rpl_reset_slave.inc
--let $rpl_channel_name=
--let $rpl_reset_slave_all=
--let $rpl_multi_source=

--let $rpl_channel_name='ch2'
--source include/stop_slave.inc
--let $rpl_reset_slave_all= 1
--let $rpl_multi_source= 1
--source include/rpl_reset_slave.inc
--let $rpl_channel_name=
--let $rpl_reset_slave_all=
--let $rpl_multi_source=

--replace_result $group_a GROUP_A
--eval SELECT asynchronous_connection_failover_delete_managed('ch1', '$group_a')

--replace_result $group_b GROUP_B
--eval SELECT asynchronous_connection_failover_delete_managed('ch2', '$group_b')

--let $rpl_connection_name= server6
--source include/rpl_connection.inc
--source include/stop_group_replication.inc

--let $rpl_connection_name= server5
--source include/rpl_connection.inc
--source include/stop_group_replication.inc
SET GLOBAL group_replication_member_weight= DEFAULT;

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--source include/stop_group_replication.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/stop_group_replication.inc
SET GLOBAL group_replication_member_weight= DEFAULT;

--source include/group_replication_end.inc
