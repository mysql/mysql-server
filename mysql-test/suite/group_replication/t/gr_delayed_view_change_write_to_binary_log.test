################################################################################
# Verify that even when view change log event write into binary log is delayed,
# no asserts do happen on certification procedure due to missing UUID on
# transaction snapshot version.
#
# Test:
# 0. The test requires one server: M1.
# 1. Bootstrap M1 in a group, and block it on recovery start using DEBUG POINT.
#  - When in RECOVERING state set bootstrap_group=0.
# 2. Stop applier channel in order to delay the view change log event write to
#    binary log.
# 3. Resume recovery, M1 will be ONLINE but view change log event will still be
#    queued to apply into binary log i.e. GTID_EXECUTED must be empty.
# 4. Execute a transaction T1, whose snapshot version will not include any group
#    GTID. Set a debug sync before broadcast message to group on connection
#    server_1. Commit a transaction that will be blocked before broadcast.
# 5. Start applier channel and wait until the view change log event is written
#    into binary log.
# 6. Resume transaction T1, it will be send to the group for conflict detection
#    and apply. Verify GTID_EXECUTED must contain all group GTIDs.
# 7. Clean up.
################################################################################
--source include/have_debug_sync.inc
--let $group_replication_group_name= e70f06d2-eb85-11e5-b3b5-00212844d44e
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc


--echo
--echo ############################################################
--echo # 1. Start a 1 member group, and block it on recovery start.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SET @debug_save= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG= 'd,recovery_thread_start_wait';

--eval SET GLOBAL group_replication_group_name= "$group_replication_group_name"
SET GLOBAL group_replication_bootstrap_group= 1;
--source include/start_group_replication_command.inc

# Wait for the debug sync to be reached.
SET DEBUG_SYNC= "now WAIT_FOR signal.recovery_waiting";

--let $group_replication_member_state= RECOVERING
--source include/gr_wait_for_member_state.inc
SET GLOBAL group_replication_bootstrap_group= 0;

# sleep to give time for the start to get stuck on recovery
--sleep 5


--echo
--echo ############################################################
--echo # 2. Stop applier channel in order to delay the view change
--echo #    log event write to binary log.
STOP SLAVE SQL_THREAD FOR CHANNEL "group_replication_applier";
--let $wait_condition= SELECT service_state="OFF" FROM performance_schema.replication_applier_status WHERE channel_name="group_replication_applier"
--source include/wait_condition.inc


--echo
--echo ############################################################
--echo # 3. Resume recovery, member will be online but view change
--echo #    log event will still be queued to apply into binary log.
SET DEBUG_SYNC= "now SIGNAL signal.recovery_continue";
SET @@GLOBAL.DEBUG= @debug_save;

--let $group_replication_member_state= ONLINE
--source include/gr_wait_for_member_state.inc

--let $assert_text= GTID_EXECUTED must be empty
--let $assert_cond= "[SELECT @@GLOBAL.GTID_EXECUTED]" = ""
--source include/assert.inc


--echo
--echo ############################################################
--echo # 4. Execute a transaction T1, which snapshot version will
--echo #    not include any group GTID.
--echo #    Set a debug sync before broadcast message to group on
--echo #    connection server_1.
--echo #    Commit a transaction that will be blocked before broadcast.
--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
SET @@GLOBAL.DEBUG='d,group_replication_before_message_broadcast';
--send CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB

# Wait for the debug sync to be reached.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $wait_condition=SELECT COUNT(*)=1 FROM INFORMATION_SCHEMA.PROCESSLIST WHERE State = 'debug sync point: now'
--source include/wait_condition.inc


--echo
--echo ############################################################
--echo # 5. Start applier channel and wait until the view change
--echo #    log event is written into binary log.
START SLAVE SQL_THREAD FOR CHANNEL "group_replication_applier";
--let $wait_condition= SELECT service_state="ON" FROM performance_schema.replication_applier_status WHERE channel_name="group_replication_applier"
--source include/wait_condition.inc

# Wait until view change log event is logged.
--eval SELECT WAIT_FOR_EXECUTED_GTID_SET('$group_replication_group_name:1')


--echo
--echo ############################################################
--echo # 6. Resume transaction T1, it will be send to the group for
--echo #    conflict detection and apply.
SET DEBUG_SYNC='now SIGNAL waiting';
SET @@GLOBAL.DEBUG= @debug_save;

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
--reap

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $assert_text= GTID_EXECUTED must contain all group GTIDs
--let $assert_cond= "[SELECT @@GLOBAL.GTID_EXECUTED]" = "$group_replication_group_name:1-2"
--source include/assert.inc


--echo
--echo ############################################################
--echo # 7. Clean up.
DROP TABLE t1;
--source include/group_replication_end.inc
