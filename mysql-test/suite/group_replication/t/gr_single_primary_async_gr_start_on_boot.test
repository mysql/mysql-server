################################################################################
## Test case to verify that asynchronous replication channel can be started
## on primary, and fails to start on secondary when group replication starts
## on boot.
##
## Test:
## 0. This test requires 3 members.
##    M1 and M2 are connected through GR.
##    M3 connects with M1 and M2 through asynchronous replication.
## 1. Restart server1(primary) with group replication start on boot
## 2. Wait for server to come ONLINE
## 3. Create and start new channel ch3_1: server1(slave), server3(master)
## 4. Verify channel ch3_1 IO and SQL THREADS are ON
## 5. Restart server2(secondary) with group replication start on boot
## 6. Wait for GR to come ONLINE
## 7. Create new channel ch3_2: server2(slave), server3(master)
## 8. start slave and verify for error ER_SLAVE_FATAL_ERROR
## 9. start slave io and verify for error ER_SLAVE_FATAL_ERROR
## 10. start slave sql and verify for error ER_SLAVE_FATAL_ERROR
## 11. Verify occurrence of error message
## 12. Verify channel ch3_2 IO & SQL THREAD is OFF
## 13. Stop group replication on server2
## 14. Restart server2(secondary) with group replication start on boot
## 15. Wait for GR to be in ONLINE status
## 16. Wait for channel ch3_2 to error out and verify IO and SQL THREADS are OFF
## 17. Verify occurrence of error message
## 18. Cleanup
################################################################################

--source include/big_test.inc
--source include/have_group_replication_plugin.inc
--let $rpl_server_count=3
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc

--echo
--echo # 1. Restart server1(primary) with group replication start on boot
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $allow_rpl_inited=1
--let $_group_replication_local_address= `SELECT @@GLOBAL.group_replication_local_address`
--let $_group_replication_group_seeds= `SELECT @@GLOBAL.group_replication_group_seeds`
--let $restart_parameters=restart:--group-replication-start-on-boot=1 --group-replication-group-name=$group_replication_group_name --group_replication_local_address=$_group_replication_local_address --group_replication_group_seeds=$_group_replication_group_seeds --group_replication_bootstrap_group=1 --group_replication_single_primary_mode=1 --group_replication_enforce_update_everywhere_checks=0
--replace_result $group_replication_group_name GROUP_REPLICATION_GROUP_NAME $_group_replication_local_address GROUP_REPLICATION_LOCAL_ADDRESS $_group_replication_group_seeds GROUP_REPLICATION_GROUP_SEEDS
--source include/restart_mysqld.inc

--let $rpl_server_number= 1
--source include/rpl_reconnect.inc

--echo
--echo # 2. Wait for GR to come ONLINE
--let $group_replication_member_state= ONLINE
--source include/gr_wait_for_member_state.inc


--echo
--echo # 3. Create and start new channel ch3_1: server1(slave), server3(master)
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--replace_result $SERVER_MYPORT_3 SERVER_3_PORT
--eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='localhost', SOURCE_USER='root', SOURCE_PORT=$SERVER_MYPORT_3 for channel 'ch3_1'

--let $rpl_channel_name='ch3_1'
--source include/start_slave.inc
--let $rpl_channel_name=

--echo
--echo # 4. Verify channel ch3_1 IO and SQL THREADS are ON
--let $assert_text= Verify channel ch3_1 IO_THREAD is ON
--let $assert_cond= "[SELECT SERVICE_STATE FROM performance_schema.replication_connection_status WHERE channel_name = \'ch3_1\', SERVICE_STATE, 1]" = "ON"
--source include/assert.inc

--let $assert_text= Verify channel ch3_1 SQL_THREAD is ON
--let $assert_cond= "[SELECT SERVICE_STATE FROM performance_schema.replication_applier_status WHERE channel_name = \'ch3_1\', SERVICE_STATE, 1]" = "ON"
--source include/assert.inc


--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--echo
--echo # 5. Restart server2(secondary) with group replication start on boot
--let $_group_replication_local_address= `SELECT @@GLOBAL.group_replication_local_address`
--let $_group_replication_group_seeds= `SELECT @@GLOBAL.group_replication_group_seeds`
--let $restart_parameters=restart:--group-replication-start-on-boot=1 --group-replication-group-name=$group_replication_group_name --group_replication_local_address=$_group_replication_local_address --group_replication_group_seeds=$_group_replication_group_seeds --group_replication_single_primary_mode=1 --group_replication_enforce_update_everywhere_checks=0
--replace_result $group_replication_group_name GROUP_REPLICATION_GROUP_NAME $_group_replication_local_address GROUP_REPLICATION_LOCAL_ADDRESS $_group_replication_group_seeds GROUP_REPLICATION_GROUP_SEEDS
--source include/restart_mysqld.inc

--let $rpl_server_number= 2
--source include/rpl_reconnect.inc

--echo
--echo # 6. Wait for GR to come ONLINE
--let $group_replication_member_state= ONLINE
--source include/gr_wait_for_member_state.inc


--echo
--echo # 7. Create new channel ch3_2: server2(slave), server3(master)
--replace_result $SERVER_MYPORT_3 SERVER_3_PORT
--eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='localhost', SOURCE_USER='root', SOURCE_PORT=$SERVER_MYPORT_3 for channel 'ch3_2'


# variables for wait_for_slave_io_error.inc and wait_for_slave_sql_error.inc
--let $rpl_channel_name='ch3_2'

--let $slave_io_errno= convert_error(ER_SLAVE_FATAL_ERROR)
--let $show_slave_io_error= 0
--let $slave_io_error_replace= / at [0-9]*/ at XXX/

--let $slave_sql_errno= convert_error(ER_SLAVE_FATAL_ERROR)
--let $show_slave_sql_error= 0
--let $slave_sql_error_replace= / at [0-9]*/ at XXX/

--echo
--echo # 8. start slave and verify for error ER_SLAVE_FATAL_ERROR
START SLAVE FOR CHANNEL 'ch3_2';
--source include/wait_for_slave_io_error.inc
--source include/wait_for_slave_sql_error.inc

--echo
--echo # 9. start slave io and verify for error ER_SLAVE_FATAL_ERROR
START SLAVE IO_THREAD FOR CHANNEL 'ch3_2';
--source include/wait_for_slave_io_error.inc

--echo
--echo # 10. start slave sql and verify for error ER_SLAVE_FATAL_ERROR
START SLAVE SQL_THREAD FOR CHANNEL 'ch3_2';
--source include/wait_for_slave_sql_error.inc

--let $rpl_channel_name=

--echo
--echo # 11. Verify occurrence of error message
--replace_regex /[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]T[0-9][0-9]:[0-9][0-9]:[0-9][0-9]\.[0-9][0-9][0-9][0-9][0-9][0-9][-+Z][0-9:]* *[0-9]* *\[/DATE_TIME [/

--let $grep_file= $MYSQLTEST_VARDIR/tmp/gr_single_primary_async_gr_start_on_boot.err
--let $grep_pattern= Can't start slave IO THREAD of channel 'ch3_2' when group replication is running with single-primary mode on a secondary member
--let $grep_output= print_count
--source include/grep_pattern.inc

--let $grep_file= $MYSQLTEST_VARDIR/tmp/gr_single_primary_async_gr_start_on_boot.err
--let $grep_pattern= Can't start slave SQL THREAD of channel 'ch3_2' when group replication is running with single-primary mode on a secondary member
--let $grep_output= print_count
--source include/grep_pattern.inc

--echo
--echo # 12. Verify channel ch3_2 IO & SQL THREAD is OFF
--let $assert_text= Verify channel ch3_2 IO_THREAD is OFF
--let $assert_cond= "[SELECT SERVICE_STATE FROM performance_schema.replication_connection_status WHERE channel_name = \'ch3_2\', SERVICE_STATE, 1]" = "OFF"
--source include/assert.inc

--let $assert_text= Verify channel ch3_2 SQL_THREAD is OFF
--let $assert_cond= "[SELECT SERVICE_STATE FROM performance_schema.replication_applier_status WHERE channel_name = \'ch3_2\', SERVICE_STATE, 1]" = "OFF"
--source include/assert.inc


--echo
--echo # 13. Stop group replication on server2
--source include/stop_group_replication.inc

--let $rpl_channel_name='ch3_2'
--source include/start_slave.inc
--let $rpl_channel_name=

--echo
--echo # 14. Restart server2(secondary) with group replication start on boot
--let $_group_replication_local_address= `SELECT @@GLOBAL.group_replication_local_address`
--let $_group_replication_group_seeds= `SELECT @@GLOBAL.group_replication_group_seeds`
--let $restart_parameters=restart:--group-replication-start-on-boot=1 --group-replication-group-name=$group_replication_group_name --group_replication_local_address=$_group_replication_local_address --group_replication_group_seeds=$_group_replication_group_seeds --group_replication_single_primary_mode=1 --group_replication_enforce_update_everywhere_checks=0 --skip-replica-start=0
--replace_result $group_replication_group_name GROUP_REPLICATION_GROUP_NAME $_group_replication_local_address GROUP_REPLICATION_LOCAL_ADDRESS $_group_replication_group_seeds GROUP_REPLICATION_GROUP_SEEDS
--source include/restart_mysqld.inc

--let $rpl_server_number= 2
--source include/rpl_reconnect.inc

--echo
--echo # 15. Wait for GR to be in ONLINE status
--let $group_replication_member_state= ONLINE
--source include/gr_wait_for_member_state.inc

--echo
--echo # 16. Wait for channel ch3_2 to error out and verify IO and SQL THREADS are OFF

--let $rpl_channel_name= 'ch3_2'
--let $slave_sql_errno= convert_error(ER_SLAVE_FATAL_ERROR)
--source include/wait_for_slave_sql_error.inc
--let rpl_channel_name=


--let $assert_text= Verify channel ch3_2 IO_THREAD is OFF
--let $assert_cond= "[SELECT SERVICE_STATE FROM performance_schema.replication_connection_status WHERE channel_name = \'ch3_2\', SERVICE_STATE, 1]" = "OFF"
--source include/assert.inc

--let $assert_text= Verify channel ch3_2 SQL_THREAD is OFF
--let $assert_cond= "[SELECT SERVICE_STATE FROM performance_schema.replication_applier_status WHERE channel_name = \'ch3_2\', SERVICE_STATE, 1]" = "OFF"
--source include/assert.inc


--echo
--echo # 17. Verify occurrence of error message
--replace_regex /[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]T[0-9][0-9]:[0-9][0-9]:[0-9][0-9]\.[0-9][0-9][0-9][0-9][0-9][0-9][-+Z][0-9:]* *[0-9]* *\[/DATE_TIME [/

--let $grep_file= $MYSQLTEST_VARDIR/tmp/gr_single_primary_async_gr_start_on_boot.err
--let $grep_pattern= Can't start slave IO THREAD of channel 'ch3_2' when group replication is running with single-primary mode on a secondary member.
--let $grep_output= print_count
--source include/grep_pattern.inc

--let $grep_file= $MYSQLTEST_VARDIR/tmp/gr_single_primary_async_gr_start_on_boot.err
--let $grep_pattern= Can't start slave SQL THREAD of channel 'ch3_2' when group replication is running with single-primary mode on a secondary member.
--let $grep_output= print_count
--source include/grep_pattern.inc


--echo
--echo # 18. Cleanup
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $rpl_channel_name='ch3_1'
--source include/stop_slave.inc
--let $rpl_channel_name=

RESET SLAVE ALL FOR CHANNEL 'ch3_1';

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

RESET SLAVE ALL FOR CHANNEL 'ch3_2';

RESET SLAVE ALL FOR CHANNEL '';

--let $_group_replication_local_address= `SELECT @@GLOBAL.group_replication_local_address`
--let $_group_replication_group_seeds= `SELECT @@GLOBAL.group_replication_group_seeds`
--let $restart_parameters=restart:--group-replication-start-on-boot=OFF --group-replication-group-name=$group_replication_group_name --group_replication_local_address=$_group_replication_local_address --group_replication_group_seeds=$_group_replication_group_seeds
--replace_result $group_replication_group_name GROUP_REPLICATION_GROUP_NAME $_group_replication_local_address GROUP_REPLICATION_LOCAL_ADDRESS $_group_replication_group_seeds GROUP_REPLICATION_GROUP_SEEDS
--source include/restart_mysqld.inc

--let $rpl_server_number= 2
--source include/rpl_reconnect.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $_group_replication_local_address= `SELECT @@GLOBAL.group_replication_local_address`
--let $_group_replication_group_seeds= `SELECT @@GLOBAL.group_replication_group_seeds`
--let $restart_parameters=restart:--group-replication-start-on-boot=OFF --group-replication-group-name=$group_replication_group_name --group_replication_local_address=$_group_replication_local_address --group_replication_group_seeds=$_group_replication_group_seeds
--replace_result $group_replication_group_name GROUP_REPLICATION_GROUP_NAME $_group_replication_local_address GROUP_REPLICATION_LOCAL_ADDRESS $_group_replication_group_seeds GROUP_REPLICATION_GROUP_SEEDS
--source include/restart_mysqld.inc

--let $rpl_server_number= 1
--source include/rpl_reconnect.inc

--source include/group_replication_end.inc
