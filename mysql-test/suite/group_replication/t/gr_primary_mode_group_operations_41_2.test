##############################################################################
#
# All actions shall allow the DBA to check its progress.
#
# Also tested here:
# Primary elections or change to multi-primary will be delayed
# until all transactions forbidden by enforce_update_everywhere_checks
# terminate.
#
# Test:
#   0. 2 servers. Test starts in Single primary mode with server1 as the primary
#
#   1. Start 2 transactions on server 1
#      Change to multi primary mode
#      On the primary the stage reports waiting for pending transactions to finish
#      Commit a transaction and see there is reported progress
#      On the secondaries the stage reports waiting for a step completion
#   2. Lock table t1 on a secondary (server2)
#      Commit the last transaction on server1
#      On the locked server the stage is: applying buffered transactions
#   3. Block the stop process of the action using a debug point
#      Unlock the table on server 2
#      Check it is stuck in the wait for other member to finish stage
#   4. Unblock the debug point
#      Check the action terminates and no stages appear
#   5. Cleanup
#
##############################################################################

--source include/big_test.inc
--source include/have_debug_sync.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_group_replication_single_primary_mode=1
--source include/group_replication.inc

--echo
--echo # 0. Test starts in Single primary mode with server1 as the primary

--let $server1_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--source include/start_and_bootstrap_group_replication.inc

--source include/gr_assert_primary_member.inc

CREATE TABLE t1(a int primary key);

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/start_group_replication.inc

--echo
--echo # 1. Start 2 transactions on server 1
--echo # Change to multi primary mode
--echo # On the primary the stage reports waiting for pending transactions to finish
--echo # Commit a transaction and see there is reported progress
--echo # On the secondaries the stage reports waiting for a step completion

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

BEGIN;
INSERT INTO t1 VALUES (1);

--let $rpl_connection_name= server_1_1
--source include/rpl_connection.inc

BEGIN;
INSERT INTO t1 VALUES (2);

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--send SELECT group_replication_switch_to_multi_primary_mode()

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

# Sleep so the select query is not included in the waiting numbers
--sleep 2

--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%" and work_estimated=2
--source include/wait_condition.inc

--let $stage_name= `SELECT event_name FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%";`
--let $assert_text= The stage should be "Multi-primary Switch: waiting for pending transactions to finish"
--let $assert_cond= "$stage_name" = "stage/group_rpl/Multi-primary Switch: waiting for pending transactions to finish"
--source include/assert.inc

--let $work_estimated= `SELECT work_estimated FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%";`
--let $assert_text= The estimated work is 2
--let $assert_cond= "$work_estimated" = "2"
--source include/assert.inc

--let $work_completed= `SELECT work_completed FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%";`
--let $assert_text= The completed work is 0
--let $assert_cond= "$work_completed" = "0"
--source include/assert.inc

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%"
--source include/wait_condition.inc

--let $stage_name= `SELECT event_name FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%";`
--let $assert_text= The stage should be "Multi-primary Switch: waiting on another member step completion"
--let $assert_cond= "$stage_name" = "stage/group_rpl/Multi-primary Switch: waiting on another member step completion"
--source include/assert.inc

--let $work_estimated= `SELECT work_estimated FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%";`
--let $assert_text= The estimated work is 1
--let $assert_cond= "$work_estimated" = "1"
--source include/assert.inc

--let $work_completed= `SELECT work_completed FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%";`
--let $assert_text= The completed work is 0
--let $assert_cond= "$work_completed" = "0"
--source include/assert.inc

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

COMMIT;

--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%" and work_completed=1
--source include/wait_condition.inc

--let $stage_name= `SELECT event_name FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%";`
--let $assert_text= The stage should be "Multi-primary Switch: waiting for pending transactions to finish"
--let $assert_cond= "$stage_name" = "stage/group_rpl/Multi-primary Switch: waiting for pending transactions to finish"
--source include/assert.inc

--let $work_estimated= `SELECT work_estimated FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%";`
--let $assert_text= The estimated work is 2
--let $assert_cond= "$work_estimated" = "2"
--source include/assert.inc

--let $work_completed= `SELECT work_completed FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%";`
--let $assert_text= The completed work is 1
--let $assert_cond= "$work_completed" = "1"
--source include/assert.inc

--echo
--echo # 2. Lock table t1 on a secondary (server2)
--echo # Commit the last transaction on server1
--echo # On the locked server the stage is: applying buffered transactions

--let $rpl_connection_name= server_2_1
--source include/rpl_connection.inc

SET @@GLOBAL.read_only= 0;
LOCK TABLE t1 READ;

--let $rpl_connection_name= server_1_1
--source include/rpl_connection.inc

COMMIT;

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.events_stages_current WHERE event_name LIKE "%Multi-primary Switch: applying buffered %"
--source include/wait_condition.inc

--let $stage_name= `SELECT event_name FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%";`
--let $assert_text= The stage should be "Multi-primary Switch: applying buffered transactions"
--let $assert_cond= "$stage_name" = "stage/group_rpl/Multi-primary Switch: applying buffered transactions"
--source include/assert.inc

--let $work_estimated= `SELECT work_estimated FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%";`
--let $assert_text= The estimated work is 1
--let $assert_cond= "$work_estimated" = "1"
--source include/assert.inc

--let $work_completed= `SELECT work_completed FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%";`
--let $assert_text= The completed work is 0
--let $assert_cond= "$work_completed" = "0"
--source include/assert.inc


--echo
--echo # 3. Block the stop process of the action using a debug point
--echo # Unlock the table on server 2
--echo # Check it is stuck in the wait for other member to finish stage

SET @@GLOBAL.DEBUG= '+d,group_replication_block_group_action_stop';

--let $rpl_connection_name= server_2_1
--source include/rpl_connection.inc

UNLOCK TABLES;

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.events_stages_current WHERE event_name LIKE "%Multi-primary Switch: waiting for%" and work_completed=1
--source include/wait_condition.inc

--let $stage_name= `SELECT event_name FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%";`
--let $assert_text= The stage should be "Multi-primary Switch: waiting for operation to complete on all members"
--let $assert_cond= "$stage_name" = "stage/group_rpl/Multi-primary Switch: waiting for operation to complete on all members"
--source include/assert.inc

--let $work_estimated= `SELECT work_estimated FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%";`
--let $assert_text= The estimated work is 2
--let $assert_cond= "$work_estimated" = "2"
--source include/assert.inc

--let $work_completed= `SELECT work_completed FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%";`
--let $assert_text= The completed work is 1
--let $assert_cond= "$work_completed" = "1"
--source include/assert.inc

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.events_stages_current WHERE event_name LIKE "%Multi-primary Switch: waiting for%" and work_completed=1
--source include/wait_condition.inc

--let $stage_name= `SELECT event_name FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%";`
--let $assert_text= The stage should be "Multi-primary Switch: waiting for operation to complete on all members"
--let $assert_cond= "$stage_name" = "stage/group_rpl/Multi-primary Switch: waiting for operation to complete on all members"
--source include/assert.inc

--let $work_estimated= `SELECT work_estimated FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%";`
--let $assert_text= The estimated work is 2
--let $assert_cond= "$work_estimated" = "2"
--source include/assert.inc

--let $work_completed= `SELECT work_completed FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%";`
--let $assert_text= The completed work is 1
--let $assert_cond= "$work_completed" = "1"
--source include/assert.inc

--echo
--echo # 4. Unblock the debug point
--echo # Check the action terminates and no stages appear

SET DEBUG_SYNC= "now SIGNAL signal.action_stop_continue";
SET @@GLOBAL.DEBUG= '-d,group_replication_block_group_action_stop';

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--reap

#Stages sometimes linger for a brief time after the action terminated
--let $wait_condition=SELECT COUNT(*)=0 FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%"
--source include/wait_condition.inc

--let $stages_present= `SELECT COUNT(*) FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%";`
--let $assert_text= There is no stage present
--let $assert_cond= "$stages_present" = "0"
--source include/assert.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $stages_present= `SELECT COUNT(*) FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%";`
--let $assert_text= There is no stage present
--let $assert_cond= "$stages_present" = "0"
--source include/assert.inc

--echo
--echo # 5. Cleanup

DROP TABLE t1;

--let $rpl_group_replication_single_primary_mode=0
--let $rpl_group_replication_reset_persistent_vars=1
--source include/group_replication_end.inc
