###############################################################################
#
# When switching to a primary server, P, if P leaves or fails under a majority,
# when the primary election began but is not yet over, the configuration change
# will abort and the old primary will be elected if available.
# If not another member will be elected.
#
# Test:
#   0. This test needs three servers
#   1. Start single primary group and create table
#   2. Disable read only to action be stuck on setting read only
#   3. Go to a member that will be a secondary and lock a table
#   4. Insert a row on the old primary
#   5. Execute action to change primary to server2
#   6. Check that the other members are waiting for members to be in
#      super_read_only and executing primary election
#   7. Kill the new primary server2
#   8. Wait group detect exit of server2
#   9. Unlock table on server2
#  10. Reap insertion of data on server1
#  11. Check that the action returns failure
#  12. Confirm server2 is the new primary because it was the old primary
#  13. Clean up
#
###############################################################################

--source include/have_group_replication_plugin.inc
--source include/not_valgrind.inc
--let $rpl_server_count= 3
--let $rpl_skip_group_replication_start= 1
--let $rpl_group_replication_single_primary_mode=1
--source include/group_replication.inc

--echo
--echo # 1. Start single primary group and create table

--source include/start_and_bootstrap_group_replication.inc

--let $server1_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

CREATE TABLE test.t1 (a INT PRIMARY KEY);

--source include/rpl_sync.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/start_group_replication.inc

--let $server2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

set session sql_log_bin=0;
call mtr.add_suppression("The function 'group_replication_set_as_primary' failed. The appointed primary for election left the group, this operation will be aborted*");
set session sql_log_bin=1;

--source include/start_group_replication.inc

--echo
--echo # 2. Disable read only to action be stuck on setting read only

SET GLOBAL read_only= 0;

--echo
--echo # 3. Go to a member that will be a secondary and lock a table

--let $rpl_connection_name= server_3
--source include/rpl_connection.inc

LOCK TABLE t1 READ;

--echo
--echo # 4. Insert a row on the old primary

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--send INSERT INTO t1 VALUES (1)

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $wait_condition=SELECT COUNT(*)=1 FROM test.t1
--source include/wait_condition.inc

--echo
--echo # 5. Execute action to change primary to server2

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--replace_result $server2_uuid MEMBER2_UUID
--send_eval SELECT group_replication_set_as_primary("$server2_uuid")

--echo
--echo # 6. Check that the other members are waiting for members to be in
--echo #    super_read_only and executing primary election

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.events_stages_current WHERE event_name LIKE "%Primary Election: waiting for members to enable super_read_only%"
--source include/wait_condition.inc

--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.events_stages_current WHERE event_name LIKE "stage/group_rpl/Primary Switch: executing Primary election"
--source include/wait_condition.inc

--let $stage_name= `SELECT event_name FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl/Primary Election%";`
--let $assert_text= stage/group_rpl/Primary Election: waiting for members to enable super_read_only
--let $assert_cond= "$stage_name" = "stage/group_rpl/Primary Election: waiting for members to enable super_read_only"
--source include/assert.inc

--echo
--echo # 7. Kill the new primary server2

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $_group_replication_local_address= `SELECT @@GLOBAL.group_replication_local_address`
--let $_group_replication_group_seeds= `SELECT @@GLOBAL.group_replication_group_seeds`

--replace_result $group_replication_group_name GROUP_REPLICATION_GROUP_NAME $_group_replication_local_address GROUP_REPLICATION_LOCAL_ADDRESS $_group_replication_group_seeds GROUP_REPLICATION_GROUP_SEEDS
--let $restart_parameters=restart:--group-replication-start-on-boot=0 --group-replication-group-name=$group_replication_group_name --group_replication_local_address=$_group_replication_local_address --group_replication_group_seeds=$_group_replication_group_seeds  --group_replication_single_primary_mode=TRUE --group_replication_enforce_update_everywhere_checks=FALSE
--source include/kill_and_restart_mysqld.inc

--let $rpl_server_number= 2
--source include/rpl_reconnect.inc

--echo
--echo # 8. Wait group detect exit of server2

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

--let $group_replication_number_of_members= 2
--source include/gr_wait_for_number_of_members.inc

--echo
--echo # 9. Unlock table on server2

--let $rpl_connection_name= server_3
--source include/rpl_connection.inc

UNLOCK TABLES;

--echo
--echo # 10. Reap insertion of data on server1

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--reap

--echo
--echo # 11. Check that the action returns failure

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--error ER_GRP_RPL_UDF_ERROR
--reap

--echo
--echo # 12. Confirm server1 is the new primary because it was the old primary

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $group_replication_expected_uuid=$server1_uuid
--source include/gr_wait_primary_member_uuid.inc

--echo
--echo # 13. Clean up

DROP TABLE t1;

set session sql_log_bin=0;
call mtr.add_suppression("Error while executing a group configuration operation: The appointed primary for election left the group, this operation will be aborted.*");
set session sql_log_bin=1;

--let $rpl_group_replication_single_primary_mode=1
--let $rpl_group_replication_reset_persistent_vars=1
--source include/group_replication_end.inc
