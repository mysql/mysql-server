###############################################################################
#
# This test validates transactions monitor dies if client disconnects post
# executing UDF or when UDF errors out.
# KILL query is blocked so testing of KILL connection cannot be done.
#
# Test:
# 0. This test requires two servers
# 1. Start group in single primary mode.
#    Server1 will be primary and server 2 secondary.
# 2. Add a debug point to block the primary change on validation.
# 3. Start a primary change on server 1 using connection client_disconnect
# 4. Wait for the THD_transaction_monitor thread to start.
# 5. Disconnect the client_disconnect connection.
#    And signal the operation to run.
# 6. Check the monitor thread exited.
# 7. Cleanup
#
###############################################################################

# Client Connection is being disconnected hence the force restart option
--source include/force_restart.inc
--source include/have_debug_sync.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_group_replication_single_primary_mode=1
--source include/group_replication.inc

--echo
--echo # 1. Start group in single primary mode.
--echo #    Server1 will be primary and server 2 secondary.

--source include/start_and_bootstrap_group_replication.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $server2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)
--source include/start_group_replication.inc

--echo
--echo # 2. Add a debug point to block the primary change on validation.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

SET @@GLOBAL.DEBUG= '+d,group_replication_block_primary_action_validation';

--echo
--echo # 3. Start a primary change on server 1 using connection client_disconnect

--connect(client_disconnect, localhost,root,,,$MASTER_MYPORT)

--let $rpl_connection_name= client_disconnect
--source include/rpl_connection.inc

--replace_result $server2_uuid MEMBER2_UUID
--send_eval SELECT group_replication_set_as_primary("$server2_uuid", 60)

--echo
--echo # 4. Wait for the THD_transaction_monitor thread to start.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $wait_condition= SELECT COUNT(*)=1 FROM performance_schema.threads WHERE NAME LIKE "thread/group_rpl/THD_transaction_monitor%"
--source include/wait_condition.inc

--echo
--echo # 5. Disconnect the client_disconnect connection.
--echo #    And signal the operation to run.

--disconnect client_disconnect
SET DEBUG_SYNC = "now SIGNAL signal.primary_action_continue";
SET @@GLOBAL.DEBUG= '-d,group_replication_block_primary_action_validation';

--echo
--echo # 6. Check the monitor thread exited.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $wait_condition= SELECT COUNT(*)=0 FROM performance_schema.threads WHERE NAME LIKE "thread/group_rpl/THD_transaction_monitor%"
--source include/wait_condition.inc

--source include/gr_assert_secondary_member.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--source include/gr_assert_primary_member.inc


--echo
--echo # 7. Cleanup

--source include/group_replication_end.inc
