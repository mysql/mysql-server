################################################################################
# Group Replication: cross-version policies
# This test-case makes sure:
# 1. Only lower or equal version members considering patch level can be donor.
# 2. Option group_replication_allow_local_lower_version_join make all ONLINE
#    members valid donor.
#
# Test:
# 0. The test requires three servers: M1, M2 and M3.
# 1. Bootstrap M2.
# 2. Start GR on M3 with higher patch version.
# 3. Start GR on M1, and block it before recovery.
# 4. Stop M2 the only donor.
#    M3 is ONLINE but due to higher version it's not considered as donor.
#    M1 error out since no lower or equal version donor exist.
# 5. Start M2.
#    allow_local_lower_version turns off donor version check.
# 6. Cleanup.
#
################################################################################

# Bootstrap order changed to M2 for assert file convenience.
# OPT files to re-direct log file.
--source include/big_test.inc
--source include/have_debug_sync.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_server_count= 3
--source include/group_replication.inc

--let $test_case_recovery_retry_count= 3
--let $error_file_master= $MYSQLTEST_VARDIR/tmp/gr_cross_version_lower_version_recovery_donor.1.err

--echo
--echo # 1. Bootstrap M2.
--echo
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/start_and_bootstrap_group_replication.inc
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 values (1);

--echo
--echo # 2. Start GR on M3 with higher patch version.
--echo

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

SET @debug3_save= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG= 'd,group_replication_compatibility_higher_patch_version';
SET SESSION sql_log_bin=0;
call mtr.add_suppression("Member version is read compatible with the group.");
SET SESSION sql_log_bin=1;

--source include/start_group_replication.inc

--echo
--echo # 3. Start GR on M1, and block it before recovery.
--echo

## STATUS - ASSUMING 8.0.17 is original version
# Server - State - Version - Weight - R/W
#  M1    - REC   - 8.0.17  - 50     - R
#  M2    - ON    - 8.0.17  - 50     - W
#  M3    - ON    - 8.0.18  - 50     - R

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SET @debug1_save= @@GLOBAL.DEBUG;
SET @recovery_reconnect_interval_save= @@GLOBAL.group_replication_recovery_reconnect_interval;
SET @recovery_retry_count_interval_save= @@GLOBAL.group_replication_recovery_retry_count;

--eval SET GLOBAL group_replication_recovery_reconnect_interval= 1
--eval SET GLOBAL group_replication_recovery_retry_count= $test_case_recovery_retry_count
SET @@GLOBAL.DEBUG= '+d,recovery_thread_start_wait';
--let $group_replication_start_member_state= RECOVERING
--source include/start_group_replication.inc
SET DEBUG_SYNC= "now wait_for signal.recovery_waiting";

--echo
--echo # 4. Stop M2 the only donor.
--echo #    M3 is ONLINE but due to higher version it's not considered as donor.
--echo #    M1 error out since no lower or equal version donor exist.
--echo

# Server - State - Version - Weight - R/W
# M1     - REC   - 8.0.17  - 50     - R
# M2     - ON    - 8.0.17  - 50     - W
# M3     - ON    - 8.0.18  - 50     - R

# Only server2 is valid donor stop it, so there is no donor.
# server3 is ONLINE but not a valid donor due to higher version.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/stop_group_replication.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SET DEBUG_SYNC= "now SIGNAL signal.recovery_continue";

--let $group_replication_member_state= ERROR
--source include/gr_wait_for_member_state.inc

--let $assert_file= $error_file_master
--let $assert_count = $test_case_recovery_retry_count
--let $assert_select = No valid donors exist in the group, retrying
--let $assert_text = No valid donor exist in the group.
--source include/assert_grep.inc

# Reset ERROR state.
--source include/stop_group_replication.inc

--echo
--echo # 5. Start M2.
--echo #    allow_local_lower_version turns off donor version check.
--echo

# Server - State - Version - Weight - R/W
# M1     - OFF   - 8.0.17  - 50     - R
# M2     - OFF   - 8.0.17  - 50     - R
# M3     - ON    - 8.0.18  - 50     - W

# If allow_local_lower_version_join is set,
# lower_version donor check is turned OFF.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
SET @allow_local_lower_version_join_save= @@GLOBAL.group_replication_allow_local_lower_version_join;
--eval SET GLOBAL group_replication_allow_local_lower_version_join= 1

# Join will be successful due to allow_local_lower_version.
--source include/start_group_replication.inc

--let $assert_text= The super_read_only mode should be 0 on server2.
--let $assert_cond= "[SELECT @@GLOBAL.super_read_only]" = 0;
--source include/assert.inc

# In Multi-primary mode, if force lower version joins the group
# Writable members continue to be writable.

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--let $assert_text= The super_read_only mode should be 0 on server3.
--let $assert_cond= "[SELECT @@GLOBAL.super_read_only]" = 0;
--source include/assert.inc


--echo
--echo # 6. Cleanup.
--echo

# Server - State - Version - Weight - R/W
# M1     - OFF   - 8.0.17  - 50     - R
# M2     - ON    - 8.0.17  - 50     - W
# M3     - ON    - 8.0.18  - 50     - W

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
DROP TABLE t1;
--source include/rpl_sync.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
SET @@GLOBAL.DEBUG= @debug3_save;
--source include/stop_group_replication.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SET @@GLOBAL.DEBUG= @debug1_save;
SET @@GLOBAL.group_replication_recovery_reconnect_interval= @recovery_reconnect_interval_save;
SET @@GLOBAL.group_replication_recovery_retry_count= @recovery_retry_count_interval_save;
# Clean error state and restart M1.
# M1 never joined group, join and leave group to receive all transactions
# for smooth gr_end. Not necessary.
--source include/start_group_replication.inc
SET SESSION sql_log_bin= 0;
call mtr.add_suppression("Maximum number of retries when trying to connect to a donor reached. Aborting group replication incremental recovery.");
call mtr.add_suppression("Fatal error during the incremental recovery process of Group Replication. The server will leave the group.");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
SET SESSION sql_log_bin= 1;

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
SET @@GLOBAL.group_replication_allow_local_lower_version_join= @allow_local_lower_version_join_save;

--source include/group_replication_end.inc
