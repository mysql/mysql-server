###############################################################################
# This test verifies following for 'mysql_thread_queued_task' event name:
# - Verify that entries corresponding to the 'mysql_thread_queued_task'
#   performance schema instrumented memory are in the memory table only during
#   the execution of the group replication plugin.
# - Verify that the sum of bytes allocated is greater than zero for the
#   mysql thread task queued.
#
# Test:
# 0. The test requires one server: M1
# 1. Start Group Replication on server1 and check the memory used
#    by 'memory/group_rpl/mysql_thread_queued_task'.
# 2. Verify that the entries corresponding to the
#    instrumented memory are in the setup instruments
#    table and the memory summary tables.
# 3. Verify that the entries corresponding to the instrumented
#    mysql_thread_queued_task remain in the tables after stopping GR.
# 4. Assert that the number of bytes allocated for
#    mysql_thread_queued_task event must be 0.
# 5. Clean up
###############################################################################

--source include/have_debug_sync.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_group_replication_single_primary_mode=1
--source include/group_replication.inc

--echo
--echo ############################################################
--echo # 1. Start Group Replication on server1 and check the memory used
--echo #    by 'memory/group_rpl/mysql_thread_queued_task'.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SET @@GLOBAL.DEBUG= '+d,group_replication_mysql_thread_dispatcher_before_pop';
SET GLOBAL group_replication_bootstrap_group= 1;
--disable_query_log
--eval SET GLOBAL group_replication_group_name= "$group_replication_group_name"
--enable_query_log

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
--send START GROUP_REPLICATION

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SET DEBUG_SYNC= "now WAIT_FOR signal.group_replication_mysql_thread_dispatcher_before_pop_reached";

--let $assert_text= 'The sum of bytes allocated must be greater than zero'
--let $assert_cond= CURRENT_NUMBER_OF_BYTES_USED > 0 FROM performance_schema.memory_summary_global_by_event_name WHERE EVENT_NAME LIKE "memory/group_rpl/mysql_thread_queued_task"
--source include/assert.inc

SET @@GLOBAL.DEBUG= '-d,group_replication_mysql_thread_dispatcher_before_pop';
SET DEBUG_SYNC= "now SIGNAL signal.group_replication_mysql_thread_dispatcher_before_pop_continue";

--let $group_replication_member_state= ONLINE
--source include/gr_wait_for_member_state.inc
--source include/gr_clear_bootstrap_group.inc

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
--reap


--echo
--echo ############################################################
--echo # 2. Verify that the entries corresponding to the
--echo #    instrumented memory are in the setup instruments
--echo #    table and the memory summary tables.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SELECT * FROM performance_schema.setup_instruments WHERE NAME LIKE 'memory/group_rpl/mysql_thread_queued_task';
--let $assert_text= 'There should be 1 entry corresponding to the mysql_thread_queued_task in the setup_instruments table after starting GR'
--let $assert_cond= COUNT(*) = 1 FROM performance_schema.setup_instruments WHERE NAME LIKE "memory/group_rpl/mysql_thread_queued_task"
--source include/assert.inc
SELECT EVENT_NAME FROM performance_schema.memory_summary_global_by_event_name WHERE EVENT_NAME LIKE 'memory/group_rpl/mysql_thread_queued_task';
--let $assert_text= 'There should be 1 entry corresponding to the mysql_thread_queued_task in the memory_summary_global_by_event_name table after starting GR'
--let $assert_cond= COUNT(*) = 1 FROM performance_schema.memory_summary_global_by_event_name WHERE EVENT_NAME LIKE "memory/group_rpl/mysql_thread_queued_task"
--source include/assert.inc


--echo
--echo ##############################################################
--echo # 3. Verify that the entries corresponding to the instrumented
--echo #    mysql_thread_queued_task remain in the tables after stopping GR.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--source include/stop_group_replication.inc

--let $assert_text= 'There should be 1 entry corresponding to the mysql_thread_queued_task in the setup_instruments table after stopping GR'
--let $assert_cond= COUNT(*) = 1 FROM performance_schema.setup_instruments WHERE NAME LIKE "memory/group_rpl/mysql_thread_queued_task"
--source include/assert.inc

--let $assert_text= 'There should be 1 entry corresponding to the mysql_thread_queued_task in the memory_summary_global_by_event_name table after stopping GR'
--let $assert_cond= COUNT(*) = 1 FROM performance_schema.memory_summary_global_by_event_name WHERE EVENT_NAME LIKE "memory/group_rpl/mysql_thread_queued_task"
--source include/assert.inc


--echo
--echo #################################################################
--echo # 4. Assert that the number of bytes allocated for
--echo #    mysql_thread_queued_task event must be 0.
--let $assert_text= 'The sum of bytes allocated must be zero after stopping GR'
--let $assert_cond= CURRENT_NUMBER_OF_BYTES_USED = 0 FROM performance_schema.memory_summary_global_by_event_name WHERE EVENT_NAME LIKE "memory/group_rpl/mysql_thread_queued_task"
--source include/assert.inc

--echo
--echo #################################################################
--echo # 5. Clean up
--source include/group_replication_end.inc
