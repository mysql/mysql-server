###############################################################################
#
# group_replication_exit_state_action sysvar specifies which action is taken by
# a server once it has involuntarily left the group. Currently there are only
# two actions: either the server continues running but with super_read_only
# enabled (READ_ONLY) or it aborts (ABORT_SERVER).
#
# This test shall verify that the correct exit state action is executed when
# an error occurs upon joining the group (in this case, when the joining
# member's transaction set is not a subset of the group's transaction set).
#
# Test:
# 0) Setup group of 2 members (M1 and M2).
# 1) Run a few transactions on M2.
# 2) Restart M2 with start_on_boot enabled.
# 3) M2 super_read_only mode shall be OFF and in OFFLINE state
#    (since it failed to join the group).
# 4) Restart M2 with start_on_boot enabled and exit_state_action set to
#    ABORT_SERVER.
# 5) M2 super_read_only mode shall be OFF and in OFFLINE state
#    (since it failed to join the group).
# 6) Restart M2 again without group_replication_start_on_boot enabled. The
#    server should start normally and be able to join the group.
# 7) Cleanup.
#
################################################################################
--source include/have_debug_sync.inc
--source include/big_test.inc
--source include/have_group_replication_plugin.inc

--echo
--echo #########################################################################
--echo # 0) Setup group of 2 members (M1 and M2).
--echo #########################################################################
--echo
--let $rpl_skip_group_replication_start = 1
--source include/group_replication.inc

--echo
--echo #########################################################################
--echo # 1) Run a few transactions on M2.
--echo #########################################################################
--echo
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
CREATE TABLE t3(a INT PRIMARY KEY);
INSERT INTO t3 VALUES (2);
--source include/start_and_bootstrap_group_replication.inc
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--let $errand_transaction_uuid= aaaaaaaa-bbbb-aaaa-bbbb-aaaaaaaaaaaa
# Advance GTID_NEXT so that we have a clashing transaction with server 1
--eval SET GTID_NEXT= "$errand_transaction_uuid:1"
CREATE TABLE t2(a INT PRIMARY KEY);
SET GTID_NEXT= "AUTOMATIC";

--echo
--echo #########################################################################
--echo # 2) Restart M2 with start_on_boot enabled.
--echo #########################################################################
--echo
# Save all the context we'll need during the test
--let $error_file = $MYSQLTEST_VARDIR/tmp/gr_exit_state_action_on_join_transaction_mismatch.2.err
--let $local_address_server2= `SELECT @@GLOBAL.group_replication_local_address`
--let $group_seeds_server2= `SELECT @@GLOBAL.group_replication_group_seeds`
# Restart the server with group_replication_start_on_boot enabled
--let $allow_rpl_inited = 1
--let $restart_parameters=restart:--group_replication_local_address=$local_address_server2 --group_replication_group_seeds=$group_seeds_server2 --group-replication-group-name=$group_replication_group_name --group_replication_start_on_boot=1 --loose-debug="+d,group_replication_wait_before_leave_on_error"
--replace_result $local_address_server2 GROUP_REPLICATION_LOCAL_ADDRESS $group_seeds_server2 GROUP_REPLICATION_GROUP_SEEDS $group_replication_group_name GROUP_REPLICATION_GROUP_NAME
--source include/restart_mysqld.inc
# Reestablish the connection to the server
--let $rpl_server_number= 2
--source include/rpl_reconnect.inc

--echo
--echo #########################################################################
--echo # 3) M2 super_read_only mode shall be OFF and in OFFLINE state
--echo #  (since it failed to join the group).
--echo #########################################################################
--echo
--let $rpl_connection_name= server2
--source include/rpl_connection.inc

# Wait for the debug sync to be reached.
SET DEBUG_SYNC= "now WAIT_FOR signal.wait_leave_process";
# now unblock debug sync point
SET DEBUG_SYNC= "now SIGNAL signal.continue_leave_process";

# Wait for the member to realize that it couldn't join the group
--let $member2_uuid = `SELECT @@GLOBAL.server_uuid`
--let $group_replication_member_state = OFFLINE
--let $group_replication_member_id = $member2_uuid
--source include/gr_wait_for_member_state.inc
# Verify that super_read_only mode is reverted to its original value
--let $wait_condition= SELECT @@GLOBAL.super_read_only = '0'
--source include/wait_condition.inc
# Verify that the expected error occurred
--let $assert_file = $error_file
--let $assert_text = GR reported expected transaction mismatch
--let $assert_select = This member has more executed transactions than those present in the group
--let $assert_count = 1
--source include/assert_grep.inc
# Verify that member 2 didn't join the group
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $group_replication_number_of_members = 1
--source include/gr_wait_for_number_of_members.inc

--echo
--echo #########################################################################
--echo # 4) Restart M2 with start_on_boot enabled and exit_state_action set to
--echo # ABORT_SERVER.
--echo #########################################################################
--echo
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
# Restart the server again with group_replication_start_on_boot enabled and with
# group_replication_exit_state_action set to ABORT_SERVER
--let $allow_rpl_inited=1
--let $restart_parameters=restart:--group_replication_local_address=$local_address_server2 --group_replication_group_seeds=$group_seeds_server2 --group-replication-group-name=$group_replication_group_name --group_replication_start_on_boot=1 --group_replication_exit_state_action=ABORT_SERVER
--replace_result $local_address_server2 GROUP_REPLICATION_LOCAL_ADDRESS $group_seeds_server2 GROUP_REPLICATION_GROUP_SEEDS $group_replication_group_name GROUP_REPLICATION_GROUP_NAME
--source include/restart_mysqld.inc

--echo
--echo #########################################################################
--echo # 5) M2 super_read_only mode shall be OFF and in OFFLINE state
--echo #  (since it failed to join the group).
--echo #########################################################################
--echo
# Wait for server 1 to see that server 2 didn't join
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $group_replication_number_of_members = 1
--source include/gr_wait_for_number_of_members.inc
--let $rpl_server_number= 2
--source include/rpl_reconnect.inc
--let $rpl_connection_name= server2
--source include/rpl_connection.inc

# Verify that super_read_only mode is reverted to its original value
--let $wait_condition= SELECT @@GLOBAL.super_read_only = '0'
--source include/wait_condition.inc

--let $assert_file = $error_file
--let $assert_text = GR reported expected transaction mismatch
--let $assert_select = This member has more executed transactions than those present in the group
--let $assert_count = 2
--source include/assert_grep.inc

--echo
--echo #########################################################################
--echo # 6) Restart M2 again without group_replication_start_on_boot enabled.
--echo # The server should start normally and be able to join the group.
--echo #########################################################################
--echo
# Delete all transations on server 2's binary log, so that we may join the group
# finally
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
RESET MASTER;
# Restart server 2 again, now with group_replication_start_on_boot disabled
--let $allow_rpl_inited=1
--let $restart_parameters=restart:--group_replication_local_address=$local_address_server2 --group_replication_group_seeds=$group_seeds_server2 --group-replication-group-name=$group_replication_group_name
--replace_result $local_address_server2 GROUP_REPLICATION_LOCAL_ADDRESS $group_seeds_server2 GROUP_REPLICATION_GROUP_SEEDS $group_replication_group_name GROUP_REPLICATION_GROUP_NAME
--source include/restart_mysqld.inc
--let $rpl_server_number= 2
--source include/rpl_reconnect.inc
# Start GR on server 2 and verify that the group stabilizes itself
--source include/start_group_replication.inc
--let $group_replication_number_of_members = 2
--source include/gr_wait_for_number_of_members.inc
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $group_replication_number_of_members = 2
--source include/gr_wait_for_number_of_members.inc

--echo
--echo #########################################################################
--echo # 7) Cleanup.
--echo #########################################################################
--echo
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
DROP TABLE t3;
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/stop_group_replication.inc
SET SESSION sql_log_bin = 0;
DROP TABLE t2;
SET SESSION sql_log_bin = 1;
--source include/group_replication_end.inc

