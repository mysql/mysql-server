###############################################################################
#
# group_replication_exit_state_action sysvar specifies which action is taken by
# a server once it has involuntarily left the group.
# This test shall verify that when a join fails after issuing a START
# GROUP_REPLICATION command, the command returns with the appropriate error.
#
# Test:
# 0) Setup group of 2 members (M1 and M2).
# 1) Simulate a higher version on M1.
# 2) Try to join M2 to the group by issuing START GROUP_REPLICATION.
# 3) M2 must be with offline_mode= OFF and in OFFLINE state (since it
#    failed to join the group).
# 4) Remove the higher version from M1 and try to join M2 again. M2
#    should be able to join.
# 5) Cleanup.
#
################################################################################
--source include/have_debug.inc
--source include/have_group_replication_plugin.inc

--echo
--echo #########################################################################
--echo # 0) Setup group of 2 members (M1 and M2).
--echo #########################################################################
--echo
--let $rpl_skip_group_replication_start = 1
--source include/group_replication.inc
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
SET SESSION sql_log_bin = 0;
call mtr.add_suppression("Member version is incompatible with the group.");
SET SESSION sql_log_bin = 1;

--echo
--echo #########################################################################
--echo # 1) Simulate a higher version on M1.
--echo #########################################################################
--echo
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SET @debug_saved= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG= '+d,group_replication_compatibility_higher_major_version';
--source include/start_and_bootstrap_group_replication.inc

--echo
--echo #########################################################################
--echo # 2) Try to join M2 to the group by issuing START GROUP_REPLICATION.
--echo #########################################################################
--echo
--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SET @saved_exit_state_action = @@GLOBAL.group_replication_exit_state_action;
SET @@GLOBAL.group_replication_exit_state_action = OFFLINE_MODE;

# Save the super_read_only mode, so we can assert the server reverted to it when
# it failed to join the group
SET @super_read_only_saved = @@GLOBAL.super_read_only;
--disable_query_log
--eval SET GLOBAL group_replication_group_name= "$group_replication_group_name"
--enable_query_log
# We expect a config error since this server's version is different from the
# group
--error ER_GROUP_REPLICATION_CONFIGURATION
START GROUP_REPLICATION;

--echo
--echo #########################################################################
--echo # 3) M2 must be with offline_mode= OFF and in OFFLINE state (since it
--echo # failed to join the group).
--echo #########################################################################
--echo
# Wait for the member to realize that it couldn't join the group
--let $member2_uuid = `SELECT @@GLOBAL.server_uuid`
--let $group_replication_number_of_members = 1
--source include/gr_wait_for_number_of_members.inc
--let $group_replication_member_state = OFFLINE
--let $group_replication_member_id = $member2_uuid
--source include/gr_wait_for_member_state.inc

# Verify that super_read_only reverted to its original state
--let $assert_text= super_read_only should be preserved
--let $assert_cond= [SELECT @@GLOBAL.super_read_only] = @super_read_only_saved;
--source include/assert.inc

# Verify that offline_mode is disabled
--let $assert_text= offline mode must be disabled
--let $assert_cond= [SELECT @@GLOBAL.offline_mode] = 0
--source include/assert.inc

--let $error_file = $MYSQLTEST_VARDIR/tmp/gr_exit_state_action_on_start_gr_cmd_offline_mode.2.err
--let $assert_file = $error_file
--let $assert_text = GR reported expected incompatibility on member version
--let $assert_select = Member version is incompatible with the group
--let $assert_count = 1
--source include/assert_grep.inc

# Verify that member 2 didn't join the group
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $group_replication_number_of_members = 1
--source include/gr_wait_for_number_of_members.inc

--echo
--echo #########################################################################
--echo # 4) Remove the higher version from M1 and try to join M2 again. M2
--echo # should be able to join.
--echo #########################################################################
--echo
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
# Restore the debug sysvar to its original state on server 1, so that we may
# finally join server 2
SET @@GLOBAL.DEBUG = @debug_saved;
# We must restart the GR plugin because updates on the debug sysvar are not
# automatically reflected on the plugin if it is already running
--source include/stop_group_replication.inc
--source include/start_and_bootstrap_group_replication.inc

# Start GR on server 2 and verify that the group stabilizes itself
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/start_group_replication.inc

--echo
--echo #########################################################################
--echo # 5) Cleanup.
--echo #########################################################################
--echo
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
SET @@GLOBAL.group_replication_exit_state_action = @saved_exit_state_action;

--source include/group_replication_end.inc
