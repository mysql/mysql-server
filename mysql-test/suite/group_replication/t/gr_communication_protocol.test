###############################################################################
# WL#11610
# Perform some simple tests about getting/setting communication_protocol.
#
# This test uses 2 servers.
#
# Test:
# 1. Start 2 servers and add them into group replication group.
# 2. Decrease communication_protocol.
# 3. Increase communication_protocol.
# 4. Confirm invalid calls to group_replication_get_communication_protocol.
# 5. Confirm invalid calls to group_replication_set_communication_protocol.
# 6. Check that it is not possible to modify/query communication_protocol
#    value when a member is in RECOVERING state.
# 8. Check that it is not possible to call communication_protocol UDFs when a
#    member is in UNREACHABLE state.
# 9. Stop GR and try to call UDFs outside of a group.
################################################################################
# This test does crashes servers, thence we skip it on valgrind.
--source include/not_valgrind.inc
--source include/big_test.inc
--source include/force_restart.inc
--source include/have_group_replication_plugin.inc
--let $rpl_server_count= 2
--source include/group_replication.inc

# Create table with strings to test UDF further down.
CREATE TABLE t1 (i INT, s VARCHAR(16), PRIMARY KEY (i));
INSERT INTO t1 VALUES (1, NULL);
INSERT INTO t1 VALUES (2, "");
INSERT INTO t1 VALUES (3, "5");
INSERT INTO t1 VALUES (4, "5.7");
INSERT INTO t1 VALUES (5, "5.7.14a");
INSERT INTO t1 VALUES (6, "5.7.13");
INSERT INTO t1 VALUES (7, "99.99.99");

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--disable_query_log
SET SESSION sql_log_bin= 0;
call mtr.add_suppression("Could not execute Write_rows event on table test.t2; Duplicate entry '11'*");
call mtr.add_suppression("The applier thread execution was aborted. Unable to process more transactions, this member will now leave the group.");
call mtr.add_suppression("Fatal error during execution on the Applier process of Group Replication. The server will now leave the group.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
call mtr.add_suppression(".*Slave SQL for channel 'group_replication_applier': ... The slave coordinator and worker threads are stopped, possibly leaving data in inconsistent state*");
SET SESSION sql_log_bin= 1;
--enable_query_log

# Will be used to recover server2 later on.
--let $local_address_server2= `SELECT @@GLOBAL.group_replication_local_address`
--let $group_seeds_server2= `SELECT @@GLOBAL.group_replication_group_seeds`

# Will be used to hide the version of the server later on.
--let $mysql_version= `SELECT SUBSTRING_INDEX(VERSION(), '-', 1)`

--echo ###############################################################################
--echo # 2. Decrease communication_protocol.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $gr_new_protocol= 5.7.14

--eval SELECT group_replication_set_communication_protocol("$gr_new_protocol")

--let $gr_protocol= `SELECT group_replication_get_communication_protocol()`
--let $assert_text= communication_protocol is supposed to be $gr_new_protocol
--let $assert_cond= "$gr_protocol" = "$gr_new_protocol"
--source include/assert.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $gr_protocol= `SELECT group_replication_get_communication_protocol()`
--let $assert_text= communication_protocol is supposed to be $gr_new_protocol
--let $assert_cond= "$gr_protocol" = "$gr_new_protocol"
--source include/assert.inc

--echo ###############################################################################
--echo # 3. Increase communication_protocol.
--let $gr_new_protocol= 8.0.16

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--eval SELECT group_replication_set_communication_protocol("$gr_new_protocol")

--let $gr_protocol= `SELECT group_replication_get_communication_protocol()`
--let $assert_text= communication_protocol is supposed to be $gr_new_protocol
--let $assert_cond= "$gr_protocol" = "$gr_new_protocol"
--source include/assert.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $gr_protocol= `SELECT group_replication_get_communication_protocol()`
--let $assert_text= communication_protocol is supposed to be $gr_new_protocol
--let $assert_cond= "$gr_protocol" = "$gr_new_protocol"
--source include/assert.inc

--echo ###############################################################################
--echo # 4. Confirm invalid calls to group_replication_get_communication_protocol
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_get_communication_protocol(1);

--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_get_communication_protocol(1.1);

--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_get_communication_protocol("hehe");

--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_get_communication_protocol(NULL);

--echo ###############################################################################
--echo # 5. Confirm invalid calls to group_replication_set_communication_protocol
--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_set_communication_protocol();

# This one fails on the main UDF function, so the error is reflected as a
# return message.
SELECT group_replication_set_communication_protocol(NULL);

--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_set_communication_protocol(1);

--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_set_communication_protocol(5.7);

--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_set_communication_protocol("");

--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_set_communication_protocol(" ");

--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_set_communication_protocol("5");

--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_set_communication_protocol("5.7");

--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_set_communication_protocol("5.7.14a");

# Out of [5.7.14, this-mysql-version] domain
# We are using 99.99.99 as a placeholder for a version > than this-mysql-version
--replace_result $mysql_version MYSQL_VERSION
--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_set_communication_protocol("5.7.13");

--replace_result $mysql_version MYSQL_VERSION
--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_set_communication_protocol("99.99.99");

# Exercise error handling in the main UDF function.
--replace_result $mysql_version MYSQL_VERSION
SELECT group_replication_set_communication_protocol(s) FROM t1;

# Stop GR on server2
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/stop_group_replication.inc

--echo ###############################################################################
--echo # 6. Check that it is not possible to modify/query communication_protocol value when server is in RECOVERING state.
# Stop slave SQL thread on server1, so that server2 stays in RECOVERING state.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--source include/gr_stop_applier_sql_thread.inc

# Start GR on server2, It should be in RECOVERING state.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--let $group_replication_start_member_state= RECOVERING
--source include/start_group_replication.inc

--let $gr_new_protocol= 5.7.14
# Since server2 is in RECOVERY state, it shouldn't allow to modify communication_protocol value.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--error ER_CANT_INITIALIZE_UDF
--eval SELECT group_replication_set_communication_protocol("$gr_new_protocol")

# Check that it is not possible to query communication_protocol value either.
--error ER_CANT_INITIALIZE_UDF
--eval SELECT group_replication_get_communication_protocol()

--source include/gr_start_applier_sql_thread.inc
# Wait until server2 becomes ONLINE
--echo Wait until server2 becomes ONLINE
--let $wait_condition=SELECT COUNT(*)=2 FROM performance_schema.replication_group_members where MEMBER_STATE="ONLINE"
--source include/wait_condition.inc

--echo ###############################################################################
--echo # 7. Check that it is not possible to call communication_protocol UDFs when a member is in UNREACHABLE state.
# Crash server2
#
# We kill the server, using shutdown_server 0, and then MTR will follow the
# expect file and restart the server. We wait for the server to start.
#
# However, since the server loses its GCS configuration they will not rejoin
# the group.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $member2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--enable_reconnect
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.2.expect
--shutdown_server 0
--source include/wait_until_disconnected.inc

--source include/wait_until_connected_again.inc
--disable_reconnect

# Wait for the member state be unreachable.
--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

--let $group_replication_member_state= UNREACHABLE
--let $group_replication_member_id= $member2_uuid
--source include/gr_wait_for_member_state.inc

--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_get_communication_protocol();

--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_set_communication_protocol("5.7.14");

# We have lost majority, so forcefully remove server2 from the membership.
--let $local_address_server1= `SELECT @@GLOBAL.group_replication_local_address`
--disable_query_log
--eval SET GLOBAL group_replication_force_members= "$local_address_server1"
--enable_query_log

# Add server2 back to the group
--let $rpl_server_number= 2
--source include/rpl_reconnect.inc

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--replace_result $group_seeds_server2 GROUP_SEEDS_SERVER2
--eval SET @@global.group_replication_group_seeds="$group_seeds_server2"
--replace_result $local_address_server2 LOCAL_ADDRESS_SERVER2
--eval SET @@global.group_replication_local_address="$local_address_server2"
--replace_result $group_replication_group_name GROUP_REPLICATION_GROUP_NAME
--eval SET @@global.group_replication_group_name="$group_replication_group_name"

# this already waits for recovery to happen
--source include/start_group_replication.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

# sync just to make sure
--source include/rpl_sync.inc

# validate that there are two servers in the group
--let $group_replication_number_of_members= 2
--source include/gr_wait_for_number_of_members.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

# validate that there are two servers in the group
--let $group_replication_number_of_members= 2
--source include/gr_wait_for_number_of_members.inc

--echo ###############################################################################
--echo # 8. Stop GR and try to call UDFs outside of a group
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

# Cleanup.
DROP TABLE t1;
--source include/rpl_sync.inc

--source include/group_replication_end.inc

--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_get_communication_protocol();

--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_set_communication_protocol("5.7.14");
