###############################################################################
#
# This test verifies when a primary election is ongoing and backlog is being
# applied, transactions being executed will be aborted if wait_timeout is
# reached.
#
# Test:
#   0. This test requires two servers on single primary mode
#   1. Bootstrap group on server 1 and create table t1
#   2. Join server2 to group
#   3. Lock tables to allow create backlog
#   4. Execute transaction on primary server
#   5. Server2 will certify transaction but won't apply due lock tables
#   6. Stop primary server and primary election will occur
#   7. Set wait_timeout to 5 seconds
#   8. Execute a statement that will be put on hold
#   9. Validate statement is on hold
#  10. Sleep for 10 seconds to connection on hold exceed wait timeout
#  11. Reap with timeout error on pending statement
#  12. UNLOCK tables to allow apply backlog
#  13. Cleanup
#
###############################################################################

--source include/have_group_replication_plugin.inc

--let $rpl_skip_group_replication_start= 1
--let $rpl_server_count= 2
--let $rpl_group_replication_single_primary_mode=1
--source include/group_replication.inc

--echo
--echo # 1. Bootstrap group on server 1 and create table t1

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/start_and_bootstrap_group_replication.inc

CREATE TABLE test.t1 (a int primary key);

--echo
--echo # 2. Join server2 to group

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--source include/start_group_replication.inc

--let $member2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--echo
--echo # 3. Lock tables to allow create backlog

LOCK TABLES t1 READ;

--echo
--echo # 4. Execute transaction on primary server

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

INSERT INTO t1 VALUES (1);

--echo
--echo # 5. Server2 will certify transaction but won't apply due lock tables

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $wait_condition= SELECT COUNT(*) = 1 FROM performance_schema.replication_group_member_stats WHERE member_id='$member2_uuid' AND count_transactions_checked = 1 AND count_transactions_remote_in_applier_queue = 1
--source include/wait_condition.inc

--echo
--echo # 6. Stop primary server and primary election will occur

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/stop_group_replication.inc

--echo
--echo # 7. Set wait_timeout to 5 seconds

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SET @@SESSION.wait_timeout = 5;

--echo
--echo # 8. Execute a statement that will be put on hold

SET @@SESSION.group_replication_consistency= BEFORE_ON_PRIMARY_FAILOVER;

--send SELECT * FROM t1

--echo
--echo # 9. Validate statement is on hold

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--let $wait_condition= SELECT COUNT(*)=1 FROM INFORMATION_SCHEMA.PROCESSLIST WHERE STATE='Executing hook on transaction begin.' AND INFO='SELECT * FROM t1'
--source include/wait_condition.inc

--echo
--echo # 10. Sleep for 10 seconds to connection on hold exceed wait timeout

--sleep 10

--echo
--echo # 11. Reap with timeout error on pending statement

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--error ER_GR_HOLD_WAIT_TIMEOUT
--reap

--let $rpl_server_number= 2
--source include/rpl_reconnect.inc

--echo
--echo # 12. UNLOCK tables to allow apply backlog

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

UNLOCK TABLES;

--echo
--echo # 13. Cleanup
--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $group_replication_member_state= ONLINE
--source include/gr_wait_for_member_state.inc

--let $wait_condition= SELECT @@super_read_only = 0
--source include/wait_condition_or_abort.inc

DROP TABLE t1;

--source include/stop_group_replication.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

SET SESSION sql_log_bin= 0;
DROP TABLE t1;
SET SESSION sql_log_bin= 1;

--source include/group_replication_end.inc
