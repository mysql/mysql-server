################################################################################
# Validate group_replication_consistency= 'BEFORE_AND_AFTER' behaviour.
#
# Test:
# 00. The test requires two servers: M1 and M2.
# 01. Create two tables on the group.
# 02. Lock table t1 on server2 to block a future update.
# 03. Execute transaction T1, the transaction will block on
#     server2 due to the table lock.
# 04. Wait until T1 is delivered to server2.
# 05. Execute a write transaction T2 on server2 with
#     group_replication_consistency= 'BEFORE_AND_AFTER' , it
#     will wait for T1 commit and will make new transactions
#     wait for T2.
# 06. Force server1 to block between T2 prepare and commit.
# 07. Unblock T1 on server2.
# 08. Wait until T2 reaches prepare on server1.
# 09. Now that T2 is prepared on server1 but it is not yet
#     committed, new transactions are hold on server1.
# 10. Unblock T2 prepare on server1.
# 11. Validate data.
# 12. Clean up.
################################################################################
--source include/have_debug_sync.inc
--source include/have_group_replication_plugin.inc
--source include/group_replication.inc

--echo
--echo ############################################################
--echo # 01. Create two tables on the group.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY);
CREATE TABLE t2 (c1 INT NOT NULL PRIMARY KEY);
--source include/rpl_sync.inc


--echo
--echo ############################################################
--echo # 02. Lock table t1 on server2 to block a future update.
--let $rpl_connection_name= server_2
--source include/rpl_connection.inc
LOCK table t1 READ;


--echo
--echo ############################################################
--echo # 03. Execute transaction T1, the transaction will block on
--echo #     server2 due to the table lock.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
BEGIN;
INSERT INTO t1 VALUES (1);
INSERT INTO t2 VALUES (1);
COMMIT;


--echo
--echo ############################################################
--echo # 04. Wait until T1 is delivered to server2.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--let $member2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)
--let $wait_condition= SELECT COUNT(*)=1 FROM performance_schema.replication_group_member_stats WHERE member_id='$member2_uuid' AND count_transactions_checked=3 AND count_transactions_remote_in_applier_queue=1
--source include/wait_condition.inc


--echo
--echo ############################################################
--echo # 05. Execute a write transaction T2 on server2 with
--echo #     group_replication_consistency= 'BEFORE_AND_AFTER' , it
--echo #     will wait for T1 commit and will make new transactions
--echo #     wait for T2.
--let $rpl_connection_name= server_2_1
--source include/rpl_connection.inc
SET @@SESSION.group_replication_consistency= 'BEFORE_AND_AFTER';
--send UPDATE t2 SET c1=99 WHERE c1=1

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--let $wait_condition=SELECT COUNT(*)=1 FROM information_schema.processlist WHERE state='Executing hook on transaction begin.' AND info='UPDATE t2 SET c1=99 WHERE c1=1'
--source include/wait_condition.inc


--echo
--echo ############################################################
--echo # 06. Force server1 to block between T2 prepare and commit.
--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
SET @@GLOBAL.DEBUG= '+d,group_replication_wait_on_after_applier_prepare';


--echo
--echo ############################################################
--echo # 07. Unblock T1 on server2.
--let $rpl_connection_name= server_2
--source include/rpl_connection.inc
UNLOCK TABLES;

--let $rpl_connection_name= server_2_1
--source include/rpl_connection.inc
# Get transaction T1 outcome.
--reap
SET @@SESSION.group_replication_consistency= DEFAULT;


--echo
--echo ############################################################
--echo # 08. Wait until T2 reaches prepare on server1.
--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
SET DEBUG_SYNC= "now WAIT_FOR signal.after_applier_prepare_waiting";


--echo
--echo ############################################################
--echo # 09. Now that T2 is prepared on server1 but it is not yet
--echo #     committed, new transactions (T3) are hold on server1.
--let $rpl_connection_name= server_1_1
--source include/rpl_connection.inc
--send SELECT COUNT(*) AS count FROM t2 WHERE c1=99

# server1 is waiting for T2 to commit
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $wait_condition=SELECT COUNT(*)=1 FROM information_schema.processlist WHERE user='root' AND state='Executing hook on transaction begin.' AND info="SELECT COUNT(*) AS count FROM t2 WHERE c1=99"
--source include/wait_condition.inc


--echo
--echo ############################################################
--echo # 10. Unblock T2 prepare on server1.
--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
# Signal debug sync to continue.
SET DEBUG_SYNC= 'now SIGNAL signal.after_applier_prepare_continue';
SET @@GLOBAL.DEBUG= '-d,group_replication_wait_on_after_applier_prepare';

--let $rpl_connection_name= server_1_1
--source include/rpl_connection.inc
# Get transaction T3 outcome.
--reap


--echo
--echo ############################################################
--echo # 11. Validate data.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $assert_text= 'There is 1 value in table t1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE c1=1, count, 1] = 1
--source include/assert.inc

--let $assert_text= 'There is 1 value in table t2'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t2 WHERE c1=99, count, 1] = 1
--source include/assert.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--let $assert_text= 'There is 1 value in table t1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE c1=1, count, 1] = 1
--source include/assert.inc

--let $assert_text= 'There is 1 value in table t2'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t2 WHERE c1=99, count, 1] = 1
--source include/assert.inc

--let $diff_tables=server1:t1, server2:t1
--source include/diff_tables.inc

--let $diff_tables=server1:t2, server2:t2
--source include/diff_tables.inc


--echo
--echo ############################################################
--echo # 12. Clean up.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
DROP TABLE t1;
DROP TABLE t2;

--source include/group_replication_end.inc
