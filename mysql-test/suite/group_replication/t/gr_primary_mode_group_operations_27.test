###############################################################################
#
# When changing mode to single primary with an appointed primary, P,
# if P leaves or fails under a majority, when the primary election began
# but is not yet over, the change will not abort and
# adapt to the new elected primary throwing a warning.
#
# Test:
#   0. This test needs three servers starting in multi primary mode
#   1. Create table for tests on a multi primary group
#   2. Lock table on a server that will be a secondary and set its
#      weight to be chosen as primary on single primary mode
#   3. Insert a row on a group
#   4. Invoke a change to single primary selecting server3 as new primary
#   5. Check that the other members are waiting to enable
#      super_read_only and executing primary election
#   6. Kill the primary selected when action was executed. Configure as
#      single primary
#   7. Wait group detect exit of server3
#   8. Unblock table on member that is blocked
#   9. Check that the action finishes
#   10. Confirm server2 is the new primary due its weight on member
#       election
#   11. Cleanup
#
###############################################################################

--source include/big_test.inc
--source include/have_group_replication_plugin.inc
--source include/not_valgrind.inc
--let $rpl_server_count= 3
--source include/group_replication.inc

--echo
--echo # 1. Create table for tests on a multi primary group

CREATE TABLE test.t1 (a INT PRIMARY KEY);

--source include/rpl_sync.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--let $server3_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--echo
--echo # 2. Lock table on a server that will be a secondary and set its
--echo #    weight to be chosen as primary on single primary mode

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SET @@GLOBAL.group_replication_member_weight= 90;

LOCK TABLE t1 READ;

--echo
--echo # 3. Insert a row on a group

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $server1_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--eval INSERT INTO t1 VALUES (1)

--echo
--echo # 4. Invoke a change to single primary selecting server3 as new primary

--replace_result $server3_uuid MEMBER3_UUID
--send_eval SELECT group_replication_switch_to_single_primary_mode("$server3_uuid")

--echo
--echo # 5. Check that the other members are waiting to enable
--echo #    super_read_only and executing primary election

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/sql/Waiting for global read lock%"
--source include/wait_condition.inc

--let $stage_name= `SELECT event_name FROM performance_schema.events_stages_current WHERE event_name LIKE "%Single-primary Switch%";`
--let $assert_text= The stage should be "Single-primary Switch: executing Primary election"
--let $assert_cond= "$stage_name" = "stage/group_rpl/Single-primary Switch: executing Primary election"
--source include/assert.inc

--let $stage_name= `SELECT event_name FROM performance_schema.events_stages_current WHERE event_name LIKE "%global read lock%";`
--let $assert_text= The stage should be "stage/sql/Waiting for global read lock"
--let $assert_cond= "$stage_name" = "stage/sql/Waiting for global read lock"
--source include/assert.inc

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.events_stages_current WHERE event_name LIKE "%Waiting for members to enable super_read_only%"
--source include/wait_condition.inc

--let $stage_name= `SELECT event_name FROM performance_schema.events_stages_current WHERE event_name LIKE "%Single-primary Switch%";`
--let $assert_text= The stage should be "Single-primary Switch: executing Primary election"
--let $assert_cond= "$stage_name" = "stage/group_rpl/Single-primary Switch: executing Primary election"
--source include/assert.inc

--let $stage_name= `SELECT event_name FROM performance_schema.events_stages_current WHERE event_name LIKE "%super_read_only%";`
--let $assert_text= The stage should be "Primary Election: waiting for members to enable super_read_only"
--let $assert_cond= "$stage_name" = "stage/group_rpl/Primary Election: waiting for members to enable super_read_only"
--source include/assert.inc

--echo
--echo # 6. Kill the primary selected when action was executed. Configure as
--echo #    single primary

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--let $_group_replication_local_address= `SELECT @@GLOBAL.group_replication_local_address`
--let $_group_replication_group_seeds= `SELECT @@GLOBAL.group_replication_group_seeds`

--replace_result $group_replication_group_name GROUP_REPLICATION_GROUP_NAME $_group_replication_local_address GROUP_REPLICATION_LOCAL_ADDRESS $_group_replication_group_seeds GROUP_REPLICATION_GROUP_SEEDS
--let $restart_parameters=restart:--group-replication-start-on-boot=0 --group-replication-group-name=$group_replication_group_name --group_replication_local_address=$_group_replication_local_address --group_replication_group_seeds=$_group_replication_group_seeds  --group_replication_single_primary_mode=TRUE --group_replication_enforce_update_everywhere_checks=FALSE
--source include/kill_and_restart_mysqld.inc

--let $rpl_server_number= 3
--source include/rpl_reconnect.inc

--echo
--echo # 7. Wait group detect exit of server3

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $server2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--let $group_replication_number_of_members= 2
--source include/gr_wait_for_number_of_members.inc

--echo
--echo # 8. Unblock table on member that is blocked

UNLOCK TABLES;

--echo
--echo # 9. Check that the action finishes

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--replace_result $server3_uuid MEMBER3_UUID
--reap

--echo
--echo # 10. Confirm server2 is the new primary due its weight on member
--echo #     election

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--source include/gr_assert_primary_member.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/gr_assert_secondary_member.inc

--echo
--echo # 11. Cleanup

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--source include/start_group_replication.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SET @@GLOBAL.group_replication_member_weight= DEFAULT;
DROP TABLE t1;

--let $rpl_group_replication_single_primary_mode=1
--let $rpl_group_replication_reset_persistent_vars=1
--source include/group_replication_end.inc
