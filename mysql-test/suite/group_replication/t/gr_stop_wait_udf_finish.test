###############################################################################
#
#  STOP GROUP_REPLICATION will signal group coordination process and loop until
#  all UDF terminate.
#
# Test:
#   0. This test requires two servers on multi primary mode
#   1. Activate debug point will block action after verify plugin isn't
#      stopping
#   2. Start action switch to single primary mode
#   3. Wait for action hit the debug point
#   4. STOP Group Replication on server1
#   5. Wait for member state is OFFLINE
#   6. To improve test but without adding more debug code, sleep to allow
#      STOP Group Replication loop until UDF function finishes
#   7. Assert STOP GROUP_REPLICATION thread still runs
#   8. Signal the action to continue
#   9. Reap execution of action and confirm it failed
#  10. Reap with success the execution of STOP GROUP_REPLICATION
#  11. Cleanup
#
###############################################################################

--source include/have_debug_sync.inc
--source include/have_group_replication_plugin.inc
--let $rpl_server_count= 2
--source include/group_replication.inc

--echo
--echo # 1. Activate debug point will block action after verify plugin isn't
--echo #    stopping

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

set session sql_log_bin=0;
call mtr.add_suppression("The function 'group_replication_switch_to_single_primary_mode' failed. The group coordination process is terminating.");
set session sql_log_bin=1;

--let $server1_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

SET @debug_saved = @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG='+d,group_replication_hold_udf_after_plugin_is_stopping';

--echo
--echo # 2. Start action switch to single primary mode

--replace_result $server1_uuid MEMBER1_UUID
--send_eval SELECT group_replication_switch_to_single_primary_mode("$server1_uuid")

--echo
--echo # 3. Wait for action hit the debug point

--let $rpl_connection_name= server_1_1
--source include/rpl_connection.inc

SET DEBUG_SYNC= "now WAIT_FOR signal.group_replication_resume_udf";

--echo
--echo # 4. STOP Group Replication on server1

--send STOP GROUP_REPLICATION;

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

--echo
--echo # 5. Wait for member state is OFFLINE

--let $group_replication_member_state= OFFLINE
--source include/gr_wait_for_member_state.inc

--echo
--echo # 6. To improve test but without adding more debug code, sleep to allow
--echo #    STOP Group Replication loop until UDF function finishes

--sleep 2

--echo
--echo # 7. Assert STOP GROUP_REPLICATION thread still runs

--let $assert_text= 'There is a thread executing STOP GROUP_REPLICATION on server1'
--let $assert_cond= [SELECT COUNT(*) as count FROM performance_schema.threads WHERE processlist_INFO LIKE "STOP GROUP_REPLICATION", count, 1] = 1
--source include/assert.inc

--echo
--echo # 8. Signal the action to continue

SET DEBUG_SYNC = "now SIGNAL signal.group_replication_resume_udf_continue";

--echo
--echo # 9. Reap execution of action and confirm it failed

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--replace_result $server1_uuid MEMBER1_UUID
--error ER_CANT_INITIALIZE_UDF
--reap

--echo
--echo # 10. Reap with success the execution of STOP GROUP_REPLICATION

--let $rpl_connection_name= server_1_1
--source include/rpl_connection.inc

--reap

--echo
--echo # 11. Cleanup

SET @@GLOBAL.DEBUG= @debug_save;

--let $rpl_group_replication_single_primary_mode=1
--let $rpl_group_replication_reset_persistent_vars=1
--source include/group_replication_end.inc
