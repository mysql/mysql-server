###############################################################################
# This test verifies that cloning works when the member auto rejoins the group
# after an issue.
#
# 0. This test requires 3 servers server1, server2, server3
# 1. Install clone plugin on server1.
# 2. Bootstrap server1 and add some data
# 3. Install the clone plugin and start GR on server3
# 4. Restart server 2 with a monitoring process (mysqld_safe)
# 5. Setup server2 so group replication starts on boot
#    Install the Clone plugin
# 6. On a empty server2 start group replication
#    Wait for it to restart and come back
#    Check clone was completed
# 7. Get server2 expelled
# 8. Add more data to server 1 before server2 rejoins
# 9. Unblock the rejoin, another clone should happen
# 10. Cleanup
#

--source include/big_test.inc
--source include/have_debug_sync.inc
--source include/linux.inc
--source include/have_mysqld_monitoring_process.inc
--source include/have_clone_plugin.inc
--source include/have_group_replication_plugin.inc
--let $rpl_server_count= 3
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc

# Validate plugins
--let plugins = CLONE_PLUGIN,GROUP_REPLICATION
--source include/check_plugin_dir.inc

--echo
--echo ############################################################
--echo # 1. Install clone plugin on server1.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $server1_port= `SELECT @@GLOBAL.PORT`

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

--echo
--echo ############################################################
--echo # 2. Bootstrap server1 and add some data

--source include/start_and_bootstrap_group_replication.inc

CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);
INSERT INTO t1 VALUES (2);

--echo
--echo #################################################################
--echo # 3. Install the clone plugin and start GR on server3
--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

--source include/start_group_replication.inc

--echo
--echo ##############################################################
--echo # 4. Restart server 2 with a monitoring process (mysqld_safe)

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $_group_replication_local_address= `SELECT @@GLOBAL.group_replication_local_address`
--let $_group_replication_group_seeds= `SELECT @@GLOBAL.group_replication_group_seeds`

# after the restart with mysqld_safe we need this option for expel operations
SET PERSIST local_infile= ON;

--let $plugin_list= $GROUP_REPLICATION
--source include/spawn_monitoring_process.inc

--echo
--echo ############################################################
--echo # 5. Setup server2 so group replication starts on boot
--echo #    Install the Clone plugin

--disable_query_log
--eval SET PERSIST group_replication_group_name= "$group_replication_group_name"
--eval SET PERSIST group_replication_local_address= "$_group_replication_local_address"
--eval SET PERSIST group_replication_group_seeds= "$_group_replication_group_seeds"

SET PERSIST group_replication_start_on_boot= ON;
--enable_query_log

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

--echo
--echo ############################################################
--echo # 6. On a empty server2 start group replication
--echo #    Wait for it to restart and come back
--echo #    Check clone was completed

--let $_group_replication_threshold_save= `SELECT @@GLOBAL.group_replication_clone_threshold`
SET GLOBAL group_replication_clone_threshold= 1;

START GROUP_REPLICATION;

--source include/wait_until_disconnected.inc

--let $rpl_server_number= 2
--source include/rpl_reconnect.inc

--let $group_replication_member_state=ONLINE
--source include/gr_wait_for_member_state.inc

--let $assert_text= Clone must be completed
--let $assert_cond= [SELECT state="Completed" FROM performance_schema.clone_status] = 1;
--source include/assert.inc

# See if the data has been properly cloned in server2
--let $diff_tables=server1:test.t1, server2:test.t1, server3:test.t1
--source include/diff_tables.inc

--echo
--echo ############################################################
--echo # 7. Get server2 expelled

--let $rpl_connection_name = server2
--source include/rpl_connection.inc

SET @debug_saved = @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG='+d,group_replication_stop_before_rejoin';

# First, enable auto-rejoin
SET GLOBAL group_replication_autorejoin_tries = 1;

# Force expel on member 2
--let $member_id = `SELECT @@GLOBAL.server_uuid`
--source include/gr_expel_member_from_group.inc

SET DEBUG_SYNC = "now WAIT_FOR signal.autorejoin_waiting";

# Verify that it is currently running
--let $assert_text = Auto-rejoin should be running
--let $assert_count_var = `SELECT COUNT(*) FROM performance_schema.events_stages_current WHERE EVENT_NAME LIKE '%auto-rejoin%'`
--let $assert_cond = $assert_count_var = 1
--source include/assert.inc

--echo
--echo ############################################################
--echo # 8. Add more data to server 1 before server2 rejoins

--let $rpl_connection_name = server1
--source include/rpl_connection.inc

INSERT INTO t1 VALUES (3);
INSERT INTO t1 VALUES (4);

--source include/rpl_sync.inc

--echo
--echo ############################################################
--echo # 9. Unblock the rejoin, another clone should happen

--let $rpl_connection_name = server2
--source include/rpl_connection.inc

SET GLOBAL group_replication_clone_threshold= 1;

SET DEBUG_SYNC = "now SIGNAL signal.autorejoin_continue";

--source include/wait_until_disconnected.inc

--let $rpl_server_number= 2
--source include/rpl_reconnect.inc

--let $group_replication_member_state=ONLINE
--source include/gr_wait_for_member_state.inc

--let $assert_text= Clone must be completed
--let $assert_cond= [SELECT state="Completed" FROM performance_schema.clone_status] = 1;
--source include/assert.inc

# See if the data has been properly cloned in server2
--let $diff_tables=server1:test.t1, server2:test.t1, server3:test.t1
--source include/diff_tables.inc

--echo
--echo ############################################################
--echo # 10. Cleanup

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

DROP TABLE t1;

UNINSTALL PLUGIN clone;

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

UNINSTALL PLUGIN clone;

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

RESET PERSIST IF EXISTS group_replication_group_name;
RESET PERSIST IF EXISTS group_replication_local_address;
RESET PERSIST IF EXISTS group_replication_group_seeds;
RESET PERSIST IF EXISTS group_replication_start_on_boot;
RESET PERSIST IF EXISTS local_infile;

UNINSTALL PLUGIN clone;

--eval SET GLOBAL group_replication_clone_threshold= $_group_replication_threshold_save

set session sql_log_bin=0;
call mtr.add_suppression("Due to the number of missing transactions being higher than the configured threshold of*");
call mtr.add_suppression("Member was expelled from the group due to network failures, changing member status to ERROR.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("Started auto-rejoin procedure attempt*");
call mtr.add_suppression("Auto-rejoin procedure attempt 1 of 1");
call mtr.add_suppression("Clone removing all user data for provisioning: Started");
call mtr.add_suppression("Clone removing all user data for provisioning: Finished");
set session sql_log_bin=1;

--source include/clean_monitoring_process.inc

--source include/group_replication_end.inc
