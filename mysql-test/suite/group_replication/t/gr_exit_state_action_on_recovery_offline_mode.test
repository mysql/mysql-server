###############################################################################
#
# group_replication_exit_state_action sysvar specifies which action is taken by
# a server once it has involuntarily left the group.
# This test shall verify that the correct exit state action is executed when
# an error occurs during the catch-up phase of distributed recovery.
#
# Test:
# 0) Setup group of 2 members (M1 and M2).
# 1) Force error during the catch-up phase of M1.
# 2) Verify that M1 goes into ERROR state and to offline mode.
# 3) Cleanup.
#
################################################################################
--source include/have_group_replication_plugin.inc

--echo
--echo #########################################################################
--echo # 0) Setup group of 2 members (M1 and M2) but only start GR on M2.
--echo #########################################################################
--echo
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SET @saved_recovery_retry_count = @@GLOBAL.group_replication_recovery_retry_count;
SET @@GLOBAL.group_replication_recovery_retry_count = 1;
SET @saved_exit_state_action = @@GLOBAL.group_replication_exit_state_action;
SET @@GLOBAL.group_replication_exit_state_action = OFFLINE_MODE;

# Create a table on M1 while it isn't part of the group
SET sql_log_bin = 0;
CREATE TABLE t1 (a INT PRIMARY KEY);
INSERT INTO t1 VALUES (1);
SET sql_log_bin = 1;

# Bootstrap the rest of the group (minus M1)
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/start_and_bootstrap_group_replication.inc

# Suppress expected errors and warnings
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SET sql_log_bin = 0;
call mtr.add_suppression("read failed");
call mtr.add_suppression("Slave SQL for channel 'group_replication_recovery': Error 'Table 't1'*");
call mtr.add_suppression("Slave SQL for channel 'group_replication_recovery': Worker [0-9] failed executing transaction*");
call mtr.add_suppression("Slave SQL for channel 'group_replication_recovery': ... The slave coordinator and worker threads are stopped,*");
call mtr.add_suppression("Slave: Table 't1' already exists Error_code:*");
call mtr.add_suppression("Maximum number of retries when trying to connect to a donor reached. Aborting group replication incremental recovery.");
call mtr.add_suppression("Fatal error during the incremental recovery process of Group Replication. The server will leave the group.");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
call mtr.add_suppression("Error while starting the group replication incremental recovery receiver/applier threads");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("The server was automatically set into offline mode after an error was detected.");
SET sql_log_bin = 1;

--echo
--echo #########################################################################
--echo # 1) Force error during the catch-up phase of M1.
--echo #########################################################################
--echo
# Create and replicate a table on the group
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
CREATE TABLE t1 (a INT PRIMARY KEY);

# Add M1 to the group
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $group_replication_start_member_state= ERROR
--source include/start_group_replication.inc

--echo
--echo #########################################################################
--echo # 2) Verify that M1 goes into ERROR state and to offline mode.
--echo #########################################################################
--echo
# Firstly verify that the member entered an error state
--let $group_replication_member_state= ERROR
--source include/gr_wait_for_member_state.inc

--source include/assert_and_disable_read_only.inc
--source include/assert_and_disable_offline_mode.inc

# Lastly, verify that the member is not viewed as part of the group on M2
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--let $group_replication_number_of_members= 1
--source include/gr_wait_for_number_of_members.inc

--echo
--echo #########################################################################
--echo # 3) Cleanup.
--echo #########################################################################
--echo
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--source include/stop_group_replication.inc

SET SESSION sql_log_bin= 0;
DROP TABLE t1;
SET SESSION sql_log_bin= 1;

--source include/start_group_replication.inc

DROP TABLE t1;

SET @@GLOBAL.group_replication_exit_state_action = @saved_exit_state_action;
SET @@GLOBAL.group_replication_recovery_retry_count = @saved_recovery_retry_count;

--source include/group_replication_end.inc
