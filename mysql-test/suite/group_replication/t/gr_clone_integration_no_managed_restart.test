###############################################################################
# This test verifies that if the missing transactions on a joining members are
# above threshold the server will use clone as its recovery strategy, but if
# the joiner server cannot restart after clone it will error out and shutdown.
# The joiner server will be OK after a manual server start.
#
# 0. The test requires two servers: M1 and M2.
# 1. Install the clone plugin on server 1
# 2. Bootstrap server1 and add some data
# 3. Setup server2 so group replication starts on boot
# 4. Start group replication on server 2
#    Clone will fail to restart the server, as no monitoring
#    process is present which will cause a server shutdown.
# 5. Start the server manually, clone will finish its work.
#    Verify also that the server failed to restart earlier
# 6. Cleanup
#

--source include/not_windows.inc
--source include/have_clone_plugin.inc
--source include/force_restart.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc

# Validate plugins
--let plugins = CLONE_PLUGIN,GROUP_REPLICATION
--source include/check_plugin_dir.inc


--echo
--echo ############################################################
--echo # 1. Install clone plugin on server1.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

--echo
--echo ############################################################
--echo # 2. Bootstrap server1 and add some data

--source include/start_and_bootstrap_group_replication.inc

CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);
INSERT INTO t1 VALUES (2);

--echo
--echo ############################################################
--echo # 3. Setup server2 so group replication starts on boot

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $_group_replication_local_address= `SELECT @@GLOBAL.group_replication_local_address`
--let $_group_replication_group_seeds= `SELECT @@GLOBAL.group_replication_group_seeds`

--disable_query_log
--eval SET PERSIST  group_replication_group_name= "$group_replication_group_name"
--eval SET PERSIST  group_replication_local_address= "$_group_replication_local_address"
--eval SET PERSIST  group_replication_group_seeds= "$_group_replication_group_seeds"

SET PERSIST group_replication_start_on_boot= ON;
--enable_query_log

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

--echo
--echo ################################################################
--echo # 4. Start group replication on server 2
--echo #    Clone will fail to restart the server, as no monitoring
--echo #    process is present which will cause a server shutdown.
--echo #

--let $_group_replication_threshold_save= `SELECT @@GLOBAL.group_replication_clone_threshold`
SET GLOBAL group_replication_clone_threshold= 1;

START GROUP_REPLICATION;

--let $_expect_file_name= $MYSQLTEST_VARDIR/tmp/mysqld.2.expect
--exec echo "wait" > $_expect_file_name
--source include/wait_until_disconnected.inc

--echo
--echo ############################################################
--echo # 5. Start the server manually, clone will finish its work.
--echo #    Verify also that the server failed to restart earlier

--source include/start_mysqld.inc

--let $rpl_server_number= 2
--source include/rpl_reconnect.inc

--let $group_replication_member_state=ONLINE
--source include/gr_wait_for_member_state.inc

--let $assert_text= Clone must be completed
--let $assert_cond= [SELECT state="Completed" FROM performance_schema.clone_status] = 1;
--source include/assert.inc

# See if the data has been properly cloned in server2
--let $diff_tables=server1:test.t1 ,server2:test.t1
--source include/diff_tables.inc

# Verify in the log file that the plugin failed to restart earlier
--let $assert_file= $MYSQLTEST_VARDIR/log/mysqld.2.err
--let $assert_only_after = CURRENT_TEST: group_replication.gr_clone_integration_no_managed_restart
--let $assert_text = Clone plugin failed to restart
--let $assert_select = There was an issue when cloning from another server: Error number: 3707 Error message: Restart server failed
--let $assert_count = 1
--source include/assert_grep.inc

--echo
--echo ############################################################
--echo # 6. Cleanup

--eval SET GLOBAL group_replication_clone_threshold= $_group_replication_threshold_save;

RESET PERSIST IF EXISTS group_replication_group_name;
RESET PERSIST IF EXISTS group_replication_local_address;
RESET PERSIST IF EXISTS group_replication_group_seeds;
RESET PERSIST IF EXISTS group_replication_start_on_boot;

DROP TABLE t1;

--source include/rpl_sync.inc

set session sql_log_bin=0;
call mtr.add_suppression("Due to the number of missing transactions being higher than the configured threshold of*");
call mtr.add_suppression("Internal query: CLONE INSTANCE FROM \'root\'@\'127.0.0.1\':[0-9]+ IDENTIFIED BY \'\\*\\*\\*\\*\\*\' REQUIRE NO SSL; result in error. Error number:*");
call mtr.add_suppression("There was an issue when cloning from another server: Error number: 3707 Error message: Restart server failed \\(mysqld is not managed by supervisor process\\).");
call mtr.add_suppression("Failed to establish an internal server connection to execute plugin operations. Server error: 3169. Server error message: Session was killed");
call mtr.add_suppression("Error running internal SQL query: SET GLOBAL super_read_only= 1;. Internal failure.");
call mtr.add_suppression("The plugin encountered a critical error and will abort: Cannot re-enable the super read only after clone failure.");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
call mtr.add_suppression("Due to a critical cloning error or lack of donors, distributed recovery cannot be executed. The member will now leave the group.");
call mtr.add_suppression("Clone removing all user data for provisioning: Started");
call mtr.add_suppression("Clone removing all user data for provisioning: Finished");
call mtr.add_suppression("Clone shutting down server as RESTART failed. Please start server to complete clone operation.");
set session sql_log_bin=1;

--source include/group_replication_end.inc
