################################################################################
#
# The auto-rejoin process is a mechanism that allows a server that left the
# group due to flaky network (either on his side or on the other members) to
# try to join again up to group_replication_autorejoin_tries number of times.
#
# This test shall verify that upon a member expel, if auto-rejoin is enabled,
# the expelled member will try to rejoin the group up to
# group_replication_autorejoin_tries number of times. It will also verify that,
# if it fails to join the group after the number of times are depleted, it will
# react accordingly to group_replication_exit_state_action.
#
# Test:
# 0) The test requires three servers.
# 1) Expel one of the members.
# 2) Verify that the expelled member will try to rejoin the group the number of
#    it is configured in group_replication_autorejoin_tries sysvar.
# 3) Verify that, with group_replication_exit_state_action set to ABORT_SERVER,
#    the expelled member will be aborted.
# 4) Manually rejoin the server to the group.
# 5) Cleanup.
#
################################################################################
--source include/have_debug_sync.inc
--source include/big_test.inc
--source include/linux.inc
--source include/have_group_replication_plugin.inc
#
# We manually start the group because we need to set the rejoin timeout before
# the START GROUP_REPLICATION command.
#
--let $rpl_skip_group_replication_start= 1
--let $rpl_server_count = 3
--source include/group_replication.inc

--echo
--echo ####
--echo # 0) The test requires three servers.
--echo ####
--echo
SET sql_log_bin = 0;
call mtr.add_suppression("Member was expelled from the group due to network failures, changing member status to ERROR.");
call mtr.add_suppression("The plugin encountered a critical error and will abort: Could not rejoin the member to the group after");
call mtr.add_suppression("Started auto-rejoin procedure attempt*");
call mtr.add_suppression("Auto-rejoin procedure attempt*");
call mtr.add_suppression("Unable to confirm whether the server has left the group or not. Check performance_schema.replication_group_members to check group membership information.");
call mtr.add_suppression("Slave SQL for channel 'group_replication_applier': ... The slave coordinator and worker threads are stopped,*");
call mtr.add_suppression("The applier thread execution was aborted. Unable to process more transactions, this member will now leave the group.");
call mtr.add_suppression("Fatal error during execution on the Applier process of Group Replication. The server will now leave the group.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("Error, maximum number of retries exceeded when waiting for the internal server session state to be operating");
call mtr.add_suppression("Failed to establish an internal server connection to execute plugin operations");
SET sql_log_bin = 1;

--source include/gr_autorejoin_monitoring.inc

# Enable debug var that instantly fails the rejoin (so we don't have to wait for
# 5 minutes...)
SET @debug_saved = @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG='+d,group_replication_rejoin_short_retry';
SET @@GLOBAL.DEBUG='+d,group_replication_fail_rejoin';
SET @@GLOBAL.DEBUG='+d,group_replication_stop_before_rejoin_loop';
SET @@GLOBAL.DEBUG='+d,group_replication_stop_before_rejoin';

--source include/start_and_bootstrap_group_replication.inc

--let $rpl_connection_name = server2
--source include/rpl_connection.inc

--source include/start_group_replication.inc

--let $rpl_connection_name = server3
--source include/rpl_connection.inc

--source include/start_group_replication.inc

--echo
--echo #####
--echo # 1) Expel one of the members.
--echo #####
--echo
--let $rpl_connection_name = server1
--source include/rpl_connection.inc

# First, enable auto-rejoin
SET GLOBAL group_replication_autorejoin_tries = 3;

# Set the exit state action to ABORT_SERVER
SET @@GLOBAL.group_replication_exit_state_action = ABORT_SERVER;

# Inform MTR that we are expecting an abort and that it should wait before
# restarting the aborting member
--exec echo "wait" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect

# Force expel on member 1
--let $local_address_server = `SELECT @@GLOBAL.group_replication_local_address`
--let $group_seeds_server = `SELECT @@GLOBAL.group_replication_group_seeds`
--let $member_id = `SELECT @@GLOBAL.server_uuid`
--source include/gr_expel_member_from_group.inc

--echo
--echo ####
--echo # 2) Verify that the expelled member will try to rejoin the group the
--echo # number of it is configured in group_replication_autorejoin_tries
--echo # sysvar.
--echo ####
--echo
SET DEBUG_SYNC = "now WAIT_FOR signal.autorejoin_entering_loop";

# Verify that it is currently running
--let $assert_text = Auto-rejoin should be running
--let $assert_cond = [SELECT IS_AUTOREJOIN_RUNNING()] = TRUE
--source include/assert.inc

SET DEBUG_SYNC = "now SIGNAL signal.autorejoin_enter_loop";

--let $tries = 1
while ($tries <= 3)
{
  SET DEBUG_SYNC = "now WAIT_FOR signal.autorejoin_waiting";

  # Verify that it is currently running
  --let $assert_text = Auto-rejoin should be running
  --let $assert_cond = [SELECT IS_AUTOREJOIN_RUNNING()] = TRUE
  --source include/assert.inc

  --let $assert_text= super_read_only should be enabled
  --let $assert_cond= [SELECT @@GLOBAL.super_read_only] = 1;
  --source include/assert.inc

  --let $assert_text = We should have attempted $tries rejoins
  --let $assert_cond = [SELECT GET_NUMBER_RETRIES()] = $tries
  --source include/assert.inc

  SET DEBUG_SYNC = "now SIGNAL signal.autorejoin_continue";

  --inc $tries
}

--echo
--echo ####
--echo # 6) Verify that, with group_replication_exit_state_action set to
--echo # ABORT_SERVER, the expelled member will be aborted.
--echo ####
--echo
# Wait until the connection is dropped
--source include/wait_until_disconnected.inc
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect
--let $rpl_server_number = 1
--source include/rpl_reconnect.inc

# Verify in the log file that the server aborted
--let $assert_file= $MYSQLTEST_VARDIR/log/mysqld.1.err
--let $assert_only_after = CURRENT_TEST: group_replication.gr_autorejoin_member_expel_rejoin_failed_abort
--let $assert_text = GR reported expected abort
--let $assert_select = The plugin encountered a critical error and will abort
--let $assert_count = 1
--source include/assert_grep.inc

# For simplicity, let's assume that once the group size is 2, then member 1 has
# aborted
--let $rpl_connection_name = server2
--source include/rpl_connection.inc

--let $group_replication_number_of_members = 2
--source include/gr_wait_for_number_of_members.inc

--let $rpl_connection_name = server3
--source include/rpl_connection.inc

--let $group_replication_number_of_members = 2
--source include/gr_wait_for_number_of_members.inc

--echo
--echo ####
--echo # 4) Manually rejoin the server to the group.
--echo ####
--echo
# Restart GR on aborted member
--let $rpl_connection_name = server1
--source include/rpl_connection.inc

--replace_result $group_seeds_server GROUP_SEEDS_SERVER
--eval SET @@global.group_replication_group_seeds = "$group_seeds_server"
--replace_result $local_address_server LOCAL_ADDRESS_SERVER
--eval SET @@global.group_replication_local_address = "$local_address_server"
--source include/start_group_replication.inc

--let $group_replication_member_state = ONLINE
--let $group_replication_member_id = $member_id
--source include/gr_wait_for_member_state.inc

--let $group_replication_number_of_members = 3
--source include/gr_wait_for_number_of_members.inc

--let $rpl_connection_name = server2
--source include/rpl_connection.inc

--let $group_replication_number_of_members = 3
--source include/gr_wait_for_number_of_members.inc

--let $rpl_connection_name = server3
--source include/rpl_connection.inc

--let $group_replication_number_of_members = 3
--source include/gr_wait_for_number_of_members.inc

--echo
--echo ####
--echo # 5) Cleanup.
--echo ####
--echo
--let $rpl_connection_name = server1
--source include/rpl_connection.inc

--source include/gr_end_autorejoin_monitoring.inc
--source include/group_replication_end.inc
