################################################################################
# Bug#24466187 MTS WORKERS FAILS TO WAIT FOR COMPLETION OF DEPENDENT
#              TRANSACTIONS
# Test cases to verify that dependent transaction check and
# conflict detection algorithm is working properly when the foreign key is
# referring to a unique key.
#
# Test:
# 0. The test requires two servers: M1 and M2.
# 1. With both members ONLINE. Create two tables on M1.
# 2. With different test combinations,
#    call gr_parallel_local_and_remote_transactions.inc
#    and test the behaviour as expected or not.
#    2.1. Scenario 1: FOREIGN KEY referring an UNIQUE KEY
#                     conflicting case: updating referring tuple while
#                     the tuple with referring key is getting inserted
#                     in child table.
#    2.2. Scenario 2: FOREIGN KEY referring an UNIQUE KEY
#                     non-conflicting case: inserting a tuple in child's table
#                     while updating a tuple in parent's table which is not
#                     getting referred.
# 3. Check data sanity after the above scenarios.
#
# Check that the group replication parallel applier indexes of the DMLs
# that involves foreign key which is referring an unique key is calculated
# properly.
#
# 0. The test requires two servers: M1 and M2.
# 1. With both members ONLINE. Create two tables on M1.
# 2. Execute few DMLs on these two tables on M1.
# 3. Dump Group Replication applier channel relay log.
# 4. Validate indexes on M2.
################################################################################

--source include/have_debug_sync.inc
--source include/have_group_replication_plugin.inc
--source include/group_replication.inc

--echo
--echo ############################################################
--echo # Create two tables on server1.
--echo # t1 : parent table with a primary key and unique key.
--echo # t2 : child table with a primary key and foreign key referring
--echo #      t1's unique key.
--echo
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
CREATE TABLE t1 (c1 INT PRIMARY KEY, c2 INT UNIQUE KEY NOT NULL);
CREATE TABLE t2 (c1 INT PRIMARY KEY, c2 INT, FOREIGN KEY (c2) REFERENCES t1(c2));
INSERT INTO t1 VALUES(1, 1);
INSERT INTO t1 VALUES(2, 2);
--source include/rpl_sync.inc

--echo
--echo ############################################################
--echo # Scenario 1: FOREIGN KEY referring an UNIQUE KEY
--echo #   conflicting case: updating referring tuple while
--echo #   the tuple with referring key is getting inserted
--echo #   in child table
--let $local_server_connection1=server1
--let $local_server_connection2=server_1
--let $remote_server_connection=server2
--let $local_transaction= INSERT INTO t2 VALUES (1, 1)
--let $remote_transaction=UPDATE t1 SET c2=3 WHERE c1=1
--let $conflict_test=1
--source include/gr_parallel_local_and_remote_transactions.inc

--echo ############################################################
--echo # check data sanity
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $assert_text= Table t1 will contain update row after the above execution
--let $assert_cond= "[SELECT COUNT(*) AS count FROM t1 WHERE t1.c2 = 3, count, 1]" = "1"
--source include/assert.inc

--let $assert_text= Table t2 should have zero rows after the above conflict
--let $assert_cond= "[SELECT COUNT(*) AS count FROM t2, count, 1]" = "0"
--source include/assert.inc

--echo
--echo ############################################################
--echo # Scenario 2: FOREIGN KEY referring an UNIQUE KEY
--echo #   non-conflicting case: inserting a tuple in child's table
--echo #   while updating a tuple in parent's table which is not getting
--echo #   referred
--let $local_server_connection1=server1
--let $local_server_connection2=server_1
--let $remote_server_connection=server2
--let $local_transaction= INSERT INTO t2 VALUES (1, 3)
--let $remote_transaction=UPDATE t1 SET c2=4 WHERE c1=2
--let $conflict_test=0
--source include/gr_parallel_local_and_remote_transactions.inc

--echo ############################################################
--echo # check data sanity
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $assert_text= Table t1 will contain update row after the above execution
--let $assert_cond= "[SELECT COUNT(*) AS count FROM t1 WHERE t1.c2 = 4, count, 1]" = "1"
--source include/assert.inc

--let $assert_text= Table t2 will contain one tuple
--let $assert_cond= "[SELECT COUNT(*) AS count FROM t2 WHERE t2.c2= 3, count, 1]" = "1"
--source include/assert.inc

--echo
--echo ############################################################
--echo # Clean up.
DROP TABLE t2;
DROP TABLE t1;
--source include/rpl_sync.inc

--echo
--echo ##################################################################
--echo # Scenario: Check the group replication parallel applier indexes
--echo # of the DMLs that involves foreign key which is referring
--echo # an unique key.
--echo
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/stop_group_replication.inc
# This creates new relay log and view_id will have
# last_committed=0 sequence_number=0
--source include/start_group_replication.inc

--echo
--echo #####################################################################
--echo # Create two tables on server1.
--echo # t1 : parent table with a primary key and unique key.
--echo # t2 : child table with a primary key and foreign key referring
--echo #      t1's unique key.
--echo
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
# last_committed=1 sequence_number=2
CREATE TABLE t1 (a INT,b INT UNIQUE NOT NULL, PRIMARY KEY(a));
# last_committed=2 sequence_number=3
CREATE TABLE t2 (c1 INT PRIMARY KEY,c2 INT,FOREIGN KEY(c2) REFERENCES t1(b));

--echo
--echo #####################################################################
--echo # Execute few DMLs on these two tables
--echo
# last_committed=3 sequence_number=4
INSERT INTO t1 VALUES(11,1);
# last_committed=3 sequence_number=5
INSERT INTO t1 VALUES(12,2);
# last_committed=4 sequence_number=6
INSERT INTO t2 VALUES(31,1);
# last_committed=5 sequence_number=7
INSERT INTO t2 VALUES(32,2);
# last_committed=6 sequence_number=8
UPDATE t2 SET c1=21 WHERE c2=1;
# last_committed=7 sequence_number=9
DELETE FROM t2 WHERE c2=2;
# last_committed=9 sequence_number=10
DELETE FROM t1 WHERE b=2;
# last_committed=8 sequence_number=11
DELETE FROM t2 WHERE c1=21;
# last_committed=11 sequence_number=12
DROP TABLE t2;
# last_committed=12 sequence_number=13
DROP TABLE t1;
--source include/rpl_sync.inc

--echo
--echo #####################################################
--echo # Dump Group Replication applier channel relay log
--echo
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--let $dump_file=$MYSQLTEST_VARDIR/tmp/group_replication_parallel_applier_indexes.dump
--exec $MYSQL_BINLOG --force-if-open $server_2_datadir/server-relay-log-group_replication_applier.000003 > $dump_file
--let $grep_file= $dump_file
--let $grep_pattern= last_committed
--let $grep_output= print_each
--replace_regex /# at [0-9]*/# at #/ /#[0-9]+/#time#/ /[[:space:]]+[0-9]+:[0-9]+:[0-9]+/ ##:##:##/ /end_log_pos [0-9]+/end_log_pos ##/ /original_committed_timestamp=[0-9]*/original_committed_timestamp=##:##:##/ /immediate_commit_timestamp=[0-9]*/immediate_commit_timestamp=##:##:##/ /transaction_length=[0-9]*/transaction_length=#/
--source include/grep_pattern.inc

--echo
--echo ################################
--echo # Validate indexes on member 2.
--echo #
--let $binlog_file= server-relay-log-group_replication_applier.000003
--let $logical_timestamps= 0 0;1 2;2 3;3 4;3 5;4 6;5 7;6 8;7 9;9 10;8 11;11 12;12 13
--source include/assert_logical_timestamps.inc
#
--let $is_relay_log= 1
--let $binlog_file= server-relay-log-group_replication_applier.000002
--source include/assert_transaction_length.inc
--let $binlog_file= server-relay-log-group_replication_applier.000003
--source include/assert_transaction_length.inc
--let $binlog_file=
--let $is_relay_log=
--source include/assert_transaction_length.inc

# Cleanup
--remove_file $dump_file
--source include/group_replication_end.inc
