################################################################################
# This test validates UDF group_replication_set_as_primary does not drop
# connection of single-statement read-only explicit transactions.
# The client connections running write transactions are gracefully killed.
#
# Test:
# 0. The test requires two servers: M1 and M2.
# 1. Start group in single primary mode.
#    Server1 will be primary and server2 secondary.
# 2. Start a read-only transaction on server1.
#    It should succeed with primary change initiated from server2(secondary).
# 3. Assert primary changed.
# 4. Start a read-only transaction on server2.
#    It should succeed with primary change initiated from server2(primary).
# 5. Assert primary changed.
# 6. Start a write transaction on server1.
#    Client connection will be dropped.
#    Primary change initiated from server2(secondary).
# 7. Assert primary changed.
# 8. Start a write transaction on server2.
#    Client connection will be dropped.
#    Primary change initiated from server2(primary).
# 9. Assert primary changed.
# 10. Cleanup.
################################################################################
--source include/have_debug_sync.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_group_replication_single_primary_mode=1
--source include/group_replication.inc

--echo
--echo # 1. Start group in single primary mode.
--echo #    Server1 will be primary and server2 secondary.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

CREATE TABLE test.t1(c1 int primary key);
--let $server1_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)
--source include/start_and_bootstrap_group_replication.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $server2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)
--source include/start_group_replication.inc

--echo
--echo # 2. Start a read-only transaction on server1.
--echo #    It should succeed with primary change initiated from server2(secondary).

--let $conn_of_new_primary= server2
--let $command_to_execute= SELECT * FROM test.t1;
--let $conn_for_command= server1
--let $conn_for_debug_sync= server_1
--let $conn_for_primary= server2
--let $connection_is_killed=
--source ../include/gr_parallel_command_primary_change.inc

--echo
--echo # 3. Assert primary changed.

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--source include/gr_assert_primary_member.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/gr_assert_secondary_member.inc

--echo
--echo # 4. Start a read-only transaction on server2.
--echo #    It should succeed with primary change initiated from server2(primary).

--let $conn_of_new_primary= server1
--let $command_to_execute= SELECT * FROM test.t1;
--let $conn_for_command= server2
--let $conn_for_debug_sync= server_2
--let $conn_for_primary= server_2_1
--let $connection_is_killed=
--source ../include/gr_parallel_command_primary_change.inc

--echo
--echo # 5. Assert primary changed.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/gr_assert_primary_member.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--source include/gr_assert_secondary_member.inc

--echo
--echo # 6. Start a write transaction on server1.
--echo #    Client connection will be dropped.
--echo #    Primary change initiated from server2(secondary).

--let $conn_of_new_primary= server2
--let $command_to_execute= INSERT INTO test.t1 values (1);
--let $conn_for_command= server1
--let $conn_for_debug_sync= server_1
--let $conn_for_primary= server2
--let $connection_is_killed=1
--source ../include/gr_parallel_command_primary_change.inc

--echo
--echo # 7. Assert primary changed.

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--source include/gr_assert_primary_member.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/gr_assert_secondary_member.inc

--let $assert_text= 'There is no value 1 in table t1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM test.t1 WHERE t1.c1 = 1, count, 1] = 0
--source include/assert.inc

--let $diff_tables= server1:test.t1, server2:test.t1
--source include/diff_tables.inc

--echo
--echo # 8. Start a write transaction on server2.
--echo #    Client connection will be dropped.
--echo #    Primary change initiated from server2(primary).

--let $conn_of_new_primary= server1
--let $command_to_execute= INSERT INTO test.t1 values (2);
--let $conn_for_command= server2
--let $conn_for_debug_sync= server_2
--let $conn_for_primary= server_2_1
--let $connection_is_killed=1
--source ../include/gr_parallel_command_primary_change.inc

--echo
--echo # 9. Assert primary changed.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/gr_assert_primary_member.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--source include/gr_assert_secondary_member.inc

--let $assert_text= 'There is no value 2 in table t1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM test.t1 WHERE t1.c1 = 2, count, 1] = 0
--source include/assert.inc

--let $diff_tables= server1:test.t1, server2:test.t1
--source include/diff_tables.inc

--echo
--echo # 10. Cleanup.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

DROP TABLE test.t1;

--source include/group_replication_end.inc
