###############################################################################
#
# When electing a primary server, P, if any server S leaves or fails
# under a majority, the procedure shall not be affected and will resume.
#
# Test:
#   0. This test requires three servers
#   1. Start a group in single primary mode.
#   2. Go to a member that will be a secondary and lock a table
#   3. Insert a row on primary
#   4. Invoke a change the primary to server2
#   5. Check that the other members are waiting for members to be in read
#      mode.
#      Stages should be
#      - Primary Election: waiting for members to enable super_read_only
#      - Single-primary Switch: executing Primary election
#   6. Kill the stuck secondary
#   7. Check that the action finishes
#   8. Check that primary is now server2
#   9. Cleanup
#
###############################################################################

--source include/big_test.inc
--source include/have_group_replication_plugin.inc
--source include/not_valgrind.inc
--let $rpl_server_count= 3
--let $rpl_skip_group_replication_start= 1
--let $rpl_group_replication_single_primary_mode=1
--source include/group_replication.inc

--echo
--echo # 1. Start a group in single primary mode.

--source include/start_and_bootstrap_group_replication.inc

--let $server1_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

CREATE TABLE test.t1 (a INT PRIMARY KEY);

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--source include/start_group_replication.inc

--let $server2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--echo
--echo # 2. Go to a member that will be a secondary and lock a table

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--source include/start_group_replication.inc

# Disable read only to be able to lock table
SET @@GLOBAL.read_only= 0;

LOCK TABLE t1 READ;

--echo
--echo # 3. Insert a row on primary

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

INSERT INTO t1 VALUES (1);

--echo
--echo # 4. Invoke a change the primary to server2

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--replace_result $server2_uuid MEMBER2_UUID
--send_eval SELECT group_replication_set_as_primary("$server2_uuid")

--echo
--echo # 5. Check that the other members are waiting for members to be in read
--echo #    mode.
--echo #    Stages should be
--echo #    - Primary Election: waiting for members to enable super_read_only
--echo #    - Primary Switch: executing Primary election

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.events_stages_current WHERE event_name LIKE "%members to enable super_read_only%"
--source include/wait_condition.inc

--let $stage_name= `SELECT event_name FROM performance_schema.events_stages_current WHERE event_name LIKE "%Primary Switch%";`
--let $assert_text= stage/group_rpl/Primary Switch: executing Primary election
--let $assert_cond= "$stage_name" = "stage/group_rpl/Primary Switch: executing Primary election"
--source include/assert.inc

--let $stage_name= `SELECT event_name FROM performance_schema.events_stages_current WHERE event_name LIKE "%Primary Election:%";`
--let $assert_text= stage/group_rpl/Primary Election: waiting for members to enable super_read_only
--let $assert_cond= "$stage_name" = "stage/group_rpl/Primary Election: waiting for members to enable super_read_only"
--source include/assert.inc

--echo
--echo # 6. Kill the stuck secondary

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--let $_group_replication_local_address= `SELECT @@GLOBAL.group_replication_local_address`
--let $_group_replication_group_seeds= `SELECT @@GLOBAL.group_replication_group_seeds`

--replace_result $group_replication_group_name GROUP_REPLICATION_GROUP_NAME $_group_replication_local_address GROUP_REPLICATION_LOCAL_ADDRESS $_group_replication_group_seeds GROUP_REPLICATION_GROUP_SEEDS
--let $restart_parameters=restart:--group-replication-start-on-boot=0 --group-replication-group-name=$group_replication_group_name --group_replication_local_address=$_group_replication_local_address --group_replication_group_seeds=$_group_replication_group_seeds  --group_replication_single_primary_mode=TRUE --group_replication_enforce_update_everywhere_checks=FALSE
--source include/kill_and_restart_mysqld.inc

--let $rpl_server_number= 3
--source include/rpl_reconnect.inc

--echo
--echo # 7. Check that the action finishes

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--replace_result $server2_uuid MEMBER2_UUID
--reap

--echo
--echo # 8. Check that primary is now server2

--source include/gr_assert_primary_member.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/gr_assert_secondary_member.inc

--echo
--echo # 9. Cleanup

--let $rpl_connection_name= server2
--source include/rpl_connection.inc


DROP TABLE t1;

--let $rpl_group_replication_single_primary_mode=1
--let $rpl_group_replication_reset_persistent_vars=1
--source include/group_replication_end.inc
