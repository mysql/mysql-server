################################################################################
# Validate that list of senders is updated when a member of the group is also
# added manually to the list of sources.
#
# Test:
#  0. The test requires 4 servers:
#       server1: group primary
#       server2: group secondary
#       server3: group secondary
#       server4: replica server
#  1. Deploy a 3 members group in single primary mode.
#  2. Add manually the third member of group to the list of
#     unmanaged sources of the replica.
#  3. Configure replica to manage the asynchronous connection
#     to group A.
#  4. Create and start the managed channel.
#     Replica will connect to server3 (weigth: 90).
#  5. Remove the manually added server3 from the sources list.
#     Replica will connect to server1 (weigth: 80).
#  6. Clean up.
################################################################################

--source include/have_group_replication_plugin.inc
--let $group_replication_group_name= aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa
--let $rpl_skip_group_replication_start= 1
--let $rpl_server_count= 4
--source include/group_replication.inc

--echo
--echo ############################################################
--echo # 1. Deploy a 3 members group in single primary mode.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $server1_uuid= `SELECT @@server_uuid`
--source include/start_and_bootstrap_group_replication.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/start_group_replication.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--let $server3_uuid= `SELECT @@server_uuid`
--source include/start_group_replication.inc


--echo
--echo ############################################################
--echo # 2. Add manually the third member of group to the list of
--echo #    unmanaged sources of the replica.
--let $rpl_connection_name= server4
--source include/rpl_connection.inc
--replace_result $SERVER_MYPORT_3 SERVER_MYPORT_3
--eval SELECT asynchronous_connection_failover_add_source('ch1', '127.0.0.1', $SERVER_MYPORT_3, '', 90);


--echo ############################################################
--echo # 3. Configure replica to manage the asynchronous connection
--echo #    to group A.
--echo
--let $rpl_connection_name= server4
--source include/rpl_connection.inc
--replace_result $SERVER_MYPORT_2 SERVER_MYPORT_2 $group_replication_group_name GROUP
--eval SELECT asynchronous_connection_failover_add_managed('ch1', 'GroupReplication', '$group_replication_group_name', '127.0.0.1', $SERVER_MYPORT_2, '', 80, 70);


--echo ############################################################
--echo # 4. Create and start the managed channel.
--echo #    Replica will connect to server3 (weigth: 90).
--let $rpl_connection_name= server4
--source include/rpl_connection.inc
--replace_result $SERVER_MYPORT_1 SERVER_1_PORT
--eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_USER='root', SOURCE_AUTO_POSITION=1, SOURCE_CONNECTION_AUTO_FAILOVER=1, SOURCE_PORT=$SERVER_MYPORT_1, SOURCE_CONNECT_RETRY=1, SOURCE_RETRY_COUNT=1 FOR CHANNEL 'ch1'

--let $rpl_channel_name='ch1'
--source include/start_slave.inc
--let $rpl_channel_name=

--let $wait_condition= SELECT COUNT(*)=4 FROM performance_schema.replication_asynchronous_connection_failover
--source include/wait_condition.inc

--replace_column 3 PORT
SELECT * FROM performance_schema.replication_asynchronous_connection_failover ORDER BY weight DESC;

--echo Wait until ch1 IO_THREAD is connected to server3
--let $wait_condition= SELECT service_state="ON" FROM performance_schema.replication_connection_status WHERE channel_name="ch1" AND source_uuid="$server3_uuid"
--source include/wait_condition.inc


--echo ############################################################
--echo # 5. Remove the manually added server3 from the sources list.
--echo #    Replica will connect to server1 (weigth: 80).
--let $rpl_connection_name= server4
--source include/rpl_connection.inc
--replace_result $SERVER_MYPORT_3 SERVER_MYPORT_3
--eval SELECT asynchronous_connection_failover_delete_source('ch1', '127.0.0.1', $SERVER_MYPORT_3, '');

--let $assert_text= 'There are 0 rows in performance_schema.replication_asynchronous_connection_failover for single servers'
--let $assert_cond= [SELECT COUNT(*) count FROM performance_schema.replication_asynchronous_connection_failover WHERE managed_name="", count, 1] = 0
--source include/assert.inc

--let $assert_text= 'There are 3 rows in performance_schema.replication_asynchronous_connection_failover belonging to the group'
--let $assert_cond= [SELECT COUNT(*) count FROM performance_schema.replication_asynchronous_connection_failover WHERE managed_name="$group_replication_group_name", count, 1] = 3
--source include/assert.inc

--replace_column 3 PORT
SELECT * FROM performance_schema.replication_asynchronous_connection_failover ORDER BY weight DESC;

--echo Wait until ch1 IO_THREAD is connected to server1
--let $wait_condition= SELECT service_state="ON" FROM performance_schema.replication_connection_status WHERE channel_name="ch1" AND source_uuid="$server1_uuid"
--source include/wait_condition.inc


--echo ############################################################
--echo # 6. Clean up.
--let $rpl_connection_name= server4
--source include/rpl_connection.inc

SET SESSION sql_log_bin = 0;
call mtr.add_suppression("The source .* for channel 'ch1' has joined the group .*, and so added its entry into replication_asynchronous_connection_failover table.");
call mtr.add_suppression("The master's UUID has changed, although this should not happen unless you have changed it manually.");
call mtr.add_suppression("The group .* for the channel .* has been removed, and so removed its entry from replication_asynchronous_connection_failover_managed and all the group members from replication_asynchronous_connection_failover table.");
call mtr.add_suppression("The group .* for the channel .* has been added, and so added its entry in replication_asynchronous_connection_failover_managed and source to replication_asynchronous_connection_failover table.");
SET SESSION sql_log_bin = 1;

--let $rpl_channel_name='ch1'
--source include/stop_slave.inc

--let $rpl_reset_slave_all= 1
--let $rpl_multi_source= 1
--source include/rpl_reset_slave.inc
--let $rpl_channel_name=
--let $rpl_reset_slave_all=
--let $rpl_multi_source=

--replace_result $group_replication_group_name GROUP
--eval SELECT asynchronous_connection_failover_delete_managed('ch1', '$group_replication_group_name')

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--source include/stop_group_replication.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/stop_group_replication.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--source include/stop_group_replication.inc

--source include/group_replication_end.inc
