################################################################################
# === Purpose ===
# This test validates that primary server should error out and leave the group
# when there is a delayed_view_change processing failure during second attempt.
#
# === Implementation ===
# 00. The test requires three servers: server1, 2 and 3
# 01. Boot start server1
# 02. Start server2 and set the necessary debug point
#     required for the simulation
# 03. Execute a transaction on primary. This transaction
#     shall wait before sending transaction prepare ack
#     message on server2
# 04. Wait for the transaction to reach the debug sync point
#     on server2
# 05. Start server3
# 06. Continue the transaction on server2
# 07. Reap the transaction server1
# 08. Verify that server1 left the group
# 09. Cleaning up
################################################################################

--source include/have_debug_sync.inc
--source include/big_test.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_group_replication_single_primary_mode=1
--let $rpl_server_count= 3
--source include/group_replication.inc

--echo
--echo ############################################################
--echo # 01. Boot start server1
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SET SESSION sql_log_bin = 0;
call mtr.add_suppression("This member was unable to log the View_change_log_event into the binary log, hence it will leave the group.*");
call mtr.add_suppression("Error at event handling! Got error: 1.");
call mtr.add_suppression("Fatal error during execution on the Applier process of Group Replication. The server will now leave the group.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
SET SESSION sql_log_bin = 1;

--source include/start_and_bootstrap_group_replication.inc

--let $member1_uuid= `SELECT @@GLOBAL.server_uuid`

--echo
--echo ############################################################
--echo # 02. Start server2 and set the necessary debug point
--echo #     required for the simulation
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--let $sysvars_to_save = [ "GLOBAL.group_replication_member_weight" ]
--source include/save_sysvars.inc
SET GLOBAL group_replication_member_weight= 70;

--source include/start_group_replication.inc

SET @@GLOBAL.DEBUG= '+d,group_replication_wait_before_message_send_after_applier_prepare';

--echo
--echo ############################################################
--echo # 03. Execute a transaction on primary. This transaction
--echo #     shall wait before sending transaction prepare ack
--echo #     message on server2
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SET @@GLOBAL.DEBUG= '+d,simulate_delayed_view_change_resume_error';
--send CREATE TABLE test.t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB

--echo
--echo ############################################################
--echo # 04. Wait for the transaction to reach the debug sync point
--echo #     on server2
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
SET DEBUG_SYNC= "now WAIT_FOR signal.after_before_message_send_after_applier_prepare_waiting";

--echo
--echo ############################################################
--echo # 05. Start server3
--let $rpl_connection_name= server3
--source include/rpl_connection.inc
# Supress log errors since they are expected
SET SESSION sql_log_bin = 0;
call mtr.add_suppression("There was an error when connecting to the donor server.*");
call mtr.add_suppression("For details please check performance_schema.replication_connection_status table and error log messages of Slave I/O for channel group_replication_recovery.");
SET SESSION sql_log_bin= 1;

--let $sysvars_to_save = [ "GLOBAL.group_replication_recovery_reconnect_interval" ]
--source include/save_sysvars.inc
SET GLOBAL group_replication_recovery_reconnect_interval= 1;

--let $group_replication_start_member_state= RECOVERING
--source include/start_group_replication.inc

--echo
--echo ############################################################
--echo # 06. Continue the transaction on server2
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
SET @@GLOBAL.DEBUG= '-d,group_replication_wait_before_message_send_after_applier_prepare';
SET DEBUG_SYNC= 'now SIGNAL signal.after_before_message_send_after_applier_prepare_continue';
SET DEBUG_SYNC= 'RESET';

--echo
--echo ############################################################
--echo # 07. Reap the transaction server1
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--reap

--let $group_replication_member_state = ERROR
--source include/gr_wait_for_member_state.inc

--echo
--echo ############################################################
--echo # 08. Verify that server1 left the group
--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $group_replication_number_of_members = 2
--source include/gr_wait_for_number_of_members.inc
--let $assert_text = Server 1 left group
--let $assert_cond = COUNT(*) = 0 FROM performance_schema.replication_group_members WHERE MEMBER_ID = "$member1_uuid"
--source include/assert.inc

--echo ############################################################
--echo # 09. Cleaning up
--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--let $group_replication_member_state = ONLINE
--source include/gr_wait_for_member_state.inc

--source include/restore_sysvars.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

SET @@GLOBAL.DEBUG= '-d,simulate_delayed_view_change_resume_error';
--source include/stop_group_replication.inc
--source include/start_group_replication.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
DROP TABLE t1;

--source include/restore_sysvars.inc

--source include/group_replication_end.inc
