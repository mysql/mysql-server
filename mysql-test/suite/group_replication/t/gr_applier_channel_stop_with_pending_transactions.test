################################################################################
# Test to check that
# R1. Stopping the applier blocks while there are pending transactions in
#     the GR hooks on that channel.
# R2. Once those pending transactions exit the GR hook, the action of stopping
#     the applier is unblocked and can complete.
#
# Test:
# 0. The test requires two servers: M1 and M2.
# 1. With both the members ONLINE. On M1 create a table
# 2. Set a DEBUG point so transactions hang at the before commit hook on M2
#    Execute a transaction on M1
# 3. Try to stop the GR applier thread on M2, it should block.
# 4. Signal to continue_commit. The stop shall continue.
# 5. Clean up.
################################################################################

# Setup a two server Group.
--source include/have_debug_sync.inc
--source ../inc/have_group_replication_plugin.inc
--source ../inc/group_replication.inc

--echo
--echo # 1. With both the members ONLINE. On M1 create a table

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

CREATE TABLE test.t1 (a INT PRIMARY KEY);

--source include/rpl_sync.inc

--echo
--echo # 2. Set a DEBUG point so transactions hang at the before commit hook on M2
--echo #    Execute a transaction on M1

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SET @debug_save= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG='+d,group_replication_before_commit_hook_wait';

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

# do an insert that will block on M2
INSERT INTO t1 VALUES (1);

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

# Ensuring that the insert actually hangs at the before commit hook.
--let $wait_condition=SELECT COUNT(*)=1 FROM INFORMATION_SCHEMA.PROCESSLIST WHERE State = 'debug sync point: now'
--source include/wait_condition.inc

--echo
--echo # 3. Try to stop the GR applier thread on M2, it should block.

--send STOP SLAVE SQL_THREAD FOR CHANNEL "group_replication_applier";

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.threads WHERE PROCESSLIST_STATE = 'Killing slave' AND PROCESSLIST_INFO = 'STOP SLAVE SQL_THREAD FOR CHANNEL "group_replication_applier"'
--source include/wait_condition.inc

--echo
--echo # 4. Signal to continue_commit. The stop shall continue.

# give it an extra second to block
--sleep 1

SET DEBUG_SYNC='now SIGNAL continue_commit';
SET @@GLOBAL.DEBUG= @debug_save;

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--reap

--let $wait_condition= SELECT service_state="OFF" FROM performance_schema.replication_applier_status WHERE channel_name="group_replication_applier"
--source include/wait_condition.inc

--echo
--echo # 5. Cleanup

--source ../inc/gr_start_applier_sql_thread.inc

DROP TABLE t1;

--source ../inc/group_replication_end.inc
