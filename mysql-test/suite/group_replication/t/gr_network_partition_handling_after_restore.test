################################################################################
# Verify that when a member is blocked on a minority and waiting on a blocked
# query, group replication will wait but take no action if the group is restored
# Steps:
#   0) The test requires three servers: M1, M2 and M3.
#   1) Create a group with 3 members.
#   2) Create a minority situation with only 1 member alive: M1
#      Assert M2 and M3 are unreachable
#   3) Execute a query on M1 that will block
#   4) Force a group with only M1.
#      The query should be executed successfully.
#   5) After 150 seconds the member should still be ONLINE.
#   6) Clean up.
################################################################################
# Don't test this under valgrind, memory leaks will occur

# We set group_replication_unreachable_majority_timeout=150 in this test, so
# that timeout is bigger than the timeout of the force_members, but with debug
# build again this timeout will vary and would be hard to predict, so we will
# avoid debug build for this testcase.
--source include/have_nodebug.inc
--source include/not_valgrind.inc
--source include/big_test.inc
--source include/force_restart.inc
--source include/have_group_replication_plugin.inc

--echo #
--echo # 1. Create a group with 3 members
--echo #    Extract each server uuid
--echo #    Create a table on it.
--echo #

--let $rpl_server_count= 3
--source include/group_replication.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $member1_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)
--let $local_address_server1= `SELECT @@GLOBAL.group_replication_local_address`

--let $saved_unr_timeout= `SELECT @@GLOBAL.group_replication_unreachable_majority_timeout`
SET @@GLOBAL.group_replication_unreachable_majority_timeout= 150;

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--let $member2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--let $member3_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
--source include/rpl_sync.inc

--echo #
--echo # 2. Crash server 2 and server 3
--echo # Check they are marked as unreachable
--echo #
# We do kill the servers, using shutdown_server 0, and then MTR will
# follow the expect file and restart the server, but we do not wait
# for the server restart.
# Since the servers loose its GCS configuration they will not rejoin
# the group.

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.2.expect
--shutdown_server 0
--source include/wait_until_disconnected.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.3.expect
--shutdown_server 0
--source include/wait_until_disconnected.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $group_replication_member_state= UNREACHABLE
--let $group_replication_member_id= $member2_uuid
--source include/gr_wait_for_member_state.inc

--let $group_replication_member_state= UNREACHABLE
--let $group_replication_member_id= $member3_uuid
--source include/gr_wait_for_member_state.inc

--let $group_replication_member_id= $member1_uuid

--echo #
--echo # 3. Execute a query that will block
--echo #

--send INSERT INTO t1 VALUES (2)

#Sleep 2 seconds for the query to block
--sleep 2

--echo #
--echo # 4. Force a group with only M1
--echo #    The blocked transaction should commit successfully
--echo #

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

--disable_query_log
--eval SET GLOBAL group_replication_force_members= "$local_address_server1"
--enable_query_log

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--error 0
--reap

--echo # The server's super_read_only mode should be disabled
--let $assert_text= The super_read_only mode should be 0.
--let $assert_cond= "[SELECT @@GLOBAL.super_read_only]" = 0;
--source include/assert.inc

--echo #
--echo # 5. After 150 seconds everything is still fine
--echo #

--sleep 150

--let $group_replication_member_state= ONLINE
--source include/gr_wait_for_member_state.inc

--echo #
--echo # 6. Clean up.
--echo #

--source include/stop_group_replication.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

DROP TABLE t1;

--disable_query_log
--eval SET @@GLOBAL.group_replication_unreachable_majority_timeout= $saved_unr_timeout
--enable_query_log

set session sql_log_bin=0;
call mtr.add_suppression("The member lost contact with a majority of the members in the group. Until the network is restored.*");
call mtr.add_suppression("The member resumed contact with a majority of the members in the group.*");
set session sql_log_bin=1;

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--let $rpl_server_number= 2
--source include/rpl_reconnect.inc

DROP TABLE t1;

--let $rpl_connection_name= server_3
--source include/rpl_connection.inc

--let $rpl_server_number= 3
--source include/rpl_reconnect.inc

DROP TABLE t1;

--source include/group_replication_end.inc
