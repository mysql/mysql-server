################################################################################
# This test verifies that the recovery is protected by the server super read
# mode when the a member auto joins a group during server start.
#
# Test:
#   0) The test requires two servers: M1 and M2.
#   1) Bootstrap start a group on M1. Add some data on M1. Start GR on M2.
#   2) Stop GR on M2 and then stop applier thread on M1.
#   3) Restart M2 with auto start. Recovery is stuck as M1's applier is stopped.
#   4) Verify that while stuck in recovery, M2 does not accept queries.
#   5) Unblock recovery by starting the applier thread on M1. Check all is fine.
#   6) Clean up.
################################################################################

--source include/big_test.inc
--let $group_replication_group_name= f68d2bd0-8964-11e5-a837-0800200c9a66
--source include/have_group_replication_plugin.inc
--source include/force_restart.inc
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc

--echo #
--echo # Start the member 1 and 2 and add some data
--echo #

--connection server1

--source include/start_and_bootstrap_group_replication.inc

CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);

--connection server2

--source include/start_group_replication.inc
--source include/stop_group_replication.inc

--connection server1

--echo #
--echo # Stop the applier on server 1 to block recovery on server 2
--echo #
STOP SLAVE SQL_THREAD FOR CHANNEL "group_replication_applier";

--echo #
--echo # On server 2 restart the server. Group replication should start at boot
--echo #

--connection server2

--let $allow_rpl_inited=1
--let $_group_replication_local_address= `SELECT @@GLOBAL.group_replication_local_address`
--let $_group_replication_group_seeds= `SELECT @@GLOBAL.group_replication_group_seeds`
--let $restart_parameters=restart:--group_replication_local_address=$_group_replication_local_address --group_replication_group_seeds=$_group_replication_group_seeds --group_replication_start_on_boot=1 --group-replication-group-name=$group_replication_group_name
--replace_result $_group_replication_local_address GROUP_REPLICATION_LOCAL_ADDRESS $_group_replication_group_seeds GROUP_REPLICATION_GROUP_SEEDS
--source include/restart_mysqld.inc

# renable connection
--let $rpl_connection_name= server_2
--source include/rpl_connection.inc
--enable_reconnect

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--enable_reconnect

--let $group_replication_member_state= RECOVERING
--source include/gr_wait_for_member_state.inc

--echo #
--echo # On server 2 after restart, recovery should be stuck
--echo # Query execution is not allowed
--echo #

--error ER_OPTION_PREVENTS_STATEMENT
INSERT INTO t1 VALUES (2);

--let $assert_text= On the recovered member, the table should exist and have 1 elements;
--let $assert_cond= [select count(*) from t1] = 1;
--source include/assert.inc


--echo #
--echo # Unblock recovery by starting the applier on server 1
--echo #

--connection server1

START SLAVE SQL_THREAD FOR CHANNEL "group_replication_applier";

--connection server2

--let $group_replication_member_state= ONLINE
--source include/gr_wait_for_member_state.inc

INSERT INTO t1 VALUES (2);

--connection server1

--let $wait_condition= SELECT count(*)=2 FROM t1;
--source include/wait_condition.inc

--echo #
--echo # Cleanup
--echo #

--connection server2

DROP TABLE t1;

--let $restart_parameters=

--source include/group_replication_end.inc
