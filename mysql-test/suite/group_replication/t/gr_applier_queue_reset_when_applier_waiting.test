################################################################################
# Validate that COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE is reset to 0
# when applier is free.
#
# Steps:
# 0. The test requires three servers.
# 1. Start 2 servers.
#    Only setup recovery_user with GRANT REPLICATION SLAVE on server2
#    for force server3 to recover from it.
# 2. Block applier on server 2 to force the delayed
#    View_change_log_event log to binary log.
# 3. Start Group Replication on server3.
#    It will recover from server2 and will stay on
#    RECOVERING state waiting for View_change_log_event log.
# 4. Execute 2 transactions on server1 and 2 while server3
#    is on RECOVERING.
# 5. INSERT(1) will only be applied after member is ONLINE.
#    INSERT(2) will only be applied after member is ONLINE.
# 6. Resume applier on server2.
#    Server3 state will change to ONLINE.
# 7. Assert COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE is 0 on all servers.
# 8. Clean up.
################################################################################

--source include/big_test.inc
--source include/have_debug_sync.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_server_count= 3
--source include/group_replication.inc

--let $recovery_user= recovery_user
--let $recovery_password= recovery_password

--echo
--echo # 1. Start 2 servers.
--echo #    Only setup recovery_user with GRANT REPLICATION SLAVE on server2
--echo #    for force server3 to recover from it.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

SET SESSION sql_log_bin= 0;
--eval CREATE USER "$recovery_user" IDENTIFIED BY "$recovery_password"
--eval GRANT GROUP_REPLICATION_STREAM ON *.* TO "$recovery_user"
FLUSH PRIVILEGES;
SET SESSION sql_log_bin= 1;

CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (0);

--source include/start_and_bootstrap_group_replication.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SET SESSION sql_log_bin= 0;
--eval CREATE USER "$recovery_user" IDENTIFIED BY "$recovery_password"
--eval GRANT REPLICATION SLAVE ON *.* TO "$recovery_user"
--eval GRANT GROUP_REPLICATION_STREAM ON *.* TO "$recovery_user"
FLUSH PRIVILEGES;
SET SESSION sql_log_bin= 1;

--source include/start_group_replication.inc

--echo
--echo # 2. Block applier on server 2 to force the delayed
--echo #    View_change_log_event log to binary log.

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SET @@GLOBAL.DEBUG='+d,block_applier_updates';

--echo
--echo # 3. Start Group Replication on server3.
--echo #    It will recover from server2 and will stay on
--echo #    RECOVERING state waiting for View_change_log_event log.

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

SET SESSION sql_log_bin= 0;
--eval CREATE USER "$recovery_user" IDENTIFIED BY "$recovery_password"
--eval GRANT GROUP_REPLICATION_STREAM ON *.* TO "$recovery_user"
FLUSH PRIVILEGES;
SET SESSION sql_log_bin= 1;

SET SESSION sql_log_bin= 0;
call mtr.add_suppression("There was an error when connecting to the donor server.*");
call mtr.add_suppression("For details please check performance_schema.replication_connection_status table and error log messages of Slave I/O for channel group_replication_recovery.");
call mtr.add_suppression("Slave I/O for channel 'group_replication_recovery': Master command COM_REGISTER_SLAVE failed*");
call mtr.add_suppression("Slave I/O thread couldn't register on master*");
SET SESSION sql_log_bin= 1;

--disable_warnings
--eval CHANGE REPLICATION SOURCE TO SOURCE_USER= '$recovery_user', SOURCE_PASSWORD= '$recovery_password' FOR CHANNEL 'group_replication_recovery'
--enable_warnings

--let $group_replication_start_member_state= RECOVERING
--source include/start_group_replication.inc

--echo
--echo # 4. Execute 2 transactions on server1 and 2 while server3
--echo #    is on RECOVERING.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
INSERT INTO t1 VALUES (1);

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc
--send INSERT INTO t1 VALUES (2)

--echo
--echo # 5. INSERT(1) will only be applied after member is ONLINE.
--echo #    INSERT(2) will only be applied after member is ONLINE.

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--let $wait_condition= SELECT COUNT(*)=1 FROM information_schema.tables WHERE TABLE_SCHEMA="test" AND TABLE_NAME="t1"
--source include/wait_condition.inc

--let $assert_text= value of 1 is not received.
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE c1 = 1, count, 1] = 0
--source include/assert.inc

--let $assert_text= value of 2 is not received.
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE c1 = 2, count, 1] = 0
--source include/assert.inc

--echo
--echo # 6. Resume applier on server2.
--echo #    Server3 state will change to ONLINE.

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SET DEBUG_SYNC = "now WAIT_FOR applier_read_blocked";
SET @@GLOBAL.DEBUG='-d,block_applier_updates';
SET DEBUG_SYNC = "now SIGNAL resume_applier_read";

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc
--reap

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--let $group_replication_member_state= ONLINE
--source include/gr_wait_for_member_state.inc

--source include/rpl_sync.inc

--echo
--echo # 7. Assert COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE is 0 on all servers.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $wait_condition= SELECT COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE = 0 FROM performance_schema.replication_group_member_stats WHERE member_id in (SELECT @@server_uuid)
--source include/wait_condition.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--let $wait_condition= SELECT COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE = 0 FROM performance_schema.replication_group_member_stats WHERE member_id in (SELECT @@server_uuid)
--source include/wait_condition.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--let $wait_condition= SELECT COUNT_TRANSACTIONS_REMOTE_IN_APPLIER_QUEUE = 0 FROM performance_schema.replication_group_member_stats WHERE member_id in (SELECT @@server_uuid)
--source include/wait_condition.inc

--let $diff_tables= server1:test.t1, server2:test.t1, server3:test.t1
--source include/diff_tables.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $keep_gtid_events= 1
--source include/show_binlog_events.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--let $keep_gtid_events= 1
--source include/show_binlog_events.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--let $keep_gtid_events= 1
--source include/show_binlog_events.inc

--echo
--echo # 8. Clean up.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

SET SESSION sql_log_bin= 0;
--eval DROP USER "$recovery_user"
SET SESSION sql_log_bin= 1;

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SET DEBUG_SYNC= 'RESET';
DROP TABLE t1;

SET SESSION sql_log_bin= 0;
--eval DROP USER "$recovery_user"
SET SESSION sql_log_bin= 1;

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

SET SESSION sql_log_bin= 0;
--eval DROP USER "$recovery_user"
SET SESSION sql_log_bin= 1;

--source include/group_replication_end.inc
