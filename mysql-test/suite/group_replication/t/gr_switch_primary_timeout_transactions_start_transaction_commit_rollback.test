################################################################################
# This test validates UDF group_replication_set_as_primary and confirms
# that connection running a transactions using START TRANSACTION that did not
# reach commit stage is disconnected when UDF group_replication_set_as_primary
# is executed.
# This tests also validates START TRANSACTION behavior for read-only
# transactions.
# UDF group_replication_set_as_primary runs successfully and primary is changed.
#
# Test:
# 0. The test requires two servers: M1 and M2.
# 1. Setup group of 2 servers, M1(primary) and M2(secondary).
# 2. Start a write-transaction with statement "START TRANSACTION".
#    Block it before execution during commit.
#    Execute primary change from server2(secondary).
# 3. Unblock transactions on server1.
#    Transaction should fail it did not reach commit so it was killed
#    and client connection dropped.
# 4. Assert primary changed.
#    Assert data is not present on M1 and M2.
# 5. Block all commits on server2 and initiate a transaction.
#    Begin change of primary from server2(primary).
# 6. Assert primary changed.
#    Assert data is not present on M1 and M2.
# 7. Unblock transactions on server2.
#    Transaction should fail it was not committing so it was killed
#    and client connection dropped.
# 8. Start a read-transaction with statement "START TRANSACTION".
#    Block it before execution during commit.
#    Execute primary change from server2(secondary).
# 9. Assert primary changed.
# 10. Unblock transactions on server1.
#    Transaction should fail it did not reach commit so it was killed
#    and client connection dropped.
# 11. Start a read-transaction with statement "START TRANSACTION".
#    Block it before execution during commit.
#    Execute primary change from server2(primary).
# 12. Assert primary changed.
# 13. Unblock transactions on server2.
#    Transaction should fail it did not reach commit so it was killed
#    and client connection dropped.
# 14. Cleanup.
################################################################################

--source include/have_debug_sync.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_group_replication_single_primary_mode=1
--source include/group_replication.inc

--echo
--echo # 1. Setup group of 2 servers, M1(primary) and M2(secondary).

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $server1_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--source include/start_and_bootstrap_group_replication.inc

CREATE TABLE t1(c1 int primary key);

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $server2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--source include/start_group_replication.inc

--echo
--echo # 2. Start a write-transaction with statement "START TRANSACTION".
--echo #    Block it before execution during commit.
--echo #    Execute primary change from server2(secondary).

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

START TRANSACTION;
INSERT INTO t1 values(1);
SET DEBUG_SYNC="after_implicit_pre_commit SIGNAL reached_after_implicit_pre_commit WAIT_FOR continue_from_after_implicit_pre_commit";
--send COMMIT;

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

SET DEBUG_SYNC= "now WAIT_FOR reached_after_implicit_pre_commit";

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--replace_result $server2_uuid SERVER2_UUID
--eval SELECT group_replication_set_as_primary("$server2_uuid", 0);

--echo
--echo # 3. Assert primary changed.
--echo #    Assert data is not present on M1 and M2.

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--source include/gr_assert_primary_member.inc

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

--source include/gr_assert_secondary_member.inc

--let $assert_text= 'There is no value 1 in table t1.'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 1, count, 1] = 0
--source include/assert.inc

--let $diff_tables= server_1:test.t1, server2:test.t1
--source include/diff_tables.inc

--echo
--echo # 4. Unblock transactions on server1.
--echo #    Transaction should fail it did not reach commit so it was killed
--echo #    and client connection dropped.

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

SET DEBUG_SYNC= "now SIGNAL continue_from_after_implicit_pre_commit";

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--error CR_SERVER_LOST
--reap

--enable_reconnect
--source include/wait_until_connected_again.inc
--disable_reconnect

SET DEBUG_SYNC= 'RESET';

--echo
--echo # 5. Block all commits on server2 and initiate a transaction.
--echo #    Begin change of primary from server2(primary).

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SET @@GLOBAL.DEBUG= '+d,trans_delegate_before_commit_before_before_call_observers';

START TRANSACTION;
INSERT INTO t1 values(1);
--send COMMIT;

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

SET DEBUG_SYNC= "now WAIT_FOR signal.trans_delegate_before_commit_before_before_call_observers_reached";
SET @@GLOBAL.DEBUG= '-d,trans_delegate_before_commit_before_before_call_observers';

--replace_result $server1_uuid SERVER1_UUID
--eval SELECT group_replication_set_as_primary("$server1_uuid", 2);

--echo
--echo # 6. Assert primary changed.
--echo #    Assert data is not present on M1 and M2.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/gr_assert_primary_member.inc

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--source include/gr_assert_secondary_member.inc

--let $assert_text= 'There is no value 1 in table t1.'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 1, count, 1] = 0
--source include/assert.inc

--let $diff_tables= server1:test.t1, server_2:test.t1
--source include/diff_tables.inc

--echo
--echo # 7. Unblock transactions on server2.
--echo #    Transaction should fail it was not committing so it was killed
--echo #    and client connection dropped.

SET DEBUG_SYNC= "now SIGNAL signal.trans_delegate_before_commit_before_before_call_observers_waiting";

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--error CR_SERVER_LOST
--reap

--enable_reconnect
--source include/wait_until_connected_again.inc
--disable_reconnect

SET DEBUG_SYNC= 'RESET';

--echo
--echo # 8. Start a read-transaction with statement "START TRANSACTION".
--echo #    Block it before execution during commit.
--echo #    Execute primary change from server2(secondary).

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

START TRANSACTION;
SELECT * FROM t1;
SET DEBUG_SYNC="after_implicit_pre_commit SIGNAL reached_after_implicit_pre_commit WAIT_FOR continue_from_after_implicit_pre_commit";
--send COMMIT;

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

SET DEBUG_SYNC= "now WAIT_FOR reached_after_implicit_pre_commit";

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--replace_result $server2_uuid SERVER2_UUID
--eval SELECT group_replication_set_as_primary("$server2_uuid", 0);

--echo
--echo # 9. Assert primary changed.

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--source include/gr_assert_primary_member.inc

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

--source include/gr_assert_secondary_member.inc

--echo
--echo # 10. Unblock transactions on server1.
--echo #    Transaction should fail it did not reach commit so it was killed
--echo #    and client connection dropped.

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

SET DEBUG_SYNC= "now SIGNAL continue_from_after_implicit_pre_commit";

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--error CR_SERVER_LOST
--reap

--enable_reconnect
--source include/wait_until_connected_again.inc
--disable_reconnect

SET DEBUG_SYNC= 'RESET';

--echo
--echo # 11. Start a read-transaction with statement "START TRANSACTION".
--echo #    Block it before execution during commit.
--echo #    Execute primary change from server2(primary).

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

START TRANSACTION;
SELECT * FROM t1;
SET DEBUG_SYNC="after_implicit_pre_commit SIGNAL reached_after_implicit_pre_commit WAIT_FOR continue_from_after_implicit_pre_commit";
--send COMMIT;

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

SET DEBUG_SYNC= "now WAIT_FOR reached_after_implicit_pre_commit";

--replace_result $server1_uuid SERVER1_UUID
--eval SELECT group_replication_set_as_primary("$server1_uuid", 2);

--echo
--echo # 12. Assert primary changed.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/gr_assert_primary_member.inc

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--source include/gr_assert_secondary_member.inc

--echo
--echo # 13. Unblock transactions on server2.
--echo #    Transaction should fail it did not reach commit so it was killed
--echo #    and client connection dropped.

SET DEBUG_SYNC= "now SIGNAL continue_from_after_implicit_pre_commit";

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--error CR_SERVER_LOST
--reap

--enable_reconnect
--source include/wait_until_connected_again.inc
--disable_reconnect

SET DEBUG_SYNC= 'RESET';

--echo
--echo # 14. Cleanup.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

DROP TABLE t1;
--source include/rpl_sync.inc

--source include/group_replication_end.inc
