###############################################################################
# Perform some tests about getting/setting communication_protocol when there
# are different member states in the group.
#
# This test uses 3 servers.
#
# Test:
#  1. Start 3 servers and add them into group replication group.
#  2. Check that it is *not* possible to modify the communication_protocol
#     value via an ONLINE member when some other member is in RECOVERING state.
#  3. Check that it is *not* possible to modify the communication_protocol
#     value via a RECOVERING member.
#  4. Check that it is possible to query the communication_protocol value via
#     an ONLINE member when some other members are in RECOVERING state.
#  5. Check that it is *not* possible to query the communication_protocol
#     value via a RECOVERING member.
#  6. Check that it is *not* possible to modify the communication_protocol
#     value via an ONLINE member when some member is in UNREACHABLE state.
#  7. Check that it is possible to query the communication_protocol value via
#     an ONLINE member when a minority of members are UNREACHABLE.
#  8. Check that it is *not* possible to query the communication_protocol
#     value via an ONLINE member when a majority of members are UNREACHABLE.
################################################################################
# This test crashes servers, thence we skip it on valgrind.
--source include/not_valgrind.inc
--source include/big_test.inc
--source include/force_restart.inc
--source include/have_group_replication_plugin.inc
--let $rpl_server_count= 3
--source include/group_replication.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
# Will be used to recover server2 later on.
--let $local_address_server2= `SELECT @@GLOBAL.group_replication_local_address`
--let $group_seeds_server2= `SELECT @@GLOBAL.group_replication_group_seeds`

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
# Will be used to recover server3 later on.
--let $local_address_server3= `SELECT @@GLOBAL.group_replication_local_address`
--let $group_seeds_server3= `SELECT @@GLOBAL.group_replication_group_seeds`

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
# Will be used to hide the version of the server later on.
--let $mysql_version= `SELECT SUBSTRING_INDEX(VERSION(), '-', 1)`

--echo ###############################################################################
--echo #  2. Check that it is *not* possible to modify the communication_protocol value via an ONLINE member when some other member is in RECOVERING state.
# Stop GR on server2.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/stop_group_replication.inc

# Stop slave SQL thread on server1, so that server2 stays RECOVERING.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--source include/gr_stop_applier_sql_thread.inc

# Start GR on server2, it stays RECOVERING.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--let $group_replication_start_member_state= RECOVERING
--source include/start_group_replication.inc

# We cannot modify the communication_protocol value on server1 since server2 is RECOVERING.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_set_communication_protocol("5.7.14");

--echo ###############################################################################
--echo #  3. Check that it is *not* possible to modify the communication_protocol value via a RECOVERING member.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_set_communication_protocol("5.7.14");

--echo ###############################################################################
--echo #  4. Check that it is possible to query the communication_protocol value via an ONLINE member when some other members are in RECOVERING state.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SELECT group_replication_get_communication_protocol();

--echo ###############################################################################
--echo #  5. Check that it is *not* possible to query the communication_protocol value via a RECOVERING member.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_get_communication_protocol();

# Start slave SQL thread on server1, so that server2 becomes ONLINE.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--source include/gr_start_applier_sql_thread.inc
# Wait until server2 becomes ONLINE
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--echo Wait until server2 becomes ONLINE
--let $group_replication_member_state= ONLINE
--source include/gr_wait_for_member_state.inc

--echo ###############################################################################
--echo #  6. Check that it is *not* possible to modify the communication_protocol value via an ONLINE member when some member is in UNREACHABLE state.
# Crash server2
#
# We kill the server, using shutdown_server 0, and then MTR will follow the
# expect file and restart the server. We wait for the server to start.
#
# However, since the server loses its GCS configuration they will not rejoin
# the group.
--let $member2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--enable_reconnect
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.2.expect
--shutdown_server 0
--source include/wait_until_disconnected.inc

--source include/wait_until_connected_again.inc
--disable_reconnect

# Wait for the member state be unreachable.
--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
--let $group_replication_member_state= UNREACHABLE
--let $group_replication_member_id= $member2_uuid
--source include/gr_wait_for_member_state.inc

--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_set_communication_protocol("5.7.14");

--echo ###############################################################################
--echo #  7. Check that it is possible to query the communication_protocol value via an ONLINE member when a minority of members are UNREACHABLE.
SELECT group_replication_get_communication_protocol();

--echo ###############################################################################
--echo #  8. Check that it is *not* possible to query the communication_protocol value via an ONLINE member when a majority of members are UNREACHABLE.
# Crash server3
#
# We kill the server, using shutdown_server 0, and then MTR will follow the
# expect file and restart the server. We wait for the server to start.
#
# However, since the server loses its GCS configuration they will not rejoin
# the group.
--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--let $member3_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--enable_reconnect
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.3.expect
--shutdown_server 0
--source include/wait_until_disconnected.inc

--source include/wait_until_connected_again.inc
--disable_reconnect

# Wait for the member state be unreachable.
--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
--let $group_replication_member_state= UNREACHABLE
--let $group_replication_member_id= $member3_uuid
--source include/gr_wait_for_member_state.inc

--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_get_communication_protocol();

--echo ###############################################################################
--echo # 9. Cleanup
# We have lost majority, so forcefully remove server2 and server3 from the membership.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $local_address_server1= `SELECT @@GLOBAL.group_replication_local_address`
--disable_query_log
--eval SET GLOBAL group_replication_force_members= "$local_address_server1"
--enable_query_log

# Add server2 back to the group.
--let $rpl_server_number= 2
--source include/rpl_reconnect.inc

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--replace_result $group_seeds_server2 GROUP_SEEDS_SERVER2
--eval SET @@global.group_replication_group_seeds="$group_seeds_server2"
--replace_result $local_address_server2 LOCAL_ADDRESS_SERVER2
--eval SET @@global.group_replication_local_address="$local_address_server2"
--replace_result $group_replication_group_name GROUP_REPLICATION_GROUP_NAME
--eval SET @@global.group_replication_group_name="$group_replication_group_name"

--source include/start_group_replication.inc

# Add server3 back to the group.
--let $rpl_server_number= 3
--source include/rpl_reconnect.inc

--let $rpl_connection_name= server_3
--source include/rpl_connection.inc

--replace_result $group_seeds_server3 GROUP_SEEDS_SERVER3
--eval SET @@global.group_replication_group_seeds="$group_seeds_server3"
--replace_result $local_address_server3 LOCAL_ADDRESS_SERVER3
--eval SET @@global.group_replication_local_address="$local_address_server3"
--replace_result $group_replication_group_name GROUP_REPLICATION_GROUP_NAME
--eval SET @@global.group_replication_group_name="$group_replication_group_name"

--source include/start_group_replication.inc

# Validate that there are 3 servers in the group.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $group_replication_number_of_members= 3
--source include/gr_wait_for_number_of_members.inc

--source include/group_replication_end.inc
