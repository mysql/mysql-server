#
# Validate that replication channels configured with SSL work
# properly together with MySQL GCS with SSL enabled.
#
# Steps:
#   1. Setup the members with a recovery user that does
#      require SSL.
#   2. Start Group Replication on both members and assert that
#      GCS SSL is enabled.
#   3. Stop and start Group Replication on member 2 to stress
#      SSL destroy and initialization procedures
#   4. Execute some transactions to validate that group is
#      properly working.
#   5. Clean up.
#
--source include/big_test.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc


--echo
--echo ############################################################
--echo # 1. Setup the members with a recovery user that does
--echo #    require SSL.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SET SESSION sql_log_bin=0;
CREATE USER 'rec_ssl_user'@'%' REQUIRE SSL;
GRANT replication slave ON *.* TO 'rec_ssl_user'@'%';
SET SESSION sql_log_bin=1;

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--disable_warnings
CHANGE MASTER TO MASTER_USER="rec_ssl_user" FOR CHANNEL "group_replication_recovery";
--enable_warnings


--echo
--echo ############################################################
--echo # 2. Start Group Replication on both members and assert that
--echo #    GCS SSL is enabled.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--source include/start_and_bootstrap_group_replication.inc

--let $grep_file= $MYSQLTEST_VARDIR/tmp/group_replication_recovery_ssl_and_ssl_mode.1.err
--let $grep_pattern= Group communication SSL configuration: group_replication_ssl_mode: "REQUIRED"
--let $grep_output= print_count
--source include/grep_pattern.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/start_group_replication.inc

--let $grep_file= $MYSQLTEST_VARDIR/tmp/group_replication_recovery_ssl_and_ssl_mode.2.err
--let $grep_pattern= Group communication SSL configuration: group_replication_ssl_mode: "REQUIRED"
--let $grep_output= print_count
--source include/grep_pattern.inc

--echo
--echo ############################################################
--echo # 3. Stop and start Group Replication on member 2 to stress
--echo #    SSL destroy and initialization procedures
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/stop_group_replication.inc
--source include/start_group_replication.inc

--let $grep_file= $MYSQLTEST_VARDIR/tmp/group_replication_recovery_ssl_and_ssl_mode.2.err
--let $grep_pattern= Group communication SSL configuration: group_replication_ssl_mode: "REQUIRED"
--let $grep_output= print_count
--source include/grep_pattern.inc


--echo
--echo ############################################################
--echo # 4. Execute some transactions to validate that group is
--echo #    properly working.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);
--source include/rpl_sync.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
INSERT INTO t1 VALUES (2);
--source include/rpl_sync.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $assert_text= 'There are 2 values on table t1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1, count, 1] = 2
--source include/assert.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--let $assert_text= 'There are 2 values on table t1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1, count, 1] = 2
--source include/assert.inc


--echo
--echo ############################################################
--echo # 5. Clean up.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
DROP TABLE t1;

SET SESSION sql_log_bin=0;
DROP USER 'rec_ssl_user';
SET SESSION sql_log_bin=1;

--source include/group_replication_end.inc
