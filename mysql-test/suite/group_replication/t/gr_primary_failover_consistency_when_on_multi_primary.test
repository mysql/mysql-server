########################################################################
#
# This test verifies that setting group_replication_consistency to
# BEFORE_ON_PRIMARY_FAILOVER on multi primary mode do not change
# statement execution behavior.
#
# Test:
#   0. This test requires two servers on single primary mode
#   1. Bootstrap group on server 1 and create table t1
#   2. Join server2 to group
#   3. Lock tables on server2
#   4. Add more data to table t1 on server1
#   5. Execute switch to multi primary
#   6. Wait for data added in step 4 to be recived on server2 and then
#      validate the old secondary is waiting on the application of its
#      replication backlog.
#   7. A read statement to old secondary will not be put on hold
#   8. Reap with success change to multi primary
#   9. Cleanup
#
########################################################################

--source include/have_group_replication_plugin.inc

--let $rpl_server_count= 2
--let $rpl_skip_group_replication_start= 1
--let $rpl_group_replication_single_primary_mode=1
--source include/group_replication.inc

--echo
--echo # 1. Bootstrap group on server 1 and create table t1

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/start_and_bootstrap_group_replication.inc

CREATE TABLE t1 (a INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;

INSERT INTO t1 VALUES (1);


--echo
--echo # 2. Join server2 to group

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--source include/start_group_replication.inc


--echo
--echo # 3. Lock tables on server2

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

LOCK TABLE t1 READ;


--echo
--echo # 4. Add more data to table t1 on server1

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

INSERT INTO t1 VALUES (2);


--echo
--echo # 5. Execute switch to multi primary

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--send SELECT group_replication_switch_to_multi_primary_mode()


--echo
--echo # 6. Wait for data added in step 4 to be recived on server2 and then
--echo #    validate the old secondary is waiting on the application of its
--echo #    replication backlog.

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--let $received_transaction_set= query_get_value(SELECT received_transaction_set FROM performance_schema.replication_connection_status WHERE channel_name="group_replication_applier", received_transaction_set, 1)
--let $assert_text= The second insert transaction is received on slave
--let $assert_cond= "$received_transaction_set" = "$group_replication_group_name:4-5"
--source include/assert.inc


--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.events_stages_current WHERE event_name LIKE "%Multi-primary Switch: applying buffered %"
--source include/wait_condition.inc


--echo
--echo # 7. A read statement to old secondary will not be put on hold

SET @@SESSION.group_replication_consistency= BEFORE_ON_PRIMARY_FAILOVER;
SELECT * FROM t1;
SET @@SESSION.group_replication_consistency= DEFAULT;

UNLOCK TABLES;


--echo
--echo # 8. Reap with success change to multi primary

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--reap


--echo
--echo # 9. Cleanup

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

DROP TABLE t1;

--let $rpl_group_replication_single_primary_mode=0
--let $rpl_group_replication_reset_persistent_vars=1
--source include/group_replication_end.inc
