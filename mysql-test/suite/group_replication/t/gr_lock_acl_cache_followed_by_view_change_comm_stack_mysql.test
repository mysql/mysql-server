###########################################################
#
#  This tests verifies that a new view will not be blocked, for a member
#  holding an ACL lock.
#
#  When group_replication_communication_stack is configured as MySQL the XCOM
#  connection will fail to authenticate and then retry.
#  The retry may happen in two ways:
#   1) internal XCOM retries, which does not cause differences on the server logs
#   2) auto-rejoin, which will log a extra View_change:
#
#  The tests confirm if group logged an extra view before asserting log events
#  to work on both ways.
#
#  Test:
#  0. The test requires three servers.
#  1. Deploy a group in single-primary mode with 2 members.
#  2. Hold a ACL statement, CREATE USER, on its propagation
#     to the group. The ACL_CACHE lock is acquired by the
#     ACL statement.
#  3. Add a 3rd member to the group.
#     BUG: the view install on server1 will be blocked by the
#          ACL statement.
#  4. Wait until the group has 3 members and then resume the
#     ACL statement.
#     server3 may be in RECOVERING state but it will be part of
#     the group.
#  5. Wait server3 to be ONLINE
#  6. An extra view can be generated when auto rejoin occurs,
#     so define event_sequence for assert_binlog_events.inc
#  7. Verify that all members data is equal.
#  8. Clean up.
###########################################################

--source include/big_test.inc
--source include/have_debug.inc
--source include/have_group_replication_mysql_communication_stack.inc
--source include/have_group_replication_plugin.inc
--let $rpl_group_replication_single_primary_mode=1
--let $rpl_skip_group_replication_start= 1
--let $rpl_server_count= 3
--source include/group_replication.inc

--let $vcle_seq= Gtid # Query/BEGIN # View_change # Query/COMMIT

--echo
--echo ############################################################
--echo # 1. Deploy a group in single-primary mode with 2 members.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/start_and_bootstrap_group_replication.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/start_group_replication.inc


--echo
--echo ############################################################
--echo # 2. Hold a ACL statement, CREATE USER, on its propagation
--echo #    to the group. The ACL_CACHE lock is acquired by the
--echo #    ACL statement.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

SET @debug_save= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG='+d,group_replication_pause_on_before_commit_hook';

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
--send CREATE USER 'user'

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $wait_condition=SELECT COUNT(*)=1 FROM INFORMATION_SCHEMA.PROCESSLIST WHERE User="root" AND State="waiting for handler commit" AND Info="CREATE USER 'user'@'%'"
--source include/wait_condition.inc

SET GLOBAL DEBUG= @debug_save;


--echo
--echo ############################################################
--echo # 3. Add a 3rd member to the group.
--echo #    BUG: the view install on server1 will be blocked by the
--echo #         ACL statement.
--let $rpl_connection_name= server3
--source include/rpl_connection.inc

SET SESSION sql_log_bin = 0;
call mtr.add_suppression("There was an error when connecting to the donor server. Please check that group_replication_recovery channel credentials.*");
call mtr.add_suppression("For details please check performance_schema.replication_connection_status table and error log messages of Slave I/O for channel group_replication_recovery.");
call mtr.add_suppression("Member was expelled from the group due to network failures, changing member status to ERROR.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
SET SESSION sql_log_bin = 1;

# ACL_CACHE lock hold on server1 is also also acquired by dump thread, which
# means that if server2 recovery channel connects to server1 it will fail and
# retry until the ACL_CACHE lock is released or server3 connects to server2.
--replace_result $group_replication_group_name GROUP_REPLICATION_GROUP_NAME
--eval SET GLOBAL group_replication_group_name= "$group_replication_group_name"
--source include/start_group_replication_command.inc


--echo
--echo ############################################################
--echo # 4. Wait until the group has 3 members and then resume the
--echo #    ACL statement.
--echo #    server3 may be in RECOVERING state but it will be part of
--echo #    the group.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $group_replication_number_of_members= 3
--source include/gr_wait_for_number_of_members.inc

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
--reap


--echo
--echo ############################################################
--echo # 5. Wait server3 to be ONLINE

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--let $group_replication_member_state = ONLINE
--source include/gr_wait_for_member_state.inc
--source include/rpl_sync.inc


--echo
--echo ############################################################
--echo # 6. An extra view can be generated when auto rejoin occurs,
--echo #    so define event_sequence for assert_binlog_events.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $gtid_with_extra_view=$group_replication_group_name:1-5
--let $gtid_executed=`SELECT @@GLOBAL.GTID_EXECUTED`

if ( $gtid_executed == $gtid_with_extra_view)
{
  --let $event_sequence= $vcle_seq # $vcle_seq # $vcle_seq # $vcle_seq # Gtid # !Q(CREATE.*)
}

if ( $gtid_executed != $gtid_with_extra_view)
{
  --let $event_sequence= $vcle_seq # $vcle_seq # $vcle_seq # Gtid # !Q(CREATE.*)
}

--echo
--echo ############################################################
--echo # 7. Verify that all members data is equal.

--let $dont_print_pattern= 1
--source include/assert_binlog_events.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

# previously defined event_sequence
--let $dont_print_pattern= 1
--source include/assert_binlog_events.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

# previously defined event_sequence
--let $dont_print_pattern= 1
--source include/assert_binlog_events.inc

--echo
--echo ############################################################
--echo # 8. Clean up.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
DROP USER 'user';

--source include/group_replication_end.inc
