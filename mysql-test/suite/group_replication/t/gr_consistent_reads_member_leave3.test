################################################################################
# Validate group_replication_consistency= 'AFTER' behaviour against member leaves,
# on the case on which the member that executes the transaction leaves the group.
#
# Test:
# 00. The test requires three servers: M1, M2 and M3.
# 01. Create a table on the group.
# 02. Make server3 block before send its prepare message. This
#     will allow us to deterministically to remove server1 from
#     the group while others are waiting for server3 acknowledge.
# 03. Execute T1 on server1.
# 04. Wait until T1 is prepared on server3.
# 05. Remove server1 from the group.
# 06. Wait until server1 is removed from the group.
#     Make server3 do send its prepare message.
# 07. Validate data.
# 08. Clean up.
################################################################################
--source include/big_test.inc
--source include/have_debug_sync.inc
--source include/have_group_replication_plugin.inc
--let $rpl_server_count= 3
--source include/group_replication.inc

--echo
--echo ############################################################
--echo # 01. Create a table on the group.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

SET SESSION sql_log_bin=0;
call mtr.add_suppression("Due to a plugin error, some transactions were unable to be certified and will now rollback.");
call mtr.add_suppression("Error while waiting for conflict detection procedure to finish on session .*");
call mtr.add_suppression("Run function 'before_commit' in plugin 'group_replication' failed");
SET SESSION sql_log_bin=1;

CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY);


--echo
--echo ############################################################
--echo # 02. Make server3 block before send its prepare message. This
--echo #     will allow us to deterministically to remove server1 from
--echo #     the group while others are waiting for server3 acknowledge.
--let $rpl_connection_name= server3
--source include/rpl_connection.inc
SET @@GLOBAL.DEBUG= '+d,group_replication_wait_before_message_send_after_applier_prepare';


--echo
--echo ############################################################
--echo # 03. Execute T1 on server1.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--send INSERT INTO t1 VALUES (1)


--echo
--echo ############################################################
--echo # 04. Wait until T1 is prepared on server3.
--let $rpl_connection_name= server3
--source include/rpl_connection.inc
# Wait for the debug sync to be reached.
SET DEBUG_SYNC= "now WAIT_FOR signal.after_before_message_send_after_applier_prepare_waiting";


--echo
--echo ############################################################
--echo # 05. Remove server1 from the group.
--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
--source include/stop_group_replication.inc


--echo
--echo ############################################################
--echo # 06. Wait until server1 is removed from the group.
--echo #     Make server3 do send its prepare message.
--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--let $group_replication_number_of_members= 2
--source include/gr_wait_for_number_of_members.inc

# Signal debug sync to continue.
SET DEBUG_SYNC= 'now SIGNAL signal.after_before_message_send_after_applier_prepare_continue';
SET @@GLOBAL.DEBUG= '-d,group_replication_wait_before_message_send_after_applier_prepare';


--echo
--echo ############################################################
--echo # 07. Validate data.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--error ER_RUN_HOOK_ERROR
--reap

--let $assert_text= 'There are no values in table t1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1, count, 1] = 0
--source include/assert.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--let $assert_text= 'There is 1 value in table t1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE c1=1, count, 1] = 1
--source include/assert.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--let $assert_text= 'There is 1 value in table t1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE c1=1, count, 1] = 1
--source include/assert.inc

--let $diff_tables=server2:t1, server3:t1
--source include/diff_tables.inc


--echo
--echo ############################################################
--echo # 08. Clean up.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SET SESSION sql_log_bin=0;
DROP TABLE t1;
SET SESSION sql_log_bin=1;

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
DROP TABLE t1;

--source include/group_replication_end.inc
