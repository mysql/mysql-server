###############################################################################
#
# A member of group have a slave connection to a server outside the group, if
# the connection has group_replication_consistency with value
# BEFORE_ON_PRIMARY_FAILOVER, when an election occur all statements from slave
# connection will be held until all backlog is applied
#
# Test:
#   0. This test requires three servers, two on multi primary mode
#   1. Bootstrap group on server 1
#   2. Join server2 to group
#   3. Set group_replication_consistency to BEFORE_ON_PRIMARY_FAILOVER on
#      global scope, so new connections have it
#   4. On server 2 create a slave connection to server 3
#   5. Create table t1 an t2 on server3 and replicate to group
#   6. Lock tables t1 to hold primary election
#   7. Execute transaction on group
#   8. Server2 will certify transaction but won't apply due lock tables
#   9. Execute group_replication_switch_to_single_primary_mode to appoint
#      server2 as primary on single primary mode group
#  10. Validate that primary election is executing
#  11. A read statement to new primary will be put on hold until all
#      backlog's are applied
#  12. Validate statement is on hold
#  13. Statement executed on server3
#  14. Transaction from server3 will be held until backlog is applied
#  15. Table t2 will be empty until backlog is applied
#  16. UNLOCK tables to allow backlog to be applied
#  17. Reap with success read of last value inserted on group
#  18. Reap with success execution of set as primary server2
#  19. Server2 applied all backlog, table t2 has the data
#  20. Cleanup
#
###############################################################################

--source include/have_group_replication_plugin.inc

--let $rpl_server_count= 3
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc

--echo
--echo # 1. Bootstrap group on server 1

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/start_and_bootstrap_group_replication.inc

--echo
--echo # 2. Join server2 to group

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--source include/start_group_replication.inc

--let $member2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--echo
--echo # 3. Set group_replication_consistency to BEFORE_ON_PRIMARY_FAILOVER on
--echo #    global scope, so new connections have it

SET @@GLOBAL.group_replication_consistency= BEFORE_ON_PRIMARY_FAILOVER;

--echo
--echo # 4. On server 2 create a slave connection to server 3

--replace_result $SERVER_MYPORT_3 SERVER_3_PORT
--eval CHANGE MASTER TO MASTER_HOST='localhost', MASTER_USER='root', MASTER_PORT=$SERVER_MYPORT_3 for channel 'ch3_2'

--let $rpl_channel_name='ch3_2'
--source include/start_slave.inc
--let $rpl_channel_name=

SET @@GLOBAL.group_replication_consistency= EVENTUAL;

--echo
--echo # 5. Create table t1 an t2 on server3 and replicate to group

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

CREATE TABLE test.t1 (a int primary key);
CREATE TABLE test.t2 (a int primary key);

--let $sync_slave_connection= server1
--source include/sync_slave_sql_with_master.inc
--connection server3
--let $sync_slave_connection= server2
--source include/sync_slave_sql_with_master.inc

--echo
--echo # 6. Lock tables t1 to hold primary election

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

LOCK TABLES t1 READ;

--echo
--echo # 7. Execute transaction on group

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

INSERT INTO t1 VALUES (1);

--echo
--echo # 8. Server2 will certify transaction but won't apply due lock tables

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $wait_condition= SELECT COUNT(*) = 1 FROM performance_schema.replication_group_member_stats WHERE member_id='$member2_uuid' AND count_transactions_checked = 3 AND count_transactions_remote_in_applier_queue = 1
--source include/wait_condition.inc

--echo
--echo # 9. Execute group_replication_switch_to_single_primary_mode to appoint
--echo #    server2 as primary on single primary mode group

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--replace_result $member2_uuid MEMBER2_UUID
--send_eval SELECT group_replication_switch_to_single_primary_mode("$member2_uuid")

--echo
--echo # 10. Validate that primary election is executing

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.events_stages_current WHERE event_name LIKE "%Primary Election: stabilizing transactions from former primaries"
--source include/wait_condition.inc

--echo
--echo # 11. A read statement to new primary will be put on hold until all
--echo #     backlog's are applied

SET @@SESSION.group_replication_consistency= BEFORE_ON_PRIMARY_FAILOVER;

--send SELECT COUNT(*)=1 FROM t1 WHERE a = 1

--echo
--echo # 12. Validate statement is on hold

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--let $wait_condition= SELECT COUNT(*)=1 FROM INFORMATION_SCHEMA.PROCESSLIST WHERE STATE='Executing hook on transaction begin.' AND INFO='SELECT COUNT(*)=1 FROM t1 WHERE a = 1'
--source include/wait_condition.inc

--echo
--echo # 13. Statement executed on server3

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

INSERT INTO t2 VALUES (1);

--echo
--echo # 14. Transaction from server3 will be held until backlog is applied

--let $rpl_connection_name= server_2_1
--source include/rpl_connection.inc

--let $wait_condition= SELECT COUNT(*)=2 FROM INFORMATION_SCHEMA.PROCESSLIST WHERE STATE='Executing hook on transaction begin.'
--source include/wait_condition.inc

--echo
--echo # 15. Table t2 will be empty until backlog is applied

--let $assert_text= 'There are no values in table t2'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t2, count, 1] = 0
--source include/assert.inc

--echo
--echo # 16. UNLOCK tables to allow backlog to be applied

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

UNLOCK TABLES;

--echo
--echo # 17. Reap with success read of last value inserted on group

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--reap

SET @@SESSION.group_replication_consistency= DEFAULT;

--echo
--echo # 18. Reap with success execution of set as primary server2

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--replace_result $member2_uuid MEMBER2_UUID
--reap

--echo
--echo # 19. Server2 applied all backlog, table t2 has the data

--let $wait_condition= SELECT COUNT(*) = 1 FROM t2;
--source include/wait_condition.inc

--echo
--echo # 20. Cleanup

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

DROP TABLE t1;
DROP TABLE t2;

--let $sync_slave_connection= server1
--source include/sync_slave_sql_with_master.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--let $sync_slave_connection= server2
--source include/sync_slave_sql_with_master.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SET @@GLOBAL.group_replication_consistency= DEFAULT;

STOP SLAVE FOR CHANNEL 'ch3_2';
RESET SLAVE ALL FOR CHANNEL 'ch3_2';

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

RESET MASTER;

--let $rpl_group_replication_single_primary_mode=1
--let $rpl_group_replication_reset_persistent_vars=1
--source include/group_replication_end.inc
