################################################################################
# This test validates that even when there is a delay in applying view_change
# event due to ongoing local transaction, the immediate post view_change
# transaction on the server should work fine and server should remain in
# online state.
#
# Test:
# 0. The test requires three servers: M1, M2 and M3.
# 01. Start server1
# 02. Start server2
# 03. Block T1 and T2 before message send and after applier prepare
#     on server2.
# 04. Execute T1 and T2 on server1.
# 05. Check wait condition on server2.
# 06. Execute T3 on server1
#     Make it wait on before transaction message broadcast.
# 07. Check wait condition on server1.
# 08. Start server3
# 09. Signal to continue T3 on server1.
# 10. Signal to continue T1 and T2 on server2.
# 11. Check members state on server1.
# 12. Check all servers have the same transactions order on the binary log.
# 13. Cleaning up
################################################################################

--source include/have_debug_sync.inc
--source include/big_test.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_server_count= 3
--source include/group_replication.inc

--echo #
--echo # Setup a new group with three servers.
--echo #

--echo
--echo ############################################################
--echo # 01. Start server1
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

# Force server3 to recover from server1
SET SESSION sql_log_bin= 0;
CREATE USER "recovery_user" IDENTIFIED BY "recovery_password";
GRANT REPLICATION SLAVE ON *.* TO "recovery_user";
GRANT GROUP_REPLICATION_STREAM ON *.* TO 'recovery_user'@'%';
FLUSH PRIVILEGES;
SET SESSION sql_log_bin= 1;

--source include/start_and_bootstrap_group_replication.inc

--echo
--echo ############################################################
--echo # 02. Start server2
--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SET SESSION sql_log_bin= 0;
CREATE USER "recovery_user" IDENTIFIED BY "recovery_password";
GRANT GROUP_REPLICATION_STREAM ON *.* TO 'recovery_user'@'%';
FLUSH PRIVILEGES;
SET SESSION sql_log_bin= 1;

--source include/start_group_replication.inc

--echo
--echo ############################################################
--echo # 03. Block T1 and T2 before message send after applier prepare
--echo #     on server2.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
SET @debug_save= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG= '+d,group_replication_wait_before_message_send_after_applier_prepare';

--echo
--echo ############################################################
--echo # 04. Execute T1 and T2 on server1.

--connect (server_1_2,127.0.0.1,root,,test,$MASTER_MYPORT,,)

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--send CREATE TABLE test.t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB

--let $rpl_connection_name= server_1_2
--source include/rpl_connection.inc
--let $wait_condition=SELECT COUNT(*)=1 FROM INFORMATION_SCHEMA.PROCESSLIST WHERE State = 'waiting for handler commit' and info = 'CREATE TABLE test.t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB'
--source include/wait_condition.inc

--let $rpl_connection_name= server_1_1
--source include/rpl_connection.inc
--send CREATE TABLE test.t2 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB

--let $rpl_connection_name= server_1_2
--source include/rpl_connection.inc
--let $wait_condition=SELECT COUNT(*)=1 FROM INFORMATION_SCHEMA.PROCESSLIST WHERE State = 'waiting for handler commit' and info = 'CREATE TABLE test.t2 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB'
--source include/wait_condition.inc

--echo
--echo ############################################################
--echo # 05. Check wait condition on server2.

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $wait_condition=SELECT COUNT(*)=1 FROM INFORMATION_SCHEMA.PROCESSLIST WHERE State = 'debug sync point: now' and info = 'CREATE TABLE test.t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB'
--source include/wait_condition.inc

--echo
--echo ############################################################
--echo # 06. Execute T3 on server1
--echo #     Make it wait on before transaction message broadcast.
--let $rpl_connection_name= server_1_2
--source include/rpl_connection.inc

SET @debug_save= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG= '+d,group_replication_before_message_broadcast';

--send CREATE TABLE test.t3 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB

--echo
--echo ############################################################
--echo # 07. Check wait condition on server1.

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

--let $wait_condition=SELECT COUNT(*)=1 FROM INFORMATION_SCHEMA.PROCESSLIST WHERE State = 'debug sync point: now' and INFO = 'CREATE TABLE test.t3 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB'
--source include/wait_condition.inc

--echo
--echo ############################################################
--echo # 08. Start server3
--let $rpl_connection_name= server3
--source include/rpl_connection.inc

SET SESSION sql_log_bin= 0;
CREATE USER "recovery_user" IDENTIFIED BY "recovery_password";
GRANT GROUP_REPLICATION_STREAM ON *.* TO 'recovery_user'@'%';
FLUSH PRIVILEGES;
SET SESSION sql_log_bin= 1;

CHANGE REPLICATION SOURCE TO SOURCE_USER= 'recovery_user', SOURCE_PASSWORD= 'recovery_password' FOR CHANNEL 'group_replication_recovery';

SET SESSION sql_log_bin= 0;
call mtr.add_suppression("There was an error when connecting to the donor server*");
call mtr.add_suppression("For details please check performance_schema*");
call mtr.add_suppression("Slave I/O for channel 'group_replication_recovery': Master command COM_REGISTER_SLAVE failed*");
call mtr.add_suppression("Slave I/O thread couldn't register on master");
SET SESSION sql_log_bin= 1;

--let $group_replication_start_member_state= RECOVERING
--source include/start_group_replication.inc

--echo
--echo ############################################################
--echo # 09. Signal to continue T3 on server1.
--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

SET @@GLOBAL.DEBUG= @debug_save;
SET DEBUG_SYNC= 'now SIGNAL waiting';


--echo
--echo ############################################################
--echo # 10. Signal to continue T1 and T2 on server2.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
SET @@GLOBAL.DEBUG= @debug_save;
SET DEBUG_SYNC= 'now SIGNAL signal.after_before_message_send_after_applier_prepare_continue';


--echo
--echo ############################################################
--echo # 11. Check members state on server1.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--reap

--let $rpl_connection_name= server_1_1
--source include/rpl_connection.inc
--reap

--let $rpl_connection_name= server_1_2
--source include/rpl_connection.inc
--reap

--let $server1_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)
--let $assert_text= Server1 MEMBER_STATE is ONLINE
--let $assert_cond= "[SELECT MEMBER_STATE FROM performance_schema.replication_group_members WHERE MEMBER_ID=\'$server1_uuid\', MEMBER_STATE, 1]" = "ONLINE"
--source include/assert.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--let $group_replication_member_state = ONLINE
--source include/gr_wait_for_member_state.inc

--let $diff_tables= server1:test.t1, server2:test.t1, server3:test.t1
--source include/diff_tables.inc

--let $diff_tables= server1:test.t2, server2:test.t2, server3:test.t2
--source include/diff_tables.inc

--let $diff_tables= server1:test.t3, server2:test.t3, server3:test.t3
--source include/diff_tables.inc

--echo
--echo ############################################################
--echo # 12. Check all servers have the same transactions order on the binary log.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $keep_gtid_events= 1
--source include/show_binlog_events.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $keep_gtid_events= 1
--source include/show_binlog_events.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--let $keep_gtid_events= 1
--source include/show_binlog_events.inc

--echo
--echo ############################################################
--echo # 13. Cleaning up

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
DROP TABLE t1;
DROP TABLE t2;
DROP TABLE t3;
SET SESSION sql_log_bin= 0;
DROP USER "recovery_user";
SET SESSION sql_log_bin= 1;

--disconnect server_1_2

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SET SESSION sql_log_bin= 0;
DROP USER "recovery_user";
SET SESSION sql_log_bin= 1;

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

SET SESSION sql_log_bin= 0;
DROP USER "recovery_user";
SET SESSION sql_log_bin= 1;

--source include/group_replication_end.inc
