##############################################################################
#
# All actions shall allow the DBA to check its progress.
#
# Test:
#   0. 2 servers. Test starts in Single primary mode with server1 as the primary
#
#   Phase 1: Online Primary Change
#    1.1 Lock table on the new primary (server 2) and get a transaction stuck
#        Execute a primary change to server 2.
#        Check the new primary is in the applying buffered transactions stage
#        Others are in waiting on current primary transaction execution stage
#    1.2 Lock a table on the old primary (server1) and execute a transaction
#        This will block the read mode enabling query on the now secondary
#        Unblock the table on the new primary (server2)
#        Check election is on Waiting for members to enable super_read_only stage
#    1.3 Lock table on the new primary (server 2)
#        Unlock the table on the secondary (server1) that will block on server2
#        Check election is on Stabilizing transactions from former primaries stage
#    1.4 Unblock to end the action.
#
#   Phase 2: Failover elections
#    2.0 Set the weights so server 1 is the new primary when server 2 leaves.
#        Lock a table on the new primary (server1)
#    2.1 Execute a transaction that will be stuck on server1
#        Stop server 2 so it leaves the group and a new election happens
#        Check the election stage on the new primary: applying buffered transactions
#        Check the election stage on secondary: waiting on current primary transaction execution
#    2.2 Unblock the table
#        Check the election ends and there are no more stages.
#
#   3. Cleanup
#
##############################################################################

--source include/big_test.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_group_replication_single_primary_mode=1
--let $rpl_server_count= 3
--source include/group_replication.inc

--echo
--echo # 0. Test starts in Single primary mode with server1 as the primary

--let $server1_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--source include/start_and_bootstrap_group_replication.inc

--source include/gr_assert_primary_member.inc

CREATE TABLE t1(a int primary key);

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $server2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--source include/start_group_replication.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--source include/start_group_replication.inc

--echo
--echo # 1.1 Lock table on the new primary (server 2) and get a transaction stuck
--echo # Execute a primary change to server 2.
--echo # Check the new primary is in the applying buffered transactions stage
--echo # Others are in waiting on current primary transaction execution stage

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

SET @@GLOBAL.read_only= 0;
LOCK TABLE t1 READ;

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

INSERT INTO t1 VALUES (1);

--replace_result $server2_uuid MEMBER2_UUID
--send_eval SELECT group_replication_set_as_primary("$server2_uuid")

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.events_stages_current WHERE event_name LIKE "%Primary Election:%"
--source include/wait_condition.inc

--let $stage_name= `SELECT event_name FROM performance_schema.events_stages_current WHERE event_name LIKE "%Primary Election:%";`
--let $assert_text= The stage should be "Primary Election: applying buffered transactions"
--let $assert_cond= "$stage_name" = "stage/group_rpl/Primary Election: applying buffered transactions"
--source include/assert.inc

--let $work_estimated= `SELECT work_estimated FROM performance_schema.events_stages_current WHERE event_name LIKE "%Primary Election:%";`
--let $assert_text= The estimated work is 1
--let $assert_cond= "$work_estimated" = "1"
--source include/assert.inc

--let $work_completed= `SELECT work_completed FROM performance_schema.events_stages_current WHERE event_name LIKE "%Primary Election:%";`
--let $assert_text= The completed work is 0
--let $assert_cond= "$work_completed" = "0"
--source include/assert.inc

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.events_stages_current WHERE event_name LIKE "%Primary Election:%"
--source include/wait_condition.inc

--let $stage_name= `SELECT event_name FROM performance_schema.events_stages_current WHERE event_name LIKE "%Primary Election:%";`
--let $assert_text= The stage should be "Primary Election: waiting on current primary transaction execution"
--let $assert_cond= "$stage_name" = "stage/group_rpl/Primary Election: waiting on current primary transaction execution"
--source include/assert.inc

--let $work_estimated= `SELECT work_estimated FROM performance_schema.events_stages_current WHERE event_name LIKE "%Primary Election:%";`
--let $assert_text= The estimated work is 1
--let $assert_cond= "$work_estimated" = "1"
--source include/assert.inc

--let $work_completed= `SELECT work_completed FROM performance_schema.events_stages_current WHERE event_name LIKE "%Primary Election:%";`
--let $assert_text= The completed work is 0
--let $assert_cond= "$work_completed" = "0"
--source include/assert.inc

--echo
--echo # 1.2 Lock a table on the old primary (server1) and execute a transaction
--echo # This will block the read mode enabling query on the now secondary
--echo # Unblock the table on the new primary (server2)
--echo # Check they are on Waiting for members to enable super_read_only

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

LOCK TABLE t1 READ;

--let $rpl_connection_name= server_1_1
--source include/rpl_connection.inc

--send INSERT INTO t1 VALUES (2)

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

UNLOCK TABLES;

--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.events_stages_current WHERE event_name LIKE "%super_read_only%" and work_completed=2
--source include/wait_condition.inc

 --let $stage_name= `SELECT event_name FROM performance_schema.events_stages_current WHERE event_name LIKE "%super_read_only%";`
 --let $assert_text= The stage should be "Primary Election: waiting for members to enable super_read_only"
 --let $assert_cond= "$stage_name" = "stage/group_rpl/Primary Election: waiting for members to enable super_read_only"
 --source include/assert.inc

 --let $work_estimated= `SELECT work_estimated FROM performance_schema.events_stages_current WHERE event_name LIKE "%super_read_only%";`
 --let $assert_text= The estimated work is 3
 --let $assert_cond= "$work_estimated" = "3"
 --source include/assert.inc

--let $work_completed= `SELECT work_completed FROM performance_schema.events_stages_current WHERE event_name LIKE "%super_read_only%";`
--let $assert_text= The completed work is 2
--let $assert_cond= "$work_completed" = "2"
--source include/assert.inc

# There is no stage on server1 as the read mode process un-sets the election thread stage.
# So we use server 3

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.events_stages_current WHERE event_name LIKE "%super_read_only%" and work_completed=2
--source include/wait_condition.inc

 --let $stage_name= `SELECT event_name FROM performance_schema.events_stages_current WHERE event_name LIKE "%super_read_only%";`
 --let $assert_text= The stage should be "Primary Election: waiting for members to enable super_read_only"
 --let $assert_cond= "$stage_name" = "stage/group_rpl/Primary Election: waiting for members to enable super_read_only"
 --source include/assert.inc

 --let $work_estimated= `SELECT work_estimated FROM performance_schema.events_stages_current WHERE event_name LIKE "%super_read_only%";`
 --let $assert_text= The estimated work is 3
 --let $assert_cond= "$work_estimated" = "3"
 --source include/assert.inc

--let $work_completed= `SELECT work_completed FROM performance_schema.events_stages_current WHERE event_name LIKE "%super_read_only%";`
--let $assert_text= The completed work is 2
--let $assert_cond= "$work_completed" = "2"
--source include/assert.inc

--echo
--echo # 1.3 Lock table on the new primary (server 2)
--echo # Unlock the table on the secondary (server1) that will block on server2
--echo # Check election is on Stabilizing transactions from former primaries stage

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

LOCK TABLE t1 READ;

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

UNLOCK TABLES;

--let $rpl_connection_name= server_1_1
--source include/rpl_connection.inc

--reap

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.events_stages_current WHERE event_name LIKE "%Stabilizing transactions%"
--source include/wait_condition.inc

 --let $stage_name= `SELECT event_name FROM performance_schema.events_stages_current WHERE event_name LIKE "%Stabilizing transactions%";`
 --let $assert_text= The stage should be "Primary Election: stabilizing transactions from former primaries"
 --let $assert_cond= "$stage_name" = "stage/group_rpl/Primary Election: stabilizing transactions from former primaries"
 --source include/assert.inc

 --let $work_estimated= `SELECT work_estimated FROM performance_schema.events_stages_current WHERE event_name LIKE "%Stabilizing transactions%";`
 --let $assert_text= The estimated work is 1
 --let $assert_cond= "$work_estimated" = "1"
 --source include/assert.inc

--let $work_completed= `SELECT work_completed FROM performance_schema.events_stages_current WHERE event_name LIKE "%Stabilizing transactions%";`
--let $assert_text= The completed work is 0
--let $assert_cond= "$work_completed" = "0"
--source include/assert.inc

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.events_stages_current WHERE event_name LIKE "%Stabilizing transactions%"
--source include/wait_condition.inc

 --let $stage_name= `SELECT event_name FROM performance_schema.events_stages_current WHERE event_name LIKE "%Stabilizing transactions%";`
 --let $assert_text= The stage should be "Primary Election: stabilizing transactions from former primaries"
 --let $assert_cond= "$stage_name" = "stage/group_rpl/Primary Election: stabilizing transactions from former primaries"
 --source include/assert.inc

 --let $work_estimated= `SELECT work_estimated FROM performance_schema.events_stages_current WHERE event_name LIKE "%Stabilizing transactions%";`
 --let $assert_text= The estimated work is 1
 --let $assert_cond= "$work_estimated" = "1"
 --source include/assert.inc

--let $work_completed= `SELECT work_completed FROM performance_schema.events_stages_current WHERE event_name LIKE "%Stabilizing transactions%";`
--let $assert_text= The completed work is 0
--let $assert_cond= "$work_completed" = "0"
--source include/assert.inc

 --echo
 --echo # 1.4 Unblock to end the action.

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

UNLOCK TABLES;

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--replace_result $server2_uuid MEMBER2_UUID
--reap

--echo
--echo # 2.0 Set the weights so server 1 is the new primary when server 2 leaves.
--echo #     Lock a table on the new primary (server1)

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

# set member weight
--eval SET GLOBAL group_replication_member_weight= 100

SET @@GLOBAL.read_only= 0;
LOCK TABLE t1 READ;

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

# set member weight
--eval SET GLOBAL group_replication_member_weight= 1

--echo
--echo # 2.1 Execute a transaction that will be stuck on server1
--echo # Stop server 2 so it leaves the group and a new election happens
--echo # Check the election stage on the new primary: applying buffered transactions
--echo # Check the election stage on secondary: waiting on current primary transaction execution

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

INSERT INTO t1 VALUES (3);

--source include/stop_group_replication.inc

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.events_stages_current WHERE event_name LIKE "%Primary Election:%"
--source include/wait_condition.inc

--let $stage_name= `SELECT event_name FROM performance_schema.events_stages_current WHERE event_name LIKE "%Primary Election:%";`
--let $assert_text= The stage should be "Primary Election: applying buffered transactions"
--let $assert_cond= "$stage_name" = "stage/group_rpl/Primary Election: applying buffered transactions"
--source include/assert.inc

--let $work_estimated= `SELECT work_estimated FROM performance_schema.events_stages_current WHERE event_name LIKE "%Primary Election:%";`
--let $assert_text= The estimated work is 1
--let $assert_cond= "$work_estimated" = "1"
--source include/assert.inc

--let $work_completed= `SELECT work_completed FROM performance_schema.events_stages_current WHERE event_name LIKE "%Primary Election:%";`
--let $assert_text= The completed work is 0
--let $assert_cond= "$work_completed" = "0"
--source include/assert.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.events_stages_current WHERE event_name LIKE "%Primary Election:%"
--source include/wait_condition.inc

--let $stage_name= `SELECT event_name FROM performance_schema.events_stages_current WHERE event_name LIKE "%Primary Election:%";`
--let $assert_text= The stage should be "Primary Election: waiting on current primary transaction execution"
--let $assert_cond= "$stage_name" = "stage/group_rpl/Primary Election: waiting on current primary transaction execution"
--source include/assert.inc

--let $work_estimated= `SELECT work_estimated FROM performance_schema.events_stages_current WHERE event_name LIKE "%Primary Election:%";`
--let $assert_text= The estimated work is 1
--let $assert_cond= "$work_estimated" = "1"
--source include/assert.inc

--let $work_completed= `SELECT work_completed FROM performance_schema.events_stages_current WHERE event_name LIKE "%Primary Election:%";`
--let $assert_text= The completed work is 0
--let $assert_cond= "$work_completed" = "0"
--source include/assert.inc

 --echo
 --echo # 2.2 Unblock the table
 --echo # Check the election ends and there are no more stages.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

UNLOCK TABLES;

--source include/gr_assert_primary_member.inc

#Stages sometimes linger for a brief time after the action terminated
--let $wait_condition=SELECT COUNT(*)=0 FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%"
--source include/wait_condition.inc

--let $stages_present= `SELECT COUNT(*) FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%";`
--let $assert_text= There is no stage present
--let $assert_cond= "$stages_present" = "0"
--source include/assert.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

#Stages sometimes linger for a brief time after the action terminated
--let $wait_condition=SELECT COUNT(*)=0 FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%"
--source include/wait_condition.inc

--let $stages_present= `SELECT COUNT(*) FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%";`
--let $assert_text= There is no stage present
--let $assert_cond= "$stages_present" = "0"
--source include/assert.inc

--echo
--echo # 3. Clean up

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--source include/start_group_replication.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

SET @@GLOBAL.group_replication_member_weight= DEFAULT;

DROP TABLE t1;

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

SET @@GLOBAL.group_replication_member_weight= DEFAULT;

--let $rpl_group_replication_reset_persistent_vars=1
--source include/group_replication_end.inc
