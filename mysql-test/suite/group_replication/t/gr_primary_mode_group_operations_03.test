###############################################################################
#
# If the configuration change is invoked with a server UUID, that
# value shall be valid and must belong to a member of the group. An
# error shall be outputted otherwise.
#
# Test:
#   0. This test requires two servers.
#   1. Execute switch to single primary mode:
#   1.1. With extra arguments it must fail.
#   1.2. With invalid uuid it must fail.
#   1.3. With an unknown uuid it must fail.
#   1.4. With NULL it must fail.
#   1.5. With empty string it must fail.
#
#   2. Change to single primary mode to test action of set as primary and
#      switch to multi primary
#
#   3. Execute action of set a new primary:
#   3.1. With extra arguments it must fail.
#   3.2. With invalid uuid it must fail.
#   3.3. With an unknown uuid it must fail.
#   3.4. With NULL it must fail.
#   3.5. With empty string it must fail.
#   3.6. With blank value it must fail.
#
#   4. Execute action to switch to multi primary mode:
#   4.1. With extra arguments it must fail.
#   4.2. With invalid uuid it must fail.
#   4.3. With an unknown uuid it must fail.
#   4.4. With NULL it must fail.
#   4.5. With empty string it must fail.
#   4.6. With valid known uuid it must fail.
#
#   5. Change to multi primary mode to test action with output of a table.
#
#   6. Test group actions with the output of a table. It must match.
#
#   7. Cleanup.
#
###############################################################################

--source include/have_group_replication_plugin.inc
--source include/group_replication.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $server2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $server1_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--echo
--echo # 1. Execute switch to single primary mode:
--echo # 1.1. With extra arguments it must fail.

--replace_result $server1_uuid MEMBER1_UUID
--error ER_CANT_INITIALIZE_UDF
--eval SELECT group_replication_switch_to_single_primary_mode("$server1_uuid", "extra", "arguments")

--echo # 1.2. With invalid uuid it must fail.
--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_switch_to_single_primary_mode("not an uuid");

--echo # 1.3. With an unknown uuid it must fail.
--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_switch_to_single_primary_mode("aaaaaaaa-bbbb-aaaa-aaaa-aaaaaaaaaaaa");

--echo # 1.4. With NULL it must fail.
--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_switch_to_single_primary_mode(NULL);

--echo # 1.5. With empty string it must fail.
--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_set_as_primary("");

--echo
--echo # 2. Change to single primary mode to test action of set as primary and
--echo #    switch to multi primary

--replace_result $server1_uuid MEMBER1_UUID
--eval SELECT group_replication_switch_to_single_primary_mode("$server1_uuid")

--echo
--echo # 3. Execute action of set a new primary:
--echo # 3.1. With extra arguments it must fail.

--replace_result $server1_uuid MEMBER1_UUID
--error ER_CANT_INITIALIZE_UDF
--eval SELECT group_replication_set_as_primary("$server1_uuid", "extra", "arguments")

--echo # 3.2. With invalid uuid it must fail.
--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_set_as_primary("not an uuid");

--echo # 3.3. With an unknown uuid it must fail.
--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_set_as_primary("aaaaaaaa-bbbb-aaaa-aaaa-aaaaaaaaaaaa");

--echo # 3.4. With NULL it must fail.
--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_set_as_primary(NULL);

--echo # 3.5. With empty string it must fail.
--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_set_as_primary("");

--echo # 3.6. With blank value it must fail.
--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_set_as_primary();

--echo
--echo # 4. Execute action to switch to multi primary mode:
--echo # 4.1. With extra arguments it must fail.
--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_switch_to_multi_primary_mode("extra", "arguments");

--echo # 4.2. With invalid uuid it must fail.
--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_switch_to_multi_primary_mode("not an uuid");

--echo # 4.3. With an unknown uuid it must fail.
--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_switch_to_multi_primary_mode("aaaaaaaa-bbbb-aaaa-aaaa-aaaaaaaaaaaa");

--echo # 4.4. With NULL it must fail.
--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_switch_to_multi_primary_mode(NULL);

--echo # 4.5. With empty string it must fail.
--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_switch_to_multi_primary_mode("");

--echo # 4.6. With valid and known uuid it must fail.
--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_switch_to_multi_primary_mode("$server1_uuid");

--echo
--echo # 5. Change to multi primary mode to test action with output of a table.

SELECT group_replication_switch_to_multi_primary_mode();

--echo
--echo # 6. Test group action with the output of a table. It must match as expected.

CREATE TABLE test.t1 (a INT PRIMARY KEY NOT NULL AUTO_INCREMENT, b CHAR(36));
--disable_query_log
INSERT INTO test.t1 VALUES (1, "Not a valid uuid");                     # Invalid uuid.
INSERT INTO test.t1 VALUES (2, "aaaaaaaa-bbbb-aaaa-aaaa-aaaaaaaaaaaa"); # Valid but unknown uuid.
INSERT INTO test.t1 VALUES (3, NULL);                                   # NULL.
INSERT INTO test.t1 VALUES (4, "");                                     # Empty string.
--eval INSERT INTO test.t1 VALUES (5, "$server1_uuid")                  # Valid M1 uuid.
--eval INSERT INTO test.t1 VALUES (6, "$server2_uuid")                  # Valid M2 uuid.
--enable_query_log

--echo
--echo # Test group_replication_switch_to_single_primary_mode output.

CREATE TABLE test.tspm (a INT PRIMARY KEY NOT NULL AUTO_INCREMENT, b CHAR(100));
--disable_query_log
INSERT INTO test.tspm VALUES (1, "Wrong arguments: The server uuid is not valid.");
INSERT INTO test.tspm VALUES (2, "The requested uuid is not a member of the group.");
INSERT INTO test.tspm VALUES (3, "Wrong arguments: You need to specify a server uuid.");
INSERT INTO test.tspm VALUES (4, "Wrong arguments: You need to specify a server uuid.");
INSERT INTO test.tspm VALUES (5, "Mode switched to single-primary successfully.");
INSERT INTO test.tspm VALUES (6, "Already in single-primary mode. Did you mean to use group_replication_set_as_primary?");
--enable_query_log
--source include/rpl_sync.inc

--let $count= 1
while ($count < 7)
{
 --let $expected_message= `SELECT b FROM test.tspm WHERE a=$count;`
 --let $actual_message= `SELECT group_replication_switch_to_single_primary_mode(b) FROM test.t1 WHERE a=$count;`

 --let $assert_text= "The message must be: $expected_message"
 --let $assert_cond= "$actual_message" = "$expected_message"
 --source include/assert.inc
 --inc $count
}

--echo
--echo # Test group_replication_switch_to_multi_primary_mode output.
--error ER_CANT_INITIALIZE_UDF
SELECT group_replication_switch_to_multi_primary_mode(b) FROM test.t1 ORDER BY a LIMIT 1;

--echo
--echo # Test group_replication_set_as_primary output.
CREATE TABLE test.tsap (a INT PRIMARY KEY NOT NULL AUTO_INCREMENT, b CHAR(100));
--disable_query_log
INSERT INTO test.tsap VALUES (1, "Wrong arguments: The server uuid is not valid.");
INSERT INTO test.tsap VALUES (2, "The requested uuid is not a member of the group.");
INSERT INTO test.tsap VALUES (3, "Wrong arguments: You need to specify a server uuid.");
INSERT INTO test.tsap VALUES (4, "Wrong arguments: You need to specify a server uuid.");
INSERT INTO test.tsap VALUES (5, "The requested member is already the current group primary.");
INSERT INTO test.tsap VALUES (6, "Primary server switched to: MEMBER2_UUID");
--enable_query_log
--source include/rpl_sync.inc

--let $count= 1
while ($count < 7)
{
  --let $expected_message= `SELECT b FROM test.tsap WHERE a=$count;`
  --replace_result $server2_uuid MEMBER2_UUID
  --let $actual_message= `SELECT group_replication_set_as_primary(b) FROM test.t1 WHERE a=$count;`

  --let $assert_text= "The message must be: $expected_message"
  --let $assert_cond= "$actual_message" = "$expected_message"
  --source include/assert.inc
  --inc $count
}

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/gr_assert_secondary_member.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--source include/gr_assert_primary_member.inc

--echo
--echo # 6. Cleanup
--let $count=
DROP TABLE test.t1;
DROP TABLE test.tspm;
DROP TABLE test.tsap;

--source include/rpl_sync.inc

--let $rpl_group_replication_single_primary_mode=1
--let $rpl_group_replication_reset_persistent_vars=1
--source include/group_replication_end.inc
