###############################################################################
#
# Test actions on network partitions.
# Simulate a situation where the primary being elected stops responding.
# The member shall be expelled and election continues with another primary
#
# Test:
#   0. This test requires three servers in multi primary mode
#   1. Save pid from server1 to be able to freeze it
#   2. Create table t1
#   3. Lock table t1 on server2 to block action
#   4. Server1 insert value on t1
#   5. Execute action switch to single primary mode
#   6. Freeze server1 sending a SIGSTOP signal
#   7. Wait server1 is expelled from group
#   8. Unlock table to action continue
#   9. Send signal to server continue its process
#  10. The action is aborted on server1
#  11. Wait that server2 terminate execution of primary election
#  12. Assert primary and secondary role of members
#  13. Cleanup
#
###############################################################################

--source include/big_test.inc
--source include/not_valgrind.inc
--source include/linux.inc
--source include/have_group_replication_plugin.inc
--let $rpl_server_count= 3
--source include/group_replication.inc

SET SESSION sql_log_bin=0;
call mtr.add_suppression("Member was expelled from the group due to network failures, changing member status to ERROR.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("The function 'group_replication_switch_to_single_primary_mode' failed. Member has left the group. This operation was locally aborted and for that reason terminated.");
call mtr.add_suppression("read failed");
call mtr.add_suppression("\\[GCS\\] Unable to resolve peer address.");
SET SESSION sql_log_bin=1;

--echo
--echo # 1. Save pid from server1 to be able to freeze it
--let $member1_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

SET SESSION sql_log_bin = 0;
CREATE TABLE pid_table(pid_no INT PRIMARY KEY);
--let $pid_file=`SELECT @@pid_file`
--replace_result $pid_file pid_file
--eval LOAD DATA LOCAL INFILE '$pid_file' INTO TABLE pid_table
--let $server_pid=`SELECT pid_no FROM pid_table`
DROP TABLE pid_table;
SET SESSION sql_log_bin = 1;

--echo
--echo # 2. Create table t1

CREATE TABLE test.t1 (a INT PRIMARY KEY);
--source include/rpl_sync.inc

--echo
--echo # 3. Lock table t1 on server2 to block action

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--let $member2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

LOCK TABLE t1 READ;

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--let $member3_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--echo
--echo # 4. Server1 insert value on t1

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

INSERT INTO t1 VALUES (1);

--echo
--echo # 5. Execute action switch to single primary mode

--replace_result $member1_uuid MEMBER1_UUID
--send_eval SELECT group_replication_switch_to_single_primary_mode("$member1_uuid")

--echo
--echo # 6. Freeze server1 sending a SIGSTOP signal

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

# Wait for it to start the election process to make the test deterministic
--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.events_stages_current WHERE event_name LIKE "%Single-primary Switch: executing Primary election%"
--source include/wait_condition.inc

--exec kill -19 $server_pid

--echo
--echo # 7. Wait server1 is expelled from group

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $group_replication_number_of_members= 2
--source include/gr_wait_for_number_of_members.inc

--echo
--echo # 8. Unlock table to action continue

UNLOCK TABLES;

--echo
--echo # 9. Send signal to server continue its process

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

--exec kill -18 $server_pid

--echo
--echo # 10. The action is aborted on server1

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--replace_result $member1_uuid MEMBER1_UUID
--error ER_GRP_RPL_UDF_ERROR
--reap

--echo
--echo # 11. Wait that server2 terminate execution of primary election

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $wait_condition=SELECT COUNT(*)=0 FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%"
--source include/wait_condition.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--let $wait_condition=SELECT COUNT(*)=0 FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%"
--source include/wait_condition.inc

--echo
--echo # 12. Assert primary and secondary role of members

--let $server_primary= server2
--let $server_secondary= server3

if(`SELECT "$member2_uuid" > "$member3_uuid"`)
{
  --let $server_primary= server3
  --let $server_secondary= server2
}

--connection $server_secondary

--source include/gr_assert_secondary_member.inc

--connection $server_primary

--source include/gr_assert_primary_member.inc

--echo
--echo # 13. Cleanup

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/stop_group_replication.inc
SET GLOBAL group_replication_enforce_update_everywhere_checks= FALSE;
SET GLOBAL group_replication_single_primary_mode= TRUE;
--source include/start_group_replication.inc

--connection $server_primary

DROP TABLE t1;

--let $rpl_group_replication_single_primary_mode=1
--let $rpl_group_replication_reset_persistent_vars=1
--source include/group_replication_end.inc
