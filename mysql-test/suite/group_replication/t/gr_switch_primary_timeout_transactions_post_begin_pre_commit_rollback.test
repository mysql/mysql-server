################################################################################
# This test proves that if binloggable status of transaction is set post close
# connection stage of parameter `running_transactions_timeout` has passed,
# transactions are still rolled back.
# i.e.
# (1) T1: STARTS
# (2) OPERATION_1: group_replication_set_as_primary executed
# (3) OPERATION_1: Progresses to close client connection that did not reach
#                  commit stage
# (4) T1: Identifies transaction is binloggable
# (5) T1: Gets rolledback even if CLOSE_CONNECTION stage of OPERATION_1 has
#         passed(refer 3)
#
# Test:
# 0. The test requires two servers: M1 and M2.
# 1. Setup group of 2 servers, M1(primary) and M2(secondary).
# 2. Execute a transaction on server1 and block it in begin.
#    It is yet not known if a transaction will be binlogged or not.
# 3. Begin change of primary from server2(secondary).
# 4. Now unblock transaction on server1.
#    It should fail since it passed begin state but is yet not committing.
# 5. Reap transaction running on server1 it should fail.
#    Transaction was not committing so got rolled back.
# 6. Assert primary changed.
#    Assert data is not present on M1 and M2.
# 7. Execute a transaction on server2 and block it in begin.
#    It is yet not known if a transaction will be binlogged or not.
# 8. Begin change of primary from server2(secondary).
# 9. Now unblock transaction on server2.
#    It should fail since it passed begin state but is yet not committing.
# 10. Reap transaction running on server2 it should fail.
#    Transaction was not committing so got rolled back.
#    Also reap the change primary operation it should succeed.
# 11. Assert primary changed.
#    Assert data is not present on M1 and M2.
# 12. Cleanup.
################################################################################

--source include/have_debug_sync.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_group_replication_single_primary_mode=1
--source include/group_replication.inc

--echo
--echo # 1. Setup group of 2 servers, M1(primary) and M2(secondary).

--let $server1_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

CREATE TABLE t1(c1 int primary key);

--source include/start_and_bootstrap_group_replication.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $server2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--source include/start_group_replication.inc

--echo
--echo # 2. Execute a transaction on server1 and block it in begin.
--echo #    It is yet not known if a transaction will be binlogged or not.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

SET @@GLOBAL.DEBUG= '+d,group_replication_wait_on_observer_trans';
--send INSERT INTO t1 values(1)

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
SET DEBUG_SYNC= "now WAIT_FOR signal.group_replication_wait_on_observer_trans_waiting";

# Debug point group_replication_wait_on_observer_trans is present in begin hook.
# If we do not remove debug point group_replication_wait_on_observer_trans
# UDF group_replication_set_as_primary will block and will cause a deadlock.
# i.e. UDF will wait for signal group_replication_wait_on_observer_trans_continue
# and INSERT will wait for UDF to finish.
SET @@GLOBAL.DEBUG= '-d,group_replication_wait_on_observer_trans';

--echo
--echo # 3. Begin change of primary from server2(secondary).

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--replace_result $server2_uuid SERVER2_UUID
--send_eval SELECT group_replication_set_as_primary("$server2_uuid", 0);

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

--let $wait_condition= SELECT COUNT(*)=1 FROM performance_schema.threads WHERE NAME = "thread/group_rpl/THD_transaction_monitor" AND PROCESSLIST_INFO = "Group replication transaction monitor: Stopped client connections"
--source include/wait_condition.inc

--echo
--echo # 4. Now unblock transaction on server1.
--echo #    It should fail since it passed begin state but is yet not committing.

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

SET DEBUG_SYNC= "now SIGNAL signal.group_replication_wait_on_observer_trans_continue";

--echo
--echo # 5. Reap transaction running on server1 it should fail.
--echo #    Transaction was not committing so got rolled back.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--error ER_RUN_HOOK_ERROR, CR_SERVER_LOST
--reap

--source include/wait_until_disconnected.inc
--enable_reconnect
--source include/wait_until_connected_again.inc
--disable_reconnect

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

SET DEBUG_SYNC= 'RESET';

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--replace_result $server2_uuid SERVER2_UUID
--reap

--echo
--echo # 6. Assert primary changed.
--echo #    Assert data is not present on M1 and M2.

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--source include/gr_assert_primary_member.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/gr_assert_secondary_member.inc

--let $assert_text= 'There is no value 1 in table t1.'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 1, count, 1] = 0
--source include/assert.inc

--let $diff_tables= server1:test.t1, server2:test.t1
--source include/diff_tables.inc


--echo
--echo # 7. Execute a transaction on server2 and block it in begin.
--echo #    It is yet not known if a transaction will be binlogged or not.

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SET @@GLOBAL.DEBUG= '+d,group_replication_wait_on_observer_trans';
--send INSERT INTO t1 values(1)

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc
SET DEBUG_SYNC= "now WAIT_FOR signal.group_replication_wait_on_observer_trans_waiting";

# Debug point group_replication_wait_on_observer_trans is present in begin hook.
# If we do not remove debug point group_replication_wait_on_observer_trans
# UDF group_replication_set_as_primary will block and will cause a deadlock.
# i.e. UDF will wait for signal group_replication_wait_on_observer_trans_continue
# and INSERT will wait for UDF to finish.
SET @@GLOBAL.DEBUG= '-d,group_replication_wait_on_observer_trans';

--echo
--echo # 8. Begin change of primary from server2(secondary).

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--replace_result $server1_uuid SERVER1_UUID
--send_eval SELECT group_replication_set_as_primary("$server1_uuid", 0);

--let $rpl_connection_name= server_2_1
--source include/rpl_connection.inc

--let $wait_condition= SELECT COUNT(*)=1 FROM performance_schema.threads WHERE NAME = "thread/group_rpl/THD_transaction_monitor" AND PROCESSLIST_INFO = "Group replication transaction monitor: Stopped client connections"
--source include/wait_condition.inc

--echo
--echo # 9. Now unblock transaction on server2.
--echo #    It should fail since it passed begin state but is yet not committing.

--let $rpl_connection_name= server_2_1
--source include/rpl_connection.inc

SET DEBUG_SYNC= "now SIGNAL signal.group_replication_wait_on_observer_trans_continue";

--echo
--echo # 10. Reap transaction running on server2 it should fail.
--echo #    Transaction was not committing so got rolled back.
--echo #    Also reap the change primary operation it should succeed.

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--error ER_RUN_HOOK_ERROR, CR_SERVER_LOST
--reap

--source include/wait_until_disconnected.inc
--enable_reconnect
--source include/wait_until_connected_again.inc
--disable_reconnect

--let $rpl_connection_name= server_2_1
--source include/rpl_connection.inc

SET DEBUG_SYNC= 'RESET';

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc
--replace_result $server1_uuid SERVER1_UUID
--reap

--echo
--echo # 11. Assert primary changed.
--echo #    Assert data is not present on M1 and M2.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/gr_assert_primary_member.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--source include/gr_assert_secondary_member.inc

--let $assert_text= 'There is no value 1 in table t1.'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 1, count, 1] = 0
--source include/assert.inc

--let $diff_tables= server1:test.t1, server2:test.t1
--source include/diff_tables.inc

--echo
--echo # 12. Cleanup.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

DROP TABLE t1;

--source include/group_replication_end.inc
