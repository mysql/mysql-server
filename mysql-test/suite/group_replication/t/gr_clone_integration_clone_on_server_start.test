###############################################################################
# This test verifies that cloning on server start works.
# It also verifies that any present async channels will error out if clone
# is executed.
#
# 0. This test needs a group with M1, M2 and M3 for a async connection
# 1. Install clone plugin on server1.
# 2. Bootstrap server1 and add some data
# 3. Restart server 2 with a monitoring process (mysqld_safe) if needed
#    Remove the default channel from server1 to server2
# 4. Setup the server so group replication starts on boot
#    Install the Clone plugin
# 5. Create a new channel from server 3 into server 2
# 6. Restart the server making it use clone on start
#    Check that clone goes ok
# 7. Check the channel threads failed to start due to clone
# 8. Cleanup
#

--source include/have_mysqld_monitoring_process.inc
--source include/have_clone_plugin.inc
--source include/have_group_replication_plugin.inc
--let $rpl_server_count= 3
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc

# Validate plugins
--let plugins = CLONE_PLUGIN,GROUP_REPLICATION
--source include/check_plugin_dir.inc

--echo
--echo ############################################################
--echo # 1. Install clone plugin on server1.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $server1_port= `SELECT @@GLOBAL.PORT`

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

--echo
--echo ############################################################
--echo # 2. Bootstrap server1 and add some data

--source include/start_and_bootstrap_group_replication.inc

CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);
INSERT INTO t1 VALUES (2);

--echo
--echo #######################################################################
--echo # 3. Restart server 2 with a monitoring process (mysqld_safe) if needed
--echo #    Remove the default channel from server1 to server2

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $_group_replication_local_address= `SELECT @@GLOBAL.group_replication_local_address`
--let $_group_replication_group_seeds= `SELECT @@GLOBAL.group_replication_group_seeds`
--let $_group_replication_start_boot_save= `SELECT @@GLOBAL.group_replication_start_on_boot`
--let $_group_replication_comm_stack= `SELECT @@GLOBAL.group_replication_communication_stack`

RESET SLAVE ALL;

--let $plugin_list= $GROUP_REPLICATION
--let $mysqld_extra_settings= "--skip-replica-start=0"
--source include/spawn_monitoring_process.inc

--echo
--echo ############################################################
--echo # 4. Setup the server so group replication starts on boot
--echo #    Install the Clone plugin

--disable_query_log
--eval SET PERSIST group_replication_group_name= "$group_replication_group_name"
--eval SET PERSIST group_replication_local_address= "$_group_replication_local_address"
--eval SET PERSIST group_replication_group_seeds= "$_group_replication_group_seeds"
--eval SET PERSIST  group_replication_communication_stack= "$_group_replication_comm_stack"

SET PERSIST group_replication_start_on_boot= ON;
--enable_query_log

# Re configure the recovery channel due to the above RESET SLAVE command.
CHANGE REPLICATION SOURCE TO SOURCE_USER="root" FOR CHANNEL "group_replication_recovery";

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

--echo
--echo ############################################################
--echo # 5. Create a new channel from server 3 into server 2

--replace_result $SERVER_MYPORT_3 SERVER_3_PORT
--eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='localhost', SOURCE_USER='root', SOURCE_PORT=$SERVER_MYPORT_3 for channel 'ch3_2'

--echo
--echo ############################################################
--echo # 6. Restart the server making it use clone on start
--echo #    Check that clone goes ok

# Ensure the clone is used on restart
--let $_group_replication_threshold_save= `SELECT @@GLOBAL.group_replication_clone_threshold`
SET PERSIST group_replication_clone_threshold= 1;

RESTART;

# Wait for it to restart after the command
--source include/wait_until_disconnected.inc
--enable_reconnect
--source include/wait_until_connected_again.inc

# Wait for it to restart after cloning
--source include/wait_until_disconnected.inc

--let $rpl_server_number= 2
--source include/rpl_reconnect.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $group_replication_member_state=ONLINE
--source include/gr_wait_for_member_state.inc

--let $assert_text= Clone must be completed
--let $assert_cond= [SELECT state="Completed" FROM performance_schema.clone_status] = 1;
--source include/assert.inc

# See if the data has been properly cloned in server2
--let $diff_tables=server1:test.t1 ,server2:test.t1
--source include/diff_tables.inc

--echo
--echo ############################################################
--echo # 7. Check the channel threads failed to start due to clone

# Verify in the log file that the applier thread failed
--let $assert_file= $MYSQLTEST_VARDIR/log/mysqld.2.err
--let $assert_text = The applier thread for channel ch3_2 failed to start
--let $assert_select = The 'slave applier' thread of channel 'ch3_2' will error out as the server will attempt to clone another server
--let $assert_count = 1
--source include/assert_grep.inc

# Verify in the log file that the IO thread failed
--let $assert_file= $MYSQLTEST_VARDIR/log/mysqld.2.err
--let $assert_text = The IO thread for channel ch3_2 failed to start
--let $assert_select = The 'slave IO' thread of channel 'ch3_2' will error out as the server will attempt to clone another server
--let $assert_count = 1
--source include/assert_grep.inc

--echo
--echo ############################################################
--echo # 8. Cleanup


RESET PERSIST IF EXISTS group_replication_group_name;
RESET PERSIST IF EXISTS group_replication_local_address;
RESET PERSIST IF EXISTS group_replication_group_seeds;
RESET PERSIST IF EXISTS group_replication_start_on_boot;
RESET PERSIST IF EXISTS group_replication_clone_threshold;
RESET PERSIST IF EXISTS group_replication_communication_stack;

--eval SET GLOBAL group_replication_clone_threshold= $_group_replication_threshold_save

DROP TABLE t1;

--source include/rpl_sync.inc

set session sql_log_bin=0;
call mtr.add_suppression("This member will start distributed recovery using clone. It is due to the number of missing transactions being higher than the configured threshold of*");
call mtr.add_suppression("The 'slave IO' thread of channel 'ch3_2' will error out as the server will attempt to clone another server");
call mtr.add_suppression("The 'slave applier' thread of channel 'ch3_2' will error out as the server will attempt to clone another server");
call mtr.add_suppression("Run function 'thread_start' in plugin 'group_replication' failed");
call mtr.add_suppression("Run function 'applier_start' in plugin 'group_replication' failed");
call mtr.add_suppression("Slave I/O for channel 'ch3_2': Fatal error: Failed to run 'thread_start' hook, Error_code: MY-013117");
call mtr.add_suppression("Slave SQL for channel 'ch3_2': Fatal error: Failed to run 'applier_start' hook, Error_code: MY-013117");
call mtr.add_suppression("Clone removing all user data for provisioning: Started");
call mtr.add_suppression("Clone removing all user data for provisioning: Finished");
set session sql_log_bin=1;

UNINSTALL PLUGIN clone;

--source include/clean_monitoring_process.inc

--replace_result $_group_replication_start_boot_save START_ON_BOOT_VALUE
--eval SET GLOBAL group_replication_start_on_boot= $_group_replication_start_boot_save

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

UNINSTALL PLUGIN clone;

--source include/group_replication_end.inc
