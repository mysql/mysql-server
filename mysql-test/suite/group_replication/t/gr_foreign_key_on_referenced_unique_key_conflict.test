################################################################################
# Test case to verify that concurrent transactions with intersecting
# write set, on foreign key that references a unique key, do conflict.
#
# Test:
# 0. The test requires two servers: M1 and M2.
# 1. With both members ONLINE. Create a table on M1.
# 2. Set a debug sync before broadcast message to group on M1. Commit a
#    transaction that will be blocked before broadcast.
# 3. Wait until M1 reaches the debug sync point.
# 4. Execute a transaction on M2, that will reach first certification, since M1
#    is blocked before broadcast.
# 5. Signal the waiting thread on M1 to resume.
# 6. It will end up in an error stating that it was aborted, since transactions
#    are conflicting and M2 was ordered first.
# 7. Assert that number of certified transactions are the expected ones.
#
# Checking the positive case in which there is no conflict:
# 8. Set a debug sync before broadcast message to group on M1. Commit a
#    transaction that will be block before broadcast.
# 9. Wait until M1 reaches the debug sync point.
# 10. Execute a transaction on M2, that will reach first certification, since M1
#     is blocked before broadcast.
# 11. Signal the waiting thread on M1 to resume.
# 12. It will execute without error as the conflicting transactions have been
#     removed.
# 13. Assert that number of certified transactions are the expected ones.
# 14. Clean up.
################################################################################

--source include/have_debug_sync.inc
--source include/have_group_replication_plugin.inc
--source include/group_replication.inc

--echo
--echo ############################################################
--echo # Create a table on server1.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
CREATE TABLE t1 (c1 INT PRIMARY KEY, c2 INT, UNIQUE KEY(c2));
CREATE TABLE t2 (x1 INT PRIMARY KEY, x2 INT, FOREIGN KEY (x2) REFERENCES t1(c2));
INSERT INTO t1 VALUES (1,1);
--source include/rpl_sync.inc

#
# DELETE:
#   WS= {t1.c1=1, t1.c2=1}
#
# INSERT:
#   WS= {t2.x1=1. t1.c2=1}
#
# Outcome: T1 must abort, T2 must commit.
#

--let $local_server_connection1=server1
--let $local_server_connection2=server_1
--let $remote_server_connection=server2
--let $local_transaction= DELETE FROM t1 WHERE c1=1
--let $remote_transaction=INSERT INTO t2 VALUES (1,1)
--let $conflict_test=1
--source include/gr_parallel_local_and_remote_transactions.inc

--echo
--echo ############################################################
--echo # Checking the positive case in which there is no conflict.
--echo ############################################################
--echo
INSERT INTO t1 VALUES (2,2);
INSERT INTO t1 VALUES (3,3);
--source include/rpl_sync.inc

#
# DELETE:
#   WS= {t1.c1=2, t1.c2=2}
#
# INSERT:
#   WS= {t2.x1=3. t1.c2=3}
#
# Outcome: T1 and T2 must commit.
#

--let $local_server_connection1=server1
--let $local_server_connection2=server_1
--let $remote_server_connection=server2
--let $local_transaction= DELETE FROM t1 WHERE c1=2
--let $remote_transaction=INSERT INTO t2 VALUES (3,3)
--let $conflict_test=0
--source include/gr_parallel_local_and_remote_transactions.inc

--echo
--echo ############################################################
--echo # Check the data sanity
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--source include/rpl_sync.inc

--let $assert_text= Table t1 will contain tuple (1,1)
--let $assert_cond= "[SELECT COUNT(*) AS count FROM t1 WHERE c1 = 1 AND c2 = 1, count, 1]" = "1"
--source include/assert.inc

--let $assert_text= Table t1 will contain tuple (3,3)
--let $assert_cond= "[SELECT COUNT(*) AS count FROM t1 WHERE c1 = 3 AND c2 = 3, count, 1]" = "1"
--source include/assert.inc

--let $assert_text= Table t1 will contain 2 rows
--let $assert_cond= "[SELECT COUNT(*) FROM t1]" = "2"
--source include/assert.inc

--let $assert_text= Table t2 will contain tuple (1,1)
--let $assert_cond= "[SELECT COUNT(*) AS count FROM t2 WHERE x1 = 1 AND x2 = 1, count, 1]" = "1"
--source include/assert.inc

--let $assert_text= Table t2 will contain tuple (3,3)
--let $assert_cond= "[SELECT COUNT(*) AS count FROM t2 WHERE x1 = 3 AND x2 = 3, count, 1]" = "1"
--source include/assert.inc

--let $assert_text= Table t2 will contain 2 rows
--let $assert_cond= "[SELECT COUNT(*) FROM t2]" = "2"
--source include/assert.inc

--let $diff_tables= server1:test.t1, server2:test.t1
--source include/diff_tables.inc

--let $diff_tables= server1:test.t2, server2:test.t2
--source include/diff_tables.inc


--echo
--echo ############################################################
--echo # Clean up.
DROP TABLE t2;
DROP TABLE t1;

--source include/group_replication_end.inc
