#
# Test case to verify when roles changes in Group Replication
# then weight is re-assigned based on role change.
#
# Test:
# 0. This test needs 3 servers:
#      server1: primary
#      server2: secondary
#      server3: single server replica
# 1. Start GR on M1(primary) and M2(secondary)
# 2. Add asynchronous connection failover servers and
#    verify that they are inserted successfully in
#    performance_schema.replication_asynchronous_connection_failover.
# 3. Create and start new channel ch1_3: M3(replica), M1(source)
#    and verify channel ch1_3 IO and SQL THREADS are ON.
# 4. Verify 2 senders are added automatically to
#    replication_asynchronous_connection_failover table.
# 5. Make M2 primary.
# 6. Verify M2 is new source with higher weight in
#    performance_schema.replication_asynchronous_connection_failover
# 7. Switch to multi primary mode.
# 8. Verify M1 and M2 both have same primary_weight.
# 9. Switch to single primary mode with M1 as primary.
# 10. Verify M1 has higher weight and M2 has lower weight.
#     Verify M1 is new source.
# 11. Cleanup.
#

--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_group_replication_single_primary_mode=1
--let $rpl_server_count= 3
--source include/group_replication.inc


--echo
--echo # 1. Start GR on M1(primary) and M2(secondary)
--echo

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $server1_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--source include/start_and_bootstrap_group_replication.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $server2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--source include/start_group_replication.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

SET SESSION sql_log_bin = 0;
call mtr.add_suppression("The master's UUID has changed, although this should not happen unless you have changed it manually. The old UUID was.*");
call mtr.add_suppression("The source.*for channel.*has joined the group.*and so added its entry into replication_asynchronous_connection_failover table");
call mtr.add_suppression("The group .* for the channel .* has been removed, and so removed its entry from replication_asynchronous_connection_failover_managed and all the group members from replication_asynchronous_connection_failover table.");
call mtr.add_suppression("The group .* for the channel .* has been added, and so added its entry in replication_asynchronous_connection_failover_managed and source to replication_asynchronous_connection_failover table.");
SET SESSION sql_log_bin = 1;

--echo
--echo # 2. Add asynchronous connection failover servers and
--echo #    verify that they are inserted successfully in
--echo #    performance_schema.replication_asynchronous_connection_failover.
--echo

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $_tmp_gr_group_name1= `SELECT @@GLOBAL.group_replication_group_name`

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--replace_result $SERVER_MYPORT_1 SERVER_MYPORT_1 $_tmp_gr_group_name1 GROUP_NAME
--eval SELECT asynchronous_connection_failover_add_managed('ch1_3', 'GroupReplication', '$_tmp_gr_group_name1', '127.0.0.1', $SERVER_MYPORT_1, '', 70, 60);

--let $assert_text= 'There is one row in performance_schema.replication_asynchronous_connection_failover'
--let $assert_cond= [SELECT  COUNT(*) count FROM performance_schema.replication_asynchronous_connection_failover, count, 1] = 1
--source include/assert.inc

--echo
--echo # 3. Create and start new channel ch1_3: M3(replica), M1(source)
--echo #    and verify channel ch1_3 IO and SQL THREADS are ON.
--echo

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--replace_result $SERVER_MYPORT_1 SERVER_1_PORT
--eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_USER='root', SOURCE_AUTO_POSITION=1, SOURCE_CONNECTION_AUTO_FAILOVER=1, SOURCE_PORT=$SERVER_MYPORT_1, SOURCE_CONNECT_RETRY=1, SOURCE_RETRY_COUNT=2 for channel 'ch1_3'
--let $rpl_channel_name='ch1_3'
--source include/start_slave.inc
--let $rpl_channel_name=

--let $assert_text= Verify channel ch1_3 IO_THREAD is ON
--let $assert_cond= "[SELECT SERVICE_STATE FROM performance_schema.replication_connection_status WHERE channel_name = \'ch1_3\', SERVICE_STATE, 1]" = "ON"
--source include/assert.inc

--let $assert_text= Verify channel ch1_3 SQL_THREAD is ON
--let $assert_cond= "[SELECT SERVICE_STATE FROM performance_schema.replication_applier_status WHERE channel_name = \'ch1_3\', SERVICE_STATE, 1]" = "ON"
--source include/assert.inc

--echo
--echo # 4. Verify 2 senders are added automatically to
--echo #    replication_asynchronous_connection_failover table.
--echo

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--let $wait_condition= SELECT COUNT(*)=2 FROM performance_schema.replication_asynchronous_connection_failover;
--source include/wait_condition.inc

--let $assert_text= 'Connected to server1 now.'
--let $assert_cond= [SELECT Port FROM performance_schema.replication_connection_configuration WHERE CHANNEL_NAME = \'ch1_3\', Port, 1] = $SERVER_MYPORT_1
--source include/assert.inc

--echo
--echo # 5. Make M2 primary.
--echo

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--replace_result $server2_uuid MEMBER2_UUID
--eval SELECT group_replication_set_as_primary("$server2_uuid")

--echo
--echo # 6. Verify M2 is new source with higher weight in
--echo #    performance_schema.replication_asynchronous_connection_failover
--echo

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--let $wait_condition= SELECT COUNT(*)=2 FROM performance_schema.replication_asynchronous_connection_failover;
--source include/wait_condition.inc

--let $wait_condition= SELECT WEIGHT=60 FROM performance_schema.replication_asynchronous_connection_failover WHERE PORT = $SERVER_MYPORT_1;
--source include/wait_condition.inc

--let $wait_condition= SELECT WEIGHT=70 FROM performance_schema.replication_asynchronous_connection_failover WHERE PORT = $SERVER_MYPORT_2;
--source include/wait_condition.inc

--let $wait_condition= SELECT COUNT(*)=1 FROM performance_schema.replication_connection_configuration WHERE HOST = '127.0.0.1' AND PORT = $SERVER_MYPORT_2
--source include/wait_condition.inc


--echo
--echo # 7. Switch to multi primary mode.
--echo

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SELECT group_replication_switch_to_multi_primary_mode();

--echo
--echo # 8. Verify M1 and M2 both have same primary_weight.
--echo

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--let $wait_condition= SELECT WEIGHT=70 FROM performance_schema.replication_asynchronous_connection_failover WHERE PORT = $SERVER_MYPORT_2;
--source include/wait_condition.inc

--let $wait_condition= SELECT WEIGHT=70 FROM performance_schema.replication_asynchronous_connection_failover WHERE PORT = $SERVER_MYPORT_1;
--source include/wait_condition.inc

--echo
--echo # 9. Switch to single primary mode with M1 as primary.
--echo

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--replace_result $server1_uuid MEMBER1_UUID
--eval SELECT group_replication_switch_to_single_primary_mode("$server1_uuid")

--echo
--echo # 10. Verify M1 has higher weight and M2 has lower weight.
--echo #     Verify M1 is new source.
--echo

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--let $wait_condition= SELECT WEIGHT=70 FROM performance_schema.replication_asynchronous_connection_failover WHERE PORT = $SERVER_MYPORT_1;
--source include/wait_condition.inc

--let $wait_condition= SELECT WEIGHT=60 FROM performance_schema.replication_asynchronous_connection_failover WHERE PORT = $SERVER_MYPORT_2;
--source include/wait_condition.inc

--let $wait_condition= SELECT COUNT(*)=1 FROM performance_schema.replication_connection_configuration WHERE HOST = '127.0.0.1' AND PORT = $SERVER_MYPORT_1
--source include/wait_condition.inc

--echo
--echo # 11. Cleanup.
--echo

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--let $rpl_channel_name='ch1_3'
--source include/stop_slave.inc

--let $rpl_reset_slave_all= 1
--let $rpl_multi_source= 1
--source include/rpl_reset_slave.inc
--let $rpl_channel_name=
--let $rpl_reset_slave_all=
--let $rpl_multi_source=

--replace_result $group_replication_group_name GROUP_NAME
--eval SELECT asynchronous_connection_failover_delete_managed('ch1_3', '$group_replication_group_name')

--replace_result $SERVER_MYPORT_1 SERVER_1_PORT
--eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_USER='root', SOURCE_PORT=$SERVER_MYPORT_1 FOR CHANNEL 'ch1_3'

--let $skip_recovery_configuration= 1
--let $rpl_group_replication_reset_persistent_vars=1
--source include/group_replication_end.inc
