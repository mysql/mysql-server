################################################################################
# This test validates UDF group_replication_set_as_primary and confirms
# that connection running a START TRANSACTION that did not reach commit stage
# is disconnected when UDF group_replication_set_as_primary is executed.
# UDF group_replication_set_as_primary runs successfully and primary is changed.
#
# Test:
# 0. The test requires two servers: M1 and M2.
# 1. Start group in single primary mode.
#    Server1 will be primary and server2 secondary.
# 2. Execute "START TRANSACTION" on server1.
# 3. Begin change of primary from server2(secondary).
# 4. Assert primary changed.
# 5. Transaction on server1 should fail, since it blocks the UDF.
#    Client connection is dropped.
# 6. Execute "START TRANSACTION" on server2.
# 7. Begin change of primary from server2(primary).
# 8. Assert primary changed.
# 9. Transaction on server2 should fail, since it blocks the UDF.
#    Client connection is dropped.
# 10. Execute "BEGIN WORK" on server1.
# 11. Begin change of primary from server2(secondary).
# 12. Assert primary changed.
# 13. Transaction on server1 should fail, since it blocks the UDF.
#    Client connection is dropped.
# 14. Execute "BEGIN WORK" on server2.
# 15. Begin change of primary from server2(primary).
# 16. Assert primary changed.
# 17. Transaction on server2 should fail, since it blocks the UDF.
#    Client connection is dropped.
# 18. Cleanup.
################################################################################
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_group_replication_single_primary_mode=1
--source include/group_replication.inc

--echo
--echo # 1. Start group in single primary mode.
--echo #    Server1 will be primary and server2 secondary.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

CREATE TABLE test.t1(c1 int primary key);
--let $server1_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)
--source include/start_and_bootstrap_group_replication.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $server2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)
--source include/start_group_replication.inc

--echo
--echo # 2. Execute "START TRANSACTION" on server1.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

START TRANSACTION;

--echo
--echo # 3. Begin change of primary from server2(secondary).

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--replace_result $server2_uuid MEMBER2_UUID
--eval SELECT group_replication_set_as_primary("$server2_uuid",3)

--echo
--echo # 4. Assert primary changed.

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--source include/gr_assert_primary_member.inc

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

--source include/gr_assert_secondary_member.inc

--echo
--echo # 5. Transaction on server1 should fail, since it blocks the UDF.
--echo #    Client connection is dropped.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--error CR_SERVER_LOST
--enable_reconnect
--source include/wait_until_connected_again.inc
--disable_reconnect

--echo
--echo # 6. Execute "START TRANSACTION" on server2.

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

START TRANSACTION;
SELECT * FROM test.t1;

--echo
--echo # 7. Begin change of primary from server2(primary).

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--replace_result $server1_uuid MEMBER2_UUID
--eval SELECT group_replication_set_as_primary("$server1_uuid",1)

--echo
--echo # 8. Assert primary changed.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/gr_assert_primary_member.inc

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--source include/gr_assert_secondary_member.inc

--echo
--echo # 9. Transaction on server2 should fail, since it blocks the UDF.
--echo #    Client connection is dropped.

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--error CR_SERVER_LOST
--enable_reconnect
--source include/wait_until_connected_again.inc
--disable_reconnect

--echo
--echo # 10. Execute "BEGIN WORK" on server1.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

BEGIN WORK;

--echo
--echo # 11. Begin change of primary from server2(secondary).

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--replace_result $server2_uuid MEMBER2_UUID
--eval SELECT group_replication_set_as_primary("$server2_uuid",3)

--echo
--echo # 12. Assert primary changed.

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--source include/gr_assert_primary_member.inc

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

--source include/gr_assert_secondary_member.inc

--echo
--echo # 13. Transaction on server1 should fail, since it blocks the UDF.
--echo #    Client connection is dropped.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--error CR_SERVER_LOST
--enable_reconnect
--source include/wait_until_connected_again.inc
--disable_reconnect

--echo
--echo # 14. Execute "BEGIN WORK" on server2.

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

BEGIN WORK;
SELECT * FROM test.t1;

--echo
--echo # 15. Begin change of primary from server2(primary).

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--replace_result $server1_uuid MEMBER2_UUID
--eval SELECT group_replication_set_as_primary("$server1_uuid",1)

--echo
--echo # 16. Assert primary changed.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/gr_assert_primary_member.inc

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--source include/gr_assert_secondary_member.inc

--echo
--echo # 17. Transaction on server2 should fail, since it blocks the UDF.
--echo #    Client connection is dropped.

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--error CR_SERVER_LOST
--enable_reconnect
--source include/wait_until_connected_again.inc
--disable_reconnect

--echo
--echo # 18. Cleanup.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

DROP TABLE test.t1;

--source include/group_replication_end.inc
