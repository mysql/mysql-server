########################################################################
#
#   Only a member that does support the send service, can send messages.
#   This test simulate a non-supported versions.
#
# Test:
#   0. This test requires two servers
#   1. Load plugin replication observers example on server1
#   2. Disable support to send service
#   3. Bootstrap group
#   4. Load plugin replication observers example on server2
#   5. Join server2 to the group
#   6. Execute UDF that will transmit tag and message over GR send service
#   7. On server 1 execute UDF but message won't be sent, service is
#      disabled
#   8. To decrease failure rate on assert_grep we do a transaction with
#      AFTER consistency to add some rounds on GCS communication and stop GR on
#      server1, which will make it wait for the delivery of new view, and
#      that will happen only after delivery of service message. This will
#      give some time to server to receive and write it to error log.
#   9. Assert server1 only received message from server 2
#  10. Assert server2 received only message from itself
#  11. Cleanup
#
########################################################################

--source include/have_debug.inc
--source include/have_replication_observers_example_plugin.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc

--echo
--echo # 1. Load plugin replication observers example on server1

--source include/install_replication_observers_example.inc

--echo
--echo # 2. Disable support to send service

--let $debug_point= gr_message_service_disable_send
--source include/add_debug_point.inc

--echo
--echo # 3. Bootstrap group

--source include/start_and_bootstrap_group_replication.inc

--echo
--echo # 4. Load plugin replication observers example on server2

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--source include/install_replication_observers_example.inc

--echo
--echo # 5. Join server2 to the group

--source include/start_group_replication.inc

--echo
--echo # 6. Execute UDF that will transmit tag and message over GR send service

SELECT group_replication_service_message_send("tag", "Server2 sent a message");

--echo
--echo # 7. On server 1 execute UDF but message won't be sent, service is
--echo #    disabled

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--error ER_UDF_ERROR
SELECT group_replication_service_message_send("tag", "Server1 sent a message");

--echo
--echo # 8. To decrease failure rate on assert_grep we do a transaction with
--echo #    AFTER consistency to add some rounds on GCS communication and stop GR on
--echo #    server1, which will make it wait for the delivery of new view, and
--echo #    that will happen only after delivery of service message. This will
--echo #    give some time to server to receive and write it to error log.

SET @@SESSION.group_replication_consistency= 'AFTER';
CREATE TABLE t1 (a INT NOT NULL AUTO_INCREMENT PRIMARY KEY , b INT);
DROP TABLE test.t1;
--source include/stop_group_replication.inc

--echo
--echo # 9. Assert server1 only received message from server 2

--let $assert_file= $MYSQLTEST_VARDIR/tmp/gr_message_service_disabled_send.1.err
--let $assert_count = 1
--let $assert_select = Plugin replication_observers_example reported: 'Service message recv TAG: "tag", TAG_SIZE: 3, MSG: "Server2 sent a message", MSG_SIZE: 22.'
--let $assert_text = Server 1 received a message from server 2.
--source include/assert_grep.inc

--echo
--echo # 10. Assert server2 received only message from itself

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $assert_file= $MYSQLTEST_VARDIR/tmp/gr_message_service_disabled_send.2.err
--let $assert_count = 1
--let $assert_select = Plugin replication_observers_example reported: 'Service message recv TAG: "tag", TAG_SIZE: 3, MSG: "Server2 sent a message", MSG_SIZE: 22.'
--let $assert_text = Server 2 received message from itself.
--source include/assert_grep.inc

--echo
--echo # 11. Cleanup

--source include/uninstall_replication_observers_example.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $debug_point= gr_message_service_disable_send
--source include/remove_debug_point.inc

--source include/start_group_replication.inc

--source include/uninstall_replication_observers_example.inc

--source include/group_replication_end.inc
