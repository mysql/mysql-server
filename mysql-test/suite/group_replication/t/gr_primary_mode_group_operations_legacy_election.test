###############################################################################
#
# When a member with a lower version is present all members shall use the old
# primary election algorithm.
#
# Test:
#   0. This test requires three servers
#   1. Bootstrap group replication on server1 with 8.0.12 version.
#   2. Configure server2 with 8.0.12 version, and start group replication
#   3. Start group replication on server3 with a higher weight
#   4. Stop group replication on server1 to force election of a new primary
#   5. Check server3 is the primary and server2 the secondary
#   6. Increase the weight on server2
#   7. Start group replication on server1
#   8. Stop group replication on server3 to force election of a new primary
#   9. Check server2 is the primary and server1 the secondary
#  10. Check the messages logged were for legacy elections.
#  11. Check also that an action cannot be executed when a member with an
#      older version is present.
#  12. Cleanup
#
###############################################################################

--source include/big_test.inc
--source include/have_debug.inc
--source include/have_group_replication_plugin.inc
--let $rpl_server_count= 3
--let $rpl_skip_group_replication_start= 1
--let $rpl_group_replication_single_primary_mode=1
--source include/group_replication.inc

--echo
--echo # 1. Bootstrap group replication on server1 with 8.0.12 version.

set session sql_log_bin=0;
call mtr.add_suppression("The function 'group_replication_switch_to_multi_primary_mode' failed. The group has a member with a version that does not support group coordinated operations.");
set session sql_log_bin=1;
SET @debug1_save= @@GLOBAL.DEBUG;
# Make server1 lower version so others can join group,
# since patch level is considered lower versions will not join later
SET @@GLOBAL.DEBUG= '+d,group_replication_legacy_election_version';
--source include/start_and_bootstrap_group_replication.inc

--echo
--echo # 2. Configure server2 with 8.0.12 version, and start group replication

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

set session sql_log_bin=0;
call mtr.add_suppression("Error while executing a group configuration operation: The group has a member with a version that does not support group coordinated operations.");
set session sql_log_bin=1;

# Cause the member to broadcast and compare himself using a minor version
SET @debug2_save= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG= '+d,group_replication_legacy_election_version';

--source include/start_group_replication.inc

--echo
--echo # 3. Start group replication on server3 with a higher weight

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

SET GLOBAL group_replication_member_weight= 90;
# server1 started with legacy version, so server2 and server3 are read compatible
set session sql_log_bin=0;
call mtr.add_suppression("Member version is read compatible with the group.");
set session sql_log_bin=1;

--source include/start_group_replication.inc

--echo
--echo # 4. Stop group replication on server1 to force election of a new primary

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/stop_group_replication.inc

--echo
--echo # 5. Check server3 is the primary and server2 the secondary

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--source include/gr_assert_primary_member.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--source include/gr_assert_secondary_member.inc

--echo
--echo # 6. Increase the weight on server2

SET GLOBAL group_replication_member_weight= 95;

--echo
--echo # 7. Start group replication on server1

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/start_group_replication.inc

--echo
--echo # 8. Stop group replication on server3 to force election of a new primary

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--source include/stop_group_replication.inc

--echo
--echo # 9. Check server2 is the primary and server1 the secondary

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--source include/gr_assert_primary_member.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/gr_assert_secondary_member.inc

--echo
--echo # 10. Check the messages logged were for legacy elections.

--sleep 1

--let $assert_file= $MYSQLTEST_VARDIR/log/mysqld.2.err
--let $assert_only_after = CURRENT_TEST: group_replication.gr_primary_mode_group_operations_legacy_election
--let $assert_count = 2
--let $assert_select = was elected. Enabling conflict detection until the new primary applies all relay logs.
--let $assert_text = Found the messages for two elections
--source include/assert_grep.inc

--echo
--echo # 11. Check also that an action cannot be executed
--echo #     when a member with an older version is present.

--error ER_GRP_RPL_UDF_ERROR
SELECT group_replication_switch_to_multi_primary_mode();

--echo
--echo # 12. Cleanup

SET @@GLOBAL.DEBUG= @debug1_save;

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--source include/stop_group_replication.inc

SET @@GLOBAL.DEBUG= @debug2_save;
SET @@GLOBAL.group_replication_member_weight= DEFAULT;

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

SET @@GLOBAL.group_replication_member_weight= DEFAULT;

--source include/group_replication_end.inc
