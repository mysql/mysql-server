###############################################################################
# This test verifies that Group Replication is not allowed to start while the
# server is being provisioned by clone.
#
# 0. The test requires two servers: M1 and M2.
# 1. Install the clone plugin on server 1
# 2. Bootstrap server1 and add some data
# 3. Restart server 2 with a monitoring process (mysqld_safe) if needed
#    Persist connection information so we can start GR after restart
# 4. Start clone on server2
#    Set a debug point so it blocks
# 5. Verify that GR cannot be started while clone is ongoing.
# 6. Resume clone
# 7. Start GR on server2.
# 8. Cleanup
#

--source include/big_test.inc
--source include/have_debug_sync.inc
--source include/have_mysqld_monitoring_process.inc
--source include/have_clone_plugin.inc
--source include/force_restart.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc

# Validate plugins
--let plugins = CLONE_PLUGIN,GROUP_REPLICATION
--source include/check_plugin_dir.inc

--echo
--echo ############################################################
--echo # 1. Install clone plugin on server1.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $server1_port= `SELECT @@GLOBAL.PORT`

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

--echo
--echo ############################################################
--echo # 2. Bootstrap server1 and add some data

--source include/start_and_bootstrap_group_replication.inc

CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);
INSERT INTO t1 VALUES (2);

--echo
--echo ########################################################################
--echo # 3. Restart server 2 with a monitoring process (mysqld_safe) if needed
--echo #    Persist connection information so we can start GR after restart

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $_group_replication_local_address= `SELECT @@GLOBAL.group_replication_local_address`
--let $_group_replication_group_seeds= `SELECT @@GLOBAL.group_replication_group_seeds`

--let $plugin_list= $GROUP_REPLICATION
--source include/spawn_monitoring_process.inc

--disable_query_log
--eval SET PERSIST  group_replication_group_name= "$group_replication_group_name"
--eval SET PERSIST  group_replication_local_address= "$_group_replication_local_address"
--eval SET PERSIST  group_replication_group_seeds= "$_group_replication_group_seeds"
--enable_query_log

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

--echo
--echo ############################################################
--echo # 4. Start clone on server2
--echo #    Set a debug point so it blocks
--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

SET GLOBAL clone_autotune_concurrency = OFF;
SET GLOBAL clone_max_concurrency = 1;
SET DEBUG_SYNC = 'clone_file_copy SIGNAL clone_paused WAIT_FOR resume_clone';

--replace_result $server1_port SERVER1_PORT
--eval SET GLOBAL clone_valid_donor_list='localhost:$server1_port'
--replace_result $server1_port SERVER1_PORT
--send_eval CLONE INSTANCE FROM 'root'@localhost:$server1_port IDENTIFIED BY '';

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
SET DEBUG_SYNC = 'now WAIT_FOR clone_paused';

--echo
--echo ############################################################
--echo # 5. Verify that GR cannot be started while clone is ongoing.

--error ER_GROUP_REPLICATION_COMMAND_FAILURE
START GROUP_REPLICATION;

--echo ############################################################
--echo # 6. Resume clone.

SET DEBUG_SYNC = 'now SIGNAL resume_clone';

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc
--reap

--source include/wait_until_disconnected.inc

--let $rpl_server_number= 2
--source include/rpl_reconnect.inc

--echo ############################################################
--echo # 7. Start GR on server2.
--source include/start_group_replication.inc

# See if the data has been properly cloned in server2
--let $diff_tables=server1:test.t1 ,server2:test.t1
--source include/diff_tables.inc

--echo
--echo ############################################################
--echo # 8. Cleanup

SET DEBUG_SYNC = 'RESET';

RESET PERSIST IF EXISTS group_replication_group_name;
RESET PERSIST IF EXISTS group_replication_local_address;
RESET PERSIST IF EXISTS group_replication_group_seeds;

DROP TABLE test.t1;

--source include/rpl_sync.inc

SET SESSION sql_log_bin=0;
call mtr.add_suppression("Clone removing all user data for provisioning: Started");
call mtr.add_suppression("Clone removing all user data for provisioning: Finished");
SET SESSION sql_log_bin=1;

--source include/clean_monitoring_process.inc

--source include/group_replication_end.inc
