###############################################################################
#
# If the action thread is killed but the configuration process
# still has major tasks to complete the member shall leave the group.
#
# Test:
#  0. Group start in Multi Primary mode with 3 servers
#  1. Get a transaction stuck on server 2 (the new primary) with a table lock
#  2. Do a change to single primary mode with server 2 as the new primary
#     Get the connection ID
#     Check it is stuck on Primary election
#  3. Kill the query
#  4. Check the member left the group and moved into ERROR state
#  5. Unlock the table, check the action completed in the other members
#  6. Cleanup
#
###############################################################################

--source include/big_test.inc
--source include/have_group_replication_plugin.inc
--let $rpl_server_count= 3
--source include/group_replication.inc

set session sql_log_bin=0;
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("A configuration change was killed in this member. The member will now leave the group as its configuration may have diverged.");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
call mtr.add_suppression("The function 'group_replication_switch_to_single_primary_mode' failed. This operation was locally killed and for that reason terminated*");
set session sql_log_bin=1;

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $server2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

CREATE TABLE test.t1 (a INT PRIMARY KEY);
--source include/rpl_sync.inc

--echo
--echo # 1. Get a transaction stuck on server 2 (the new primary) with a table lock

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

LOCK TABLE t1 WRITE;

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

INSERT INTO t1 VALUES (1);

--echo
--echo # 2. Do a change to single primary mode with server 2 as the new primary
--echo # Get the connection ID
--echo # See that it is stuck on Primary election

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $conn_id=`SELECT CONNECTION_ID()`

--replace_result $server2_uuid MEMBER2_UUID
--send_eval SELECT group_replication_switch_to_single_primary_mode("$server2_uuid")

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.events_stages_current WHERE event_name LIKE "%Single-primary Switch: executing Primary%" and work_completed=1
--source include/wait_condition.inc

--let $stage_name= `SELECT event_name FROM performance_schema.events_stages_current WHERE event_name LIKE "%Single-primary Switch:%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%";`
--let $assert_text= The stage should be "Single-primary Switch: executing Primary election"
--let $assert_cond= "$stage_name" = "stage/group_rpl/Single-primary Switch: executing Primary election"
--source include/assert.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.events_stages_current WHERE event_name LIKE "%Single-primary Switch: executing Primary%" and work_completed=1
--source include/wait_condition.inc

--let $stage_name= `SELECT event_name FROM performance_schema.events_stages_current WHERE event_name LIKE "%Single-primary Switch:%";`
--let $assert_text= The stage should be "Single-primary Switch: executing Primary election"
--let $assert_cond= "$stage_name" = "stage/group_rpl/Single-primary Switch: executing Primary election"
--source include/assert.inc

--echo
--echo # 3. Kill the query

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

--replace_result $conn_id CONNECTION_ID
--eval KILL QUERY $conn_id

--echo
--echo # 4. Check the member left the group and moved into ERROR state

--let $group_replication_member_state= ERROR
--source include/gr_wait_for_member_state.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--let $group_replication_number_of_members= 2
--source include/gr_wait_for_number_of_members.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--replace_result $server2_uuid MEMBER2_UUID
--error ER_GRP_RPL_UDF_ERROR
--reap

--echo
--echo # 5. Unlock the table, check the action completed in the other members

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

UNLOCK TABLES;

--let $wait_condition=SELECT COUNT(*)=0 FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%"
--source include/wait_condition.inc

--source include/gr_assert_primary_member.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--let $wait_condition=SELECT COUNT(*)=0 FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl%" AND event_name NOT LIKE "%stage/group_rpl/Group Replication%"
--source include/wait_condition.inc

--source include/gr_assert_secondary_member.inc

--echo
--echo # 6. Cleanup

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/stop_group_replication.inc
--source include/start_group_replication.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

DROP TABLE t1;

--let $rpl_group_replication_single_primary_mode=1
--let $rpl_group_replication_reset_persistent_vars=1
--source include/group_replication_end.inc
