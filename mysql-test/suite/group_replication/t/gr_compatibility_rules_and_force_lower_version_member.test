################################################################################
# This test checks that if a joiner has rule that makes it incompatible with
# another member in the group it wont be able to join it, even if option
# group_replication_allow_local_lower_version_join is enabled.
#
# To test this:
# 0. The test requires two servers: M1 and M2.
# 1. We start M1 with a higher version through DEBUG, and add some data for
#    recovery.
# 2. Try to start M2 where we added a fake rule that makes it incompatible
#    with the group, has lower version than group, simultaneously with option
#    group_replication_allow_local_lower_version_join enabled. Start GR should
#    fail since it is declared incompatible with the group.
# 3. Try to start M2 again post clearing the incompatibilty rule, it still has
#    lower version than group, simultaneously with option
#    group_replication_allow_local_lower_version_join enabled. Restart M2 to
#    have clean compatibility settings. Start GR should succeed.
# 4. Insert some data in M2. Check all is fine on M1 and M2 i.e. table's data
#    and gtid_executed set should match.
# 5. Clean up.
################################################################################

--source include/big_test.inc
--source include/have_debug.inc
--let $group_replication_group_name= 6db14550-03bb-11e5-b939-0800200c9a13
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc

--echo #
--echo # Setup a member in a way that his version is higher than member 2
--echo #

--connection server1
--echo server1

SET @@GLOBAL.DEBUG= '+d,group_replication_compatibility_higher_major_version';

--source include/start_and_bootstrap_group_replication.inc

--echo # Add some data for recovery

CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);

--echo #
--echo # Try to add a new member that:
--echo #   1) was defined as incompatible with member 1
--echo #   2) has a lower version than member 1
--echo #   3) group_replication_allow_local_lower_version_join= ON
--echo # Option group_replication_allow_local_lower_version_join must
--echo # not override incompatible rule.
--echo #

--connection server2
--echo server2

SET session sql_log_bin=0;
call mtr.add_suppression("Member version is incompatible with the group");
SET session sql_log_bin=1;

SET @debug2_save= @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG= '+d,group_replication_compatibility_rule_error_higher';
--eval SET GLOBAL group_replication_group_name= "$group_replication_group_name"
SET GLOBAL group_replication_allow_local_lower_version_join= ON;

# The start will fail as the node is declared incompatible with the group
--error ER_GROUP_REPLICATION_CONFIGURATION
START GROUP_REPLICATION;

--echo #
--echo # Check all is fine when we clean the compatibility rules, that is,
--echo # that server 2 with lower version and option
--echo # group_replication_allow_local_lower_version_join enabled will be
--echo # able to join the group.
--echo #

SET @@GLOBAL.DEBUG= @debug2_save;

# restart the server so we have clean compatibility settings.
--let $allow_rpl_inited=1
--let $_group_replication_local_address= `SELECT @@GLOBAL.group_replication_local_address`
--let $_group_replication_group_seeds= `SELECT @@GLOBAL.group_replication_group_seeds`
--let $restart_parameters=restart:--group_replication_local_address=$_group_replication_local_address --group_replication_group_seeds=$_group_replication_group_seeds
--replace_result $_group_replication_local_address GROUP_REPLICATION_LOCAL_ADDRESS $_group_replication_group_seeds GROUP_REPLICATION_GROUP_SEEDS
--source include/restart_mysqld.inc
--let $rpl_server_number= 2
--source include/rpl_reconnect.inc

SET GLOBAL group_replication_allow_local_lower_version_join= ON;
--source include/start_group_replication.inc

INSERT INTO t1 VALUES (2);
--source include/rpl_sync.inc

--echo #
--echo # Check all is fine
--echo #
--echo server1
--connection server1
--let $assert_text= GTID_EXECUTED must contain all committed GTIDs
--let $assert_cond= "[SELECT @@GLOBAL.GTID_EXECUTED]" = "$group_replication_group_name:1-6"
--source include/assert.inc

--let $assert_text= 'There is a value 1 in table t1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 1, count, 1] = 1
--source include/assert.inc
--let $assert_text= 'There is a value 2 in table t1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 2, count, 1] = 1
--source include/assert.inc

--echo server2
--connection server2
--let $assert_text= GTID_EXECUTED must contain all committed GTIDs
--let $assert_cond= "[SELECT @@GLOBAL.GTID_EXECUTED]" = "$group_replication_group_name:1-6"
--source include/assert.inc

--let $assert_text= 'There is a value 1 in table t1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 1, count, 1] = 1
--source include/assert.inc
--let $assert_text= 'There is a value 2 in table t1'
--let $assert_cond= [SELECT COUNT(*) AS count FROM t1 WHERE t1.c1 = 2, count, 1] = 1
--source include/assert.inc

--echo #
--echo # Clean up
--echo #
--connection server1

DROP TABLE t1;

SET @@GLOBAL.DEBUG= @debug_save;
--source include/stop_group_replication.inc
--source include/start_group_replication.inc

--connection server2
SET GLOBAL group_replication_allow_local_lower_version_join= OFF;

--source include/group_replication_end.inc
