################################################################################
# WL#9426: Single PRIMARY Mode in Group Replication
#
# This test checks the status variable group_replication_primary_member with
# different member_states when group_replication_single_primary_mode is OFF.
#
# Test:
# 0. The test requires two servers: M1 and M2.
# 1. Test that group_replication_primary_member shows EMPTY in all the following
#    cases:
#    a) server1 is in ONLINE state.
#    b) server2 is in OFFLINE state.
#    c) server2 is in RECOVERING state.
#    d) server2 is in ERROR state.
#    e) server2 is in ONLINE state.
# 2. Clean up.
################################################################################

--source include/big_test.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_group_replication_single_primary_mode=0
--source include/group_replication.inc

--echo #
--echo # a) Server1 is in ONLINE state. Expect group_replication_primary_member EMPTY.
--echo #
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--source include/start_and_bootstrap_group_replication.inc
--let $server1_uuid= `SELECT @@server_uuid`

--let $group_replication_member_state= ONLINE
--source include/gr_wait_for_member_state.inc

--let $assert_text= Verify MEMBER_STATE is ONLINE
--let $assert_cond= "[SELECT MEMBER_STATE FROM performance_schema.replication_group_members WHERE MEMBER_ID=\'$server1_uuid\', MEMBER_STATE, 1]" = "ONLINE"
--source include/assert.inc

--let $assert_text= Verify group_replication_primary_member is EMPTY("")
--let $assert_cond= "[SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME= \'group_replication_primary_member\', VARIABLE_VALUE, 1]" = ""
--source include/assert.inc

# For later use in 'c)' to send server2 to RECOVERING state.
STOP SLAVE SQL_THREAD FOR CHANNEL 'group_replication_applier';

--echo #
--echo # b) Server2 is in OFFLINE state. Expect group_replication_primary_member EMPTY.
--echo #
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--let $server2_uuid= `SELECT @@server_uuid`

SET SESSION sql_log_bin= 0;
call mtr.add_suppression("Table 't1' already exists");
call mtr.add_suppression("The applier thread execution was aborted. Unable to process more transactions, this member will now leave the group");
call mtr.add_suppression("Fatal error during execution on the Applier process of Group Replication. The server will now leave the group.");
call mtr.add_suppression("Unable to ensure the execution of group transactions received during recovery.");
call mtr.add_suppression("Fatal error during the Recovery process of Group Replication. The server will leave the group.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
call mtr.add_suppression("Slave SQL for channel 'group_replication_applier': ... The slave coordinator and worker threads are stopped,*");
SET SESSION sql_log_bin= 1;

--let $assert_text= Verify MEMBER_STATE is OFFLINE
--let $assert_cond= "[SELECT MEMBER_STATE FROM performance_schema.replication_group_members, MEMBER_STATE, 1]" = "OFFLINE"
--source include/assert.inc

--let $assert_text= Verify group_replication_primary_member is EMPTY("")
--let $assert_cond= "[SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME= \'group_replication_primary_member\', VARIABLE_VALUE, 1]" = ""
--source include/assert.inc

--echo #
--echo # c) Server2 is in RECOVERING state. Expect group_replication_primary_member EMPTY.
--echo #

# For later use in 'd)' to send server2 to ERROR state.
SET sql_log_bin=0;
CREATE TABLE t1 (a INT PRIMARY KEY NOT NULL);
SET sql_log_bin=1;

--let $group_replication_start_member_state= RECOVERING
--source include/start_group_replication.inc

--let $assert_text= Verify MEMBER_STATE is RECOVERING
--let $assert_cond= "[SELECT MEMBER_STATE FROM performance_schema.replication_group_members WHERE MEMBER_ID=\'$server2_uuid\', MEMBER_STATE, 1]" = "RECOVERING"
--source include/assert.inc

--let $assert_text= Verify group_replication_primary_member is EMPTY("")
--let $assert_cond= "[SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME= \'group_replication_primary_member\', VARIABLE_VALUE, 1]" = ""
--source include/assert.inc

--echo #
--echo # d) Server2 is in ERROR state. Expect group_replication_primary_member EMPTY.
--echo #
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
START SLAVE SQL_THREAD FOR CHANNEL 'group_replication_applier';

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--let $group_replication_member_state= ONLINE
--source include/gr_wait_for_member_state.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
CREATE TABLE t1 (a INT PRIMARY KEY NOT NULL);

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $group_replication_member_state= ERROR
--source include/gr_wait_for_member_state.inc

# To ensure that member is not in transition state and shows only itself.
--let $group_replication_number_of_members= 1
--source include/gr_wait_for_number_of_members.inc

--let $assert_text= Verify MEMBER_STATE is ERROR
--let $assert_cond= "[SELECT MEMBER_STATE FROM performance_schema.replication_group_members WHERE MEMBER_ID=\'$server2_uuid\', MEMBER_STATE, 1]" = "ERROR"
--source include/assert.inc

--let $assert_text= Verify group_replication_primary_member is EMPTY("")
--let $assert_cond= "[SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME= \'group_replication_primary_member\', VARIABLE_VALUE, 1]" = ""
--source include/assert.inc

--echo #
--echo # e) Server2 is in ONLINE state. Expect group_replication_primary_member EMPTY.
--echo #
--source include/stop_group_replication.inc
SET sql_log_bin=0;
DROP TABLE t1;
SET sql_log_bin=1;
--source include/start_group_replication.inc

--let $group_replication_member_state= ONLINE
--source include/gr_wait_for_member_state.inc

--let $assert_text= Verify MEMBER_STATE is ONLINE
--let $assert_cond= "[SELECT MEMBER_STATE FROM performance_schema.replication_group_members WHERE MEMBER_ID=\'$server2_uuid\', MEMBER_STATE, 1]" = "ONLINE"
--source include/assert.inc

--let $assert_text= Verify group_replication_primary_member is EMPTY("")
--let $assert_cond= "[SELECT VARIABLE_VALUE FROM performance_schema.global_status WHERE VARIABLE_NAME= \'group_replication_primary_member\', VARIABLE_VALUE, 1]" = ""
--source include/assert.inc

# Clean up
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
DROP TABLE t1;
--source include/group_replication_end.inc
