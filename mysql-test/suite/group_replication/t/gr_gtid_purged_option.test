################################################################################
#
# GTID_PURGED can't be set while GR plugin is running. This test shall verify
# that.
#
# Test:
# 0) The test requires two servers: M1 and M2.
# 1) Execute a few transactions locally on M1 before starting GR.
# 2) Set GTID_PURGED a few transactions ahead on M1.
# 3) Start GR on both members and verify that the group stabilizes itself.
# 4) Try to modify the GTID_PURGED  with GR running. It should fail with
#    ER_UPDATE_GTID_PURGED_WITH_GR on each member.
# 5) Stop GR and verify that it is possible to set GTID_PURGED again on both
#    members.
# 6) Cleanup.
#
################################################################################
--let $group_replication_group_name = 7c4f89da-55d2-4a9a-8aa1-b9e854dcf286
--source include/have_group_replication_plugin.inc
#--source include/big_test.inc

--echo
--echo #########################################################################
--echo # 0) The test requires two servers: M1 and M2.
--echo #########################################################################
--echo
--let $rpl_skip_group_replication_start = 1
--source include/group_replication.inc

--echo
--echo #########################################################################
--echo # 1) Execute a few transactions locally on M1 before starting GR.
--echo #########################################################################
--echo
CREATE TABLE t1(a INT PRIMARY KEY);
INSERT INTO t1 VALUES (1);
INSERT INTO t1 VALUES (2);
INSERT INTO t1 VALUES (3);

--echo
--echo #########################################################################
--echo # 2) Set GTID_PURGED a few transactions ahead on M1.
--echo #########################################################################
--echo
--let $member1_uuid = `SELECT @@GLOBAL.server_uuid`
SET sql_log_bin = 0;
--source include/gtid_utils.inc
SET sql_log_bin = 1;
RESET MASTER;
--eval SET GLOBAL GTID_PURGED = "$group_replication_group_name:1-3"
--let $assert_text = GTID_PURGED should contain the first 3 transactions
--let $assert_cond = GTID_IS_EQUAL(@@GLOBAL.GTID_PURGED, "$group_replication_group_name:1-3")
--source include/assert.inc
RESET MASTER;

--echo
--echo #########################################################################
--echo # 3) Start GR on both members and verify that the group stabilizes
--echo # itself.
--echo #########################################################################
--echo
--source include/start_and_bootstrap_group_replication.inc
--source include/rpl_sync.inc
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
SET sql_log_bin = 0;
--source include/gtid_utils.inc
SET sql_log_bin = 1;
--let $member2_uuid = `SELECT @@GLOBAL.server_uuid`
--source include/start_group_replication.inc

--echo
--echo #########################################################################
--echo # 4) Try to modify the GTID_PURGED  with GR running. It should fail with
--echo # ER_UPDATE_GTID_PURGED_WITH_GR on each member.
--echo #########################################################################
--echo
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--error ER_UPDATE_GTID_PURGED_WITH_GR
--eval SET GLOBAL GTID_PURGED = "$group_replication_group_name:4"
--let $assert_text = GTID_PURGED should contain the 4th transaction
--let $assert_cond = GTID_IS_EQUAL(@@GLOBAL.GTID_PURGED, "")
--source include/assert.inc

--echo
--echo #########################################################################
--echo # 5) Stop GR and verify that it is possible to set GTID_PURGED again on
--echo # both members.
--echo #########################################################################
--echo
--source include/stop_group_replication.inc
--eval SET GLOBAL GTID_PURGED = "$group_replication_group_name:4"
--let $assert_text = GTID_PURGED should contain the 4th transaction
--let $assert_cond = GTID_IS_EQUAL(@@GLOBAL.GTID_PURGED, "$group_replication_group_name:4")
--source include/assert.inc
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/stop_group_replication.inc
--eval SET GLOBAL GTID_PURGED = "$group_replication_group_name:4"
SELECT @@GLOBAL.GTID_PURGED;
--let $assert_text = GTID_PURGED should contain the 4th transaction
--let $assert_cond = GTID_IS_EQUAL(@@GLOBAL.GTID_PURGED, "$group_replication_group_name:4")
--source include/assert.inc

--echo
--echo #########################################################################
--echo # 6) Cleanup.
--echo #########################################################################
--echo
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
DROP TABLE t1;
SET SESSION sql_log_bin= 0;
--source include/gtid_utils_end.inc
SET SESSION sql_log_bin= 1;
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
SET SESSION sql_log_bin= 0;
--source include/gtid_utils_end.inc
SET SESSION sql_log_bin= 1;
--source include/group_replication_end.inc
