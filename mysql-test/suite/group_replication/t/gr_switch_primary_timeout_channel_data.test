###############################################################################
# Validate that group_replication_set_as_primary once executed with parameter
# `running_transactions_timeout` gracefully fails if there is a running slave
# on primary member.
# Change of primary fails due to running slave channel on PRIMARY.
#
# Test:
# 0. The test requires three servers:(M1 <> M2) and M3 -> M1
#    M1(PRIMARY and REPLICA)
#    M2(SECONDARY)
#    M3(SOURCE)
# 1. Deploy a group in single-primary mode.
#    Server1(primary) and server2(secondary).
#    Create and start asynchronous connection with server3 as source and server1 as replica.
# 2. Create table t1 on server3 for later operations.
# 3. Block all transactions on server1.
#    Create a new transaction on server3.
#    Initiate a change of primary on server1, it fails due to slave channel on server1.
#    Unblock all transactions on server1.
# 4. Block all transactions on server1.
#    Create a new transaction on server3.
#    Initiate a change of primary on server2, it fails due to slave channel on server1.
#    Unblock all transactions on server1.
# 5. Clean up.
###############################################################################

--source include/big_test.inc
--source include/have_debug_sync.inc
--source include/have_group_replication_plugin.inc
--let $rpl_group_replication_single_primary_mode=1
--let $rpl_skip_group_replication_start= 1
--let $rpl_server_count= 3
--source include/group_replication.inc


--echo
--echo # 1. Deploy a group in single-primary mode.
--echo #    Server1(primary) and server2(secondary).
--echo #    Create and start asynchronous connection with server3 as source and server1 as replica.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

set session sql_log_bin=0;
call mtr.add_suppression("The function 'group_replication_set_as_primary' failed. There is a slave channel running in the group's current primary member.");
set session sql_log_bin=1;
--let $server1_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--source include/start_and_bootstrap_group_replication.inc

--replace_result $SERVER_MYPORT_3 SERVER_3_PORT
--eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_USER='root', SOURCE_AUTO_POSITION=1, SOURCE_PORT=$SERVER_MYPORT_3 FOR CHANNEL 'gr_channel'
--let $rpl_channel_name='gr_channel'
--source include/start_slave.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

set session sql_log_bin=0;
call mtr.add_suppression("The function 'group_replication_set_as_primary' failed. There is a slave channel running in the group's current primary member.");
set session sql_log_bin=1;
--let $server2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--source include/start_group_replication.inc

--echo
--echo # 2. Create table t1 on server3 for later operations.

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

CREATE TABLE t1(c1 int primary key);
--source include/rpl_sync.inc

--echo
--echo # 3. Block all transactions on server1.
--echo #    Create a new transaction on server3.
--echo #    Initiate a change of primary on server1, it fails due to slave channel on server1.
--echo #    Unblock all transactions on server1.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

SET @@GLOBAL.DEBUG= '+d,group_replication_wait_on_observer_trans';

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

INSERT INTO t1 values(1);

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

SET DEBUG_SYNC= "now wait_for signal.group_replication_wait_on_observer_trans_waiting";

# NOTE: Now we have to unblock begin otherwise UDF will also block
SET @@GLOBAL.DEBUG= '-d,group_replication_wait_on_observer_trans';

--replace_result $server2_uuid SERVER2_UUID
--error ER_GRP_RPL_UDF_ERROR
--eval SELECT group_replication_set_as_primary("$server2_uuid", 0);

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

SET DEBUG_SYNC= "now SIGNAL signal.group_replication_wait_on_observer_trans_continue";

--source include/gr_assert_primary_member.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--source include/gr_assert_secondary_member.inc


--echo
--echo # 4. Block all transactions on server1.
--echo #    Create a new transaction on server3.
--echo #    Initiate a change of primary on server2, it fails due to slave channel on server1.
--echo #    Unblock all transactions on server1.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

SET @@GLOBAL.DEBUG= '+d,group_replication_wait_on_observer_trans';

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

INSERT INTO t1 values(2);

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

SET DEBUG_SYNC= "now WAIT_FOR signal.group_replication_wait_on_observer_trans_waiting";

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--replace_result $server2_uuid SERVER2_UUID
--error ER_GRP_RPL_UDF_ERROR
--eval SELECT group_replication_set_as_primary("$server2_uuid", 0);

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

SET DEBUG_SYNC= "now SIGNAL signal.group_replication_wait_on_observer_trans_continue";
SET @@GLOBAL.DEBUG= '-d,group_replication_wait_on_observer_trans';

--source include/gr_assert_primary_member.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--source include/gr_assert_secondary_member.inc

--echo
--echo # 5. Clean up.

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
DROP TABLE t1;
--source include/rpl_sync.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $rpl_channel_name='gr_channel'
--source include/stop_slave.inc

--let $rpl_channel_name='gr_channel'
--let $rpl_multi_source= 1
--let $rpl_reset_slave_all= 1
--source include/rpl_reset_slave.inc
--let $rpl_channel_name=
--let $rpl_multi_source=

--source include/group_replication_end.inc
