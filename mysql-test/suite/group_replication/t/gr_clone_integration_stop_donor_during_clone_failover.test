###############################################################################
# This test verifies that if the donor leaves the group while a joiner is
# cloning from it, the joiner will restart the clone from other donor.
# Also verifies that a non donor exit from the group has no effect.
#
# 0. The test requires four servers: M1, M2, M3 and M4.
# 1. Install the clone plugin on server 1
# 2. Bootstrap server1 and add some data
# 3. Install the clone plugin and start GR on server3 and server4
# 4. Restart server 2 with a monitoring process (mysqld_safe) if needed
# 5. Install the clone plugin
#    Setup the server so group replication starts on boot
# 6. Start group replication on server 2
#    Set a debug point so it blocks during clone.
# 7. Stop a non donor and check all is fine
# 8. Check the stages table shows the correct state
# 9. Stop the clone donor.
# 10. Unblock clone.
# 11. Start the stopped servers.
#     Check data consistency
# 12. Cleanup
#

--source include/big_test.inc
--source include/have_debug_sync.inc
--source include/have_mysqld_monitoring_process.inc
--source include/have_clone_plugin.inc
--source include/force_restart.inc
--source include/have_group_replication_plugin.inc
--let $rpl_server_count= 4
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc

# Validate plugins
--let plugins = CLONE_PLUGIN,GROUP_REPLICATION
--source include/check_plugin_dir.inc


--echo
--echo ############################################################
--echo # 1. Install clone plugin on server1.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

--echo
--echo ############################################################
--echo # 2. Bootstrap server1 and add some data

--source include/start_and_bootstrap_group_replication.inc

CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);
INSERT INTO t1 VALUES (2);

--echo
--echo #################################################################
--echo # 3. Install the clone plugin and start GR on server3 and server4
--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--let $server3_port = `SELECT @@port`
--let $server3_ip_port= 127.0.0.1:$server3_port

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

--source include/start_group_replication.inc

--let $rpl_connection_name= server4
--source include/rpl_connection.inc
--let $server4_port = `SELECT @@port`
--let $server4_ip_port= 127.0.0.1:$server4_port

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

--source include/start_group_replication.inc

--echo
--echo #######################################################################
--echo # 4. Restart server 2 with a monitoring process (mysqld_safe) if needed

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $_group_replication_local_address2= `SELECT @@GLOBAL.group_replication_local_address`
--let $_group_replication_group_seeds2= `SELECT @@GLOBAL.group_replication_group_seeds`

--let $plugin_list= $GROUP_REPLICATION
--source include/spawn_monitoring_process.inc

--echo ############################################################
--echo # 5. Install the clone plugin
--echo #    Setup the server so group replication starts on boot

--disable_query_log
--eval SET PERSIST  group_replication_group_name= "$group_replication_group_name"
--eval SET PERSIST  group_replication_local_address= "$_group_replication_local_address2"
--eval SET PERSIST  group_replication_group_seeds= "$_group_replication_group_seeds2"

SET PERSIST group_replication_start_on_boot= ON;
--enable_query_log

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

--echo
--echo ############################################################
--echo # 6. Start group replication on server 2
--echo #    Set a debug point so it blocks during clone.

--let $_group_replication_threshold_save= `SELECT @@GLOBAL.group_replication_clone_threshold`
SET GLOBAL group_replication_clone_threshold= 1;

SET GLOBAL clone_autotune_concurrency = OFF;
SET GLOBAL clone_max_concurrency = 1;
SET @@GLOBAL.DEBUG='+d,gr_clone_wait';

START GROUP_REPLICATION;

SET DEBUG_SYNC = 'now WAIT_FOR gr_clone_paused';

--echo
--echo ############################################################
--echo # 7. Stop a non donor and check all is fine

--let $donor_ip_port= `SELECT SOURCE FROM performance_schema.clone_status`
--let $non_donor_id_stopped = 3

--connection server3
if ($donor_ip_port == $server3_ip_port) {
  --connection server4
  --let $non_donor_id_stopped = 4
}

--source include/stop_group_replication.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $group_replication_number_of_members= 3
--source include/gr_wait_for_number_of_members.inc

--echo
--echo ############################################################
--echo # 8. Check the stages table shows the correct state

--let $stage_name= `SELECT event_name FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl/Group Replication Cloning%";`
--let $assert_text= stage/group_rpl/Group Replication Cloning process: Executing
--let $assert_cond= "$stage_name" = "stage/group_rpl/Group Replication Cloning process: Executing"
--source include/assert.inc

--let $work_estimated= `SELECT work_estimated FROM performance_schema.events_stages_current WHERE event_name LIKE "%stage/group_rpl/Group Replication Cloning%";`
--let $assert_text= The estimated work (number of servers) is 3
--let $assert_cond= "$work_estimated" = "3"
--source include/assert.inc

--let $work_completed= `SELECT work_completed FROM performance_schema.events_stages_current  WHERE event_name LIKE "%stage/group_rpl/Group Replication Cloning%";`
--let $assert_text= The completed work (attempts) is 1
--let $assert_cond= "$work_completed" = "1"
--source include/assert.inc

--echo
--echo ############################################################
--echo # 9. Stop clone donor.

--let $donor_id_stopped = 1
--connection server1
if ($donor_ip_port == $server3_ip_port) {
  --connection server3
  --let $donor_id_stopped = 3
}
if ($donor_ip_port == $server4_ip_port) {
  --connection server4
  --let $donor_id_stopped = 4
}

--source include/stop_group_replication.inc

--echo
--echo ############################################################
--echo # 10. Unblock clone.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SET DEBUG_SYNC = 'now SIGNAL gr_clone_continue';
SET @@GLOBAL.DEBUG = '-d,gr_clone_wait';

--source include/wait_until_disconnected.inc

--let $rpl_server_number= 2
--source include/rpl_reconnect.inc

--let $group_replication_member_state=ONLINE
--source include/gr_wait_for_member_state.inc

--let $assert_text= Clone must be completed
--let $assert_cond= [SELECT state="Completed" FROM performance_schema.clone_status] = 1;
--source include/assert.inc

--echo
--echo ############################################################
--echo # 11. Start the stopped servers
--echo #     Check data consistency

--connection server$donor_id_stopped

--source include/start_group_replication.inc

--connection server$non_donor_id_stopped

--source include/start_group_replication.inc

# See if the data has been properly cloned in server2
--let $diff_tables=server1:test.t1, server2:test.t1, server3:test.t1, server4:test.t1
--source include/diff_tables.inc

--echo
--echo ############################################################
--echo # 12. Cleanup
--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SET DEBUG_SYNC = 'RESET';

--eval SET GLOBAL group_replication_clone_threshold= $_group_replication_threshold_save

RESET PERSIST IF EXISTS group_replication_group_name;
RESET PERSIST IF EXISTS group_replication_local_address;
RESET PERSIST IF EXISTS group_replication_group_seeds;
RESET PERSIST IF EXISTS group_replication_start_on_boot;

set session sql_log_bin=0;
call mtr.add_suppression("Due to the number of missing transactions being higher than the configured threshold of 1, this member will start distributed recovery using clone.");
call mtr.add_suppression("Internal query: CLONE INSTANCE FROM \'root\'@\'127.0.0.1\':[0-9]+ IDENTIFIED BY \'\\*\\*\\*\\*\\*\' REQUIRE NO SSL; result in error. Error number:*");
call mtr.add_suppression("There was an issue when cloning from another server: Error number: 1317 Error message: Query execution was interrupted'");
call mtr.add_suppression("Clone removing all user data for provisioning: Started");
call mtr.add_suppression("Clone removing all user data for provisioning: Finished");
set session sql_log_bin=1;

--source include/clean_monitoring_process.inc

--source include/group_replication_end.inc
