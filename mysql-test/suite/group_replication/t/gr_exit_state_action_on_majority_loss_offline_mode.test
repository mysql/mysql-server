###############################################################################
#
# group_replication_exit_state_action sysvar specifies which action is taken
# by a server once it has involuntarily left the group.
# In order to verify the expected behaviour, this test shall test that the
# specified exit action is executed correctly after a member can't contact the
# rest of the group after group_replication_unreachable_majority_timeout elapsed.
#
# Test:
# 0) Setup group of 2 members (M1 and M2).
# 1) Force majority loss.
# 2) Verify that member 1 went to ERROR state and offline mode.
# 3) Cleanup.
#
################################################################################
--source include/big_test.inc
--source include/have_group_replication_plugin.inc

--echo
--echo #########################################################################
--echo # 0) Setup group of 2 members (M1 and M2).
--echo #########################################################################
--echo
--source include/group_replication.inc

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
SET @saved_exit_state_action = @@GLOBAL.group_replication_exit_state_action;
SET @@GLOBAL.group_replication_exit_state_action = OFFLINE_MODE;

SET SESSION sql_log_bin = 0;
# Supress log errors since they are expected.
call mtr.add_suppression("read failed");
call mtr.add_suppression("This member could not reach a majority of the members for more than.*");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("The server was automatically set into offline mode after an error was detected.");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
call mtr.add_suppression("\\[GCS\\] Timeout while waiting for the group communication engine to exit!");
call mtr.add_suppression("\\[GCS\\] The member has failed to gracefully leave the group.");
call mtr.add_suppression("\\[GCS\\] read failed");
SET SESSION sql_log_bin = 1;

--echo
--echo #########################################################################
--echo # 1) Force majority loss.
--echo #########################################################################
--echo
# Crash server 2
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--enable_reconnect
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.2.expect
--shutdown_server 0
--source include/wait_until_disconnected.inc
--source include/wait_until_connected_again.inc
--disable_reconnect

--let $rpl_server_number= 2
--source include/rpl_reconnect.inc

--echo
--echo #########################################################################
--echo # 2) Verify that member 1 went to ERROR state and offline mode.
--echo #########################################################################
--echo
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $group_replication_member_state= ERROR
--let $group_replication_member_id= $member1_uuid
--source include/gr_wait_for_member_state.inc

--source include/assert_and_disable_read_only.inc
--source include/assert_and_disable_offline_mode.inc

--echo
--echo #########################################################################
--echo # 3) Cleanup.
--echo #########################################################################
--echo
SET @@GLOBAL.group_replication_exit_state_action = @saved_exit_state_action;

--source include/group_replication_end.inc
