################################################################################
# This test verifies that when a view is received after the STOP
# GROUP_REPLICATION has terminated but plugin is still installed,
# the view is properly handled.
#
# To test that we start a two members group, disable the wait for
# view install on member 2 leave and leave the group.
#
# Test:
# 0. The test requires two servers: M1 and M2.
# 1. With both members ONLINE. Set DEBUG point in M2 to disable the wait for
#    view change.
# 2. Stop GR on M2.
# 3. Set DEBUG point to timeout on wait for view after joining group.
# 4. Start GR on M2. Expect error.
# 5. Wait for M2 to go OFFLINE.
################################################################################
--source include/have_debug.inc
--source include/have_group_replication_plugin.inc
--source include/group_replication.inc

--connection server2
SET @debug_save= @@GLOBAL.DEBUG;

SET @@GLOBAL.DEBUG='+d,group_replication_skip_wait_for_view_modification';
--source include/stop_group_replication.inc
SET @@GLOBAL.DEBUG= @debug_save;


#
# Validate that view modification timeout is properly handled.
#
SET SESSION sql_log_bin= 0;
call mtr.add_suppression("Timeout on wait for view after joining group");
call mtr.add_suppression("While leaving the group due to a stop, shutdown or failure there was a timeout receiving a view change. This can lead to a possible inconsistent state. Check the log for more details");
SET SESSION sql_log_bin= 1;

SET @@GLOBAL.DEBUG='+d,group_replication_force_view_modification_timeout';
--error ER_GROUP_REPLICATION_CONFIGURATION
START GROUP_REPLICATION;

--let $group_replication_member_state= OFFLINE
--source include/gr_wait_for_member_state.inc

SET @@GLOBAL.DEBUG= @debug_save;
--source include/group_replication_end.inc
