################################################################################
#
# The auto-rejoin process is a mechanism that allows a server that left the
# group due to flaky network (either on his side or on the other members) to
# try to join again up to group_replication_autorejoin_tries number of times.
#
# This test shall verify that if a concurrent error to autorejoin happens, the
# member will preserve its ERROR state.
#
# Test:
# 0) The test requires three servers.
# 1) Add a local transaction to server1 so that it does fail on rejoin.
# 2) Provoke a majority loss.
# 3) Verify that the member in the partitioned group will try to rejoin the
#    group the number of it is configured in
#    group_replication_autorejoin_tries sysvar.
# 4) Verify that once it rejoins the applier error is triggered and member
#    remains in ERROR state.
# 5) Cleanup.
#
################################################################################
--source include/have_debug_sync.inc
--source include/big_test.inc
--source include/have_group_replication_plugin.inc
#
# We manually start the group because we need to set the rejoin timeout before
# the START GROUP_REPLICATION command.
#
--let $rpl_skip_group_replication_start= 1
--let $rpl_server_count = 3
--source include/group_replication.inc

--echo
--echo ####
--echo # 0) The test requires three servers.
--echo ####
--echo
SET SESSION sql_log_bin = 0;
call mtr.add_suppression("This member could not reach a majority of the members for more than 10 seconds. The member will now leave the group as instructed by the group_replication_unreachable_majority_timeout option");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("\\[GCS\\] Timeout while waiting for the group communication engine to exit!");
call mtr.add_suppression("\\[GCS\\] The member has failed to gracefully leave the group.");
call mtr.add_suppression("Started auto-rejoin procedure attempt*");
call mtr.add_suppression("Auto-rejoin procedure attempt*");
call mtr.add_suppression("Slave SQL for channel 'group_replication_applier': Could not execute Write_rows event on table test.t1; Duplicate entry '1' for key 'PRIMARY'.*");
call mtr.add_suppression("Slave SQL for channel 'group_replication_applier': Worker .* failed executing transaction .*; Could not execute Write_rows event on table test.t1; Duplicate entry '1' for key 'PRIMARY'.*");
call mtr.add_suppression("Slave SQL for channel 'group_replication_applier': ... The slave coordinator and worker threads are stopped,*");
call mtr.add_suppression("The applier thread execution was aborted. Unable to process more transactions, this member will now leave the group.");
call mtr.add_suppression("Fatal error during execution on the Applier process of Group Replication. The server will now leave the group.");
call mtr.add_suppression("Unable to confirm whether the server has left the group or not. Check performance_schema.replication_group_members to check group membership information.");
SET SESSION sql_log_bin = 1;

--source include/gr_autorejoin_monitoring.inc

SET @debug_saved = @@GLOBAL.DEBUG;
SET @@GLOBAL.DEBUG='+d,group_replication_rejoin_short_retry';
SET @@GLOBAL.DEBUG='+d,group_replication_stop_before_rejoin_loop';

--source include/start_and_bootstrap_group_replication.inc
CREATE TABLE t1(a INT PRIMARY KEY);

--let $rpl_connection_name = server2
--source include/rpl_connection.inc

--source include/start_group_replication.inc
--let $local_address_server2= `SELECT @@GLOBAL.group_replication_local_address`
--let $group_seeds_server2= `SELECT @@GLOBAL.group_replication_group_seeds`

--let $rpl_connection_name = server3
--source include/rpl_connection.inc

--source include/start_group_replication.inc
--let $local_address_server3= `SELECT @@GLOBAL.group_replication_local_address`

--echo
--echo ####
--echo # 1) Add a local transaction to server1 so that it does fail on rejoin.
--echo ####
--let $rpl_connection_name = server1
--source include/rpl_connection.inc
--source include/gr_stop_applier_sql_thread.inc

--let $rpl_connection_name = server2
--source include/rpl_connection.inc
INSERT INTO t1 VALUES(1);

--let $rpl_connection_name = server3
--source include/rpl_connection.inc
--let $wait_condition= SELECT @@GLOBAL.GTID_EXECUTED = "$group_replication_group_name:1-5"
--source include/wait_condition.inc

--let $rpl_connection_name = server1
--source include/rpl_connection.inc
--let $wait_condition= SELECT received_transaction_set="$group_replication_group_name:1-5" FROM performance_schema.replication_connection_status WHERE channel_name="group_replication_applier";
--source include/wait_condition.inc

# Cause a applier error during recovery when plugins tries to rejoin.
SET SESSION sql_log_bin= 0;
INSERT INTO t1 VALUES(1);
SET SESSION sql_log_bin= 1;

--echo
--echo ####
--echo # 2) Provoke a majority loss.
--echo ####
--echo
--let $rpl_connection_name = server1
--source include/rpl_connection.inc

SET GLOBAL group_replication_autorejoin_tries = 1;

# Provoke a majority loss on member 1
--let $member_id = `SELECT @@GLOBAL.server_uuid`
--source include/gr_provoke_majority_loss.inc

SET DEBUG_SYNC = "now WAIT_FOR signal.autorejoin_entering_loop";

--echo
--echo ####
--echo # 3) Verify that the member in the partitioned group will try to rejoin the
--echo #    group the number of it is configured in
--echo #    group_replication_autorejoin_tries sysvar.
--echo ####
--let $rpl_server_number= 2
--source include/rpl_reconnect.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--replace_result $group_seeds_server2 GROUP_SEEDS_SERVER2
--eval SET @@global.group_replication_group_seeds="$group_seeds_server2"
--replace_result $local_address_server2 LOCAL_ADDRESS_SERVER2
--eval SET @@global.group_replication_local_address="$local_address_server2"
--source include/start_and_bootstrap_group_replication.inc

--let $rpl_server_number= 3
--source include/rpl_reconnect.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--replace_result $local_address_server2 LOCAL_ADDRESS_SERVER2
--eval SET @@global.group_replication_group_seeds="$local_address_server2"
--replace_result $local_address_server3 LOCAL_ADDRESS_SERVER3
--eval SET @@global.group_replication_local_address="$local_address_server3"
--source include/start_group_replication.inc

--let $rpl_connection_name = server2
--source include/rpl_connection.inc
--let $group_replication_number_of_members = 2
--source include/gr_wait_for_number_of_members.inc
--let $rpl_connection_name = server3
--source include/rpl_connection.inc
--let $group_replication_number_of_members = 2
--source include/gr_wait_for_number_of_members.inc

--let $rpl_connection_name = server1
--source include/rpl_connection.inc

SET DEBUG_SYNC = "now SIGNAL signal.autorejoin_enter_loop";

--echo
--echo ####
--echo # 4) Verify that once it rejoins the applier error is triggered and member
--echo #    remains in ERROR state.
--echo ####
--echo

--let $group_replication_member_state = ERROR
--let $group_replication_member_id = $member_id
--source include/gr_wait_for_member_state.inc

--let $wait_condition = SELECT IS_AUTOREJOIN_RUNNING() = FALSE
--source include/wait_condition.inc

--echo
--echo ####
--echo # 5) Cleanup.
--echo ####
--echo
--let $rpl_connection_name = server1
--source include/rpl_connection.inc

--source include/stop_group_replication.inc
SET SESSION sql_log_bin= 0;
DROP TABLE t1;
SET SESSION sql_log_bin= 1;
RESET SLAVE ALL FOR CHANNEL "group_replication_applier";
SET @@GLOBAL.DEBUG = @debug_saved;
SET DEBUG_SYNC= 'RESET';
SET @@GLOBAL.group_replication_autorejoin_tries = default;
--source include/gr_end_autorejoin_monitoring.inc

--let $rpl_connection_name = server2
--source include/rpl_connection.inc
DROP TABLE t1;

--source include/group_replication_end.inc
