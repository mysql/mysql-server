#
# Test case to verify that source which is part of group replication is removed
# if in ERROR state.
#
# Test:
# 0. This test needs 4 servers.
# 1. Start GR on M1(primary), M2 and M3
# 2. Add asynchronous connection failover servers and
#    verify that they are inserted successfully in
#    performance_schema.replication_asynchronous_connection_failover.
# 3. Create and start new channel ch1_4: M4(replica), M1(source)
#    and verify channel ch1_4 IO and SQL THREADS are ON.
# 4. Verify 3 senders are added automatically to
#    replication_asynchronous_connection_failover table.
# 5. Put M2(secondary) in error state.
# 6. Verify M2 is not present in
#    performance_schema.replication_asynchronous_connection_failover
# 7. Bring M2 back ONLINE.
# 8. Put M1(primary) in error state.
# 9. Verify M1 is not present in
#    performance_schema.replication_asynchronous_connection_failover
#    Verify M2 is new source.
# 10. Cleanup.
#

--source include/big_test.inc
--source include/have_debug.inc
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_group_replication_single_primary_mode=1
--let $rpl_server_count= 4
--source include/group_replication.inc


--echo
--echo # 1. Start GR on M1(primary), M2 and M3
--echo

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $server1_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

SET SESSION sql_log_bin= 0;
call mtr.add_suppression("Failed to fetch Transaction_context_log_event containing required transaction info for certification");
call mtr.add_suppression("Fatal error during execution on the Applier process of Group Replication. The server will now leave the group.");
call mtr.add_suppression("Error at event handling! Got error: 1");
call mtr.add_suppression("The member is leaving a group without being on one");
call mtr.add_suppression("Due to a plugin error, some transactions were unable to be certified and will now rollback.");
call mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
call mtr.add_suppression("Error while waiting for conflict detection procedure to finish on session .*");
call mtr.add_suppression("Run function 'before_commit' in plugin 'group_replication' failed");
call mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
SET SESSION sql_log_bin= 1;

CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;

--source include/start_and_bootstrap_group_replication.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SET sql_log_bin=0;
CALL mtr.add_suppression("Could not execute Write_rows event on table test.t1");
CALL mtr.add_suppression("The applier thread execution was aborted. Unable to process more transactions, this member will now leave the group.");
CALL mtr.add_suppression("Fatal error during execution on the Applier process of Group Replication. The server will now leave the group.");
CALL mtr.add_suppression("The server was automatically set into read only mode after an error was detected.");
CALL mtr.add_suppression("Skipping leave operation: concurrent attempt to leave the group is on-going.");
CALL mtr.add_suppression("The slave coordinator and worker threads are stopped");
SET sql_log_bin=1;

SET @member_weight2_save= @@GLOBAL.group_replication_member_weight;
SET GLOBAL group_replication_member_weight= 90;

--source include/start_group_replication.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--source include/start_group_replication.inc

--let $rpl_connection_name= server4
--source include/rpl_connection.inc

SET SESSION sql_log_bin = 0;
call mtr.add_suppression("The master's UUID has changed, although this should not happen unless you have changed it manually. The old UUID was.*");
call mtr.add_suppression("The source.*for channel.*has joined the group.*and so added its entry into replication_asynchronous_connection_failover table");
call mtr.add_suppression("The .* for channel 'ch1_4' has left the group .*, and so removed its entry from replication_asynchronous_connection_failover table.");
call mtr.add_suppression("The Monitor IO thread detected that the source .* does not belong to the group majority, thence the channel .* will try to connect to another source.");
call mtr.add_suppression("The IO thread detected that the source .* does not belong to the group majority, thence the channel .* will try to connect to another source.");
call mtr.add_suppression("The group .* for the channel .* has been removed, and so removed its entry from replication_asynchronous_connection_failover_managed and all the group members from replication_asynchronous_connection_failover table.");
call mtr.add_suppression("The group .* for the channel .* has been added, and so added its entry in replication_asynchronous_connection_failover_managed and source to replication_asynchronous_connection_failover table.");
SET SESSION sql_log_bin = 1;

--echo
--echo # 2. Add asynchronous connection failover servers and
--echo #    verify that they are inserted successfully in
--echo #    performance_schema.replication_asynchronous_connection_failover.
--echo

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $_tmp_gr_group_name1= `SELECT @@GLOBAL.group_replication_group_name`

--let $rpl_connection_name= server4
--source include/rpl_connection.inc
--replace_result $SERVER_MYPORT_1 SERVER_MYPORT_1 $_tmp_gr_group_name1 GROUP_NAME
--eval SELECT asynchronous_connection_failover_add_managed('ch1_4', 'GroupReplication', '$_tmp_gr_group_name1', '127.0.0.1', $SERVER_MYPORT_1, '', 70, 60);

--let $assert_text= 'There is one row in performance_schema.replication_asynchronous_connection_failover'
--let $assert_cond= [SELECT  COUNT(*) count FROM performance_schema.replication_asynchronous_connection_failover, count, 1] = 1
--source include/assert.inc

--echo
--echo # 3. Create and start new channel ch1_4: M4(replica), M1(source)
--echo #    and verify channel ch1_4 IO and SQL THREADS are ON.
--echo
--let $rpl_connection_name= server4
--source include/rpl_connection.inc
--replace_result $SERVER_MYPORT_1 SERVER_1_PORT

--eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_USER='root', SOURCE_AUTO_POSITION=1, SOURCE_CONNECTION_AUTO_FAILOVER=1, SOURCE_PORT=$SERVER_MYPORT_1, SOURCE_CONNECT_RETRY=1, SOURCE_RETRY_COUNT=2 for channel 'ch1_4'
--let $rpl_channel_name='ch1_4'
--source include/start_slave.inc
--let $rpl_channel_name=

--let $assert_text= Verify channel ch1_4 IO_THREAD is ON
--let $assert_cond= "[SELECT SERVICE_STATE FROM performance_schema.replication_connection_status WHERE channel_name = \'ch1_4\', SERVICE_STATE, 1]" = "ON"
--source include/assert.inc

--let $assert_text= Verify channel ch1_4 SQL_THREAD is ON
--let $assert_cond= "[SELECT SERVICE_STATE FROM performance_schema.replication_applier_status WHERE channel_name = \'ch1_4\', SERVICE_STATE, 1]" = "ON"
--source include/assert.inc

--echo
--echo # 4. Verify 3 senders are added automatically to
--echo #    replication_asynchronous_connection_failover table.
--echo

--let $rpl_connection_name= server4
--source include/rpl_connection.inc

--let $wait_condition= SELECT COUNT(*)=3 FROM performance_schema.replication_asynchronous_connection_failover;
--source include/wait_condition.inc

--let $assert_text= 'Connected to server1 now.'
--let $assert_cond= [SELECT Port FROM performance_schema.replication_connection_configuration WHERE CHANNEL_NAME = \'ch1_4\', Port, 1] = $SERVER_MYPORT_1
--source include/assert.inc

--echo
--echo # 5. Put M2(secondary) in error state.
--echo

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SET SESSION sql_log_bin= 0;
SET GLOBAL read_only= FALSE;
INSERT INTO t1 VALUES (1);
SET GLOBAL read_only= TRUE;
SET SESSION sql_log_bin= 1;

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

INSERT INTO t1 VALUES (1);

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $group_replication_member_state= ERROR
--source include/gr_wait_for_member_state.inc

--echo
--echo # 6. Verify M2 is not present in
--echo #    performance_schema.replication_asynchronous_connection_failover
--echo

--let $rpl_connection_name= server4
--source include/rpl_connection.inc

--let $wait_condition= SELECT COUNT(*)=0 FROM performance_schema.replication_connection_configuration WHERE HOST = '127.0.0.1' AND PORT = $SERVER_MYPORT_2
--source include/wait_condition.inc

--let $wait_condition= SELECT COUNT(*)=2 FROM performance_schema.replication_asynchronous_connection_failover;
--source include/wait_condition.inc

--let $assert_text= 'Connected to server1.'
--let $assert_cond= [SELECT COUNT(*) as count FROM performance_schema.replication_connection_configuration WHERE HOST = \'127.0.0.1\' AND PORT = $SERVER_MYPORT_1, count, 1] = 1
--source include/assert.inc

--echo
--echo # 7. Bring M2 back ONLINE.
--echo

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--source include/stop_group_replication.inc

SET SESSION sql_log_bin= 0;
SET GLOBAL read_only= FALSE;
DELETE FROM t1;
SET GLOBAL read_only= TRUE;
SET SESSION sql_log_bin= 1;

--source include/start_group_replication.inc

--let $rpl_connection_name= server4
--source include/rpl_connection.inc

--let $wait_condition= SELECT COUNT(*)=3 FROM performance_schema.replication_asynchronous_connection_failover;
--source include/wait_condition.inc

--echo
--echo # 8. Put M1(primary) in error state.
--echo

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

SET @@GLOBAL.DEBUG= '+d,certification_handler_force_error_on_pipeline';

--error ER_TRANSACTION_ROLLBACK_DURING_COMMIT, ER_RUN_HOOK_ERROR
INSERT INTO t1 VALUES (2);


--let $group_replication_member_state= ERROR
--source include/gr_wait_for_member_state.inc

--echo
--echo # 9. Verify M1 is not present in
--echo #    performance_schema.replication_asynchronous_connection_failover
--echo #    Verify M2 is new source.
--echo

--let $rpl_connection_name= server4
--source include/rpl_connection.inc

--let $wait_condition= SELECT COUNT(*)=0 FROM performance_schema.replication_asynchronous_connection_failover WHERE PORT = $SERVER_MYPORT_1;
--source include/wait_condition.inc

--let $wait_condition= SELECT COUNT(*)=1 FROM performance_schema.replication_connection_configuration WHERE HOST = '127.0.0.1' AND PORT = $SERVER_MYPORT_2
--source include/wait_condition.inc

--let $wait_condition= SELECT COUNT(*)=2 FROM performance_schema.replication_asynchronous_connection_failover;
--source include/wait_condition.inc

--let $wait_condition= SELECT COUNT(*)=0 FROM performance_schema.replication_asynchronous_connection_failover WHERE HOST = '127.0.0.1' AND PORT = $SERVER_MYPORT_1
--source include/wait_condition.inc

--let $assert_only_after = CURRENT_TEST: group_replication.gr_acf_error_state_handling
--let $assert_file= $MYSQLTEST_VARDIR/log/mysqld.4.err
--let $assert_select= The source .* for channel 'ch1_4' has left the group .*, and so removed its entry from replication_asynchronous_connection_failover table.
--let $assert_count= 2
--let $assert_text= Source removed message is logged.
--source include/assert_grep.inc

--echo
--echo # 10. Cleanup.
--echo

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SET GLOBAL group_replication_member_weight= @member_weight2_save;
DROP TABLE t1;

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

SET @@GLOBAL.DEBUG= '-d,certification_handler_force_error_on_pipeline';

--source include/stop_group_replication.inc
--source include/start_group_replication.inc

--replace_result $server1_uuid MEMBER1_UUID
--eval SELECT group_replication_set_as_primary("$server1_uuid")


--let $rpl_connection_name= server4
--source include/rpl_connection.inc

--let $wait_condition= SELECT COUNT(*)=1 FROM performance_schema.replication_connection_configuration WHERE HOST = '127.0.0.1' AND PORT = $SERVER_MYPORT_1
--source include/wait_condition.inc

# Wait until server4 has the same data as server1
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $sync_slave_connection= server4
--source include/sync_slave_sql_with_master.inc

--let $rpl_connection_name= server4
--source include/rpl_connection.inc
--let $rpl_channel_name='ch1_4'
--source include/stop_slave.inc

--let $rpl_reset_slave_all= 1
--let $rpl_multi_source= 1
--source include/rpl_reset_slave.inc
--let $rpl_channel_name=
--let $rpl_reset_slave_all=
--let $rpl_multi_source=

--replace_result $group_replication_group_name GROUP_NAME
--eval SELECT asynchronous_connection_failover_delete_managed('ch1_4', '$group_replication_group_name')

--let $skip_recovery_configuration= 1
--source include/group_replication_end.inc
