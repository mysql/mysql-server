################################################################################
# Validate that group_replication_force_members does unblock a group action that
# suffered a majority loss.
#
# 1. Create a table on the group.
# 2. Collect server uuids and increase member2 weight.
# 3. Block the group action on member2.
# 4. Change primary to member3.
# 5. Make member3 and member4 unreachable.
# 6. Force membership to member1 and member2.
# 7. Unlock table t1 on member2.
# 8. Clean up.
################################################################################
# This test does crashes servers, thence we skip it on valgrind.
--source include/not_valgrind.inc
--source include/force_restart.inc
--source include/have_group_replication_plugin.inc
--let $rpl_server_count= 4
--source include/group_replication.inc


--echo
--echo ############################################################
--echo # 1. Create a table on the group.
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY);
--source include/rpl_sync.inc


--echo
--echo ############################################################
--echo # 2. Collect server uuids and increase member2 weight.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--let $member1_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)
--let $local_address_server1= `SELECT @@GLOBAL.group_replication_local_address`

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
SET GLOBAL group_replication_member_weight= 60;
--let $member2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)
--let $local_address_server2= `SELECT @@GLOBAL.group_replication_local_address`

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--let $member3_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--let $rpl_connection_name= server4
--source include/rpl_connection.inc
--let $member4_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)


--echo
--echo ############################################################
--echo # 3. Block the group action on member2.
--let $rpl_connection_name= server_2
--source include/rpl_connection.inc
LOCK TABLE t1 WRITE;


--echo
--echo ############################################################
--echo # 4. Change primary to member3.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--replace_result $member3_uuid MEMBER3_UUID
--send_eval SELECT group_replication_switch_to_single_primary_mode("$member3_uuid")

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
# Wait for it to start the election process to make the test deterministic
--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.events_stages_current WHERE event_name LIKE "%Single-primary Switch: executing Primary election%"
--source include/wait_condition.inc


--echo
--echo ############################################################
--echo # 5. Make member3 and member4 unreachable.
--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.3.expect
--shutdown_server 0
--source include/wait_until_disconnected.inc

--let $rpl_connection_name= server4
--source include/rpl_connection.inc
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.4.expect
--shutdown_server 0
--source include/wait_until_disconnected.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--let $rpl_server_number= 3
--source include/rpl_reconnect.inc
--enable_reconnect
--source include/wait_until_connected_again.inc
--disable_reconnect

--let $rpl_connection_name= server4
--source include/rpl_connection.inc
--let $rpl_server_number= 4
--source include/rpl_reconnect.inc
--enable_reconnect
--source include/wait_until_connected_again.inc
--disable_reconnect

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
--let $group_replication_member_state= UNREACHABLE
--let $group_replication_member_id= $member3_uuid
--source include/gr_wait_for_member_state.inc
--let $group_replication_member_state= UNREACHABLE
--let $group_replication_member_id= $member4_uuid
--source include/gr_wait_for_member_state.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--let $group_replication_member_state= UNREACHABLE
--let $group_replication_member_id= $member3_uuid
--source include/gr_wait_for_member_state.inc
--let $group_replication_member_state= UNREACHABLE
--let $group_replication_member_id= $member4_uuid
--source include/gr_wait_for_member_state.inc


--echo
--echo ############################################################
--echo # 6. Force membership to member1 and member2.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--replace_result $local_address_server1 MEMBER1 $local_address_server2 MEMBER2
--eval SET GLOBAL group_replication_force_members= "$local_address_server1,$local_address_server2"

--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--replace_result $member3_uuid MEMBER3_UUID
--reap

--let $group_replication_number_of_members= 2
--source include/gr_wait_for_number_of_members.inc

 --let $wait_condition=SELECT COUNT(*)=2 FROM performance_schema.replication_group_members where MEMBER_STATE="ONLINE"
--source include/wait_condition.inc


--echo
--echo ############################################################
--echo # 7. Unlock table t1 on member2.
--let $rpl_connection_name= server_2
--source include/rpl_connection.inc
UNLOCK TABLES;

INSERT INTO t1 VALUES (2);
--source include/rpl_sync.inc

--let $diff_tables=server1:t1, server2:t1
--source include/diff_tables.inc


--echo
--echo ############################################################
--echo # 8. Clean up.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
DROP TABLE t1;

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
DROP TABLE t1;

--let $rpl_connection_name= server4
--source include/rpl_connection.inc
DROP TABLE t1;

--source include/group_replication_end.inc
