#######################################################################################
# Desc : In a group, do majority crash which doesn't includes primary member.
#        Test the setup.
# WL9426 : MySQL NG: Single Primary Mode in Group Replication
# Test :
# 0. This test requires 3 servers
# 1. Create a group replication setup with 3 members
# 2. Store all the group replication variable values which is
#    required to start the server for both the secondary servers
# 3. Crash the two secondary servers and block the group by causing majority loss
# 4. Bring back the server and set all the required group replication variables
# 5. Unblock the group by setting group_replication_force_members variable on
#    primary server
# 6. Check and make sure server1 is unblocked and remains as primary
# 7. Perform some insert operations on the primary
# 8. Bring back the servers in to group replication setup
# 9. Wait for data to recover and validate the data and cleanup
#######################################################################################
# This test does crashes servers, thence we skip it on valgrind.
--source include/not_valgrind.inc
--source include/big_test.inc
--source include/force_restart.inc
--source include/have_group_replication_plugin.inc
--let $rpl_server_count= 3
--let $rpl_skip_group_replication_start= 1
--let $rpl_group_replication_single_primary_mode=1
--source include/group_replication.inc

# Start group replication on all the servers
--source include/start_and_bootstrap_group_replication.inc
--let $member1_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

# Make sure server1 has been given the role of primary
--let $server1_uuid= `SELECT @@server_uuid`
--let $group_replication_expected_uuid= $server1_uuid
--source include/gr_wait_primary_member_uuid.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/start_group_replication.inc
--let $member2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)
# save this, since it will be used to recover the server later on
--let $local_address_server2= `SELECT @@GLOBAL.group_replication_local_address`
--let $group_seeds_server2= `SELECT @@GLOBAL.group_replication_group_seeds`

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--source include/start_group_replication.inc
--let $member3_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)
# save this, since it will be used to recover the server later on
--let $local_address_server3= `SELECT @@GLOBAL.group_replication_local_address`
--let $group_seeds_server3= `SELECT @@GLOBAL.group_replication_group_seeds`

# Crash the two secondary servers out of 3 to cause a majority loss
--echo # Crash two secondary members to cause majority loss.
# We do kill the servers, using shutdown_server 0, and then MTR will
# follow the expect file and restart the sever, but we do not wait
# for the server restart.
# Since the servers loose its GCS configuration them will not rejoin
# the group.

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--enable_reconnect
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.2.expect
--shutdown_server 0
--source include/wait_until_disconnected.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--enable_reconnect
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.3.expect
--shutdown_server 0
--source include/wait_until_disconnected.inc

--source include/wait_until_connected_again.inc
--disable_reconnect

# reset the group_replication_id var
--let $group_replication_member_id= $member1_uuid

--let $rpl_server_number= 2
--source include/rpl_reconnect.inc

--let $rpl_server_number= 3
--source include/rpl_reconnect.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--replace_result $group_seeds_server2 GROUP_SEEDS_SERVER2
--eval SET @@global.group_replication_group_seeds="$group_seeds_server2"
--replace_result $local_address_server2 LOCAL_ADDRESS_SERVER2
--eval SET @@global.group_replication_local_address="$local_address_server2"
--replace_result $group_replication_group_name GROUP_REPLICATION_GROUP_NAME
--eval SET @@global.group_replication_group_name="$group_replication_group_name"
--eval SET @@global.group_replication_enforce_update_everywhere_checks=OFF
--eval SET @@global.group_replication_single_primary_mode=ON

--let $rpl_connection_name= server_3
--source include/rpl_connection.inc
--replace_result $group_seeds_server3 GROUP_SEEDS_SERVER3
--eval SET @@global.group_replication_group_seeds="$group_seeds_server3"
--replace_result $local_address_server3 LOCAL_ADDRESS_SERVER3
--eval SET @@global.group_replication_local_address="$local_address_server3"
--replace_result $group_replication_group_name GROUP_REPLICATION_GROUP_NAME
--eval SET @@global.group_replication_group_name="$group_replication_group_name"
--eval SET @@global.group_replication_enforce_update_everywhere_checks=OFF
--eval SET @@global.group_replication_single_primary_mode=ON

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

# Make sure server 2 and server 3 are in UNREACHABLE state
--echo # Wait for the member state for server3 to be unreachable
--let $group_replication_member_state= UNREACHABLE
--let $group_replication_member_id= $member3_uuid
--source include/gr_wait_for_member_state.inc

--echo # Wait for the member state for server2 to be unreachable
--let $group_replication_member_state= UNREACHABLE
--let $group_replication_member_id= $member2_uuid
--source include/gr_wait_for_member_state.inc

# Unblock the group which is caused by majority loss using
# group_replication_force_members variable
--echo # Connect to primary and unblock the group.
--let $local_address_server1= `SELECT @@GLOBAL.group_replication_local_address`
--replace_result $local_address_server1 GROUP_REPLICATION_LOCAL_ADDR
--eval SET GLOBAL group_replication_force_members= "$local_address_server1"

# Check for the primary member after the group is unblocked
--let $server1_uuid= `SELECT @@server_uuid`
--let $group_replication_expected_uuid= $server1_uuid
--source include/gr_wait_primary_member_uuid.inc

--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.replication_group_members where MEMBER_STATE="ONLINE"
--source include/wait_condition.inc

CREATE TABLE test.t1 ( a int primary key);
INSERT INTO test.t1 VALUES (1);

# Start group replication again in server 2 and server 3
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/start_group_replication.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--source include/start_group_replication.inc

--let $wait_condition=SELECT COUNT(*)=3 FROM performance_schema.replication_group_members where MEMBER_STATE="ONLINE"
--source include/wait_condition.inc

--let $group_replication_expected_uuid= $server1_uuid
--source include/gr_wait_primary_member_uuid.inc

# Connect to primary and cleanup
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
DROP TABLE test.t1;

--source include/group_replication_end.inc

