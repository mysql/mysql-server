########################################################################
#
# This test validate that transactions executed when a primary is being
# elected and is applying backlog, if the plugin is stopped the
# transactions on hold will be aborted
#
# Test:
#   0. This test requires three servers on single primary mode
#   1. Bootstrap group on server 1 and create table t1
#   2. Join server2 to group
#   3. Join server3 to group
#   4. Disable notification that backlog was applied, will allow see held
#      transactions while shutting down the server
#   5. Stop primary server and primary election will occur
#   6. A read execution to new primary will be put on hold
#   7. Validate statement is on hold
#   8. Stop server2
#   9. Connections on hold will return error due to primary being stopped
#  10. Wait for server2 to exit group
#  11. Now that server2 stopped all connections should have default
#      behavior after GR stop
#  12. Cleanup
#
########################################################################

--source include/have_debug.inc
--source include/have_group_replication_plugin.inc

--let $rpl_skip_group_replication_start= 1
--let $rpl_server_count= 3
--let $rpl_group_replication_single_primary_mode=1
--source include/group_replication.inc

--echo
--echo # 1. Bootstrap group on server 1 and create table t1

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/start_and_bootstrap_group_replication.inc

CREATE TABLE test.t1 (a int primary key);

--echo
--echo # 2. Join server2 to group

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

SET @@GLOBAL.group_replication_member_weight= 90;
--source include/start_group_replication.inc

--let $member2_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

--echo
--echo # 3. Join server3 to group

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--source include/start_group_replication.inc

--echo
--echo # 4. Disable notification that backlog was applied, will allow see held
--echo #    transactions while shutting down the server

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SET @@GLOBAL.DEBUG= '+d,group_replication_cancel_apply_backlog';

--echo
--echo # 5. Stop primary server and primary election will occur

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/stop_group_replication.inc

--echo
--echo # 6. A read execution to new primary will be put on hold

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SET @@SESSION.group_replication_consistency= BEFORE_ON_PRIMARY_FAILOVER;

--send SELECT * FROM t1

--echo
--echo # 7. Validate statement is on hold

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--let $wait_condition= SELECT COUNT(*)=1 FROM INFORMATION_SCHEMA.PROCESSLIST WHERE STATE='Executing hook on transaction begin.' AND INFO='SELECT * FROM t1'
--source include/wait_condition.inc

--echo
--echo # 8. Stop server2

--source include/stop_group_replication.inc

--echo
--echo # 9. Connections on hold will return error due to primary being stopped

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--error ER_GR_HOLD_KILLED
--reap

SET @@GLOBAL.DEBUG= '-d,group_replication_cancel_apply_backlog';

--echo
--echo # 10. Wait for server2 to exit group

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--let $group_replication_number_of_members= 1
--source include/gr_wait_for_number_of_members.inc

--echo
--echo # 11. Now that server2 stopped all connections should have default
--echo #     behavior after GR stop

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SELECT * FROM t1;

--echo
--echo # 12. Cleanup

SET @@GLOBAL.group_replication_member_weight= DEFAULT;

SET SESSION sql_log_bin= 0;
DROP TABLE t1;
SET SESSION sql_log_bin= 1;

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

SET SESSION sql_log_bin= 0;
DROP TABLE t1;
SET SESSION sql_log_bin= 1;

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

DROP TABLE t1;

--source include/group_replication_end.inc
