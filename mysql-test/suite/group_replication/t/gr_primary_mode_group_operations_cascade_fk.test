################################################################################
# Validate that a group mode change with ongoing cascading FK
# transactions does terminate successfully.
#
# 1. Bootstrap group on server1, which will be the primary.
# 2. Add a second member to the group.
# 3. Start a transaction that has cascading FK on the primary.
# 4. Start group mode change to multi-primary on the primary.
# 5. While group action is ongoing on server1, server2 already
#    changed group_replication_enforce_update_everywhere_checks
#    but has super_read_only enabled.
# 6. Complete the ongoing transaction.
# 7. Successful termination of the group change.
# 8. Clean up.
################################################################################
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--let $rpl_group_replication_single_primary_mode=1
--source include/group_replication.inc


--echo
--echo ############################################################
--echo # 1. Bootstrap group on server1, which will be the primary.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--source include/start_and_bootstrap_group_replication.inc

CREATE TABLE tp1 (c1 char(10) NOT NULL PRIMARY KEY);
CREATE TABLE tc1 (c1 char(10) NOT NULL PRIMARY KEY,
                  FOREIGN KEY (c1) REFERENCES tp1(c1) ON DELETE CASCADE ON UPDATE RESTRICT);


--echo
--echo ############################################################
--echo # 2. Add a second member to the group.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/start_group_replication.inc


--echo
--echo ############################################################
--echo # 3. Start a transaction that has cascading FK on the primary.
--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
BEGIN;
INSERT INTO tp1 VALUES('a');
INSERT INTO tp1 VALUES('b');
INSERT INTO tc1 VALUES('a');
UPDATE tc1 SET c1 = 'b';


--echo
--echo ############################################################
--echo # 4. Start group mode change to multi-primary on the primary.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--send SELECT group_replication_switch_to_multi_primary_mode()

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
# Wait until the mode change starts waiting for ongoing transactions
--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.events_stages_current WHERE event_name LIKE "%Multi-primary Switch: waiting for pending transactions to finish"
--source include/wait_condition.inc


--echo
--echo ############################################################
--echo # 5. While group action is ongoing on server1, server2 already
--echo #    changed group_replication_enforce_update_everywhere_checks
--echo #    but has super_read_only enabled.
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--let $wait_condition=SELECT COUNT(*)=1 FROM performance_schema.events_stages_current WHERE event_name LIKE "%Multi-primary Switch: waiting on another member step completion"
--source include/wait_condition.inc

--let $assert_text= group_replication_enforce_update_everywhere_checks is ON
--let $assert_cond= [SELECT @@GLOBAL.group_replication_enforce_update_everywhere_checks] = 1
--source include/assert.inc

--let $assert_text= The super_read_only mode must be 1 here.
--let $assert_cond= [SELECT @@GLOBAL.super_read_only] = 1;
--source include/assert.inc


--echo
--echo ############################################################
--echo # 6. Complete the ongoing transaction.
--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
COMMIT;


--echo
--echo ############################################################
--echo # 7. Successful termination of the group change.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc
--reap
--source include/gr_assert_multi_primary_mode.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc
--source include/gr_assert_multi_primary_mode.inc

--source include/rpl_sync.inc

--let $diff_tables=server1:tp1, server2:tp1
--source include/diff_tables.inc
--let $diff_tables=server1:tc1, server2:tc1
--source include/diff_tables.inc


--echo
--echo ############################################################
--echo # 8. Clean up.
DROP TABLE tc1;
DROP TABLE tp1;

--let $rpl_group_replication_single_primary_mode=0
--let $rpl_group_replication_reset_persistent_vars=1
--source include/group_replication_end.inc
