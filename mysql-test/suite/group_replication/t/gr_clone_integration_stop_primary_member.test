###############################################################################
# This test verifies that when the primary leaves the group while a member is
# cloning nothing will happen.
#
# 0. The test requires three servers: M1, M2 and M3 in single primary mode.
# 1. Install the clone plugin on server 1
# 2. Bootstrap server1 and add some data
# 3. Install the clone plugin and start GR on server3
# 4. Restart server 2 with a monitoring process (mysqld_safe) if needed
# 5. Install the clone plugin on server 2
#    Setup the server so group replication starts on boot
# 6. Start group replication on server 2
#    Set a debug point so it blocks before clone.
# 7. Stop the current primary member forcing an election
#    Check all states are correct
# 8. Unblock clone.
#    Check everything is fine after restart
# 9. Start the stopped server
#    Check data consistency
# 10. Cleanup
#

--source include/big_test.inc
--source include/have_debug_sync.inc
--source include/have_mysqld_monitoring_process.inc
--source include/have_clone_plugin.inc
--source include/force_restart.inc
--source include/have_group_replication_plugin.inc
--let $rpl_server_count= 3
--let $rpl_skip_group_replication_start= 1
--let $rpl_group_replication_single_primary_mode=1
--source include/group_replication.inc

# Validate plugins
--let plugins = CLONE_PLUGIN,GROUP_REPLICATION
--source include/check_plugin_dir.inc

--echo
--echo ############################################################
--echo # 1. Install clone plugin on server1.

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

--echo
--echo ############################################################
--echo # 2. Bootstrap server1 and add some data

--source include/start_and_bootstrap_group_replication.inc

CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1);
INSERT INTO t1 VALUES (2);

--echo
--echo #################################################################
--echo # 3. Install the clone plugin and start GR on server3
--let $rpl_connection_name= server3
--source include/rpl_connection.inc
--let $server3_port = `SELECT @@port`
--let $server3_ip_port= 127.0.0.1:$server3_port

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

--source include/start_group_replication.inc

--echo
--echo #######################################################################
--echo # 4. Restart server 2 with a monitoring process (mysqld_safe) if needed

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $_group_replication_local_address2= `SELECT @@GLOBAL.group_replication_local_address`
--let $_group_replication_group_seeds2= `SELECT @@GLOBAL.group_replication_group_seeds`

# Persist the primary mode settings so mysqld_safe starts with them
SET PERSIST group_replication_enforce_update_everywhere_checks= OFF;
SET PERSIST group_replication_single_primary_mode= ON;

--let $plugin_list= $GROUP_REPLICATION
--source include/spawn_monitoring_process.inc

--echo ############################################################
--echo # 5. Install the clone plugin on server 2
--echo #    Setup the server so group replication starts on boot

--disable_query_log
--eval SET PERSIST  group_replication_group_name= "$group_replication_group_name"
--eval SET PERSIST  group_replication_local_address= "$_group_replication_local_address2"
--eval SET PERSIST  group_replication_group_seeds= "$_group_replication_group_seeds2"

SET PERSIST group_replication_start_on_boot= ON;
--enable_query_log

--replace_result $CLONE_PLUGIN CLONE_PLUGIN
--eval INSTALL PLUGIN clone SONAME '$CLONE_PLUGIN'

--echo
--echo ############################################################
--echo # 6. Start group replication on server 2
--echo #    Set a debug point so it blocks before clone.

--let $_group_replication_threshold_save= `SELECT @@GLOBAL.group_replication_clone_threshold`
SET GLOBAL group_replication_clone_threshold= 1;

SET @@GLOBAL.DEBUG='+d,gr_clone_process_before_execution';

START GROUP_REPLICATION;

SET DEBUG_SYNC = 'now WAIT_FOR signal.gr_clone_thd_paused';

--echo
--echo ############################################################
--echo # 7. Stop the current primary member forcing an election
--echo #    Check all states are correct

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/stop_group_replication.inc

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--let $group_replication_number_of_members= 2
--source include/gr_wait_for_number_of_members.inc

--let $server_uuid= query_get_value(SELECT @@SERVER_UUID, @@SERVER_UUID, 1)

let $wait_condition= SELECT COUNT(*) = 1 FROM performance_schema.replication_group_members
   WHERE member_role="SECONDARY" AND member_id="$server_uuid";
--source include/wait_condition.inc

--let $rpl_connection_name= server3
--source include/rpl_connection.inc

--let $group_replication_number_of_members= 2
--source include/gr_wait_for_number_of_members.inc

# Wait for server 3 to disable read mode on the election process
--let $wait_condition= SELECT @@GLOBAL.super_read_only = '0'
--source include/wait_condition.inc

--source include/gr_assert_primary_member.inc

--echo
--echo ############################################################
--echo # 8. Unblock clone.
--echo #    Check everything is fine after restart

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SET DEBUG_SYNC = 'now SIGNAL signal.gr_clone_thd_continue';
SET @@GLOBAL.DEBUG = '-d,gr_clone_process_before_execution';

--source include/wait_until_disconnected.inc

--let $rpl_server_number= 2
--source include/rpl_reconnect.inc

--let $group_replication_member_state=ONLINE
--source include/gr_wait_for_member_state.inc

--let $assert_text= Clone must be completed
--let $assert_cond= [SELECT state="Completed" FROM performance_schema.clone_status] = 1;
--source include/assert.inc

--echo
--echo ############################################################
--echo # 9. Start the stopped server
--echo #    Check data consistency

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--source include/start_group_replication.inc

# See if the data has been properly cloned in server2
--let $diff_tables=server1:test.t1, server2:test.t1, server3:test.t1
--source include/diff_tables.inc

--echo
--echo ############################################################
--echo # 10. Cleanup
--let $rpl_connection_name= server2
--source include/rpl_connection.inc

SET DEBUG_SYNC = 'RESET';

--eval SET GLOBAL group_replication_clone_threshold= $_group_replication_threshold_save

RESET PERSIST IF EXISTS group_replication_enforce_update_everywhere_checks;
RESET PERSIST IF EXISTS group_replication_single_primary_mode;
RESET PERSIST IF EXISTS group_replication_group_name;
RESET PERSIST IF EXISTS group_replication_local_address;
RESET PERSIST IF EXISTS group_replication_group_seeds;
RESET PERSIST IF EXISTS group_replication_start_on_boot;

SET GLOBAL read_only= FALSE;

set session sql_log_bin=0;
call mtr.add_suppression("Due to the number of missing transactions being higher than the configured threshold of 1, this member will start distributed recovery using clone.");
call mtr.add_suppression("Plugin group_replication reported: 'Internal query:  CLONE INSTANCE FROM \"root\"@127.0.0.1:[0-9]+ IDENTIFIED BY \"\\*\\*\\*\\*\\*\" REQUIRE NO SSL; result in error. Error number: 1317'");
call mtr.add_suppression("There was an issue when cloning from another server: Error number: 1317 Error message: Query execution was interrupted'");
call mtr.add_suppression("Clone removing all user data for provisioning: Started");
call mtr.add_suppression("Clone removing all user data for provisioning: Finished");
set session sql_log_bin=1;

--source include/clean_monitoring_process.inc

--source include/group_replication_end.inc
