################################################################################
# This test verifies that the CHANGE MASTER command is not logged in the binary
# log. Therefore it is not replicated as well.
#
# Test:
# 0. The test requires two servers: M1 and M2.
# 1. Create a user on M1 to be used by the recovery channel. Bootstrap
#    GROUP on M1. Add some data for recovery.
# 2. Start GR on M2 post CHANGE MASTER with valid values. Grep for
#    'CHANGE MASTER' pattern in binary log data. Expect 0 count.
# 3. Grep for 'CHANGE MASTER' pattern in binary log of M1. Expect 0 count.
################################################################################

--let $skip_recovery_configuration=1
--source include/have_group_replication_plugin.inc
--let $rpl_skip_group_replication_start= 1
--source include/group_replication.inc

# Start group replication on server1

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--echo # Creating a connection on the first server to be used by the recovery channel
SET sql_log_bin=0;
CREATE USER 'manish'@'%' IDENTIFIED BY 'rpl';
GRANT REPLICATION SLAVE ON *.* TO 'manish'@'%';
GRANT GROUP_REPLICATION_STREAM ON *.* TO 'manish'@'%';
FLUSH PRIVILEGES;
SET sql_log_bin=1;

--disable_warnings
CHANGE MASTER TO MASTER_USER='manish', MASTER_PASSWORD='rpl' FOR CHANNEL 'group_replication_recovery';
--enable_warnings

--source include/start_and_bootstrap_group_replication.inc

# Add some data for recovery
CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;

--let $rpl_connection_name= server2
--source include/rpl_connection.inc

--echo # Second CHANGE MASTER with valid options will work fine.
--disable_warnings
CHANGE REPLICATION SOURCE TO SOURCE_USER='manish', SOURCE_PASSWORD='rpl' FOR CHANNEL 'group_replication_recovery';
--enable_warnings

SET sql_log_bin=0;
CREATE USER 'manish'@'%' IDENTIFIED BY 'rpl';
GRANT REPLICATION SLAVE ON *.* TO 'manish'@'%';
GRANT GROUP_REPLICATION_STREAM ON *.* TO 'manish'@'%';
FLUSH PRIVILEGES;
SET sql_log_bin=1;

--source include/start_group_replication.inc

--let $MYSQLD_DATADIR= `select @@datadir;`
--exec $MYSQL_BINLOG $MYSQLD_DATADIR/server-binary-log.000001 > $MYSQLTEST_VARDIR/tmp/change_master_server2.sql

--echo # Asserting that CHANGE MASTER is not logged in the binary log of the server 2.
--let $grep_file=$MYSQLTEST_VARDIR/tmp/change_master_server2.sql
--let $grep_pattern= CHANGE MASTER
--let $grep_output= print_count
--source include/grep_pattern.inc

--echo # Ensuring the the two members are online.
--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--let $group_replication_number_of_members= 2
--source include/gr_wait_for_number_of_members.inc

--let $MYSQLD_DATADIR= `select @@datadir;`
--exec $MYSQL_BINLOG $MYSQLD_DATADIR/server-binary-log.000001 > $MYSQLTEST_VARDIR/tmp/change_master_server1.sql

--echo # Asserting that CHANGE MASTER is not replicated in the binary log of the server.
--let $grep_file=$MYSQLTEST_VARDIR/tmp/change_master_server1.sql
--let $grep_pattern= CHANGE MASTER
--let $grep_output= print_count
--source include/grep_pattern.inc

#Cleanup
--let $rpl_connection_name= server2
--source include/rpl_connection.inc
RESET SLAVE ALL FOR CHANNEL 'group_replication_recovery';

SET sql_log_bin=0;
DROP USER manish;
SET sql_log_bin=1;

--let $rpl_connection_name= server1
--source include/rpl_connection.inc

--remove_file $MYSQLTEST_VARDIR/tmp/change_master_server1.sql
--remove_file $MYSQLTEST_VARDIR/tmp/change_master_server2.sql
DROP TABLE t1;
SET sql_log_bin=0;
DROP USER manish;
SET sql_log_bin=1;
--source include/group_replication_end.inc
