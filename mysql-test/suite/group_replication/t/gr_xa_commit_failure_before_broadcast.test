# ==== Purpose ====
#
# This script tests server behavior when a crash occurs during the
# execution of `XA COMMIT` and just before the transaction is broadcasted
# to GR.
#
# ==== Requirements ====
#
# Pre-conditions:
# PC1. GR single-primary topology with 3 servers.
#
# After server restart:
# R1. The `XA COMMIT` statement shouldn't be logged to the binlog.
# R2. There shouldn't be any changes to GTID_EXECUTED.
# R3. There should be one pending XA transactions visible with `XA
#     RECOVER`.
#
# ==== Implementation ====
#
# 1. Setup scenario: setup GR, create table and insert some records.
# 2. Start and execute an XA transaction containing an insert until before
#    `XA COMMIT`.
# 3. Take the `GTID_EXECUTED` state, on the primary.
# 4. Crash the primary during `XA COMMIT` execution, after preparing in the
#    storage engines and just before broadcasting to GR
# 5. Restart server 1 (former primary) and check:
#    a. Error log for messages stating that recovery process found one
#       transaction needing recovery.
#    b. The `XA COMMIT` wasn't logged to the binary log.
#    c. There aren't any changes to GTID_EXECUTED.
#    d. There is one pending XA transaction listed in the output of `XA
#       RECOVER`.
#    e. There aren't changes to the table.
# 6. On server 2, check:
#    a. The `XA COMMIT` wasn't logged to the binary log.
#    b. There is one pending XA transaction listed in the output of `XA
#       RECOVER`.
#    c. There aren't changes to the table.
# 7. Re-join server 1 (former primary) to the group.
# 8. On server 1, check state after distributed recovery:
#    a. The `XA COMMIT` wasn't logged to the binary log.
#    b. There is one pending XA transaction listed in the output of `XA
#       RECOVER`.
# 9. Commit the transaction on primary.
# 10. Check table was updated on server 1.
#
# ==== References ====
#
# WL#11300: Crash-safe XA + binary log
#
# Related tests:
#   see extra/xa_crash_safe_tests/setup.inc
#
--source include/not_valgrind.inc
--source include/have_debug.inc
--source include/have_debug_sync.inc
--source include/have_group_replication_plugin.inc
--let $rpl_group_replication_single_primary_mode =1
--let $rpl_skip_group_replication_start = 1
--let $rpl_server_count = 3
--source include/group_replication.inc

# 1. Setup scenario: setup GR, create table and insert some records.
#
--let $rpl_connection_name = server1
--source include/rpl_connection.inc
--let $xid_data = xid1
--let $xid = `SELECT CONCAT("X'", LOWER(HEX('$xid_data')), "',X'',1")`
--source extra/xa_crash_safe_tests/setup.inc

# 2. Start and execute an XA transaction containing an insert until before
#    `XA COMMIT`.
#
--connect(con1, localhost, root,,)
--connection con1
--eval XA START $xid
INSERT INTO t1 VALUES (1);
--eval XA END $xid
--eval XA PREPARE $xid

# 3. Take the `GTID_EXECUTED` state, on the primary.
#
--let $rpl_connection_name = server1
--source include/rpl_connection.inc
--source include/rpl_sync.inc
--let $before_gtid_executed = `SELECT @@GLOBAL.gtid_executed`

# 4. Crash the primary during `XA COMMIT` execution, after preparing in the
#    storage engines and just before broadcasting to GR
#
--let $auxiliary_connection = server1
--let $statement_connection = con1
--let $statement = XA COMMIT $xid
--let $sync_point = before_invoke_before_commit_hook
--source include/execute_to_conditional_timestamp_sync_point.inc
--source include/kill_mysqld.inc
--source extra/xa_crash_safe_tests/cleanup_connection.inc

--let $rpl_connection_name = server2
--source include/rpl_connection.inc
--let $group_replication_number_of_members = 2
--source include/gr_wait_for_number_of_members.inc

# 5. Restart server 1 (former primary) and check:
#
--let $restart_parameters = restart:--group_replication_local_address=$_group_replication_local_address --group_replication_group_seeds=$_group_replication_group_seeds --group_replication_group_name=$_group_replication_group_name --group_replication_start_on_boot=OFF --group_replication_single_primary_mode=TRUE --group_replication_enforce_update_everywhere_checks=FALSE
--replace_result $_group_replication_local_address GROUP_REPLICATION_LOCAL_ADDRESS $_group_replication_group_seeds GROUP_REPLICATION_GROUP_SEEDS $_group_replication_group_name GROUP_REPLICATION_GROUP_NAME
--source include/start_mysqld.inc
--let $rpl_server_number = 1
--source include/rpl_reconnect.inc

--let $rpl_connection_name = server1
--source include/rpl_connection.inc

# 5.a. Error log for messages stating that recovery process found one
#      transaction needing recovery.
#
--let $assert_select = Successfully prepared 1 XA transaction
--source extra/xa_crash_safe_tests/assert_recovery_message.inc

# 5.b. The `XA COMMIT` wasn't logged to the binary log.
#
--let $event_sequence = Gtid # $xa_start_end # XA_prepare/XA PREPARE $xid
--source include/assert_binlog_events.inc

# 5.c. There aren't any changes to GTID_EXECUTED.
#
--let $after_gtid_executed = `SELECT @@GLOBAL.gtid_executed`
--let $assert_text = GTID_EXECUTED has not been updated
--let $assert_cond = "$before_gtid_executed" = "$after_gtid_executed"
--source include/assert.inc

# 5.d. There is one pending XA transaction listed in the output of `XA
#       RECOVER`.
#
--let $expected_prepared_xa_count = 1
--source extra/xa_crash_safe_tests/assert_xa_recover.inc

# 5.e. There aren't changes to the table.
#
--let $expected_row_count = 1
--source extra/xa_crash_safe_tests/assert_row_count.inc

# 6. On server 2, check:
#
--let $rpl_connection_name = server2
--source include/rpl_connection.inc

# 6.a. The `XA COMMIT` wasn't logged to the binary log.
#
--let $binlog_file = `SELECT @binlog_file`
--let $binlog_position = `SELECT @binlog_position`
--let $event_sequence = $view_change # Gtid # $xa_start_end # XA_prepare/XA PREPARE $xid
--source include/assert_binlog_events.inc

# 6.b. There is one pending XA transaction listed in the output of `XA
#       RECOVER`.
#
--let $expected_prepared_xa_count = 1
--source extra/xa_crash_safe_tests/assert_xa_recover.inc

# 6.c. There aren't changes to the table.
#
--let $expected_row_count = 1
--source extra/xa_crash_safe_tests/assert_row_count.inc

# 7. Re-join server 1 (former primary) to the group.
#
--let $rpl_connection_name = server1
--source include/rpl_connection.inc
--source include/save_binlog_position.inc
--let $group_replication_group_name = $_group_replication_group_name
--source include/start_group_replication.inc

--let $rpl_connection_name = server2
--source include/rpl_connection.inc
--let $group_replication_number_of_members = 3
--source include/gr_wait_for_number_of_members.inc

# 8. On server 1, check state after distributed recovery:
#
--let $rpl_connection_name = server1
--source include/rpl_connection.inc

# 8.a. The `XA COMMIT` wasn't logged to the binary log.
#
--let $event_sequence = $view_change
--source include/assert_binlog_events.inc

# 8.b. There is one pending XA transaction listed in the output of `XA
#       RECOVER`.
#
--let $expected_prepared_xa_count = 1
--source extra/xa_crash_safe_tests/assert_xa_recover.inc

# 9. Commit the transaction on primary.
#
--source include/gr_find_a_primary.inc
--connection $group_replication_primary_connection_out_var
--eval XA COMMIT $xid

--source include/rpl_sync.inc

# 10. Check table was updated on server 1.
#
--let $rpl_connection_name = server1
--source include/rpl_connection.inc

--let $expected_row_count = 2
--source extra/xa_crash_safe_tests/assert_row_count.inc

--connection $group_replication_primary_connection_out_var

DROP TABLE t1;

--let $rpl_connection_name = server2
--source include/rpl_connection.inc
--source include/restore_sysvars.inc
--let $rpl_connection_name = server3
--source include/rpl_connection.inc
--source include/restore_sysvars.inc

--source include/group_replication_end.inc
