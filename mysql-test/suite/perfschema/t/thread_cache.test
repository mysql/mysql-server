# Tests for PERFORMANCE_SCHEMA

#
# Important note:
# this test is extremely sensitive to how threads are running inside the server,
# so it has it's own -master.opt file, to enforce it runs alone in mysqld
#

# X plugin might increase counter thread_id_increment below
source include/xplugin_wait_for_interfaces.inc;

# Setup

flush status;

SET @saved_thread_cache_size = @@global.thread_cache_size;

set global thread_cache_size = 0;

show global variables like "thread_cache_size";

connect (con1, localhost, root, , );

let $con1_ID=`select connection_id()`;

let $con1_THREAD_ID=`select thread_id from performance_schema.threads
  where PROCESSLIST_ID = connection_id()`;

connect (con2, localhost, root, , );

let $con2_ID=`select connection_id()`;

let $con2_THREAD_ID=`select thread_id from performance_schema.threads
  where PROCESSLIST_ID = connection_id()`;

--connection default

--disable_query_log
eval select ($con2_ID - $con1_ID) into @id_increment;
eval select ($con2_THREAD_ID - $con1_THREAD_ID) into @thread_id_increment;
--enable_query_log

# Expect 1, connection_id() is incremented for each new connection
select @id_increment;
# Expect 1, THREAD_ID is incremented for each new connection
select @thread_id_increment;

--disconnect con2

--connection default

# Debug
# select * from performance_schema.threads
#   where name like "thread/sql/one_connection";

# Wait for the disconnect con2 to complete
let $wait_condition=
  select count(*) = 2 from performance_schema.threads
  where name like "thread/sql/one_connection";
--source include/wait_condition.inc

connect (con3, localhost, root, , );

let $con3_ID=`select connection_id()`;

let $con3_THREAD_ID=`select thread_id from performance_schema.threads
  where PROCESSLIST_ID = connection_id()`;

--disconnect con3
--disconnect con1

--connection default

# Debug
# select * from performance_schema.threads
#   where name like "thread/sql/one_connection";

# Wait for the disconnect con1 and con3 to complete
let $wait_condition=
  select count(*) = 1 from performance_schema.threads
  where name like "thread/sql/one_connection";
--source include/wait_condition.inc

--disable_query_log
eval select ($con3_ID - $con2_ID) into @id_increment;
eval select ($con3_THREAD_ID - $con2_THREAD_ID) into @thread_id_increment;
--enable_query_log

select @id_increment;
select @thread_id_increment;

set global thread_cache_size = 100;

show global variables like "thread_cache_size";

connect (con1, localhost, root, , );

let $con1_ID=`select connection_id()`;

let $con1_THREAD_ID=`select thread_id from performance_schema.threads
  where PROCESSLIST_ID = connection_id()`;

connect (con2, localhost, root, , );

let $con2_ID=`select connection_id()`;

let $con2_THREAD_ID=`select thread_id from performance_schema.threads
  where PROCESSLIST_ID = connection_id()`;

--connection default

--disable_query_log
eval select ($con2_ID - $con1_ID) into @id_increment;
eval select ($con2_THREAD_ID - $con1_THREAD_ID) into @thread_id_increment;
--enable_query_log

select @id_increment;
select @thread_id_increment;

--disconnect con2

--connection default

# Debug
# select * from performance_schema.threads
#   where name like "thread/sql/one_connection";

# Wait for the disconnect con2 to complete
let $wait_condition=
  select count(*) = 2 from performance_schema.threads
  where name like "thread/sql/one_connection";
--source include/wait_condition.inc

connect (con3, localhost, root, , );

let $con3_ID=`select connection_id()`;

let $con3_THREAD_ID=`select thread_id from performance_schema.threads
  where PROCESSLIST_ID = connection_id()`;

--disconnect con3
--disconnect con1

--connection default

# Debug
# select * from performance_schema.threads
#   where name like "thread/sql/one_connection";

# Wait for the disconnect con1 and con3 to complete
let $wait_condition=
  select count(*) = 1 from performance_schema.threads
  where name like "thread/sql/one_connection";
--source include/wait_condition.inc

--disable_query_log
eval select ($con3_ID - $con2_ID) into @id_increment;
eval select ($con3_THREAD_ID - $con2_THREAD_ID) into @thread_id_increment;
--enable_query_log

# When caching threads, the pthread that executed con2 was parked in the
# cache on disconnect, and then picked up con3.

# Still expect a new connection_id()
select @id_increment;

# And expect a new instrumentation: the THREAD_ID of old connections should not be reused.
select @thread_id_increment;

set global thread_cache_size = @saved_thread_cache_size;

show global status like "performance_schema_thread%";

