include/master-slave.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection master]
call mtr.add_suppression("Slave: Can\'t find record in \'t1\' Error_code: .*");
[on slave]
SET @old_slave_exec_mode= @@global.slave_exec_mode;
######## Run with slave_exec_mode=STRICT ########
SET @@global.slave_exec_mode = 'STRICT';
==== Initialize ====
[on master]
CREATE TABLE t1(a INT PRIMARY KEY);
[on slave]
include/sync_slave_sql_with_master.inc
==== Test: SQL thread sees 'INSERT' of existing key ====
---- Prepare slave so that it will get duplicate key error ----
INSERT INTO t1 VALUES (1);
---- Insert rows on master ----
[on master]
INSERT INTO t1 VALUES (1);
SELECT * FROM t1;
a
1
[on slave]
---- Wait until slave stops with an error ----
include/wait_for_slave_sql_error.inc [errno=1062]
SELECT "1062" as 'Last_SQL_Errno';
Last_SQL_Errno
1062
call mtr.add_suppression("Slave SQL.*Duplicate entry .1. for key .PRIMARY.* Error_code: MY-001062");
call mtr.add_suppression("The slave coordinator and worker threads are stopped, possibly leaving data in inconsistent state");
SELECT * FROM t1;
a
1
---- Resolve the conflict on the slave and restart SQL thread ----
DELETE FROM t1 WHERE a = 1;
START SLAVE SQL_THREAD;
include/wait_for_slave_sql_to_start.inc
---- Sync slave and verify that there is no error ----
include/check_slave_no_error.inc
SELECT * FROM t1;
a
1
==== Test: SQL thread sees 'DELETE' of non-existing row ====
---- On master, insert two rows, the second with binlogging off ----
[on master]
DELETE FROM t1;
INSERT INTO t1 VALUES (1);
[on slave]
include/sync_slave_sql_with_master.inc
DELETE FROM t1 WHERE a = 1;
---- On master, remove the row that does not exist on slave ----
[on master]
DELETE FROM t1 WHERE a = 1;
SELECT * FROM t1;
a
[on slave]
---- Wait until slave stops with an error ----
call mtr.add_suppression("Slave SQL.*Can.t find record in .t1., Error_code: 1032");
include/wait_for_slave_sql_error.inc [errno=1032]
SELECT "1032" as 'Last_SQL_Errno';
Last_SQL_Errno
1032
SELECT * FROM t1;
a
---- Resolve the conflict on the slave and restart SQL thread ----
INSERT INTO t1 VALUES (1);
START SLAVE SQL_THREAD;
include/wait_for_slave_sql_to_start.inc
---- Sync slave and verify that there is no error ----
include/check_slave_no_error.inc
SELECT * FROM t1;
a
==== Clean up ====
[on master]
DROP TABLE t1;
[on slave]
include/sync_slave_sql_with_master.inc
include/rpl_reset.inc
######## Run with slave_exec_mode=IDEMPOTENT ########
set @@global.slave_exec_mode= 'IDEMPOTENT';
==== Initialize ====
[on master]
CREATE TABLE t1(a INT PRIMARY KEY);
[on slave]
include/sync_slave_sql_with_master.inc
==== Test: SQL thread sees 'INSERT' of existing key ====
---- Prepare slave so that it will get duplicate key error ----
INSERT INTO t1 VALUES (1);
---- Insert rows on master ----
[on master]
INSERT INTO t1 VALUES (1);
SELECT * FROM t1;
a
1
[on slave]
---- Sync slave and verify that there is no error ----
include/check_slave_no_error.inc
SELECT * FROM t1;
a
1
==== Test: SQL thread sees 'DELETE' of non-existing row ====
---- On master, insert two rows, the second with binlogging off ----
[on master]
DELETE FROM t1;
INSERT INTO t1 VALUES (1);
[on slave]
include/sync_slave_sql_with_master.inc
DELETE FROM t1 WHERE a = 1;
---- On master, remove the row that does not exist on slave ----
[on master]
DELETE FROM t1 WHERE a = 1;
SELECT * FROM t1;
a
[on slave]
---- Sync slave and verify that there is no error ----
include/check_slave_no_error.inc
SELECT * FROM t1;
a
==== Clean up ====
[on master]
DROP TABLE t1;
[on slave]
include/sync_slave_sql_with_master.inc
SET @@global.slave_exec_mode= @old_slave_exec_mode;
include/rpl_end.inc
