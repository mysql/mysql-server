#
# Set up masters server_1 and server_3 with server_2 being a slave.
#
include/rpl_init.inc [topology=1->2,3->2]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
#
# Test case 1: Create multiple sources and make sure that
# number of sources= number of rows in all the performance schema tables.
# On master, where replication is not setup, it shall show 0 rows.
[connection server_1]
include/assert.inc [Number of rows = 0 on master for repliation_connection_configuration table.]
include/assert.inc [Number of rows = 0 on master for repliation_connection_status table.]
include/assert.inc [Number of rows = 0 on master for repliation_applier_configuration table.]
include/assert.inc [Number of rows = 0 on master for repliation_applier_status table.]
include/assert.inc [Number of rows = 0 on master for replication_applier_status_by coordinator table.]
include/assert.inc [Number of rows = 0 on master for replication_applier_status_by_worker table.]
#
# Test case 2: On the slave,  number of rows should be zero for a non existent channel
#
[connection server_2]
include/assert.inc [Number of rows= 0 on slave for a non existent channel for repliation_connection_configuration table.]
include/assert.inc [Number of rows= 0 on slave for a non existent channel for repliation_connection_status table.]
include/assert.inc [Number of rows= 0 on slave for a non existent channel for repliation_applier_configuration table.]
include/assert.inc [Number of rows= 0 on slave for a non existent channel for repliation_applier_status table.]
include/assert.inc [Number of rows= 0 on slave for a non existent channel for repliation_applier_status_by_coordinaotor table.]
include/assert.inc [Number of rows= 0 on slave for a non existent channel for replication_applier_status_by_worker table.]
#
#  Test case 3: Rows on multi sourced slave, shall be 2. In workers table it should be
#               2*@@global.replica_parallel_workers
USE performance_schema;
include/assert.inc [there shall be 2 rows for replication_connection_configuration]
include/assert.inc [there shall be 2 rows for replication_connection_status]
include/assert.inc [there shall be 2 rows for replication_applier_configuration]
include/assert.inc [there shall be 2 rows for replication_applier_status]
include/assert.inc [there shall be 2 rows for replication_connection_configuration]
include/assert.inc [there shall be 2*global.replica_parallel_workers rows for 2 configured channels.]
#
# Test case 4: Verify that selects work on named channels
#              Do this verification by comparing with some known data
#
include/assert.inc [pfs query shall return the correct query value of the channel_3 port.]
include/assert.inc [service state of receiver thread shall be ON.]
include/assert.inc [Value returned by SSS and PS table for Desired_Delay should be same.]
include/assert.inc [service state shall be ON]
include/assert.inc [service state of coordinator shall be ON]
#
#  Stop the slave on channel_1 and verify that rows are still instact
#
include/stop_slave.inc [FOR CHANNEL 'channel_1']
#
# Test case 5: Verify that selects work on named channels even
#              after a channel is stopped. test that service state is OFF
#
include/assert.inc [After stop slave for channel, replication_connection_configuration is intact]
include/assert.inc [After stop slave for channel, service state is OFF for connection_status table.]
include/assert.inc [After stop slave for channel, service state is OFF for applier_status table.]
include/assert.inc [After stop slave for channel, service state is OFF by replication_applier_status_by_worker table.]
#
#  Test case 6): Do a sanity check that joins can be performed as replication tables
#                 contain multiple rows now.
CHANNEL_NAME	channel_1
GROUP_NAME	
SOURCE_UUID	#
THREAD_ID	#
SERVICE_STATE	OFF
COUNT_RECEIVED_HEARTBEATS	#
LAST_HEARTBEAT_TIMESTAMP	#
RECEIVED_TRANSACTION_SET	
LAST_ERROR_NUMBER	0
LAST_ERROR_MESSAGE	
LAST_ERROR_TIMESTAMP	0000-00-00 00:00:00.000000
CHANNEL_NAME	channel_1
THREAD_ID	#
SERVICE_STATE	OFF
LAST_ERROR_NUMBER	0
LAST_ERROR_MESSAGE	
LAST_ERROR_TIMESTAMP	0000-00-00 00:00:00.000000
CHANNEL_NAME	channel_3
GROUP_NAME	
SOURCE_UUID	#
THREAD_ID	#
SERVICE_STATE	ON
COUNT_RECEIVED_HEARTBEATS	#
LAST_HEARTBEAT_TIMESTAMP	#
RECEIVED_TRANSACTION_SET	
LAST_ERROR_NUMBER	0
LAST_ERROR_MESSAGE	
LAST_ERROR_TIMESTAMP	0000-00-00 00:00:00.000000
CHANNEL_NAME	channel_3
THREAD_ID	#
SERVICE_STATE	ON
LAST_ERROR_NUMBER	0
LAST_ERROR_MESSAGE	
LAST_ERROR_TIMESTAMP	0000-00-00 00:00:00.000000
#
# Test case 7: Delete channel_3 and count the number of rows in each table.
#
include/stop_slave.inc [FOR CHANNEL 'channel_3']
RESET SLAVE ALL FOR CHANNEL 'channel_3';
Warnings:
Warning	1287	'RESET SLAVE' is deprecated and will be removed in a future release. Please use RESET REPLICA instead
include/assert.inc [there shall be 1 in replication connection_configuration table after a channel is deleted.]
include/assert.inc [there shall be 1 in replication connection_status table after a channel is deleted.]
include/assert.inc [there shall be 1 in replication applier_config table after a channel is deleted.]
include/assert.inc [there shall be 1 in replication applier_status table after a channel is deleted.]
include/assert.inc [there shall be 1 applier after a channel is deleted.]
include/assert.inc [there shall be global.replica_parallel_workers rows after a channel is deleted.]
#
#  Test case 8: Do a complete delete and see if the number of rows are zero
#
RESET SLAVE ALL;
Warnings:
Warning	1287	'RESET SLAVE' is deprecated and will be removed in a future release. Please use RESET REPLICA instead
include/assert.inc [there shall be 0 rows after all channels are deleted.]
include/assert.inc [there shall be 0 rows after all channels are deleted.]
include/assert.inc [there shall be 0 rows after all channels are deleted.]
include/assert.inc [there shall be 0 rows after all channels are deleted.]
include/assert.inc [there shall be 0 rows after all channels are deleted.]
include/assert.inc [there shall be 0 rows after all channels are deleted.]
include/rpl_end.inc
