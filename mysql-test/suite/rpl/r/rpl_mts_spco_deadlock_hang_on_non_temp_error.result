#
# 1. Create source-replica topology.
include/master-slave.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection master]
#
# 2. Setup testing environment.
#    2.1 Create table on source and insert few rows.
#
CREATE TABLE t1(c1 INT PRIMARY KEY, c2 INT, INDEX(c2)) ENGINE = InnoDB;
CREATE TABLE t2(c1 INT PRIMARY KEY) ENGINE = InnoDB;
#
# 2.2 Setup necessary variables on replica server.
#
include/sync_slave_sql_with_master.inc
include/stop_slave_sql.inc
SET @saved_replica_preserve_commit_order = @@GLOBAL.replica_preserve_commit_order;
SET GLOBAL replica_preserve_commit_order = ON;
SET @saved_replica_parallel_type = @@GLOBAL.replica_parallel_type;
Warnings:
Warning	1287	'@@replica_parallel_type' is deprecated and will be removed in a future release.
SET @saved_replica_parallel_workers = @@GLOBAL.replica_parallel_workers;
SET GLOBAL replica_parallel_type = "LOGICAL_CLOCK";
Warnings:
Warning	1287	'@@replica_parallel_type' is deprecated and will be removed in a future release.
SET GLOBAL replica_parallel_workers = 3;
#
# 2.3 Set innodb_lock_wait_timeout to 300 to make test work without issues
# on slow platform runs.
#
SET @saved_innodb_lock_wait_timeout = @@GLOBAL.innodb_lock_wait_timeout;
SET GLOBAL innodb_lock_wait_timeout = 300;
#
# 2.4 Adding 'rpl_fake_cod_deadlock' debug point to execute special code required
# for the test case.
#
# Adding debug point 'rpl_fake_cod_deadlock' to @@GLOBAL.debug
#
# 2.5 Add error suppressions.
#
call mtr.add_suppression("Worker .* failed executing transaction");
call mtr.add_suppression("The slave coordinator and worker threads are stopped");
#
# 2.6 An extra connection needed on Slave.
#
#
# 3. Actual testing starts from here.
#
# 3.1 Insert basic data on Master
#
[connection master]
INSERT INTO t1 VALUES(1, 1),(2, 2);
#
# 3.2 Enabling set_commit_parent_100 debug point
#     on Master to make two conflicting transactions
#     run parallely by two worker threads on Slave.
#
# Adding debug point 'set_commit_parent_100' to @@SESSION.debug
#
# 3.3 Execute Transaction-1
#
INSERT INTO t1 VALUES(3, 1);
#
# 3.4 Execute Transaction-2
#
BEGIN;
DELETE FROM t1 WHERE c2 <= 1;
INSERT INTO t2 values(1);
COMMIT;
#
# 3.5 Execute Transaction-3
#
INSERT INTO t1 values(10,10);
#
# 3.6 On Slave, begin a transaction (Transacation-4)
#     which will acquire MDL lock on t1
#     (that blocks 'Transacation-1').
#
[connection slave1]
BEGIN;
INSERT INTO t1 VALUES(3, 3);
#
# 3.7 On Slave, begin a transaction (Transacation-5)
#     that can block INSERT in 'Transacation-2'.
#
[connection slave]
BEGIN;
INSERT INTO t2 VALUES(1);
#
# 3.8 Start SQL thread, let Transaction-1 & 2 reach SQL workers
#
include/start_slave_sql.inc
#
# 3.9 Wait till the worker threads pick up those transacations
#     (Transaction 1 and Transaction 2). They will wait for locks due
#     local transacations (4 & 5).
#
# 3.10 Rollback Transaction-4 which will release MDL lock required for
#      Transaction-1.
#
[connection slave1]
ROLLBACK;
#
# 3.11 Wait till the worker thread detects commit order deadlock
#      between two workers
#      (Worker1 : Transaction-1 & Worker-2: Transaction-2).
#
SET debug_sync = "now WAIT_FOR reported_deadlock";
#
# 3.12 Commit Transaction-5 which will release MDL lock required for
#      Transaction-2.
#
[connection slave]
COMMIT;
#
# 3.13 Step 3.11 will cause worker 2 ("Transacation-2")
#      to fail with 'ER_DUP_ENTRY' error (after the worker2
#      detected the 'commit order deadlock').
#
include/wait_for_slave_sql_error.inc [errno=1062]
#
# 3.13 Check that worker 2 did not *retry* transaction-2
#      before throwing ER_DUP_ENTRY error (non-temporary error).
#
include/assert_grep.inc [Found 'Duplicate entry' error only once time which proves that transaction is not retried after getting 'non-temporary error'.]
#
# 4. Cleanup
# 4.1 Clear debug point.
#
# Removing debug point 'rpl_fake_cod_deadlock' from @@GLOBAL.debug
#
# 4.2 Clean the data on Slave.
#
include/stop_slave_io.inc
RESET SLAVE;
Warnings:
Warning	1287	'RESET SLAVE' is deprecated and will be removed in a future release. Please use RESET REPLICA instead
DROP TABLE t1, t2;
#
# 4.3 Clear system variables.
#
SET GLOBAL replica_preserve_commit_order = @saved_replica_preserve_commit_order;
SET GLOBAL innodb_lock_wait_timeout = @saved_innodb_lock_wait_timeout;
SET GLOBAL replica_parallel_type = @saved_replica_parallel_type;
Warnings:
Warning	1287	'@@replica_parallel_type' is deprecated and will be removed in a future release.
SET GLOBAL replica_parallel_workers = @saved_replica_parallel_workers;
#
# 4.4 Clear debug point.
#
[connection master]
# Removing debug point 'set_commit_parent_100' from @@SESSION.debug
#
# 4.5 Clean the data on Master.
#
DROP TABLE t1, t2;
include/rpl_end.inc
