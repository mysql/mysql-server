include/master-slave.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection master]
call mtr.add_suppression("Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT");
call mtr.add_suppression("Slave SQL for channel '': The incident LOST_EVENTS occured on the master.");
call mtr.add_suppression("The content of the statement cache is corrupted "
                         "while writing a rollback record of the transaction "
                         "to the binary log. An incident event has been "
                         "written to the binary log which will stop the "
                         "slaves.");
SET GLOBAL max_binlog_stmt_cache_size = 4096;
Warnings:
Warning	1745	Option binlog_stmt_cache_size (32768) is greater than max_binlog_stmt_cache_size (4096); setting binlog_stmt_cache_size equal to max_binlog_stmt_cache_size.
SET GLOBAL binlog_stmt_cache_size = 4096;
CREATE TABLE t1(c1 INT PRIMARY KEY, data VARCHAR(30000)) ENGINE=MyIsam;
#
# A single statement on non-transactional table causes to log an incident
# event with an unique gtid due to the stmt_cache is not big enough to
# accommodate the changes.
#
Got one of the listed errors
include/show_binlog_events.inc
Log_name	Pos	Event_type	Server_id	End_log_pos	Info
master-bin.000001	#	Gtid	#	#	SET @@SESSION.GTID_NEXT= 'Gtid_set'
master-bin.000001	#	Query	#	#	use `test`; CREATE TABLE t1(c1 INT PRIMARY KEY, data VARCHAR(30000)) ENGINE=MyIsam
master-bin.000001	#	Gtid	#	#	SET @@SESSION.GTID_NEXT= 'Gtid_set'
master-bin.000001	#	Incident	#	#	#1 (LOST_EVENTS)
master-bin.000001	#	Rotate	#	#	master-bin.000002;pos=POS
[connection slave]
#
# Wait for the error 'ER_SLAVE_INCIDENT' caused by applying incident
# event on slave and then stop the slave sql thread.
#
include/wait_for_slave_sql_error.inc [errno=1590]
#
# Prepare the slave to skip the incident event by its GTID.
#
SET GTID_NEXT='MASTER_GTID:5';
BEGIN;
COMMIT;
SET GTID_NEXT=AUTOMATIC;
include/start_slave_sql.inc
[connection master]
DROP TABLE t1;
SET GLOBAL max_binlog_stmt_cache_size= ORIGINAL_VALUE;
SET GLOBAL binlog_stmt_cache_size= ORIGINAL_VALUE;
include/rpl_end.inc
