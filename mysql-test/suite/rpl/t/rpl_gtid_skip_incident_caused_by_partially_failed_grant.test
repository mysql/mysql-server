# ==== Purpose ====
#
# Verify that a partially failed GRANT statement causes to log an incident
# event with an unique gtid, and the slave can skip the incident event by
# its GTID easily.
#
# ==== Implementation ====
#
# 1. A partially failed GRANT statement causes to log an incident event
#    with an unique gtid.
#
# 2. Wait for the error 'ER_SLAVE_INCIDENT' caused by applying incident
#    event on slave and then stop the slave applier thread.
#
# 3. Prepare the slave to skip the incident event by its GTID.
#
# ==== References ====
#
# Bug #19594845  INCIDENT LOG EVENTS SHOULD HAVE UNIQUE GTIDS WHEN GTID MODE IS ON
# See rpl_gtid_skip_incident_caused_by_insufficient_stmt_cache.test

--source include/not_group_replication_plugin.inc
# Test in this file is binlog format agnostic, thus no need
# to rerun it for every format.
--source include/have_binlog_format_row.inc
--source include/have_gtid.inc
--source include/have_innodb.inc
--source include/master-slave.inc

call mtr.add_suppression("REVOKE/GRANT failed while storing table level and column level grants in the privilege tables. An incident event has been written to the binary log which will stop the slaves.");
--let $master_uuid= `SELECT @@GLOBAL.SERVER_UUID`

CREATE TABLE t1(a INT, b INT);
CREATE USER u1@h;
--echo #
--echo # Verify that u1 is added into mysql.user.
--echo #
SELECT user FROM mysql.user WHERE user='u1';

--let $saved_master_pos=query_get_value('SHOW MASTER STATUS', Position, 1)
--error ER_PASSWORD_NO_MATCH
GRANT SELECT(a) ON t1 TO u1@h, u2@h;
INSERT INTO t1 VALUES (1,1);
--echo #
--echo # Verify that the partially failed GRANT statement causes to log an
--echo # incident event with an unique gtid.
--echo #
--let $keep_gtid_events= 1
--let $binlog_start= $saved_master_pos
--source include/show_binlog_events.inc

--source include/rpl_connection_slave.inc
call mtr.add_suppression("Slave SQL for channel '': The incident LOST_EVENTS occured on the master. Message: REVOKE/GRANT failed while storing table level and column level grants in the privilege tables. Error_code: 1590");

--source include/rpl_connection_master.inc
--source include/sync_slave_io_with_master.inc
--echo #
--echo # Wait for the error 'ER_SLAVE_INCIDENT' caused by applying incident
--echo # event on slave and then stop the slave sql thread.
--echo #
--let $slave_sql_errno= convert_error(ER_SLAVE_INCIDENT)
--source include/wait_for_slave_sql_error.inc
--echo #
--echo # Prepare the slave to skip the incident event by its GTID.
--echo #
--replace_result $master_uuid MASTER_GTID
--eval SET GTID_NEXT='$master_uuid:4'
BEGIN;
COMMIT;
SET GTID_NEXT=AUTOMATIC;
--source include/start_slave_sql.inc

# Cleanup
--source include/rpl_connection_master.inc
DROP USER u1@h;
DROP TABLE t1;

#--source include/sync_slave_sql_with_master.inc
# When mts is enabled, restart slave sql threads to make 'CHANGE MASTER TO
# MASTER_AUTO_POSITION= 0' avoid MTS GAPS.
#--source include/restart_slave_sql.inc

--source include/rpl_end.inc
