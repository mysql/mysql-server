# ==== Purpose ====
#
# Verifies that replica-preserve-commit-order maintains the commit order and stops
# newer workers from committing (inserts and XA COMMIT) if one of the older
# worker (executing XA ROLLBACK) have errored out.
#
# ==== Implementation ====
#
# 1. We start replica (server2) with replica_preserve_commit_order
#    enabled and running with 2 applier workers.
#
# 2. On slave, we enable rpl_fake_commit_order_deadlock_for_timestamp_100
#    debug sync point. The rpl_fake_commit_order_deadlock_for_timestamp_100
#    debug sync point would make XA PREPARE fail with ER_UNKNOWN_ERROR error.
#
# 3. On slave, we add the same first insert statement which will be applied on
#    master in step 3, but we do not commit it, to take a lock on row and block
#    slave sql thread when transaction are applied on master in setp 3.
#
# 4. The master generates some transactions (including XA PREPARE transaction)
#    which can be applied in parallel, by setting same commit parents for all
#    the inserts.
#
# 5. On slave, we verify that all the other inserts are also blocked and waiting
#    for first insert to commit i.e. applier threads are in stage 'Waiting for
#    preceding transaction to commit' and their is no data in the table.
#
# 6. On slave, we rollback the first insert executed in step 2, and verify the
#    transactions are applied on table t2, but XA transaction still in prepared
#    stage so table t1 has two rows.
#
# 7. On slave, verify table t1 has only two rows which were inserted before
#    XA transaction. Wait for slave sql thread to fail with ER_UNKNOWN_ERROR
#    error and then remove rpl_fake_commit_order_deadlock_for_timestamp_100
#    debug sync points, and then restart slave sql thread.
#
# 8. On master, execute XA COMMIT for prepared XA transaction.
#
# 9. Cleanup.

--source include/have_debug.inc
--source include/have_debug_sync.inc

--let $rpl_skip_start_slave = 1
--source include/master-slave.inc
CALL mtr.add_suppression("Statement is unsafe because it is being used inside a XA transaction");

--source include/rpl_connection_slave.inc
CALL mtr.add_suppression(".*slave coordinator and worker threads are stopped.*");
CALL mtr.add_suppression("Could not execute Write_rows event on table test.*");
CALL mtr.add_suppression("Worker .* failed executing transaction");
CALL mtr.add_suppression("Error writing relay log configuration");


--let $debug_point=rpl_fake_commit_order_deadlock_for_timestamp_100
--source include/add_debug_point.inc


--source include/rpl_connection_master.inc
--let $mts_spco_start_statement = CREATE TABLE t1 (c1 INT PRIMARY KEY) ENGINE = InnoDB; CREATE TABLE t2 (c1 INT PRIMARY KEY) ENGINE = InnoDB;

--let $mts_spco_block_statement = BEGIN; INSERT INTO t1 VALUES (1);

--let $mts_spco_parallel_statement1 = INSERT INTO t1 VALUES (1); INSERT INTO t1 VALUES (2); XA START 'xa_test_xid1'; INSERT INTO t1 VALUES (3); XA END 'xa_test_xid1'; SET TIMESTAMP = 200; XA PREPARE 'xa_test_xid1';
--let $mts_spco_parallel_statement2 = BEGIN; INSERT INTO t2 VALUES (1); INSERT INTO t2 VALUES (2); COMMIT;

--let $mts_spco_assert_text1 = Verify table t1 has two rows
--let $mts_spco_assert_cond1 = "[SELECT count(*) COUNT FROM t1, COUNT, 1]" = "0"

--let $mts_spco_assert_text2 = Verify table t2 is empty
--let $mts_spco_assert_cond2 = "[SELECT count(*) COUNT FROM t2, COUNT, 1]" = "0"

--let $mts_spco_rollback_statement = ROLLBACK;
--source extra/rpl_tests/rpl_mts_replica_preserve_commit_order_nobinlog.inc


--connection server_2
--let $wait_condition= SELECT count(*) = 0 FROM t2
--source include/wait_condition_or_abort.inc

--let $wait_condition= SELECT count(*) = 2 FROM t1
--source include/wait_condition_or_abort.inc


--echo
--echo # On slave, verify table t1 has only two rows which were inserted before
--echo # XA transaction. Wait for slave sql thread to fail with ER_UNKNOWN_ERROR
--echo # error and then remove rpl_fake_commit_order_deadlock_for_timestamp_100
--echo # debug sync points, and then restart slave sql thread.
--echo

--let $slave_sql_errno= 1105, 1402, 3030
--source include/wait_for_slave_sql_error.inc

--let $debug_point=rpl_fake_commit_order_deadlock_for_timestamp_100
--source include/remove_debug_point.inc

--source include/start_slave_sql.inc


--echo
--echo # On master, execute XA COMMIT for prepared XA transaction.
--echo

--source include/rpl_connection_master.inc
XA COMMIT 'xa_test_xid1';


--echo
--echo # Cleanup
--echo

--source include/rpl_connection_master.inc

DROP TABLE t1;
DROP TABLE t2;

SET GLOBAL binlog_transaction_dependency_tracking=@save_binlog_transaction_dependency_tracking;

--source include/sync_slave_sql_with_master.inc
--source include/stop_slave.inc

SET GLOBAL replica_parallel_type= @save_replica_parallel_type;
--disable_warnings
SET GLOBAL replica_parallel_workers= @save_replica_parallel_workers;
--enable_warnings
SET GLOBAL replica_preserve_commit_order= @save_replica_preserve_commit_order;
--source include/start_slave.inc

--source include/rpl_end.inc
