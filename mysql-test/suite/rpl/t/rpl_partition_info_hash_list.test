# ==== Purpose ====
#
# The purpose of this test script is to test the behavior of
# INSERT/UPDATE/DELETE in a partitioned table with and without
# sub_partition for LIST and HASH partition
#
# ==== Requirements ====
#
# R1. partition_id written to the binary log when there is partitioning
#     and no sub-partitioning shall range from 0 to (N-1) for a table with
#     N partitions.
# R2. partition_id written to the binary log when there is subpartitioning
#     shall range from 0 to (M x N - 1) where M is the number of partition and
#     N is the number of subpartition.
# R3. Statements that modify multiple rows of the same partition/subpartition
#     shall generate only one event.
# R4. Statements that modify multiple rows of different partitions/subpartition
#     shall generate multiple events, one for every row that moves from one
#     partition to another.
#
# ==== Implementation ====
#
# Create a table with partitions(LIST), and test for (R1), (R3) and (R4)
# Create a table with partitions(LIST) and sub_partitions(HASH), and test for (R2)-(R4)
# Sync with slave successfully
# Drop the tables created
#
# ==== References ====
#
# Bug#28712618:INSERT/UPDATE/DELETE WITH MULTIPLE ROWS IN SAME PARTITION CREATE MULTIPLE EVENT
# WL#12168:Add Partition Information into the Binary Log
#
# Also check rpl/rpl_partition_info.test for KEY and RANGE partition.

--source include/have_debug.inc
--source include/have_binlog_format_row.inc
--source include/master-slave.inc

--echo #####1.Verifying the value of partition_id written to the binary log #####

--let $iteration = 1

while ($iteration <= 2)
{
  if ($iteration == 1)
  {
    CREATE TABLE employees (store_id INT NOT NULL) PARTITION BY LIST (store_id)
    ( PARTITION pEast VALUES IN (4, 8, 12), PARTITION pWest VALUES IN (3, 6, 9),
      PARTITION pNorth VALUES IN (5, 10, 15));
  }

  if ($iteration == 2)
  {
    CREATE TABLE employees (store_id INT NOT NULL);
    ALTER TABLE employees PARTITION BY LIST (store_id) ( PARTITION pEast VALUES IN (4, 8, 12),
                                                          PARTITION pWest VALUES IN (3, 6, 9),
                                                          PARTITION pNorth VALUES IN (5, 10, 15));
  }

  # Check if the partition_id is correctly logged for this event.
  # It is stored in the third partition so the partition_id should be 2
  --source include/save_binlog_position.inc
  INSERT INTO employees VALUES(10);

  --let $expected_partition_id = 2
  --source suite/rpl/include/rpl_partition_info.inc

  ALTER TABLE employees ADD PARTITION (PARTITION pSouth VALUES IN (7, 14, 28));
  # Check if the partition_id is correctly logged for this event.
  # It is stored in the fourth partition so the partition_id should be 3

  --source include/save_binlog_position.inc
  INSERT INTO employees VALUES(28);

  --let $expected_partition_id = 3
  --source suite/rpl/include/rpl_partition_info.inc

  --echo #####2.INSERT, UPDATE, DELETE in a partitioned table affecting same and multiple partition #####
  --echo #####3.Verifying the number of events created when executing statements affecting same and multiple partitions #####
  --echo -----INSERT-----

  --source include/save_binlog_position.inc

  # Test that only one Write_rows_event is logged
  --source include/save_binlog_position.inc
  INSERT INTO employees VALUES(4), (8);

  --let $dont_print_pattern= 1
  --let $event_sequence = !Gtid_or_anon # !Begin # Table_map # Write_rows # !Commit
  --source include/assert_binlog_events.inc

  # Check if the partition_id is correctly logged for this event.
  --let $expected_partition_id= 0
  --source suite/rpl/include/rpl_partition_info.inc

  # Test that two Write_rows_events are logged
  --source include/save_binlog_position.inc
  INSERT INTO employees VALUES(4), (6);

  --let $event_sequence = !Gtid_or_anon # !Begin # Table_map # Write_rows # Write_rows # !Commit
  --source include/assert_binlog_events.inc

  # Check if the partition_id is correctly logged for this event.
  --let $expected_partition_id= 0;1
  --source suite/rpl/include/rpl_partition_info.inc
  --echo -----UPDATE-----

  # Test that one Update_rows_events are logged
  --source include/save_binlog_position.inc
  UPDATE employees SET store_id = 9 WHERE store_id = 4 OR store_id = 8 ;

  --let $event_sequence = !Gtid_or_anon # !Begin # Table_map # Update_rows # !Commit
  --source include/assert_binlog_events.inc

  # Check if the partition_id is correctly logged for this event.
  --let $partition_id= 0 1
  --source suite/rpl/include/rpl_partition_info_update.inc

  # Test that two Update_rows_events are logged
  --source include/save_binlog_position.inc
  UPDATE employees SET store_id = 8 WHERE store_id = 6 OR store_id = 10;

  --let $event_sequence = !Gtid_or_anon # !Begin # Table_map # Update_rows # Update_rows # !Commit
  --source include/assert_binlog_events.inc

  # Check if the partition_id is correctly logged for this event.
  --let $partition_id= 1 0;2 0
  --source suite/rpl/include/rpl_partition_info_update.inc

  --echo -----DELETE-----

  # Test that single Delete_rows_events are logged
  --source include/save_binlog_position.inc
  DELETE FROM employees where store_id = 8;

  --let $event_sequence = !Gtid_or_anon # !Begin # Table_map # Delete_rows # !Commit
  --source include/assert_binlog_events.inc

  # Check if the partition_id is correctly logged for this event.
  --let $expected_partition_id= 0
  --source suite/rpl/include/rpl_partition_info.inc

  #Test that two Delete_rows_events are logged
  --source include/save_binlog_position.inc
  DELETE FROM employees where store_id = 9 OR store_id = 28;

  --let $event_sequence = !Gtid_or_anon # !Begin # Table_map # Delete_rows # Delete_rows # !Commit
  --source include/assert_binlog_events.inc

  # Check if the partition_id is correctly logged for this event.
  --let $expected_partition_id= 1;3
  --source suite/rpl/include/rpl_partition_info.inc
  --inc $iteration
  DROP TABLE employees;
}
--echo #####4.Verifying the value of partition_id written to the binary log in case of sub-partitions######

CREATE TABLE sp (id INT, age INT) PARTITION BY LIST (age) SUBPARTITION BY HASH (id)
 SUBPARTITIONS 2 (
 PARTITION p0 VALUES IN (2, 3, 5, 7, 11),
 PARTITION p1 VALUES IN (4, 6, 8, 10, 12));

# Check if the partition_id is correctly logged for this event.
--source include/save_binlog_position.inc
INSERT INTO sp VALUES(101, 3);

--let $expected_partition_id = 1
--source suite/rpl/include/rpl_partition_info.inc

INSERT INTO sp VALUES (102, 3);
INSERT INTO sp VALUES (107, 4);
INSERT INTO sp VALUES (108, 10);
--echo #####5.INSERTS, UPDATES, DELETES in a partitioned table affecting same and multiple sub_partition #####
--echo #####6.Verifying the number of events created when executing statements affecting single and multiple sub_partitions #####

--echo -----INSERT-----

# A single statement writing multiple rows in the same partition
# and sub_partition should generate just one row event.
--source include/save_binlog_position.inc
INSERT INTO sp VALUES(103, 2), (105, 5);

# Test that only one Write_rows_event is logged
--let $event_sequence = !Gtid_or_anon # !Begin # Table_map # Write_rows # !Commit
--source include/assert_binlog_events.inc

# Check if the partition_id is correctly logged for this event.
--let $expected_partition_id = 1
--source suite/rpl/include/rpl_partition_info.inc


# A single statement writing multiple rows in the same partition
# but different sub_partition should generate more than one rows event .
--source include/save_binlog_position.inc
INSERT INTO sp VALUES(103, 2), (104, 7);

# Test that two Write_rows_event is logged
--let $event_sequence = !Gtid_or_anon # !Begin # Table_map # Write_rows # Write_rows # !Commit
--source include/assert_binlog_events.inc

# Check if the partition_id is correctly logged for this event.
--let $expected_partition_id = 1;0
--source suite/rpl/include/rpl_partition_info.inc

--echo -----UPDATE-----

# A single statement writing multiple rows in the same partition
# and sub_partition should generate just one row event.
--source include/save_binlog_position.inc
UPDATE sp SET age=5 WHERE id = 102 OR id=104;

# Check if the partition_id is correctly logged for this event.
--let $partition_id = 0 0
--source suite/rpl/include/rpl_partition_info_update.inc

# Test that only one Update_rows_event is logged
--let $event_sequence = !Gtid_or_anon # !Begin # Table_map # Update_rows # !Commit
--source include/assert_binlog_events.inc

# A single statement writing multiple rows in the same partition
# but different sub_partition should generate more than one rows event .
--source include/save_binlog_position.inc
UPDATE sp SET age=11 WHERE id = 102 OR id=105;

# Test that two Update_rows_event is logged
--let $event_sequence = !Gtid_or_anon # !Begin # Table_map # Update_rows # Update_rows # !Commit
--source include/assert_binlog_events.inc

# Check if the partition_id is correctly logged for this event.
--let $partition_id = 0 0;1 1
--source suite/rpl/include/rpl_partition_info_update.inc

--echo -----DELETE-----

# A single statement writing multiple rows in the same partition
# and sub_partition should generate just one row event.
--source include/save_binlog_position.inc
DELETE FROM sp WHERE id = 101 OR id=105;

# Test that only one Delete_rows_event is logged
--let $event_sequence = !Gtid_or_anon # !Begin # Table_map # Delete_rows # !Commit
--source include/assert_binlog_events.inc

# Check if the partition_id is correctly logged for this event.
--let $expected_partition_id = 1
--source suite/rpl/include/rpl_partition_info.inc

# A single statement writing multiple rows in the same partition
# but different sub_partition should generate more than one rows event .
--source include/save_binlog_position.inc
DELETE FROM sp WHERE id = 108 OR id=107;

# Test that two Delete_rows_event is logged
--let $event_sequence = !Gtid_or_anon # !Begin # Table_map # Delete_rows # Delete_rows # !Commit
--source include/assert_binlog_events.inc

# Check if the partition_id is correctly logged for this event.
--let $expected_partition_id = 2;3
--source suite/rpl/include/rpl_partition_info.inc

--echo #####7.Sync with slave and check if all the tables are replicated correctly#####

--source include/sync_slave_sql_with_master.inc

let $diff_tables= master:sp, slave:sp;
--source include/diff_tables.inc

# Cleanup
connection master;
DROP TABLE sp;
RESET MASTER;
--source include/rpl_end.inc
