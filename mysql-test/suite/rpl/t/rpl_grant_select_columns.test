# ==== Purpose ====
#
# Verify that columns in the 'GRANT SELECT' statements
# are properly quoted before writing to the binary log.
#
# ==== Implementation ====
#
# 1. Initial setup on master.
#    1.1 Create tables with reserved words as column names.
#    1.2 Create users for granting column privileges.
# 2. With sql_mode='ANSI_QUOTES', execute GRANT SELECT commands on master.
# 3. With sql_mode='', execute GRANT SELECT commands on master.
# 4. Verify the correctness of 'GRANT SELECT' statement by printing
#    the binlog entry for the statement.
# 5. Sync the slave with master.
# 6. Verify that there is no difference in the column privileges
#    tables of master and slave.
#
# ==== References ====
#
# Bug#28643405: LAST_ERROR_NUMBER: 1064 DURING GRANT SELECT
#

--source include/have_binlog_format_statement.inc
--source include/master-slave.inc

--echo
--echo # 1. Initial setup on master.
--echo # 1.1 Create tables with reserved words as column names.
CREATE DATABASE `order`;
CREATE TABLE `order`.`order` (`order` INT);

CREATE DATABASE `column`;
CREATE TABLE `column`.`column` (`column` INT);

CREATE DATABASE `all`;
CREATE TABLE `all`.`all`(
    id int NOT NULL PRIMARY KEY,
    item int,
    `table` varchar(10),
    `regexp` varchar(10));

--echo
--echo # 1.2 Create users for granting column privileges.
CREATE USER `order` IDENTIFIED BY 'password1';
CREATE USER `column` IDENTIFIED BY 'password2';
CREATE USER `all` IDENTIFIED BY 'password3';

--echo
--echo # 2. With sql_mode='ANSI_QUOTES', execute GRANT SELECT commands on master.

# Setting sql_mode to ANSI_QUOTES before executing GRANT.
# ANSI_QUOTES mode will make sure the "(double quote) is used
# as the identifier quote character while writing to the binlog.
# This mode treats "(double quotes) as an identifier quote character
# and not as a string quote character.
SET @saved_sql_mode= @@session.sql_mode;
SET SESSION sql_mode= 'ANSI_QUOTES';

# Save master position
--let $binlog_start= query_get_value('SHOW MASTER STATUS', Position, 1)

--echo
--echo # Execute GRANT SELECT commands on master.

# Columns having reserved words
GRANT SELECT(`order`) ON `order`.`order` TO `order`;

# Column names having both reserved words and non-reserved words
GRANT SELECT(id,`table`) ON `all`.`all` TO `all`;

--echo
--echo # Verify the correctness of 'GRANT SELECT' statement by printing
--echo # the binlog entry for the statement.
--source include/show_binlog_events.inc

--echo
--echo # 3. With sql_mode='', execute GRANT SELECT commands on master.

# Reseting sql_mode. This will make sure `(backtick) is used as
# the identifier quote character while writing to the binlog.
SET SESSION sql_mode= '';

# Update master position
--let $binlog_start= query_get_value('SHOW MASTER STATUS', Position, 1)

--echo
--echo # Execute GRANT SELECT commands on master.

# Columns having reserved words
GRANT SELECT(`column`) ON `column`.`column` TO `column`;

# Column names having both reserved words and non-reserved words
GRANT SELECT(item,`regexp`) ON `all`.`all` TO `all`;

--echo
--echo # 4. Verify the correctness of 'GRANT SELECT' statement by printing
--echo #    the binlog entry for the statement.
--source include/show_binlog_events.inc

--echo
--echo # 5. Sync the slave with master.
--source include/sync_slave_sql_with_master.inc

--echo
--echo # 6. Verify that there is no difference in the column privileges
--echo #    tables of master and slave.
--source include/rpl_connection_master.inc
--let diff_tables=master:mysql.columns_priv, slave:mysql.columns_priv
--source include/diff_tables.inc

# Cleanup
SET SESSION sql_mode= @saved_sql_mode;
DROP USER `order`,`column`,`all`;
DROP DATABASE `order`;
DROP DATABASE `column`;
DROP DATABASE `all`;
--source include/rpl_end.inc
