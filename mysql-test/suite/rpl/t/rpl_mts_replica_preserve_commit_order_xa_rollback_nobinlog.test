# ==== Purpose ====
#
# Verifies that replica-preserve-commit-order preserves the commit order
# for the XA rollback transactions where applier worker threads are not logging
# the changes to the replicas binary log.
#
# ==== Implementation ====
#
# 1. We start replica (server2) with the binary log turned off (--log-bin=OFF)
#    and applier threads are not logging to its own binary log
#    (--log-replica-updates=OFF). Replica also has replica_preserve_commit_order
#    enabled and running with 2 applier workers.
#
# 2. On slave, we add the same first insert statement which will be applied on
#    master in step 3, but we do not commit it, to take a lock on row and block
#    slave sql thread when transaction are applied on master in setp 3.
#
# 3. The master generates some transactions (including XA PREPARE transaction)
#    which can be applied in parallel, by setting same commit parents for all
#    the inserts.
#
# 4. On slave, we verify that all the other inserts are also blocked and waiting
#    for first insert to commit i.e. applier threads are in stage 'Waiting for
#    preceding transaction to commit' and their is no data in the table.
#
# 5. On slave, we rollback the first insert executed in step 2, and verify the
#    transactions are applied on table t2, but XA transaction still in prepared
#    stage so table t1 is empty.
#
# 6. On slave, we enable 'commit_order_manager_after_wait_100' dbug_sync point
#    which will block XA ROLLBACK transaction and then we execute XA ROLLBACK
#    on master. We also add more insert on master after XA ROLLBACK.
#
# 7. On slave, verify threads are blocked at activated sync point. Also verify
#    table has no data as other inserts are executed after XA ROLLBACK which is
#    still blocked.
#
# 8. On slave, unblock XA ROLLBACK transaction and verify table has data
#    inserted after XA ROLLBACK.
#
# 7. Cleanup.

--source include/have_debug.inc
--source include/have_debug_sync.inc

--let $rpl_skip_start_slave = 1
--source include/master-slave.inc

CALL mtr.add_suppression("Statement is unsafe because it is being used inside a XA transaction");


--let $mts_spco_start_statement = CREATE TABLE t1 (c1 INT PRIMARY KEY) ENGINE = InnoDB; CREATE TABLE t2 (c1 INT PRIMARY KEY) ENGINE = InnoDB;

--let $mts_spco_block_statement = BEGIN; INSERT INTO t1 VALUES (1);

--let $mts_spco_parallel_statement1 = XA START 'xa_test_xid1'; INSERT INTO t1 VALUES (1); INSERT INTO t1 VALUES (2); XA END 'xa_test_xid1'; XA PREPARE 'xa_test_xid1';
--let $mts_spco_parallel_statement2 = BEGIN; INSERT INTO t2 VALUES (1); INSERT INTO t2 VALUES (2); COMMIT;

--let $mts_spco_assert_text1 = Verify table t1 is empty
--let $mts_spco_assert_cond1 = "[SELECT count(*) COUNT FROM t1, COUNT, 1]" = "0"

--let $mts_spco_assert_text2 = Verify table t2 is empty
--let $mts_spco_assert_cond2 = "[SELECT count(*) COUNT FROM t2, COUNT, 1]" = "0"

--let $mts_spco_assert_text3 = Verify XA Transaction is active
--let $mts_spco_assert_cond3 = "[SELECT count(XID_GTRID) COUNT FROM performance_schema.events_transactions_current WHERE XID_GTRID = \'xa_test_xid1\', COUNT, 1]" = "1"

--let $mts_spco_rollback_statement = ROLLBACK;
--source extra/rpl_tests/rpl_mts_replica_preserve_commit_order_nobinlog.inc


--connection server_2
--let $wait_condition= SELECT count(*) = 2 FROM t2
--source include/wait_condition_or_abort.inc

--let $assert_text= Verify table t1 is empty
--let $assert_cond= "[SELECT count(*) COUNT FROM t1, COUNT, 1]" = "0"
--source include/assert.inc


--echo
--echo # Block XA ROLLBACK on slave and then execute XA ROLLBACK on master.
--echo # Add more insert on master after XA ROLLBACK.
--echo

--connection server_2
# this will make XA ROLLBACK block
--let $debug_point=syncpoint_commit_order_manager_after_wait_100
--source include/add_debug_point.inc

--source include/rpl_connection_master.inc
SET TIMESTAMP = 100; XA ROLLBACK 'xa_test_xid1';

--connection server_1
BEGIN;
INSERT INTO t1 VALUES (3);
INSERT INTO t1 VALUES (4);
COMMIT;

--echo
--echo # Verify threads are blocked at activated sync point.
--echo # Verify table has no data as other inserts are excuted after
--echo # XA ROLLBACK which is still blocked.
--echo

--source include/rpl_connection_slave.inc

--let $wait_condition = SELECT count(*) = 1 FROM INFORMATION_SCHEMA.PROCESSLIST WHERE state like 'debug sync point: now%'
--source include/wait_condition.inc

--let $assert_text= Verify table t1 is empty
--let $assert_cond= "[SELECT count(*) COUNT FROM t1, COUNT, 1]" = "0"
--source include/assert.inc

--echo
--echo # Unblock XA ROLLBACK transaction and verify table has data
--echo # inserted after XA ROLLBACK.
--echo

# unblock so XA ROLLBACK can resume
--connection server_2
SET DEBUG_SYNC= 'now SIGNAL continue_commit_order_manager_after_wait_100';

--let $wait_condition= SELECT count(*) = 2 FROM t1
--source include/wait_condition_or_abort.inc

--let $debug_point=syncpoint_commit_order_manager_after_wait_100
--source include/remove_debug_point.inc


--echo
--echo # Cleanup
--echo

--source include/rpl_connection_master.inc

DROP TABLE t1;
DROP TABLE t2;

SET GLOBAL binlog_transaction_dependency_tracking=@save_binlog_transaction_dependency_tracking;

--source include/sync_slave_sql_with_master.inc
--source include/stop_slave.inc

SET GLOBAL replica_parallel_type= @save_replica_parallel_type;
--disable_warnings
SET GLOBAL replica_parallel_workers= @save_replica_parallel_workers;
--enable_warnings
SET GLOBAL replica_preserve_commit_order= @save_replica_preserve_commit_order;
--source include/start_slave.inc

--source include/rpl_end.inc
