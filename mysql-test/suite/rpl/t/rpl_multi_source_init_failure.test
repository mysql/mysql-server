--source include/have_binlog_format_statement.inc
# Test requires master-info-repository=TABLE, relay-log-info-repository=TABLE
--source include/have_slave_repository_type_table.inc
--source include/master-slave.inc

--source include/rpl_connection_slave.inc
#
# Testing how well MSR handles initialization failures.
# Specifically it's proved that a failure to initialize mi in one of
# the channels allows RESET SLAVE, no crash happens.
#

# The default channel and channel 'ch_a' will connect to the same master
CALL mtr.add_suppression("A slave with the same server_uuid/server_id as this slave has connected to the master");
CALL mtr.add_suppression("Error during --relay-log-recovery.*");
CALL mtr.add_suppression("Server was not able to find a rotate event from master server.*");
CALL mtr.add_suppression("Recovery from master pos.* and file");

--source include/stop_slave.inc

--replace_result $MASTER_MYPORT MASTER_PORT
eval CHANGE REPLICATION SOURCE TO SOURCE_HOST='localhost', SOURCE_USER='root', SOURCE_PORT=$MASTER_MYPORT FOR CHANNEL 'ch_a';
CHANGE REPLICATION SOURCE TO SOURCE_HOST='dummy_host', SOURCE_USER='root', SOURCE_PORT=13010 FOR CHANNEL 'ch_b';
START SLAVE;

STOP SLAVE FOR CHANNEL 'ch_a';

# --relay-log-recovery is a source of the following mi initialization failure
--let $rpl_server_number= 2
--let $rpl_server_parameters= --skip-replica-start
--source include/rpl_restart_server.inc

--source include/rpl_connection_slave.inc
RESET SLAVE ALL;

--let $rpl_skip_sync= 1
--let $rpl_only_running_threads= 1
--source include/rpl_end.inc
