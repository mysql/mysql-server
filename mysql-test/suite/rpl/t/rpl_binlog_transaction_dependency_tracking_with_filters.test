################################################################################
# ==== Purpose ====
# Test that filtered transaction resets commit_parent since it doesn't generate
# any writesets.
# Modes checked:
#  COMMIT_ORDER | WRITESET | WRITESET_SESSION
#
# ==== Implementation ====
# 1. Add transactions with different dependency tracking and empty transactions
#    on master.
# 2. Test timestamps order with filtered and non-filtered transactions on Slave.
# a) No filtering: DDL and DMLs on 'test' database are not filtered.
# b) Empty transactions from master.
# c) Filtering (modified transactions): DDLs and DMLs due to rerwite rule
#    'db1->db2'.
# d) Filtering (empty transactions): DDLs and DMLs on 'nodb' database.
# 3. Clean up.
#
# ==== References ====
# WL#9556: Writeset-based MTS dependency tracking on master
################################################################################

--source include/master-slave.inc
--source include/have_binlog_format_row.inc
--source include/not_mts_slave_parallel_workers.inc

--source include/rpl_connection_master.inc
# Take backup of variables.
SET @save_binlog_transaction_dependency_tracking = @@GLOBAL.binlog_transaction_dependency_tracking;
SET @save_transaction_write_set_extraction = @@GLOBAL.transaction_write_set_extraction;
# Set variables.
SET GLOBAL binlog_transaction_dependency_tracking = COMMIT_ORDER;
SET GLOBAL transaction_write_set_extraction = XXHASH64;
SET LOCAL transaction_write_set_extraction = XXHASH64;

--source include/rpl_connection_slave.inc
# Set filter rule.
--source include/stop_slave.inc
CHANGE REPLICATION FILTER REPLICATE_REWRITE_DB=((db1,db2)),
                   REPLICATE_IGNORE_DB=(nodb);
--source include/start_slave.inc
# Take backup of variables.
SET @save_binlog_transaction_dependency_tracking = @@GLOBAL.binlog_transaction_dependency_tracking;
SET @save_transaction_write_set_extraction = @@GLOBAL.transaction_write_set_extraction;
# Set variables.
SET GLOBAL binlog_transaction_dependency_tracking = COMMIT_ORDER;
SET GLOBAL transaction_write_set_extraction = XXHASH64;
SET LOCAL transaction_write_set_extraction = XXHASH64;

--source include/rpl_connection_master.inc
--echo #
--echo # 1. Add transactions with different dependency tracking and empty transaction
--echo #    on master.
--echo #
CREATE DATABASE nodb; # 0 1
CREATE DATABASE db1;  # 1 2
CREATE DATABASE db2;  # 2 3
USE nodb; CREATE TABLE nodbt1 (a INT PRIMARY KEY NOT NULL AUTO_INCREMENT); # 3 4
USE db1;  CREATE TABLE db1t1 (a INT PRIMARY KEY NOT NULL AUTO_INCREMENT);  # 4 5
USE test; CREATE TABLE t1 (a INT PRIMARY KEY NOT NULL AUTO_INCREMENT);     # 5 6

USE db1;
INSERT INTO db1t1 VALUES (NULL); # 6 7
INSERT INTO db1t1 VALUES (NULL); # 7 8
SET GLOBAL binlog_transaction_dependency_tracking= WRITESET_SESSION;
INSERT INTO db1t1 VALUES (NULL); # 8 9
INSERT INTO db1t1 VALUES (NULL); # 9 10
USE nodb;
INSERT INTO nodbt1 VALUES (NULL); # 10 11
INSERT INTO nodbt1 VALUES (NULL); # 11 12
SET GLOBAL binlog_transaction_dependency_tracking= WRITESET;
INSERT INTO nodbt1 VALUES (NULL); # 12 13
INSERT INTO nodbt1 VALUES (NULL); # 12 14
USE test;
INSERT INTO t1 VALUES (NULL); # 12 15
INSERT INTO t1 VALUES (NULL); # 12 16
SET GLOBAL binlog_transaction_dependency_tracking= COMMIT_ORDER;
INSERT INTO t1 VALUES (NULL); # 16 17
INSERT INTO t1 VALUES (NULL); # 17 18

DROP DATABASE nodb; # 18 19
DROP DATABASE db1;  # 19 20
DROP DATABASE db2;  # 20 21
DROP TABLE test.t1; # 21 22

if ( `SELECT @@GLOBAL.GTID_MODE = "ON"` )
{
  --disable_query_log
  SET @@SESSION.GTID_NEXT = 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:1';
  COMMIT; # 22 23
  --let $server1_uuid= `SELECT @@GLOBAL.SERVER_UUID`
  eval SET @@SESSION.GTID_NEXT = '$server1_uuid:23';
  COMMIT; # 23 24
  SET @@SESSION.GTID_NEXT = 'AUTOMATIC';
  --enable_query_log
}

SELECT @@global.transaction_write_set_extraction, @@binlog_transaction_dependency_tracking;
--let $binlog_file= query_get_value(SHOW MASTER STATUS, File, 1)
--let $dont_print_logical_timestamps= 1
--let $logical_timestamps=0 1;1 2;2 3;3 4;4 5;5 6;6 7;7 8;8 9;9 10;10 11;11 12;12 13;12 14;12 15;12 16;16 17;17 18;18 19;19 20;20 21;21 22
if ( `SELECT @@GLOBAL.GTID_MODE = "ON"` )
{
 --let $logical_timestamps=0 1;1 2;2 3;3 4;4 5;5 6;6 7;7 8;8 9;9 10;10 11;11 12;12 13;12 14;12 15;12 16;16 17;17 18;18 19;19 20;20 21;21 22;22 23;23 24
}
--source include/assert_logical_timestamps.inc

--echo #
--echo # 2. Test timestamps order with filtered and non-filtered transactions on Slave.
--echo #
--source include/sync_slave_sql_with_master.inc
--echo [On Slave]
--echo ######## 2.1. COMMIT_ORDER with SLAVE ########
SELECT @@global.transaction_write_set_extraction, @@binlog_transaction_dependency_tracking;
--let $binlog_file= query_get_value(SHOW MASTER STATUS, File, 1)
--let $dont_print_logical_timestamps= 1
--let $logical_timestamps=0 1;1 2;2 3;3 4;4 5;5 6;6 7;7 8;8 9;9 10;10 11;11 12;12 13;13 14;14 15
if ( `SELECT @@GLOBAL.GTID_MODE = "ON"` )
{
 --let $logical_timestamps=0 1;1 2;2 3;3 4;4 5;5 6;6 7;7 8;8 9;9 10;10 11;11 12;12 13;13 14;14 15;15 16;16 17;17 18;18 19;19 20;20 21;21 22;22 23;23 24
}
--source include/assert_logical_timestamps.inc

# Clean up logs to test with WRITESET in next step.
--source include/stop_slave.inc
RESET SLAVE;
RESET MASTER;

--echo
--echo ######## 2.2. WRITESET with SLAVE ########
SET GLOBAL binlog_transaction_dependency_tracking = WRITESET;
--source include/start_slave.inc
--connection master
--source include/sync_slave_sql_with_master.inc
SELECT @@global.transaction_write_set_extraction, @@binlog_transaction_dependency_tracking;
--let $binlog_file= query_get_value(SHOW MASTER STATUS, File, 1)
--let $dont_print_logical_timestamps= 1
--let $logical_timestamps=0 1;1 2;2 3;3 4;4 5;4 6;4 7;4 8;4 9;4 10;4 11;4 12;12 13;13 14;14 15
if ( `SELECT @@GLOBAL.GTID_MODE = "ON"` )
{
 --let $logical_timestamps=0 1;1 2;2 3;3 4;4 5;5 6;6 7;6 8;6 9;6 10;6 11;6 12;6 13;6 14;6 15;6 16;6 17;6 18;6 19;19 20;20 21;21 22;22 23;22 24
}
--source include/assert_logical_timestamps.inc

# Clean up logs to test with WRITESET_SESSION in next step.
--source include/stop_slave.inc
RESET SLAVE;
RESET MASTER;

--echo
--echo ######## 2.3. WRITESET_SESSION with SLAVE ########
SET GLOBAL binlog_transaction_dependency_tracking = WRITESET_SESSION;
--source include/start_slave.inc
--connection master
--source include/sync_slave_sql_with_master.inc
SELECT @@global.transaction_write_set_extraction, @@binlog_transaction_dependency_tracking;
--let $binlog_file= query_get_value(SHOW MASTER STATUS, File, 1)
--let $dont_print_logical_timestamps= 1
--let $logical_timestamps=0 1;1 2;2 3;3 4;4 5;5 6;6 7;7 8;8 9;9 10;10 11;11 12;12 13;13 14;14 15
if ( `SELECT @@GLOBAL.GTID_MODE = "ON"` )
{
 --let $logical_timestamps=0 1;1 2;2 3;3 4;4 5;5 6;6 7;7 8;8 9;9 10;10 11;11 12;12 13;13 14;14 15;15 16;16 17;17 18;18 19;19 20;20 21;21 22;22 23;23 24
}
--source include/assert_logical_timestamps.inc

--echo
--echo # 3. Clean up.
--source include/rpl_connection_master.inc
SET @@GLOBAL.transaction_write_set_extraction= @save_transaction_write_set_extraction;
SET @@GLOBAL.binlog_transaction_dependency_tracking= @save_binlog_transaction_dependency_tracking;

--source include/sync_slave_sql_with_master.inc
--echo [On Slave]
--let $dont_print_logical_timestamps=
SET GLOBAL binlog_transaction_dependency_tracking = COMMIT_ORDER;
SET @@GLOBAL.transaction_write_set_extraction= @save_transaction_write_set_extraction;
SET @@GLOBAL.binlog_transaction_dependency_tracking= @save_binlog_transaction_dependency_tracking;

--source include/stop_slave.inc
CHANGE REPLICATION FILTER REPLICATE_REWRITE_DB=(), REPLICATE_IGNORE_DB=();
--source include/start_slave.inc

--source include/rpl_end.inc
