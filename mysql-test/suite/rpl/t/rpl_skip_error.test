# ==== Purpose ====
#
# Verify that --slave-skip-errors works correctly.  The error messages
# specified by --slave-skip-errors on slave should be ignored.  If
# such errors occur, they should not be reported and not cause the
# slave to stop.
#
# ==== Method ====
#
# We run the slave with --slave-skip-errors=1062 (the code for
# duplicate key).  Then we have two set of tests. In the first 
# set, we insert value 1 in a table on the slave, and then, on 
# master, we insert value 1 in the table. In the second set, we 
# insert several values on the master, disable the binlog and
# delete one of the values and re-enable the binlog. Right after,
# we perform an update on the set of values in order to generate
# a duplicate key on the slave. The errors should be ignored on
# the slave.
# 
# ==== Related bugs ====
#
# BUG#28839: Errors in strict mode silently stop SQL thread if --slave-skip-errors exists
# bug in this test: BUG#30594: rpl.rpl_skip_error is nondeterministic:
# BUG#39393: slave-skip-errors does not work when using ROW based replication

--source include/not_group_replication_plugin.inc
source include/master-slave.inc;

--echo ==== Test Without sql_mode=strict_trans_tables ====

--echo [on master]
create table t1 (n int not null primary key);

--echo [on slave]
--source include/sync_slave_sql_with_master.inc
insert into t1 values (1);

--echo [on master]
connection master;
# Here we expect (ignored) error, since 1 is already in slave table 
insert into t1 values (1);
# These should work fine
insert into t1 values (2),(3);

--source include/sync_slave_sql_with_master.inc
--echo [on slave]
select * from t1 order by n;

--echo ==== Test With sql_mode=strict_trans_tables ====
insert into t1 values (7),(8);
--echo [on master]
connection master;
set sql_mode=strict_trans_tables;
insert into t1 values (7), (8), (9);
--echo [on slave]
--source include/sync_slave_sql_with_master.inc
select * from t1 order by n;
source include/check_slave_is_running.inc;

--echo ==== Clean Up ====
connection master;
drop table t1;
--source include/sync_slave_sql_with_master.inc
# End of 4.1 tests

#
# #28839 Errors in strict mode silently stop SQL thread if --slave-skip-errors exists
#
connection master;
create table t1(a int primary key);
insert into t1 values (1),(2);
SET SQL_LOG_BIN=0;
delete from t1;
SET SQL_LOG_BIN=1;
set sql_mode=strict_trans_tables;
insert into t1 values (1), (2), (3);

--echo [on slave]
--source include/sync_slave_sql_with_master.inc
select * from t1;
source include/check_slave_is_running.inc;


--echo ==== Clean Up ====

connection master;
drop table t1;
--source include/sync_slave_sql_with_master.inc
# End of 5.0 tests

#
# BUG#39393: slave-skip-errors does not work when using ROW based replication
#
--echo ==== Using Innodb ====

connection master;

SET SQL_LOG_BIN=0;
CREATE TABLE t1(id INT NOT NULL PRIMARY KEY, data INT) Engine=InnoDB;
SHOW CREATE TABLE t1;
SET SQL_LOG_BIN=1;

connection slave;

call mtr.add_suppression("Slave SQL.*Could not execute .*te_rows event on table test.t.; Duplicate entry.* Error_code: 1062");

CREATE TABLE t1(id INT NOT NULL PRIMARY KEY, data INT) Engine=InnoDB;
SHOW CREATE TABLE t1;

connection master;

INSERT INTO t1 VALUES(1, 1);
INSERT INTO t1 VALUES(2, 1);
INSERT INTO t1 VALUES(3, 1);
INSERT INTO t1 VALUES(4, 1);

SET SQL_LOG_BIN=0;
DELETE FROM t1 WHERE id = 4;
SET SQL_LOG_BIN=1;
UPDATE t1 SET id= id + 3, data = 2;

--source include/sync_slave_sql_with_master.inc

let $error= query_get_value("SHOW SLAVE STATUS", Last_SQL_Error, 1);
echo $error;

--echo **** We cannot execute a select as there are differences in the 
--echo **** behavior between STMT and RBR.

--echo ==== Clean Up ====

connection master;

DROP TABLE t1;

--source include/sync_slave_sql_with_master.inc
--source include/rpl_end.inc
