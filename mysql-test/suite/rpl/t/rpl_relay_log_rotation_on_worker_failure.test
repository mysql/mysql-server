# === Purpose ===
#
# This test checks that when the coordinator is killed it does not log errors while rotating a log
#
# ==== Requirements ====
#
# R1. When a error happens while applying data, the server should not log errors
#     related to writing in the replica repository when the coordinator is killed.
#
# === Implementation ====
#
# 1. Create a table on the source and sync
# 2. Add a debug point to the replica so it stops during a log rotation
#    Also lock table t1 to insure the error only happens when the relay log is being rotated
# 3. Add data on the source that will cause an error on the replica
#    Also execute a FLUSH to cause a log rotation in the replica
# 4. Wait for the debug point to be reached and unlock the table
#    Signal the debug point to continue
# 5. Check no error was logged
# 6. Cleanup
#
# === References ===
#
#  Bug#19820134 SOME RPL SUITES FAILS WITH ERROR WRITING RELAY LOG CONFIGURATION
#

--source include/have_debug.inc
--source include/have_debug_sync.inc
--source include/have_binlog_format_row.inc
--source include/only_mts_replica_parallel_workers.inc

--echo
--echo ##############################################################
--echo # 1. Create a table on the source and sync

--source include/master-slave.inc

CREATE TABLE t1 (c1 INT PRIMARY KEY);

--source include/sync_slave_sql_with_master.inc

--echo
--echo ##############################################################
--echo # 2. Add a debug point to the replica so it stops during a log rotation
--echo #    Also lock table t1 to insure the error only happens when the relay log is being rotated

--let $debug_point= wait_before_purge_applied_logs
--source include/add_debug_point.inc

INSERT INTO t1 VALUES (1);

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

LOCK TABLES t1 WRITE;

--echo
--echo ##############################################################
--echo # 3. Add data on the source that will cause an error on the replica
--echo #    Also execute a FLUSH to cause a log rotation in the replica

--source include/rpl_connection_master.inc

INSERT INTO t1 VALUES (1);

FLUSH LOGS;

INSERT INTO t1 VALUES (2);

--echo
--echo ##############################################################
--echo # 4. Wait for the debug point to be reached and unlock the table
--echo #    Signal the debug point to continue

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

SET DEBUG_SYNC = "now WAIT_FOR signal.rpl_before_applier_purge_logs";

UNLOCK TABLES;

--source include/rpl_connection_slave.inc

# Ensure the worker fails
--let $wait_condition= SELECT COUNT(*)>=1 FROM performance_schema.error_log WHERE error_code='MY-010584' AND data LIKE "%Could not execute Write_rows event on table test.t1;%"
--source include/wait_condition.inc

SET DEBUG_SYNC= 'now SIGNAL signal.rpl_unblock_purge';

--let $debug_point= wait_before_purge_applied_logs
--source include/remove_debug_point.inc

--echo
--echo ##############################################################
--echo # 5. Check no error was logged

# Give it time to log something
--sleep 1

--let $assert_text= No error about writting to the relay log was found
--let $assert_cond= "[SELECT COUNT(*) as count FROM performance_schema.error_log WHERE error_code=\'MY-010608\' AND data LIKE \"%Error writing relay log configuration%\", count, 1]" = "0"
--source include/assert.inc

--echo
--echo ##############################################################
--echo # 6. Cleanup

DELETE FROM t1 WHERE c1 = 1;

--source include/start_slave.inc

let $messages =
Worker 1 failed executing transaction
The replica coordinator and worker threads are stopped, possibly leaving data in inconsistent state.
Replica worker thread has failed to apply an event.
Error writing relay log repository data while a thread is being killed
;
--let $suppress_on_current_connection = 1
--source include/suppress_messages.inc

--source include/rpl_connection_master.inc

DROP TABLE t1;

--source include/rpl_end.inc
