# ==== Purpose ====
#
# This test checks the behavior of REQUIRE_TABLE_PRIMARY_KEY_CHECK.
#
# ==== Requirements ====
#
# TC1: If REQUIRE_TABLE_PRIMARY_KEY_CHECK = STREAM.
#      You can't replicate a table create/alter query if the privileged
#      user does not have `SESSION_VARIABLES_ADMIN`
# TC2: If REQUIRE_TABLE_PRIMARY_KEY_CHECK = STREAM.
#      You can replicate a table create/alter query if the privileged
#      user has `SESSION_VARIABLES_ADMIN`
# TC3.1: If **REQUIRE_TABLE_PRIMARY_KEY_CHECK = ON**:
#        Verify that you cannot replicate a table creation or alteration query
#        that results on a table with no primary key whatever the master value
#        for `sql_require_primary_key`
# TC3.2: If **REQUIRE_TABLE_PRIMARY_KEY_CHECK = ON**:
#        Verify that you can replicate a table creation or alteration query
#         that results on a table with a primary key.
# TC4.1: If **REQUIRE_TABLE_PRIMARY_KEY_CHECK = OFF**:
#        Verify that you can replicate a table creation or alteration query
#        that results on a table with no primary key whatever the master value
#        for `sql_require_primary_key`
# TC4.2: If **REQUIRE_TABLE_PRIMARY_KEY_CHECK = OFF**:
#        Verify that you can replicate a table creation or alteration query
#        that results on a table with a primary key.
# TC5.1: If **REQUIRE_TABLE_PRIMARY_KEY_CHECK = GENERATE**:
#        Verify that you can replicate a table creation with no primary key
#        that results in a table with a primary key on the replica
#
# ==== Implementation ====
#
# 0. Setup replica with 2 sources where the channels have a privilege user
#
# # STREAM
#
# 1. While REQUIRE_TABLE_PRIMARY_KEY_CHECK = STREAM.
#    Create a table on the source
#    The replica applier user lacks privileges for CREATE/ALTER queries
#    The replica applier fails while replicating.
# 2. While REQUIRE_TABLE_PRIMARY_KEY_CHECK = STREAM.
#    Give the replica applier user SESSION_VARIABLES_ADMIN privileges
#    The replica applier can now replicate CREATE/ALTER queries
#
# # ON
#
# 3. While REQUIRE_TABLE_PRIMARY_KEY_CHECK = ON.
#    Revoke privileges.
#    Create a table on the source (server 1) with no primary key
#    The replica applier fails while replicating due to the lack of PK
# 4. While REQUIRE_TABLE_PRIMARY_KEY_CHECK = ON.
#    Create a table on the source (server 1) with a primary key
#    The replica applier is working properly
#
# # OFF
#
# 5. While REQUIRE_TABLE_PRIMARY_KEY_CHECK = OFF.
#    Create a table on the source (server 1) with a primary key and without
#    The replica applier applies both
#
# # GENERATE
#
# 6. Test REQUIRE_TABLE_PRIMARY_KEY_CHECK = GENERATE.
#    Test also that multiple channels with different behaviors can coexist
#    Set the strategy for the channel from server 1 to GENERATE
#    Set the strategy for the channel from server 3 to ON
#    Add a new table without a primary key on server 1 and 3
#    The channel from server 1 shall had a GIPK while the applier on the channel from server 3 fails
#
# 7. Cleanup
#
# ==== References ====
#
# WL#13239: Enable/disable primary key checks on slaves
# WL#15419: Make the replica_generate_invisible_primary_key option settable per channel
#

# Only with RBR can the applier privilege work with minimal privileges
--source include/have_binlog_format_row.inc

--echo
--echo # 0. Setup replica with 2 sources where the channels have a privilege user

--source include/have_binlog_format_row_or_statement.inc
--source include/have_slave_repository_type_table.inc
--source include/force_restart.inc
--let $rpl_topology= 1->2,3->2
--let $applier_user = 'u'@'localhost'
--let $rpl_privilege_checks_user = *:$applier_user
--let $rpl_require_row_format= *:1
--let $rpl_skip_grant_privilege_checks_user_roles = 1
--let $rpl_skip_start_slave = 1
--let $rpl_multi_source= 1
--source include/rpl_init.inc

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--eval GRANT REPLICATION_APPLIER,CREATE,DROP ON *.* TO $applier_user

# This test assumes the replica is working using the default: STREAM
--let $_pk_key_check_value = `SELECT require_table_primary_key_check FROM performance_schema.replication_applier_configuration WHERE channel_name="channel_1"`
CHANGE REPLICATION SOURCE TO REQUIRE_TABLE_PRIMARY_KEY_CHECK = STREAM FOR CHANNEL 'channel_1';

--echo
--echo # 1. While REQUIRE_TABLE_PRIMARY_KEY_CHECK = STREAM.
--echo #    Create a table on the source (server 1)
--echo #    The replica applier user lacks privileges for CREATE/ALTER queries
--echo #    The replica applier fails while replicating.

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

--let $sql_require_primary_key = `SELECT @@global.sql_require_primary_key`
SET @@global.sql_require_primary_key = 1;

CREATE TABLE t1 (a INT PRIMARY KEY);

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

START REPLICA;

--let $slave_sql_errno = convert_error(ER_SPECIFIC_ACCESS_DENIED_ERROR)
--source include/wait_for_slave_sql_error.inc

--echo
--echo # 2. While REQUIRE_TABLE_PRIMARY_KEY_CHECK = STREAM.
--echo #    Give the replica applier user SESSION_VARIABLES_ADMIN privileges
--echo #    The replica applier can now replicate CREATE/ALTER queries

STOP REPLICA;
--eval GRANT SESSION_VARIABLES_ADMIN ON *.* TO $applier_user
START REPLICA;

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

--let $sync_slave_connection= server_2
--let $rpl_channel_name= 'channel_1'
--source include/sync_slave_sql_with_master.inc

--echo
--echo # 3. While REQUIRE_TABLE_PRIMARY_KEY_CHECK = ON.
--echo #    Revoke privileges.
--echo #    Create a table on the source (server 1) with no primary key
--echo #    The replica applier fails while replicating due to the lack of PK

STOP REPLICA;

--eval REVOKE SESSION_VARIABLES_ADMIN ON *.* FROM $applier_user

CHANGE REPLICATION SOURCE TO REQUIRE_TABLE_PRIMARY_KEY_CHECK = ON FOR CHANNEL 'channel_1';

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

CREATE TABLE t2 (a INT);

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

START REPLICA;

--let $slave_sql_errno = convert_error(ER_TABLE_WITHOUT_PK)
--source include/wait_for_slave_sql_error.inc

# Cleanup for step 3
# Make the source and replica forget about table t2

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

DROP TABLE t2;
RESET MASTER;

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

STOP REPLICA;
RESET REPLICA;
RESET MASTER;

--echo
--echo # 4. While REQUIRE_TABLE_PRIMARY_KEY_CHECK = ON.
--echo #    Create a table on the source (server 1) with a primary key
--echo #    The replica applier is working properly

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

SET @@global.sql_require_primary_key = 0;
CREATE TABLE t3 (a INT PRIMARY KEY);

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

START REPLICA;

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

--let $sync_slave_connection= server_2
--let $rpl_channel_name= 'channel_1'
--source include/sync_slave_sql_with_master.inc

--echo
--echo # 5. While REQUIRE_TABLE_PRIMARY_KEY_CHECK = OFF.
--echo #    Create a table on the source (server 1) with a primary key and without
--echo #    The replica applier applies both

STOP REPLICA;

CHANGE REPLICATION SOURCE TO REQUIRE_TABLE_PRIMARY_KEY_CHECK = OFF FOR CHANNEL 'channel_1';

START REPLICA;

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

SET @@global.sql_require_primary_key = 1;
CREATE TABLE t4 (a INT PRIMARY KEY);
SET @@global.sql_require_primary_key = 0;
CREATE TABLE t5 (a INT);

--let $sync_slave_connection= server_2
--let $rpl_channel_name= 'channel_1'
--source include/sync_slave_sql_with_master.inc

--let $column_count= `SELECT COUNT(*) FROM information_schema.columns WHERE table_name='t5';`
--let $assert_text= The table t5 contains only 1 column (no PK)
--let $assert_cond= $column_count = 1
--source include/assert.inc

--echo
--echo # 6. Test REQUIRE_TABLE_PRIMARY_KEY_CHECK = GENERATE.
--echo #    Test also that multiple channels with different behaviors can coexist
--echo #    Set the strategy for the channel from server 1 to GENERATE
--echo #    Set the strategy for the channel from server 3 to ON
--echo #    Add a new table without a primary key on server 1 and 3
--echo #    The channel from server 1 shall had a GIPK while the applier on the channel from server 3 fails

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--let $rpl_channel_name= 'channel_1'
--source include/stop_slave.inc
--let $rpl_channel_name= 'channel_3'
--source include/stop_slave.inc

CHANGE REPLICATION SOURCE TO REQUIRE_TABLE_PRIMARY_KEY_CHECK = GENERATE FOR CHANNEL 'channel_1';
CHANGE REPLICATION SOURCE TO REQUIRE_TABLE_PRIMARY_KEY_CHECK = ON FOR CHANNEL 'channel_3';

--let $rpl_channel_name= 'channel_1'
--source include/start_slave.inc
--let $rpl_channel_name= 'channel_3'
--source include/start_slave.inc

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

SET @@global.sql_require_primary_key = 0;
CREATE TABLE t6 (a INT);

--let $sync_slave_connection= server_2
--let $rpl_channel_name= 'channel_1'
--source include/sync_slave_sql_with_master.inc

--let $column_count= `SELECT COUNT(*) FROM information_schema.columns WHERE table_name='t6';`
--let $assert_text= The table contains 2 columns
--let $assert_cond= $column_count = 2
--source include/assert.inc

--let $pk_count= `SELECT COUNT(*) FROM information_schema.columns WHERE table_name='t6' and column_name='my_row_id';`
--let $assert_text= The table contains a generated invisilble primary key
--let $assert_cond= $pk_count = 1
--source include/assert.inc

--let $rpl_connection_name= server_3
--source include/rpl_connection.inc
CREATE TABLE t7 (a INT);

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--let $rpl_channel_name= 'channel_3'
--let $slave_sql_errno = convert_error(ER_TABLE_WITHOUT_PK)
--source include/wait_for_slave_sql_error.inc

--echo
--echo # 7. Cleanup

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

DROP TABLE t1;
DROP TABLE t3;
DROP TABLE t4;
DROP TABLE t5;
DROP TABLE t6;

--replace_result $sql_require_primary_key SQL_REQUIRE_PRIMARY_KEY
--eval SET @@global.sql_require_primary_key = $sql_require_primary_key

--let $rpl_connection_name= server_3
--source include/rpl_connection.inc

DROP TABLE t7;

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

CALL mtr.add_suppression(".*Access denied; you need .at least one of. the SUPER, SYSTEM_VARIABLES_ADMIN or SESSION_VARIABLES_ADMIN privilege.*");
CALL mtr.add_suppression(".*The slave coordinator and worker threads are stopped, possibly leaving data in inconsistent state.*");
CALL mtr.add_suppression(".*Unable to create or change a table without a primary key*");

--let $rpl_channel_name= 'channel_1'
--source include/stop_slave.inc
--let $rpl_channel_name= 'channel_3'
--source include/stop_slave.inc

--replace_result $_pk_key_check_value PRIMARY_KEY_CHECK_VALUE
--eval CHANGE REPLICATION SOURCE TO REQUIRE_TABLE_PRIMARY_KEY_CHECK = $_pk_key_check_value FOR CHANNEL 'channel_1'
--replace_result $_pk_key_check_value PRIMARY_KEY_CHECK_VALUE
--eval CHANGE REPLICATION SOURCE TO REQUIRE_TABLE_PRIMARY_KEY_CHECK = $_pk_key_check_value FOR CHANNEL 'channel_3'

--eval GRANT SESSION_VARIABLES_ADMIN ON *.* TO $applier_user

--let $rpl_channel_name= 'channel_1'
--source include/start_slave.inc
--let $rpl_channel_name= 'channel_3'
--source include/start_slave.inc

--let $rpl_connection_name= server_1
--source include/rpl_connection.inc

--let $sync_slave_connection= server_2
--let $rpl_channel_name= 'channel_1'
--source include/sync_slave_sql_with_master.inc

--let $rpl_connection_name= server_3
--source include/rpl_connection.inc

--let $sync_slave_connection= server_2
--let $rpl_channel_name= 'channel_3'
--source include/sync_slave_sql_with_master.inc

--let $rpl_skip_sync= 1
--source include/rpl_end.inc
