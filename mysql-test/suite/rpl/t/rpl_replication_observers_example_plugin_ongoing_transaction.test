###############################################################################
# Check that the server transaction count service can be used in plugins
#
# Test:
#   0. The test requires two servers
#   1. Establish 5 connections and create 2 tables
#   2. Lock a table so one query will block, this one is not counted
#   3. Leave a transaction open without commit (counted)
#   4. Leave a transaction stuck on commit
#   5. Execute a DML query. A hook will count the transactions
#   6. Execute a query that on a server hook will count the number of queries
#   7. Clean up
#
###############################################################################

--source include/have_debug.inc
--source include/have_binlog_format_mixed.inc
--source include/have_replication_observers_example_plugin.inc
--source include/install_replication_observers_example.inc

--echo
--echo # 1. Establish 5 connections and create 2 tables

--connect(con1,localhost,root,,test)
--connect(con2,localhost,root,,test)
--connect(con3,localhost,root,,test)
--connect(con4,localhost,root,,test)
--connect(con5,localhost,root,,test)

--let $rpl_connection_name= con1
--source include/rpl_connection.inc

CREATE TABLE t1 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;
CREATE TABLE t2 (c1 INT NOT NULL PRIMARY KEY) ENGINE=InnoDB;

--echo
--echo # 2. Lock a table so one query will block, this one is not counted

--let $rpl_connection_name= con2
--source include/rpl_connection.inc

LOCK TABLE t1 WRITE;

--echo
--echo # 3. Leave a transaction open without commit (counted)

--let $rpl_connection_name= con3
--source include/rpl_connection.inc

--send INSERT INTO t1 VALUES (2);

--echo
--echo # 4. Leave a transaction stuck on commit

--let $rpl_connection_name= con4
--source include/rpl_connection.inc

BEGIN;
INSERT INTO t2 VALUES(1);

--echo
--echo # 5. Execute a DML query. A hook will count the transactions

--let $rpl_connection_name= con5
--source include/rpl_connection.inc

SET @@GLOBAL.DEBUG='+d,group_replication_before_commit_hook_wait';

--send INSERT INTO t2 VALUES (3);

--let $rpl_connection_name= con1
--source include/rpl_connection.inc

# Ensuring that the insert actually hangs at the before commit hook.
--let $wait_condition=SELECT COUNT(*)=1 FROM INFORMATION_SCHEMA.PROCESSLIST WHERE State = 'debug sync point: now'
--source include/wait_condition.inc

SET @@GLOBAL.DEBUG='-d,group_replication_before_commit_hook_wait';

--echo #
--echo # 6. Execute a query that on a server hook will count the number of
--echo #    queries

# It should count 3, the 2 above stuck ones plus the one invoking the hook.

SET @@GLOBAL.DEBUG= '+d,validate_replication_observers_plugin_counts_transactions';

INSERT INTO t2 VALUES (10);

--echo #
--echo # 7. Clean up

--let $rpl_connection_name= con2
--source include/rpl_connection.inc

UNLOCK TABLES;

--disconnect con2

--let $rpl_connection_name= con3
--source include/rpl_connection.inc

--reap

--disconnect con3

--let $rpl_connection_name= con4
--source include/rpl_connection.inc

COMMIT;

SET DEBUG_SYNC='now SIGNAL continue_commit';

--disconnect con4

--let $rpl_connection_name= con5
--source include/rpl_connection.inc

 --reap

--disconnect con5

--let $rpl_connection_name= con1
--source include/rpl_connection.inc

DROP TABLE t1;
DROP TABLE t2;

SET @@GLOBAL.DEBUG= '-d,validate_replication_observers_plugin_counts_transactions';

--disconnect con1

--connection default

--source include/uninstall_replication_observers_example.inc
