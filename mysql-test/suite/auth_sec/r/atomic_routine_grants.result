include/save_binlog_position.inc
# ----------------------------------------------------------------------
# Begin : Tests for GRANT : Routine grants
CREATE USER userX, userY, userZ;
CREATE DATABASE db1;
CREATE PROCEDURE db1.proc1()
BEGIN
SELECT 1234;
END ||
include/save_binlog_position.inc
# Case 1 : Valid grants
GRANT EXECUTE ON PROCEDURE db1.proc1 TO userX, userY, userZ;
# Must show new grant
SHOW GRANTS FOR userX;
Grants for userX@%
GRANT USAGE ON *.* TO `userX`@`%`
GRANT EXECUTE ON PROCEDURE `db1`.`proc1` TO `userX`@`%`
SHOW GRANTS FOR userY;
Grants for userY@%
GRANT USAGE ON *.* TO `userY`@`%`
GRANT EXECUTE ON PROCEDURE `db1`.`proc1` TO `userY`@`%`
SHOW GRANTS FOR userZ;
Grants for userZ@%
GRANT USAGE ON *.* TO `userZ`@`%`
GRANT EXECUTE ON PROCEDURE `db1`.`proc1` TO `userZ`@`%`
# This event sequence pattern MUST be present in binlog: !Q(GRANT EXECUTE ON PROCEDURE.*db1.*proc1.*TO.*userX.*userY.*userZ.*)
include/assert_binlog_events.inc
include/save_binlog_position.inc
# Case 2 : Create new user through grant
GRANT EXECUTE ON PROCEDURE db1.proc1 TO userX, userA IDENTIFIED BY 'abcd';
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
# Must have created new user userA
SELECT user FROM mysql.user WHERE user like 'user%';
user
userA
userX
userY
userZ
# Must show updated grants
SHOW GRANTS FOR userX;
Grants for userX@%
GRANT USAGE ON *.* TO `userX`@`%`
GRANT EXECUTE ON PROCEDURE `db1`.`proc1` TO `userX`@`%`
SHOW GRANTS FOR userA;
Grants for userA@%
GRANT USAGE ON *.* TO `userA`@`%`
GRANT EXECUTE ON PROCEDURE `db1`.`proc1` TO `userA`@`%`
# This event sequence pattern MUST be present in binlog: !Q(GRANT EXECUTE ON PROCEDURE.*db1.*proc1.*TO.*userX.*userA.*IDENTIFIED WITH.*AS.*)
include/assert_binlog_events.inc
include/save_binlog_position.inc
# Case 3 : With NO_AUTO_CREATE_USER off
set @orig_sql_mode_global= @@GLOBAL.sql_mode;
set @orig_sql_mode_session= @@SESSION.sql_mode;
set GLOBAL sql_mode= (select replace(@@GLOBAL.sql_mode,'NO_AUTO_CREATE_USER',''));
Warnings:
Warning	3090	Changing sql mode 'NO_AUTO_CREATE_USER' is deprecated. It will be removed in a future release.
set SESSION sql_mode= (select replace(@@SESSION.sql_mode,'NO_AUTO_CREATE_USER',''));
Warnings:
Warning	3090	Changing sql mode 'NO_AUTO_CREATE_USER' is deprecated. It will be removed in a future release.
GRANT EXECUTE ON PROCEDURE db1.proc1 TO userY, userB;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
# Must have created new user userB
SELECT user FROM mysql.user WHERE user like 'user%';
user
userA
userB
userX
userY
userZ
# Must show updated grants
SHOW GRANTS FOR userY;
Grants for userY@%
GRANT USAGE ON *.* TO `userY`@`%`
GRANT EXECUTE ON PROCEDURE `db1`.`proc1` TO `userY`@`%`
SHOW GRANTS FOR userB;
Grants for userB@%
GRANT USAGE ON *.* TO `userB`@`%`
GRANT EXECUTE ON PROCEDURE `db1`.`proc1` TO `userB`@`%`
# This event sequence pattern MUST be present in binlog: !Q(GRANT EXECUTE ON PROCEDURE.*db1.*proc1.*TO.*userY.*userB.*)
include/assert_binlog_events.inc
include/save_binlog_position.inc
set GLOBAL sql_mode= @orig_sql_mode_global;
Warnings:
Warning	3090	Changing sql mode 'NO_AUTO_CREATE_USER' is deprecated. It will be removed in a future release.
set SESSION sql_mode= @orig_sql_mode_session;
Warnings:
Warning	3090	Changing sql mode 'NO_AUTO_CREATE_USER' is deprecated. It will be removed in a future release.
# Case 4 : Credential change using grant
GRANT EXECUTE ON PROCEDURE db1.proc1 TO userA IDENTIFIED BY 'hoho', userB IDENTIFIED BY 'haha';
Warnings:
Warning	1287	Using GRANT statement to modify existing user's properties other than privileges is deprecated and will be removed in future release. Use ALTER USER statement for this operation.
Warning	1287	Using GRANT statement to modify existing user's properties other than privileges is deprecated and will be removed in future release. Use ALTER USER statement for this operation.
# Must show updated grants
SHOW GRANTS FOR userA;
Grants for userA@%
GRANT USAGE ON *.* TO `userA`@`%`
GRANT EXECUTE ON PROCEDURE `db1`.`proc1` TO `userA`@`%`
SHOW GRANTS FOR userB;
Grants for userB@%
GRANT USAGE ON *.* TO `userB`@`%`
GRANT EXECUTE ON PROCEDURE `db1`.`proc1` TO `userB`@`%`
# Must show password for both users
SHOW CREATE USER userA;
CREATE USER for userA@%
CREATE USER 'userA'@'%' IDENTIFIED WITH 'mysql_native_password' AS '*876D6A79010AA17E53D8ED8F04198B2701199605' REQUIRE NONE PASSWORD EXPIRE DEFAULT ACCOUNT UNLOCK
SHOW CREATE USER userB;
CREATE USER for userB@%
CREATE USER 'userB'@'%' IDENTIFIED WITH 'mysql_native_password' AS '*85D0F19E5598AC04AC7B3FCF5383247D28FB59EF' REQUIRE NONE PASSWORD EXPIRE DEFAULT ACCOUNT UNLOCK
# This event sequence pattern MUST be present in binlog: !Q(GRANT EXECUTE ON PROCEDURE.*db1.*proc1.*TO.*userA.*IDENTIFIED WITH.*AS.*,.*userB.*IDENTIFIED WITH.*AS.*)
include/assert_binlog_events.inc
include/save_binlog_position.inc
# Case 5 : Non-existing user with NO_AUTO_CREATE_USER on
REVOKE ALL ON PROCEDURE db1.proc1 FROM userX, userY, userZ;
include/save_binlog_position.inc
# Must show updated grants
SHOW GRANTS FOR userX;
Grants for userX@%
GRANT USAGE ON *.* TO `userX`@`%`
SHOW GRANTS FOR userY;
Grants for userY@%
GRANT USAGE ON *.* TO `userY`@`%`
SHOW GRANTS FOR userZ;
Grants for userZ@%
GRANT USAGE ON *.* TO `userZ`@`%`
GRANT EXECUTE ON PROCEDURE db1.proc1 TO userX, userY, userZ, userC, userD;
ERROR 42000: Can't find any matching row in the user table
# Grants must remain unchanged
SHOW GRANTS FOR userX;
Grants for userX@%
GRANT USAGE ON *.* TO `userX`@`%`
SHOW GRANTS FOR userY;
Grants for userY@%
GRANT USAGE ON *.* TO `userY`@`%`
SHOW GRANTS FOR userZ;
Grants for userZ@%
GRANT USAGE ON *.* TO `userZ`@`%`
# This event sequence pattern MUST NOT be present in binlog: !Q(GRANT EXECUTE ON PROCEDURE.*db1.*proc1.*TO.*userX.*userY.*userZ.*userC.*userD.*)
include/assert_binlog_events.inc
# Case 6 : Create new user with an account without CREATE USER privilege
REVOKE ALL ON PROCEDURE db1.proc1 FROM userA, userB;
GRANT EXECUTE ON PROCEDURE db1.proc1 to userX WITH GRANT OPTION;
SHOW GRANTS FOR userY;
Grants for userY@%
GRANT USAGE ON *.* TO `userY`@`%`
SHOW GRANTS FOR userZ;
Grants for userZ@%
GRANT USAGE ON *.* TO `userZ`@`%`
SHOW GRANTS FOR userA;
Grants for userA@%
GRANT USAGE ON *.* TO `userA`@`%`
SHOW GRANTS FOR userB;
Grants for userB@%
GRANT USAGE ON *.* TO `userB`@`%`
include/save_binlog_position.inc
# should succeed
GRANT EXECUTE ON PROCEDURE db1.proc1 TO userY, userZ;
# should fail
GRANT EXECUTE ON PROCEDURE db1.proc1 TO userA, userB, userC IDENTIFIED BY 'haha';
ERROR 42000: You are not allowed to create a user with GRANT
# Must show updated grants
SHOW GRANTS FOR userY;
Grants for userY@%
GRANT USAGE ON *.* TO `userY`@`%`
GRANT EXECUTE ON PROCEDURE `db1`.`proc1` TO `userY`@`%`
SHOW GRANTS FOR userZ;
Grants for userZ@%
GRANT USAGE ON *.* TO `userZ`@`%`
GRANT EXECUTE ON PROCEDURE `db1`.`proc1` TO `userZ`@`%`
# Must not have any change
SHOW GRANTS FOR userA;
Grants for userA@%
GRANT USAGE ON *.* TO `userA`@`%`
SHOW GRANTS FOR userB;
Grants for userB@%
GRANT USAGE ON *.* TO `userB`@`%`
# This event sequence pattern MUST be present in binlog: !Q(GRANT EXECUTE ON PROCEDURE.*db1.*proc1.*TO.*userY.*userZ.*)
include/assert_binlog_events.inc
DROP USER userX, userY, userZ, userA, userB;
DROP PROCEDURE db1.proc1;
DROP DATABASE db1;
include/save_binlog_position.inc
# End : Tests for GRANT : Routine grants
# ----------------------------------------------------------------------
