--disable_query_log
eval INSTALL PLUGIN mock SONAME '$MOCK_PLUGIN';
--enable_query_log

CREATE TABLE t(c1 CHAR(100) NOT NULL);
INSERT INTO t (c1) VALUES('x');
INSERT INTO t (c1) VALUES('');
ALTER TABLE t SECONDARY_ENGINE=MOCK;
ALTER TABLE t SECONDARY_LOAD;
ANALYZE TABLE t;

SET @@SESSION.OPTIMIZER_TRACE="ENABLED=ON";

# Bug#28445530 original report query. In this case, the optimization
# is not visible in the explain or optimizer trace output before
# and after the patch, even though the execution behavior differs.

# SELECT COUNT(c1) AS total_rows FROM t;
# SELECT TRACE FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;

# Test inside a nested query. In this case we *can* see a diff in the
# optimizer trace before and after the patch.
SELECT * FROM (SELECT COUNT(c1) AS total_rows FROM t) ts JOIN (SELECT 3 FROM t) t;
SELECT JSON_EXTRACT(CAST(TRACE as json),
  '$.steps[1].join_optimization.steps[5][0].considered_execution_plans[0].'
  'rest_of_plan[0].plan_prefix') AS prefix
  FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;

DROP TABLE t;
SET @@SESSION.OPTIMIZER_TRACE="ENABLED=OFF";

--disable_query_log
UNINSTALL PLUGIN mock;
--enable_query_log
