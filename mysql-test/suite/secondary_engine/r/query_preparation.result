#
# Test that query preparation is able to make plans for executing
# a query on a secondary storage engine.
#
CREATE TABLE t1(id INT PRIMARY KEY, x INT, y INT);
INSERT INTO t1 VALUES (1, 2, 3), (4, 5, 6), (7, 8, 9);
CREATE INDEX t1_x ON t1(x);
SELECT * FROM t1;
id	x	y
1	2	3
4	5	6
7	8	9
CREATE TABLE t2(id INT PRIMARY KEY, z INT);
INSERT INTO t2 VALUES (1, 2), (3, 4), (5, 6);
CREATE VIEW v1 AS SELECT t1.id, t1.x, t2.z FROM t1, t2 WHERE t1.id = t2.id;
SELECT * FROM v1;
id	x	z
1	2	2
CREATE TABLE t_primary_only(id INT PRIMARY KEY, x INT);
INSERT INTO t_primary_only VALUES (1, 1), (2, 2);
ALTER TABLE t1 SECONDARY_ENGINE MOCK;
ALTER TABLE t2 SECONDARY_ENGINE MOCK;
FLUSH STATUS;
SELECT * FROM t1;
id	x	y
1	2	3
4	5	6
7	8	9
PREPARE ps FROM 'SELECT * FROM t1';
EXECUTE ps;
id	x	y
1	2	3
4	5	6
7	8	9
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	0
DROP PREPARE ps;
FLUSH STATUS;
ALTER TABLE t1 SECONDARY_LOAD;
PREPARE ps FROM 'SELECT * FROM t1';
EXECUTE ps;
id	x	y
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	1
ALTER TABLE t1 SECONDARY_UNLOAD;
EXECUTE ps;
id	x	y
1	2	3
4	5	6
7	8	9
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	1
ALTER TABLE t1 SECONDARY_UNLOAD;
EXECUTE ps;
id	x	y
1	2	3
4	5	6
7	8	9
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	1
DROP PREPARE ps;
ALTER TABLE t1 SECONDARY_LOAD;
ALTER TABLE t2 SECONDARY_LOAD;
FLUSH STATUS;
SELECT * FROM t1;
id	x	y
PREPARE ps FROM 'SELECT * FROM t1';
EXECUTE ps;
id	x	y
EXECUTE ps;
id	x	y
FLUSH TABLES;
SELECT * FROM t1;
id	x	y
FLUSH TABLES;
EXECUTE ps;
id	x	y
DROP PREPARE ps;
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	5
ANALYZE TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
EXPLAIN SELECT * FROM t1;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	NULL	NULL	NULL	NULL	3	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`id` AS `id`,`test`.`t1`.`x` AS `x`,`test`.`t1`.`y` AS `y` from `test`.`t1`
FLUSH STATUS;
SELECT * FROM t1 JOIN t2 USING (id);
id	x	y	z
SELECT * FROM t1 WHERE t1.x IN (SELECT t2.z FROM t2);
id	x	y
SELECT SUM(x) FROM t1 GROUP BY y;
SUM(x)
SELECT (SELECT MAX(x) FROM t1), (SELECT MIN(z) FROM t2), s FROM
(SELECT SUM(z) AS s FROM t2) AS dt;
(SELECT MAX(x) FROM t1)	(SELECT MIN(z) FROM t2)	s
NULL	NULL	NULL
SELECT * FROM v1;
id	x	z
SELECT * FROM v1, t2 WHERE v1.id = t2.id;
id	x	z	id	z
SELECT SUM(x) FROM v1;
SUM(x)
NULL
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	7
FLUSH STATUS;
SELECT x FROM t1 FORCE INDEX (t1_x);
x
2
5
8
PREPARE ps FROM 'SELECT x FROM t1 FORCE INDEX (t1_x)';
EXECUTE ps;
x
2
5
8
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	0
SET @my_use_secondary_engine = @@use_secondary_engine;
SET @@use_secondary_engine = FORCED;
EXECUTE ps;
ERROR HY000: Secondary engine operation failed. use_secondary_engine is FORCED but query could not be executed in secondary engine.
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	0
SET @@use_secondary_engine = @my_use_secondary_engine;
FLUSH STATUS;
PREPARE ps FROM 'SELECT * FROM t1';
LOCK TABLES t1 READ;
SELECT * FROM t1;
id	x	y
1	2	3
4	5	6
7	8	9
EXECUTE ps;
id	x	y
1	2	3
4	5	6
7	8	9
EXECUTE ps;
id	x	y
1	2	3
4	5	6
7	8	9
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	0
UNLOCK TABLES;
SELECT * FROM t1;
id	x	y
EXECUTE ps;
id	x	y
EXECUTE ps;
id	x	y
DROP PREPARE ps;
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	3
FLUSH STATUS;
PREPARE ps FROM 'SELECT * FROM t1';
BEGIN;
SELECT * FROM t1;
id	x	y
1	2	3
4	5	6
7	8	9
EXECUTE ps;
id	x	y
1	2	3
4	5	6
7	8	9
COMMIT;
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	0
EXECUTE ps;
id	x	y
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	1
FLUSH STATUS;
START TRANSACTION;
SELECT * FROM t1;
id	x	y
1	2	3
4	5	6
7	8	9
EXECUTE ps;
id	x	y
1	2	3
4	5	6
7	8	9
COMMIT;
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	0
EXECUTE ps;
id	x	y
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	1
FLUSH STATUS;
SET @@autocommit = 0;
SELECT * FROM t1;
id	x	y
1	2	3
4	5	6
7	8	9
EXECUTE ps;
id	x	y
1	2	3
4	5	6
7	8	9
SET @@autocommit = 1;
COMMIT;
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	0
SELECT * FROM t1;
id	x	y
EXECUTE ps;
id	x	y
DROP PREPARE ps;
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	2
FLUSH STATUS;
BEGIN;
PREPARE ps FROM 'SELECT * FROM t1';
EXECUTE ps;
id	x	y
1	2	3
4	5	6
7	8	9
COMMIT;
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	0
EXECUTE ps;
id	x	y
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	1
DROP PREPARE ps;
SELECT * FROM t1, t_primary_only tp WHERE t1.id = tp.id;
id	x	y	id	x
1	2	3	1	1
PREPARE ps FROM 'SELECT * FROM t1, t_primary_only tp WHERE t1.id = tp.id';
EXECUTE ps;
id	x	y	id	x
1	2	3	1	1
EXECUTE ps;
id	x	y	id	x
1	2	3	1	1
DROP PREPARE ps;
SELECT * FROM t1, t2, t_primary_only tp WHERE t1.id = t2.id AND t2.id = tp.id;
id	x	y	id	z	id	x
1	2	3	1	2	1	1
CREATE TABLE t_with_autoinc(id INT PRIMARY KEY AUTO_INCREMENT, x INT)
SECONDARY_ENGINE MOCK;
INSERT INTO t_with_autoinc(x) VALUES (4), (5), (6);
ALTER TABLE t_with_autoinc SECONDARY_LOAD;
SELECT * FROM t_with_autoinc;
id	x
DROP TABLE t_with_autoinc;
CREATE TABLE t_partitioned(id INT PRIMARY KEY, x INT)
SECONDARY_ENGINE MOCK
PARTITION BY HASH(id);
INSERT INTO t_partitioned VALUES (1, 2), (2, 3), (3, 4), (4, 5);
ALTER TABLE t_partitioned SECONDARY_LOAD;
SELECT * FROM t_partitioned;
id	x
DROP TABLE t_partitioned;
FLUSH STATUS;
SELECT * FROM t1;
PREPARE ps FROM 'SELECT * FROM t1';
EXECUTE ps;
SELECT * FROM t1, t_primary_only tp WHERE t1.id = tp.id;
EXECUTE ps;
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
ALTER TABLE t1 SECONDARY_UNLOAD;
SELECT * FROM t1;
EXECUTE ps;
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
ALTER TABLE t1 SECONDARY_LOAD;
EXECUTE ps;
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
DROP PREPARE ps|
id	x	y
id	x	y
id	x	y	id	x
1	2	3	1	1
id	x	y
Variable_name	Value
Secondary_engine_execution_count	3
id	x	y
1	2	3
4	5	6
7	8	9
id	x	y
1	2	3
4	5	6
7	8	9
Variable_name	Value
Secondary_engine_execution_count	3
id	x	y
Variable_name	Value
Secondary_engine_execution_count	4
FLUSH STATUS;
PREPARE ps FROM 'SELECT x FROM t1 WHERE id = ?';
SET @a=1;
EXECUTE ps USING @a;
x
EXECUTE ps USING @a;
x
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	2
ALTER TABLE t1 SECONDARY_UNLOAD;
EXECUTE ps USING @a;
x
2
EXECUTE ps USING @a;
x
2
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	2
ALTER TABLE t1 SECONDARY_LOAD;
EXECUTE ps USING @a;
x
EXECUTE ps USING @a;
x
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	4
DROP PREPARE ps;
FLUSH STATUS;
SELECT JSON_EXTRACT(j, '$') FROM
(SELECT '[]' AS j FROM DUAL UNION ALL SELECT '{}' FROM DUAL) AS dt
LEFT JOIN t1 ON (TRUE);
JSON_EXTRACT(j, '$')
[]
{}
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	1
FLUSH STATUS;
SELECT JSON_EXTRACT(j, '$') FROM
(SELECT '[]' AS j FROM DUAL UNION ALL SELECT 'not-json' FROM DUAL) AS dt
LEFT JOIN t1 ON (TRUE);
ERROR 22032: Invalid JSON text in argument 1 to function json_extract: "Invalid value." at position 1.
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	1
FLUSH STATUS;
PREPARE ps FROM "SELECT JSON_EXTRACT(j, '$') FROM
(SELECT '[]' AS j FROM DUAL UNION ALL SELECT 'not-json' FROM DUAL) AS dt
LEFT JOIN t1 ON (TRUE)";
EXECUTE ps;
ERROR 22032: Invalid JSON text in argument 1 to function json_extract: "Invalid value." at position 1.
EXECUTE ps;
ERROR 22032: Invalid JSON text in argument 1 to function json_extract: "Invalid value." at position 1.
DROP PREPARE ps;
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	2
FLUSH STATUS;
CREATE PROCEDURE p1() SELECT COUNT(*) FROM t1;
CALL p1();
COUNT(*)
3
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	0
DROP PROCEDURE p1;
FLUSH STATUS;
CREATE TABLE t_with_trigger(x INT);
CREATE TRIGGER tr AFTER INSERT ON t_with_trigger
FOR EACH ROW SELECT COUNT(*) FROM t1 INTO @a;
INSERT INTO t_with_trigger VALUES (1);
SELECT @a;
@a
3
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	0
DROP TABLE t_with_trigger;
CREATE TABLE t_nonexistent(x INT) SECONDARY_ENGINE NONEXISTENT;
INSERT INTO t_nonexistent VALUES (1);
FLUSH STATUS;
SELECT * FROM t_nonexistent;
x
1
SELECT * FROM t1 a, t_nonexistent b WHERE a.id = b.x;
id	x	y	x
1	2	3	1
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	0
DROP TABLE t_nonexistent;
CREATE TABLE t_case1(x INT) SECONDARY_ENGINE 'MOCK';
CREATE TABLE t_case2(y INT) SECONDARY_ENGINE 'mock ';
CREATE TABLE t_case3(z INT) SECONDARY_ENGINE 'MoCk  ';
INSERT INTO t_case1 VALUES (1);
INSERT INTO t_case2 VALUES (2);
INSERT INTO t_case3 VALUES (3);
ALTER TABLE t_case1 SECONDARY_LOAD;
ALTER TABLE t_case2 SECONDARY_LOAD;
ALTER TABLE t_case3 SECONDARY_LOAD;
FLUSH STATUS;
SELECT * FROM t_case1, t_case2, t_case3;
x	y	z
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	1
DROP TABLE t_case1, t_case2, t_case3;
CREATE TABLE tf(x INT) SECONDARY_ENGINE MOCK;
INSERT INTO tf VALUES (123);
ALTER TABLE tf SECONDARY_LOAD;
CREATE FUNCTION f1() RETURNS INT DETERMINISTIC
BEGIN
DECLARE i INT;
SELECT x INTO i FROM tf;
RETURN i;
END|
CREATE FUNCTION f2() RETURNS INT DETERMINISTIC
BEGIN
INSERT INTO tf VALUES (234);
RETURN 1;
END|
FLUSH STATUS;
SELECT f1();
f1()
123
SELECT f2();
f2()
1
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	0
SELECT * FROM tf;
x
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	1
DROP FUNCTION f1;
DROP FUNCTION f2;
DROP TABLE tf;
CREATE TABLE t_dropped (x INT) SECONDARY_ENGINE MOCK;
ALTER TABLE t_dropped SECONDARY_LOAD;
PREPARE ps FROM 'SELECT * FROM t_dropped';
EXECUTE ps;
x
DROP TABLE t_dropped;
EXECUTE ps;
ERROR 42S02: Table 'test.t_dropped' doesn't exist
DROP PREPARE ps;
DROP VIEW v1;
DROP TABLE t1, t2, t_primary_only;
#
# Rudimentary tests for use_secondary_engine system variable.
#
SET @my_use_secondary_engine = @@use_secondary_engine;
CREATE TABLE t1 (a INT) SECONDARY_ENGINE MOCK;
INSERT INTO t1 VALUES (1);
ALTER TABLE t1 SECONDARY_LOAD;
FLUSH STATUS;
# The row shall be returned from the primary storage engine.
SET @@use_secondary_engine = OFF;
SELECT * FROM t1;
a
1
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	0
# The mock storage engine does not return any rows.
SET @@use_secondary_engine = FORCED;
SELECT * FROM t1;
a
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	1
SET @@use_secondary_engine = ON;
SELECT * FROM t1;
a
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	2
# An error shall be returned if table is not loaded.
ALTER TABLE t1 SECONDARY_UNLOAD;
SET @@use_secondary_engine = FORCED;
SELECT * FROM t1;
ERROR HY000: Secondary engine operation failed. use_secondary_engine is FORCED but query could not be executed in secondary engine.
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	2
SET @@use_secondary_engine = ON;
SELECT * FROM t1;
a
1
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	2
DROP TABLE t1;
SET @@use_secondary_engine = @my_use_secondary_engine;
#
# Queries not referencing any base tables shall be executed without
# without even if use_secondary_engine is FORCED.
#
SET @my_use_secondary_engine = @@use_secondary_engine;
SET @@use_secondary_engine = FORCED;
CREATE VIEW v as SELECT 1;
SELECT * FROM v;
1
1
SELECT 1;
1
1
SELECT COUNT(*) FROM (SELECT 1) AS dt;
COUNT(*)
1
DROP VIEW v;
SET @@use_secondary_engine = @my_use_secondary_engine;
#
# Attempt to force query on secondary engine even if its referenced
# table has no secondary engine defined.
#
SET @my_use_secondary_engine = @@use_secondary_engine;
SET @@use_secondary_engine = FORCED;
CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (1);
FLUSH STATUS;
SELECT * FROM t1;
ERROR HY000: Secondary engine operation failed. use_secondary_engine is FORCED but query could not be executed in secondary engine.
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	0
SET @@use_secondary_engine = ON;
SELECT * FROM t1;
a
1
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	0
DROP TABLE t1;
SET @@use_secondary_engine = @my_use_secondary_engine;
#
# Attempt to force query on secondary engine if one of its referenced
# table has a secondary engine while another table has none.
#
SET @my_use_secondary_engine = @@use_secondary_engine;
SET @@use_secondary_engine = FORCED;
CREATE TABLE t1 (a INT) SECONDARY_ENGINE MOCK;
CREATE TABLE t2 (a INT);
INSERT INTO t1 VALUES (1);
INSERT INTO t2 VALUES (2);
ALTER TABLE t1 SECONDARY_LOAD;
FLUSH STATUS;
SELECT * FROM t1;
a
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	1
SELECT * FROM t2;
ERROR HY000: Secondary engine operation failed. use_secondary_engine is FORCED but query could not be executed in secondary engine.
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	1
SELECT * FROM t1,t2;
ERROR HY000: Secondary engine operation failed. use_secondary_engine is FORCED but query could not be executed in secondary engine.
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	1
ALTER TABLE t1 SECONDARY_UNLOAD;
SELECT * FROM t1,t2;
ERROR HY000: Secondary engine operation failed. use_secondary_engine is FORCED but query could not be executed in secondary engine.
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	1
DROP TABLE t1,t2;
SET @@use_secondary_engine = @my_use_secondary_engine;
#
# Attempt to force query referencing temporary table on secondary engine.
#
SET @my_use_secondary_engine = @@use_secondary_engine;
SET @@use_secondary_engine = FORCED;
CREATE TEMPORARY TABLE t1 (a INT);
FLUSH STATUS;
SELECT * FROM t1;
ERROR HY000: Secondary engine operation failed. use_secondary_engine is FORCED but query could not be executed in secondary engine.
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	0
DROP TABLE t1;
SET @@use_secondary_engine = @my_use_secondary_engine;
#
# Change use_secondary_engine across execution of prepared statements.
#
SET @my_use_secondary_engine = @@use_secondary_engine;
SET @@use_secondary_engine = FORCED;
CREATE TABLE t1 (a INT) SECONDARY_ENGINE MOCK;
FLUSH STATUS;
PREPARE ps FROM "SELECT * FROM t1";
EXECUTE ps;
ERROR HY000: Secondary engine operation failed. use_secondary_engine is FORCED but query could not be executed in secondary engine.
SET @@use_secondary_engine = OFF;
EXECUTE ps;
a
# Load table into secondary engine.
ALTER TABLE t1 SECONDARY_LOAD;
EXECUTE ps;
a
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	0
SET @@use_secondary_engine = ON;
EXECUTE ps;
a
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	1
SET @@use_secondary_engine = FORCED;
EXECUTE ps;
a
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	2
# Unload table from secondary engine.
ALTER TABLE t1 SECONDARY_UNLOAD;
SET @@use_secondary_engine = ON;
EXECUTE ps;
a
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	2
SET @@use_secondary_engine = FORCED;
EXECUTE ps;
ERROR HY000: Secondary engine operation failed. use_secondary_engine is FORCED but query could not be executed in secondary engine.
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	2
DROP PREPARE ps;
DROP TABLE t1;
SET @@use_secondary_engine = @my_use_secondary_engine;
#
# Set use_secondary_engine as a hint.
#
SET @my_use_secondary_engine = @@use_secondary_engine;
SET @@use_secondary_engine = OFF;
CREATE TABLE t1 (a INT) SECONDARY_ENGINE MOCK;
INSERT INTO t1 VALUES (1);
FLUSH STATUS;
SELECT * FROM t1;
a
1
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	0
SELECT /*+ SET_VAR(use_secondary_engine = FORCED) */ * FROM t1;
ERROR HY000: Secondary engine operation failed. use_secondary_engine is FORCED but query could not be executed in secondary engine.
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	0
ALTER TABLE t1 SECONDARY_LOAD;
SELECT /*+ SET_VAR(use_secondary_engine = FORCED) */ * FROM t1;
a
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	1
SELECT /*+ SET_VAR(use_secondary_engine = ON) */ * FROM t1;
a
SET @@use_secondary_engine = @my_use_secondary_engine;
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	2
SELECT /*+ SET_VAR(use_secondary_engine = OFF) */ * FROM t1;
a
1
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';
Variable_name	Value
Secondary_engine_execution_count	2
DROP TABLE t1;
SET @@use_secondary_engine = @my_use_secondary_engine;
#
# Bug#28311801: THE GLOBAL VALUE OF SECONDARY_ENGINE_EXECUTION_COUNT
#               IS ALWAYS ZERO
#
CREATE TABLE t (x INT) SECONDARY_ENGINE MOCK;
ALTER TABLE t SECONDARY_LOAD;
SELECT * FROM t;
x
FLUSH STATUS;
SELECT 1;
1
1
DROP TABLE t;
