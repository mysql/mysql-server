include/master-slave.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the connection metadata repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START REPLICA; see the 'START REPLICA Syntax' in the MySQL Manual for more information.
[connection master]
# Generate epoch transactions without dependencies by using WRITESET
# dependency tracking
show variables like 'binlog_transaction_dependency_tracking';
Variable_name	Value
binlog_transaction_dependency_tracking	WRITESET
show variables like 'ndb_log_transaction_dependency';
Variable_name	Value
ndb_log_transaction_dependency	ON
create table t1 (
a int primary key,
b varchar(100),
c int) engine=ndb;
insert into t1 values
(1, "A", 0),
(2, "A", 0),
(3, "A", 0);
# Valid state after epoch 0
select * from t1 order by a;
a	b	c
1	A	0
2	A	0
3	A	0
[connection slave]
# Relevant replica variables
show variables like 'replica_parallel_workers';
Variable_name	Value
replica_parallel_workers	10
show variables like 'log_bin';
Variable_name	Value
log_bin	ON
show variables like 'log_replica_updates';
Variable_name	Value
log_replica_updates	ON
show variables like 'replica_preserve_commit_order';
Variable_name	Value
replica_preserve_commit_order	ON
# Supress MTA errors generated by test
call mtr.add_suppression(".*Could not execute Write_rows event.*");
call mtr.add_suppression(".*worker thread retried transaction 1 time.*");
call mtr.add_suppression(".*possibly leaving data in inconsistent state.*");
call mtr.add_suppression(".*worker has stopped after at least one previous worker encountered an error when replica-preserve-commit-order was enabled.*");
include/start_slave.inc
[connection master]
include/sync_slave_sql_with_master.inc
include/stop_slave.inc
[connection master]
# Epoch 1
update t1 set b="B", c=1 where a=1;
# Wait for ndb_binlog thread...
# Valid state after epoch 1
select * from t1 order by a;
a	b	c
1	B	1
2	A	0
3	A	0
# Epoch 2
begin;
update t1 set b="C", c=2 where a=2;
commit;
# Wait for ndb_binlog thread...
# Valid state after epoch 2
select * from t1 order by a;
a	b	c
1	B	1
2	C	2
3	A	0
# Epoch 3
update t1 set b="D", c=3 where a=3;
# Wait for ndb_binlog thread...
# Valid state after epoch 3
select * from t1 order by a;
a	b	c
1	B	1
2	C	2
3	D	3
# Take a row lock on row 2 on one connection to the replica
# This stops epoch 2 from finishing its prepare, and
# therefore it will be unable to commit.
# With commit ordering on, epoch 3 will not be able to commit
# and will not become visible.
[connection slave1]
begin;
select * from t1 where a=2 for update;
a	b	c
2	A	0
# Start the replica from the other replica connection
[connection slave]
include/start_slave.inc
# Row lock should stall epoch 2, and hence also
# the independent epoch 3.
# Check that no sign of epoch 3 can be seen while the
# row lock is held.
# This also stall the replica long enough to fail the transaction
# being applied and thus replication will stop.
# Expect that only epoch 1 successfully applied.
select * from test.t1 order by a;
a	b	c
1	B	1
2	A	0
3	A	0
# Now cleanup
[connection slave1]
# Release lock
commit;
[connection slave]
# Wait for replication error
include/wait_for_slave_sql_error.inc [errno=3030]
# Show the error number after failure
SELECT WORKER_ID, LAST_ERROR_NUMBER
FROM performance_schema.replication_applier_status_by_worker
WHERE LAST_ERROR_NUMBER != 0;
WORKER_ID	1
LAST_ERROR_NUMBER	1205
WORKER_ID	2
LAST_ERROR_NUMBER	3030
# Show the coordinator error number and message
SELECT LAST_ERROR_NUMBER, LAST_ERROR_MESSAGE
FROM performance_schema.replication_applier_status_by_coordinator;
LAST_ERROR_NUMBER	3030
LAST_ERROR_MESSAGE	Coordinator stopped because there were error(s) in the worker(s). The most recent failure being: Worker 2 failed executing transaction 'ANONYMOUS' at source log master-bin.000001, end_log_pos NNN. See error log and/or performance_schema.replication_applier_status_by_worker table for more details about this failure or others, if any.
# Start replication again
include/start_slave.inc
# Resync
[connection master]
# Show resynced
select * from test.t1 order by a;
a	b	c
1	B	1
2	C	2
3	D	3
[connection master]
# Drop table
drop table test.t1;
include/rpl_end.inc
