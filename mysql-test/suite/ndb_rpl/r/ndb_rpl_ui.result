include/master-slave.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection master]
CREATE TABLE t1 (pk int primary key, uk int not null, unique(uk)) engine=ndb;
insert into t1 values (1,1);
insert into t1 values (2,2);
insert into t1 values (3,3);
insert into t1 values (4,4);
insert into t1 values (5,5);
select * from t1 where uk in (1,2,3,4,5);
pk	uk
1	1
2	2
3	3
4	4
5	5
update t1 set uk=uk-1 order by pk;
select * from t1 where uk in (0,1,2,3,4);
pk	uk
1	0
2	1
3	2
4	3
5	4
Master table contents
select * from t1 order by pk;
pk	uk
1	0
2	1
3	2
4	3
5	4
flush logs;
Slave table contents
select * from t1 order by pk;
pk	uk
1	0
2	1
3	2
4	3
5	4
select * from t1 where uk in (0,1,2,3,4);
pk	uk
1	0
2	1
3	2
4	3
5	4
drop table t1;
CREATE TABLE t1 (a int not null,
b int auto_increment, 
uk int null, primary key(a,b), unique(uk)) 
engine=ndb partition by key(a);
CREATE TABLE t2 (a int not null auto_increment primary key) engine = ndb;
begin;
insert into t1 values (1,null,1), (1,null, 2), (1,null, 3), (1,null, 4);
insert into t2 values (null), (null), (null), (null);
insert into t2 select null from t2;
insert into t2 select null from t2;
insert into t2 select null from t2;
insert into t2 select null from t2;
insert into t2 select null from t2;
insert into t2 select null from t2;
insert into t2 select null from t2;
insert into t2 select null from t2;
commit;
select count(*) from t1;
count(*)
4
select count(*) from t2;
count(*)
1024
select count(*) from t1;
count(*)
4
select count(*) from t2;
count(*)
1024
drop table t1;
drop table t2;
Test that real uniqeuness constraint violations are detected
when replicating
create table t1 (a int primary key, b int, c int, unique(c)) engine=ndb;
insert into t1 values (1,1,1), (2,2,2), (3,3,3), (4,4,4), (5,5,5), (6,6,6);
Modify replica so that there can be conflicts in replication
insert into t1 values (11,11,11), (12,12,12), (13,13,13), (14,14,14);
call mtr.add_suppression(".*duplicate key in table.*");
call mtr.add_suppression(".*Duplicate key on write or update.*");
call mtr.add_suppression(".*duplicate value in unique index.*");
call mtr.add_suppression(".*coordinator and worker threads are stopped.*");
Single insert
insert into t1 values (7,7,11);
include/wait_for_slave_sql_error.inc [errno=1022]
delete from t1 where c=11;
start replica;
Single update
update t1 set c=12 where a=2;
include/wait_for_slave_sql_error.inc [errno=1022]
delete from t1 where c=12;
start replica;
Check blob handling
create table t2 (a int primary key, b text, c int, unique(c)) engine=ndb;
insert into t2 values (1, repeat('VRA', 10000),1);
insert into t2 values (2, repeat('VRA', 10000),2);
insert into t2 values (3, repeat('VRA', 10000),3);
insert into t2 values (4, repeat('VRA', 10000),4);
insert into t2 values (5, repeat('VRA', 10000),5);
insert into t2 values (6, repeat('VRA', 10000),6);
insert into t2 values (7, repeat('VRA', 10000),7);
insert into t2 values (8, repeat('VRA', 10000),8);
insert into t2 values (9, repeat('VRA', 10000),9);
insert into t2 values (11, repeat('VRA', 10000), 11);
update t2 set b=repeat('GEO', 20000), c=c+10 order by c desc;
include/wait_for_slave_sql_error.inc [errno=1022]
delete from t2 where c=11;
start replica;
drop table t1;
drop table t2;
include/rpl_end.inc
