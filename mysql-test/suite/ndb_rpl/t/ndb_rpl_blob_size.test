# WL#15044 Configurable BLOB inline size
# CREATE and INSERT definitions of extended Blob feature BLOB_INLINE_SIZE

--source include/have_ndb.inc
--source include/have_binlog_format_mixed_or_row.inc
--source suite/ndb_rpl/ndb_master-slave.inc

--connection slave
stop replica;

--echo ## CREATE TABLE in master with custom Blob inline size
--connection master
CREATE TABLE test.t1 (a int primary key,
                      b blob comment "NDB_COLUMN=BLOB_INLINE_SIZE=64",
                      bm mediumblob comment "NDB_COLUMN=BLOB_INLINE_SIZE=700",
                      bl longblob,
                      t text comment "NDB_COLUMN=BLOB_INLINE_SIZE=100",
                      tm mediumtext comment "NDB_COLUMN=BLOB_INLINE_SIZE=512",
                      tl longtext comment "NDB_COLUMN=BLOB_INLINE_SIZE=128")
engine=ndb;

--echo ## Verify inline and partition sizes of test.t1 on master
SELECT inline_size, part_size FROM ndbinfo.blobs WHERE table_name = 't1';

reset master;

--echo ## Create table in replica with other custom Blob inline size
--connection slave
CREATE TABLE test.t1 (a int primary key,
                      b blob comment "NDB_COLUMN=BLOB_INLINE_SIZE=96",
                      bm mediumblob comment "NDB_COLUMN=BLOB_INLINE_SIZE=456",
                      bl longblob comment "NDB_COLUMN=BLOB_INLINE_SIZE=766",
                      t text,
                      tm mediumtext comment "NDB_COLUMN=BLOB_INLINE_SIZE=255",
                      tl longtext comment "NDB_COLUMN=BLOB_INLINE_SIZE=255") 
engine=ndb;

start replica;

--echo ## Verify inline and partition sizes of test.t1 on replica
SELECT inline_size, part_size FROM ndbinfo.blobs WHERE table_name = 't1';

--echo ## Connect to master and insert values on test.t1
--connection master

INSERT INTO test.t1 VALUES
  (
  1,
  repeat('J',60000),
  repeat('J',60000),
  repeat('J',60000),
  repeat(_utf32 0x1F47E,15000),
  repeat(_utf32 0x1F47E,60000),
  repeat(_utf32 0x1F47E,60000)),
  (
  2,
  repeat('K',60000),
  repeat('K',60000),
  repeat('K',60000),
  repeat(_utf32 0x1F47D,15000),
  repeat(_utf32 0x1F47D,60000),
  repeat(_utf32 0x1F47D,60000)),
  (
  3,
  repeat('L',60000),
  repeat('L',60000),
  repeat('L',60000),
  repeat(_utf32 0x1F47C,15000),
  repeat(_utf32 0x1F47C,60000),
  repeat(_utf32 0x1F47C,60000));

--echo

--echo ## Verify inserted values on master, sync and verify those on replica

SELECT a, sha1(b), sha1(bm), sha1(bl), sha1(t), sha1(tm), sha1(tl) FROM test.t1 ORDER BY a;

--sync_slave_with_master
--connection slave

SELECT a, sha1(b), sha1(bm), sha1(bl), sha1(t), sha1(tm), sha1(tl) FROM test.t1 ORDER BY a;

--echo

--echo ## Update values on master, verify, sync and verify those on replica

--connection master

UPDATE test.t1 SET
  b=left(b,59000),
  bm=left(bm, 59000),
  bl=left(bl, 59000),
  t=left(t,14000),
  tm=left(tm, 59000),
  tl=left(tl, 59000);

SELECT a, sha1(b), sha1(bm), sha1(bl), sha1(t), sha1(tm), sha1(tl) FROM test.t1 order by a;

--sync_slave_with_master
--connection slave

SELECT a, sha1(b), sha1(bm), sha1(bl), sha1(t), sha1(tm), sha1(tl) FROM test.t1 order by a;

--echo

--connection master

--echo ## Delete on master, sync and verify deletion on replica

DELETE FROM test.t1;

--sync_slave_with_master
--connection slave

SELECT a, sha1(b), sha1(bm), sha1(bl), sha1(t), sha1(tm), sha1(tl) FROM test.t1 order by a;

--connection master
DROP TABLE test.t1;

--source include/rpl_end.inc
