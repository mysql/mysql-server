--source include/have_debug_sync.inc

let $MYSQLD_DATADIR=`SELECT @@datadir`;

--echo #
--echo # Bug#49907: ALTER TABLE ... TRUNCATE PARTITION
--echo #            does not wait for locks on the table
--echo #
CREATE TABLE t1 (a INT)
ENGINE = InnoDB
PARTITION BY RANGE (a)
(PARTITION p0 VALUES LESS THAN (15),
 PARTITION pMax VALUES LESS THAN MAXVALUE);
INSERT INTO t1 VALUES (1), (11), (21), (33);
BEGIN;
DELETE FROM t1 WHERE a = 11;
--sorted_result
SELECT * FROM t1;

--connect (con1, localhost, root,,)
--echo # con1 (send)
--send
ALTER TABLE t1 TRUNCATE PARTITION pMax;

--connection default
--echo # con default
let $wait_condition=
  SELECT COUNT(*) = 1 FROM INFORMATION_SCHEMA.PROCESSLIST
    WHERE STATE = "Waiting for table metadata lock" AND
          INFO = "ALTER TABLE t1 TRUNCATE PARTITION pMax";
--source include/wait_condition.inc
--sorted_result
SELECT * FROM t1;
--echo # Commit will allow the TRUNCATE to finish
COMMIT;

--echo # con1 (reap)
--connection con1
--reap
--echo # con1 (disconnect)
--disconnect con1
--connection default
--echo # default connection
SELECT * FROM t1;
DROP TABLE t1;

--echo #
--echo # Bug#50561: ALTER PARTITIONS does not have adequate lock, breaks with
--echo #            concurrent I_S query
--echo #
--echo # This test is modified after WL#9814. The test case now cannot show
--echo # the partitions that are altered after I_S query execution is started.
--echo # That is because, the I_S system view execution sees snapshot (MVCC) of
--echo # DD metadata at the time the I_S system view select started processing.
--echo #
--echo # The test is updated to verify a case when a partition is removed after
--echo # I_S query starts executing. It is expected that I_S query report a
--echo # error and continue processing more rows.
--echo #

create table t1 (a int)
engine = innodb stats_persistent=0
partition by range (a)
(partition p0 values less than MAXVALUE);
insert into t1 values (1), (11), (21), (33);
SELECT * FROM t1;
SHOW CREATE TABLE t1;
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQLD_DATADIR/test

SET DEBUG_SYNC='before_open_in_IS_query SIGNAL parked WAIT_FOR open';
send
SELECT TABLE_SCHEMA, TABLE_NAME, PARTITION_NAME, PARTITION_ORDINAL_POSITION,
       PARTITION_DESCRIPTION, TABLE_ROWS
FROM INFORMATION_SCHEMA.PARTITIONS
WHERE TABLE_NAME = 't1' AND TABLE_SCHEMA = 'test';

connect (con1, localhost, root,,);
SET DEBUG_SYNC = 'now WAIT_FOR parked';
SET DEBUG_SYNC = 'alter_table_inplace_before_commit SIGNAL open WAIT_FOR alter';
--error 0,ER_TABLE_EXISTS_ERROR
send
ALTER TABLE t1 REORGANIZE PARTITION p0 INTO
(PARTITION p1 VALUES LESS THAN (10),
 PARTITION p10 VALUES LESS THAN MAXVALUE);

connect (con2, localhost, root,,);
let $wait_condition=
  SELECT COUNT(*) = 1 FROM information_schema.processlist
  WHERE state = "Waiting for table metadata lock" and
        info LIKE "SELECT TABLE_SCHEMA, TABLE_NAME, PARTITION_NAME%";
--source include/wait_condition.inc
SET DEBUG_SYNC = 'now SIGNAL alter';
disconnect con2;

connection con1;
--reap
disconnect con1;

connection default;
--reap
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQLD_DATADIR/test
SHOW CREATE TABLE t1;
SELECT * FROM t1;
drop table t1;
--list_files $MYSQLD_DATADIR/test
SET DEBUG_SYNC = 'RESET';
