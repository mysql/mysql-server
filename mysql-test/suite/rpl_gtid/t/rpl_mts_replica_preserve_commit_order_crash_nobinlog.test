# ==== Purpose ====
#
# Verifies that replica-preserve-commit-order flushes transactions in group.
#
# ==== Implementation ====
#
# 1. We start replica (server2) with the binary log turned off. Replica
#    also has replica_preserve_commit_order enabled and running with 4
#    applier workers.
# 2. On master binlog_transaction_dependency_tracking is set to COMMIT_ORDER.
# 3. On master add some data and verify that data is successfully
#    replicated to the slave. Also save a copy of slave redo log files to
#    bring the slave server in same state after restart later in step 11.
# 4. On server2 enable commit_order_manager_before_wait debug sync point
#    which will be activated for threads having @@session.timestamp 100,
#    101 and 102.
# 5. On master generate transactions (T1, T2 and T3) with timestamp
#    100, 101 and 102 which can be applied in parallel,
#    by setting same commit parents for all the inserts.
# 6. The slave threads executing inserts (added in step 5 on master)
#    wait on commit_order_manager_before_wait debug sync point.
#    Wait for all the threads to reach commit_order_manager_before_wait
#    debug sync point, so that they use same flush stage queue.
# 7. Enable after_commit_order_thread_becomes_leader and
#    before_follower_wait debug sync point which would make
#    leader (thread executing T1) and follower threads (thread executing
#    T2, T3) wait on their respective debug sync point.
#    Also release all the threads waiting on
#    commit_order_manager_before_wait debug sync point.
# 8. Now wait for leader (T1) and followers (T2, T3) to reach
#    after_commit_order_thread_becomes_leader and
#    before_follower_wait debug sync point. After leaders
#    and follower threads reach there respective debug sync point signal
#    follower threads to awake and continue.
# 9. Now enable commit_order_leader_before_ha_flush_logs debug sync point which
#    will make leader wait before it flush transactions of all waiting threads
#    to the storage engine. It also unblocks leader from
#    after_commit_order_thread_becomes_leader and waits for it to reach
#    commit_order_leader_before_ha_flush_logs debug sync point.
# 10. The server is crashed before leader flush transactions of
#     waiting threads to the storage engine.
# 11. When data inserted in step 5 is successfully received by slave,
#     server aborts before it flushes to disk. We wait for slave to
#     shutdown and after it is down we replace redo log files with files
#     saved in step 3 and then restart slave.
# 12. Verify data inserted in step 5 is not there on the slave as slave
#     was aborted before data was flushed.
# 13. Start replication on server2 and verify that missing data is now
#     successfully replicated to the slave.
# 14. Cleanup.

--source include/have_debug.inc
--source include/not_valgrind.inc

--let $rpl_skip_start_slave = 1
--source include/master-slave.inc
--source include/force_restart.inc


--echo
--echo # 1. We start replica (server2) with the binary log turned off. Replica
--echo #    also has replica_preserve_commit_order enabled and running with 4
--echo #    applier workers.
--echo

--source include/rpl_connection_slave.inc

CALL mtr.add_suppression("You need to use --log-bin to make --binlog-format work");

SET @save_replica_parallel_workers= @@global.replica_parallel_workers;
SET @save_replica_parallel_type= @@global.replica_parallel_type;
SET @save_replica_preserve_commit_order= @@global.replica_preserve_commit_order;

SET GLOBAL replica_parallel_type = 'LOGICAL_CLOCK';
SET GLOBAL replica_parallel_workers= 4;
SET GLOBAL replica_preserve_commit_order= ON;
--source include/start_slave.inc


--echo
--echo # 2. On master binlog_transaction_dependency_tracking is set to COMMIT_ORDER.
--echo

--source include/rpl_connection_master.inc

SET @save_binlog_transaction_dependency_tracking= @@global.binlog_transaction_dependency_tracking;
SET @@global.binlog_transaction_dependency_tracking = COMMIT_ORDER;


--echo
--echo # 3. On master add some data and verify that data is successfully
--echo #    replicated to the slave. Also save a copy of slave redo log files to
--echo #    bring the slave server in same state after restart later in step 11.
--echo

--source include/rpl_connection_master.inc

CREATE TABLE t1 (c1 INT PRIMARY KEY) ENGINE = InnoDB;
CREATE TABLE t2 (c1 INT PRIMARY KEY) ENGINE = InnoDB;
INSERT INTO t2 VALUES (1);

--source include/sync_slave_sql_with_master.inc

SET GLOBAL innodb_log_checkpoint_now = ON;
SET GLOBAL innodb_page_cleaner_disabled_debug = 1;
SET GLOBAL innodb_dict_stats_disabled_debug = 1;
SET GLOBAL innodb_master_thread_disabled_debug = 1;

--let $assert_text= Verify t2 contains only one row
--let $assert_cond= "[SELECT COUNT(*) COUNT from t2, COUNT, 1]" = "1"
--source include/assert.inc

--mkdir $MYSQL_TMP_DIR/#innodb_redo_tmp
--copy_files_wildcard $MYSQLTEST_VARDIR/mysqld.2/data/#innodb_redo $MYSQL_TMP_DIR/#innodb_redo_tmp #ib_redo*

--echo
--echo # 4. On server2 enable commit_order_manager_before_wait debug sync point
--echo #    which will be activated for threads having @@session.timestamp 100,
--echo #    101 and 102.
--echo

--source include/rpl_connection_slave.inc

--let $debug_point=syncpoint_commit_order_manager_before_wait_100
--source include/add_debug_point.inc

--let $debug_point=syncpoint_commit_order_manager_before_wait_101
--source include/add_debug_point.inc

--let $debug_point=syncpoint_commit_order_manager_before_wait_102
--source include/add_debug_point.inc


--echo
--echo # 5. On master generate transactions (T1, T2 and T3) with timestamp
--echo #    100, 101 and 102 which can be applied in parallel,
--echo #    by setting same commit parents for all the inserts.
--echo

--source include/rpl_connection_master.inc

# Make the following INSERTs have same commit parent. So they can be applied
# parallel on slave.
--let $debug_point=set_commit_parent_100
--source include/add_debug_point.inc

# transaction T1
--let $rpl_connection_name= server_1
--source include/rpl_connection.inc
SET TIMESTAMP = 100; BEGIN; INSERT INTO t1 VALUES (1); COMMIT;

# transaction T2
--connect(server1_1, localhost,root,,,$MASTER_MYPORT)
--let $rpl_connection_name= server1_1
--source include/rpl_connection.inc
SET TIMESTAMP = 101; BEGIN; INSERT INTO t2 VALUES (2); COMMIT;

# transaction T3
--connect(server1_1_1, localhost,root,,,$MASTER_MYPORT)
--let $rpl_connection_name= server1_1_1
--source include/rpl_connection.inc
SET TIMESTAMP = 102; BEGIN; INSERT INTO t1 VALUES (2); COMMIT;

--let $debug_point=set_commit_parent_100
--source include/remove_debug_point.inc


--echo
--echo # 6. The slave threads executing inserts (added in step 5 on master)
--echo #    wait on commit_order_manager_before_wait debug sync point.
--echo #    Wait for all the threads to reach commit_order_manager_before_wait
--echo #    debug sync point, so that they use same flush stage queue.
--echo

--source include/rpl_connection_slave.inc

--let $execute_list=100,101,102
--let $execute_sql_statement= SET DEBUG_SYNC= 'now WAIT_FOR reached_commit_order_manager_before_wait_REPLACE_STRING_VAL'
--source include/execute_list_command.inc


--echo
--echo # 7. Enable after_commit_order_thread_becomes_leader and
--echo #    before_follower_wait debug sync point which would make
--echo #    leader (thread executing T1) and follower threads (thread executing
--echo #    T2, T3) wait on their respective debug sync point.
--echo #    Also release all the threads waiting on
--echo #    commit_order_manager_before_wait debug sync point.
--echo

--let $debug_point=syncpoint_after_commit_order_thread_becomes_leader_100
--source include/add_debug_point.inc

--let $debug_point=syncpoint_before_follower_wait_101
--source include/add_debug_point.inc

--let $debug_point=syncpoint_before_follower_wait_102
--source include/add_debug_point.inc


--let $execute_list=100,101,102
--let $execute_sql_statement= SET DEBUG_SYNC= 'now SIGNAL continue_commit_order_manager_before_wait_REPLACE_STRING_VAL'
--source include/execute_list_command.inc


--echo
--echo # 8. Now wait for leader (T1) and followers (T2, T3) to reach
--echo #    after_commit_order_thread_becomes_leader and
--echo #    before_follower_wait debug sync point. After leaders
--echo #    and follower threads reach there respective debug sync point signal
--echo #    follower threads to awake and continue.
--echo

SET DEBUG_SYNC= "now WAIT_FOR reached_after_commit_order_thread_becomes_leader_100";

--let $execute_list=101,102
--let $execute_sql_statement= SET DEBUG_SYNC= 'now WAIT_FOR reached_before_follower_wait_REPLACE_STRING_VAL'
--source include/execute_list_command.inc


--let $execute_sql_statement= SET DEBUG_SYNC= 'now SIGNAL continue_before_follower_wait_REPLACE_STRING_VAL'
--source include/execute_list_command.inc


--echo
--echo # 9. Now enable commit_order_leader_before_ha_flush_logs debug sync point
--echo #    which will make leader wait before it flush transactions of all
--echo #    waiting threads to the storage engine. It also unblocks leader from
--echo #    after_commit_order_thread_becomes_leader and waits for it to reach
--echo #    commit_order_leader_before_ha_flush_logs debug sync point.
--echo

--let $debug_point=syncpoint_commit_order_leader_before_ha_flush_logs_100
--source include/add_debug_point.inc

SET DEBUG_SYNC= "now SIGNAL continue_after_commit_order_thread_becomes_leader_100";
SET DEBUG_SYNC= "now WAIT_FOR reached_commit_order_leader_before_ha_flush_logs_100";


--echo
--echo # 10. The server is crashed before leader flush transactions of
--echo #     waiting threads to the storage engine.
--echo

--source include/dbug_crash_safe.inc


--echo
--echo # 11. When data inserted in step 5 is successfully received by slave,
--echo #     server aborts before it flushes to disk. We wait for slave to
--echo #     shutdown and after it is down we replace redo log files with files
--echo #     saved in step 3 and then restart slave.
--echo

--source include/rpl_connection_slave.inc

--source include/wait_until_disconnected.inc

--remove_files_wildcard $MYSQLTEST_VARDIR/mysqld.2/data/#innodb_redo #ib_redo*
--copy_files_wildcard $MYSQL_TMP_DIR/#innodb_redo_tmp $MYSQLTEST_VARDIR/mysqld.2/data/#innodb_redo #ib_redo*
--remove_files_wildcard $MYSQL_TMP_DIR/#innodb_redo_tmp #ib_redo*
--rmdir $MYSQL_TMP_DIR/#innodb_redo_tmp

--let $restart_parameters=restart:--skip-replica-start --skip-log-bin --log-replica-updates=0
--exec echo "$restart_parameters" > $_expect_file_name
--enable_reconnect
--source include/wait_until_connected_again.inc
--disable_reconnect

--let $rpl_server_number= 2
--source include/rpl_reconnect.inc

--source include/rpl_connection_slave.inc


--echo
--echo # 12. Verify data inserted in step 5 is not there on the slave as slave
--echo #     was aborted before data was flushed.
--echo

--let $assert_text= Verify t1 does not contain any data
--let $assert_cond= "[SELECT COUNT(*) COUNT from t1, COUNT, 1]" = "0"
--source include/assert.inc

--let $assert_text= Verify t2 contain only one row
--let $assert_cond= "[SELECT COUNT(*) COUNT from t2, COUNT, 1]" = "1"
--source include/assert.inc


--echo
--echo # 13. Start replication on server2 and verify that missing data is now
--echo #     successfully replicated to the slave.
--echo

RESET SLAVE;

SET GLOBAL replica_parallel_type = 'LOGICAL_CLOCK';
SET GLOBAL replica_parallel_workers= 4;
SET GLOBAL replica_preserve_commit_order= ON;
--source include/start_slave.inc

--source include/rpl_connection_master.inc
--source include/sync_slave_sql_with_master.inc

--source include/rpl_connection_slave.inc
--let $assert_text= Verify t1 contains all the data
--let $assert_cond= "[SELECT COUNT(*) COUNT from t1, COUNT, 1]" = "2"
--source include/assert.inc

--let $assert_text= Verify t2 contains all the data
--let $assert_cond= "[SELECT COUNT(*) COUNT from t2, COUNT, 1]" = "2"
--source include/assert.inc


--echo
--echo # 14. Cleanup
--echo

--source include/rpl_connection_master.inc

DROP TABLE t1;
DROP TABLE t2;

SET GLOBAL binlog_transaction_dependency_tracking=@save_binlog_transaction_dependency_tracking;

--source include/sync_slave_sql_with_master.inc
--source include/rpl_end.inc
