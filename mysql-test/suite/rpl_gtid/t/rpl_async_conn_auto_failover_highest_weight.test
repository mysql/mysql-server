# ==== Purpose ====
#
# WL#12649: Automatic reconnection for Async replication between InnoDB Clusters
#
# It verifies that replica does does not connect to unhealthy sender
# during auto-failover.
#
# ==== Implementation ====
#
# 1. Add suppressions.
# 2. Verify Asynchronous Replication Connection Failover is initially
#    disabled. Also verify Asynchronous Replication is initially
#    connected to server_1.
# 3. Enable Asynchronous Replication Connection Failover and set retry
#    count and retry time to 1 and verify its enabled in
#    performance_schema.replication_connection_configuration.
# 4. Add two asynchronous connection failover servers including
#    server 1 to which it is currently connected. Verify that they are
#    inserted successfully in
#    performance_schema.replication_asynchronous_connection_failover.
# 5. Stop server 1.
# 6. Verify connection is not attempted with server-1 when it is offline.
#    Verify connection failover to server-3.
# 7. Start server-1 again.
#    Verify connection is fail over to server-1 when it is online.
# 8. Clean up
#

--let $rpl_server_count=3
--let $use_gtids= 1
--source include/master-slave.inc

--echo #
--echo # 1. Add suppressions.
--echo #

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

SET SESSION sql_log_bin= 0;
call mtr.add_suppression("The master's UUID has changed, although this should not happen unless you have changed it manually. The old UUID was.*");
SET SESSION sql_log_bin= 1;


--echo #
--echo # 2. Verify Asynchronous Replication Connection Failover is initially
--echo #    disabled. Also verify Asynchronous Replication is initially
--echo #    connected to server_1.
--echo #

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--let $assert_text= 'Asynchronous Replication Connection Failover is disabled'
--let $assert_cond= [SELECT SOURCE_CONNECTION_AUTO_FAILOVER FROM performance_schema.replication_connection_configuration, SOURCE_CONNECTION_AUTO_FAILOVER, 1] = 0
--source include/assert.inc

--let $wait_condition= SELECT COUNT(*) = 1 FROM performance_schema.replication_connection_configuration WHERE CHANNEL_NAME='' AND PORT=$MASTER_MYPORT
--source include/wait_condition.inc


--echo #
--echo # 3. Enable Asynchronous Replication Connection Failover and set retry
--echo #    count and retry time to 1 and verify its enabled in
--echo #    performance_schema.replication_connection_configuration.
--echo #

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--source include/stop_slave.inc
CHANGE REPLICATION SOURCE TO SOURCE_CONNECT_RETRY=1, SOURCE_RETRY_COUNT=1, SOURCE_CONNECTION_AUTO_FAILOVER=1;
--source include/start_slave.inc

# Verify Asynchronous Replication Connection Failover is enabled.
--let $assert_text= 'Asynchronous Replication Connection Failover is enabled'
--let $assert_cond= [SELECT SOURCE_CONNECTION_AUTO_FAILOVER FROM performance_schema.replication_connection_configuration, SOURCE_CONNECTION_AUTO_FAILOVER, 1] = 1
--source include/assert.inc


--echo #
--echo # 4. Add two asynchronous connection failover servers including
--echo #    server 1 to which it is currently connected. Verify that they are
--echo #    inserted successfully in
--echo #    performance_schema.replication_asynchronous_connection_failover.
--echo #

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--replace_result $SERVER_MYPORT_1 SERVER_MYPORT_1
--eval SELECT asynchronous_connection_failover_add_source('', '127.0.0.1', $SERVER_MYPORT_1, '', 70);
--replace_result $SERVER_MYPORT_3 SERVER_MYPORT_3
--eval SELECT asynchronous_connection_failover_add_source('', '127.0.0.1', $SERVER_MYPORT_3, '', 50);

--let $assert_text= 'There are two rows in performance_schema.replication_asynchronous_connection_failover'
--let $assert_cond= [SELECT COUNT(*) count FROM performance_schema.replication_asynchronous_connection_failover, count, 1] = 2
--source include/assert.inc


--echo #
--echo # 5. Stop server 1.
--echo #

--let $rpl_server_number= 1
--source include/rpl_stop_server.inc

--echo #
--echo # 6. Verify connection is not attempted with server-1 when it is offline.
--echo #    Verify connection failover to server-3.
--echo #

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--let $wait_condition= SELECT COUNT(*) = 1 FROM performance_schema.replication_connection_configuration WHERE CHANNEL_NAME='' AND PORT=$SERVER_MYPORT_3
--source include/wait_condition.inc

--sleep 30

--let $assert_text= 'Asynch connection failover is not attempted with off single-server.'
--let $assert_cond= "[SELECT COUNT(*) as count FROM performance_schema.error_log WHERE error_code=\'MY-010563\' AND data LIKE \"%Slave I/O thread for channel \'\' killed while connecting to master%\", count, 1]" = "1"
--source include/assert.inc

--echo #
--echo # 7. Start server-1 again.
--echo #    Verify connection is fail over to server-1 when it is online.
--echo #


--let $rpl_server_number=1
--source include/rpl_start_server.inc

--let $rpl_server_number= 1
--source include/rpl_reconnect.inc

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--let $wait_condition= SELECT COUNT(*) = 1 FROM performance_schema.replication_connection_configuration WHERE CHANNEL_NAME='' AND PORT=$SERVER_MYPORT_1
--source include/wait_condition.inc


--echo #
--echo # 8. Clean up
--echo #

--let $rpl_connection_name= server_2
--source include/rpl_connection.inc

--source include/stop_slave.inc
--let $rpl_reset_slave_all= 1
--source include/rpl_reset_slave.inc
--let $rpl_reset_slave_all=

--replace_result $SERVER_MYPORT_1 SERVER_MYPORT_1
--eval SELECT asynchronous_connection_failover_delete_source('', '127.0.0.1', $SERVER_MYPORT_1, '');
--replace_result $SERVER_MYPORT_3 SERVER_MYPORT_3
--eval SELECT asynchronous_connection_failover_delete_source('', '127.0.0.1', $SERVER_MYPORT_3, '');

--let $rpl_skip_sync= 1
--let $rpl_only_running_threads= 1
--source include/rpl_end.inc
