# === Purpose ===
#
# This test checks that the information belonging to a skipped transaction that
# was previously being retried by the slave will not populate the
# LAST_APPLIED_TRANSACTION* fields in the performance_schema table
# replication_applier_status_by_worker.
#
# === Implementation ===
#
# We start by creating a transaction on the slave that will block the
# transaction replicating from the master. We wait until the transaction from
# the master reaches the maximum number of retries. Then, we check that the
# master transaction was not applied in the slave and store the information
# about the last applied transaction from the performance_schema table
# replication_applier_status_by_worker. We restart the applier thread so that
# the master blocked transaction GTID can be skipped and check that the
# information about the last applied transaction was not changed.
#
# === References ===
#
# WL#9131 Add RETRIES field to replication_applier_status_by_worker P_S table
# BUG#28177448 SKIPPED TRANSACTION WHICH FAILED EARLIER, POPULATES LAST_APPLIED_TRANSACTION_*

# the table performance_schema.replication_applier_status_by_worker can only
# have one row for this test to work correctly
--source include/not_mts_slave_parallel_workers.inc
# the test is binlog format agnostic
--source include/have_binlog_format_row.inc
--source include/master-slave.inc
--source include/rpl_connection_slave.inc
CALL mtr.add_suppression(".* Could not execute Write_rows event on table test.*");
SET @saved_innodb_lock_wait_timeout = @@GLOBAL.innodb_lock_wait_timeout;
SET @saved_slave_transaction_retries = @@GLOBAL.slave_transaction_retries;
SET @@GLOBAL.slave_transaction_retries = 10;
SET @@GLOBAL.innodb_lock_wait_timeout = 2;


--source include/rpl_connection_master.inc
CREATE TABLE t1 (a INT UNIQUE);
--source include/sync_slave_sql_with_master.inc

# start a transaction on the slave that locks t1
BEGIN;
INSERT INTO t1 VALUES (1);

# execute a transaction on the master that will be blocked in the slave
--source include/rpl_connection_master.inc
SET @@SESSION.GTID_NEXT = 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:1';
INSERT INTO t1 VALUES (1);
SET @@SESSION.GTID_NEXT = 'AUTOMATIC';

--source include/rpl_connection_slave.inc
# wait for slave_transaction_retries to reach the maximum retry value
--let $slave_sql_errno = convert_error(ER_LOCK_WAIT_TIMEOUT)
--source include/wait_for_slave_sql_to_stop.inc

--let $assert_cond = [SELECT GTID_SUBSET("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:1", @@GLOBAL.GTID_EXECUTED)] = 0
--let $assert_text = The master transaction should not be in the slave GTID_EXECUTED set
--source include/assert.inc

# store the last applied GTID before we restart the applier thread
--let $ps_table = performance_schema.replication_applier_status_by_worker
--let $last_applied_trx = query_get_value(SELECT LAST_APPLIED_TRANSACTION FROM $ps_table, LAST_APPLIED_TRANSACTION, 1)
--let $last_applied_trx_OCT = query_get_value(SELECT LAST_APPLIED_TRANSACTION_START_APPLY_TIMESTAMP FROM $ps_table, LAST_APPLIED_TRANSACTION_START_APPLY_TIMESTAMP, 1)
--let $last_applied_trx_ICT = query_get_value(SELECT LAST_APPLIED_TRANSACTION_START_APPLY_TIMESTAMP FROM $ps_table, LAST_APPLIED_TRANSACTION_START_APPLY_TIMESTAMP, 1)
--let $last_applied_trx_start_apply = query_get_value(SELECT LAST_APPLIED_TRANSACTION_START_APPLY_TIMESTAMP FROM $ps_table, LAST_APPLIED_TRANSACTION_START_APPLY_TIMESTAMP, 1)
--let $last_applied_trx_end_apply = query_get_value(SELECT LAST_APPLIED_TRANSACTION_END_APPLY_TIMESTAMP FROM $ps_table, LAST_APPLIED_TRANSACTION_END_APPLY_TIMESTAMP, 1)
--let $last_applied_trx_retries_count = query_get_value(SELECT LAST_APPLIED_TRANSACTION_RETRIES_COUNT FROM $ps_table, LAST_APPLIED_TRANSACTION_RETRIES_COUNT, 1)
--let $last_applied_trx_errno = query_get_value(SELECT LAST_APPLIED_TRANSACTION_LAST_TRANSIENT_ERROR_NUMBER FROM $ps_table, LAST_APPLIED_TRANSACTION_LAST_TRANSIENT_ERROR_NUMBER, 1)
--let $last_applied_trx_errmsg = query_get_value(SELECT LAST_APPLIED_TRANSACTION_LAST_TRANSIENT_ERROR_MESSAGE FROM $ps_table, LAST_APPLIED_TRANSACTION_LAST_TRANSIENT_ERROR_MESSAGE, 1)
--let $last_applied_trx_errts = query_get_value(SELECT LAST_APPLIED_TRANSACTION_LAST_TRANSIENT_ERROR_TIMESTAMP FROM $ps_table, LAST_APPLIED_TRANSACTION_LAST_TRANSIENT_ERROR_TIMESTAMP, 1)

COMMIT;
# skip the master transaction because the table has already been updated by the
# slave transaction
SET @@SESSION.GTID_NEXT = 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:1';
COMMIT;
SET @@SESSION.GTID_NEXT = 'AUTOMATIC';
--source include/start_slave_sql.inc

--source include/rpl_connection_master.inc
--source include/sync_slave_sql_with_master.inc

--let $assert_cond = [SELECT GTID_SUBSET("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:1", @@GLOBAL.GTID_EXECUTED)] = 1
--let $assert_text = The master transaction should be in the slave GTID_EXECUTED set
--source include/assert.inc

--let $new_last_applied_trx = query_get_value(SELECT LAST_APPLIED_TRANSACTION FROM $ps_table, LAST_APPLIED_TRANSACTION, 1)
--let $new_last_applied_trx_OCT = query_get_value(SELECT LAST_APPLIED_TRANSACTION_START_APPLY_TIMESTAMP FROM $ps_table, LAST_APPLIED_TRANSACTION_START_APPLY_TIMESTAMP, 1)
--let $new_last_applied_trx_ICT = query_get_value(SELECT LAST_APPLIED_TRANSACTION_START_APPLY_TIMESTAMP FROM $ps_table, LAST_APPLIED_TRANSACTION_START_APPLY_TIMESTAMP, 1)
--let $new_last_applied_trx_start_apply = query_get_value(SELECT LAST_APPLIED_TRANSACTION_START_APPLY_TIMESTAMP FROM $ps_table, LAST_APPLIED_TRANSACTION_START_APPLY_TIMESTAMP, 1)
--let $new_last_applied_trx_end_apply = query_get_value(SELECT LAST_APPLIED_TRANSACTION_END_APPLY_TIMESTAMP FROM $ps_table, LAST_APPLIED_TRANSACTION_END_APPLY_TIMESTAMP, 1)
--let $new_last_applied_trx_retries_count = query_get_value(SELECT LAST_APPLIED_TRANSACTION_RETRIES_COUNT FROM $ps_table, LAST_APPLIED_TRANSACTION_RETRIES_COUNT, 1)
--let $new_last_applied_trx_errno = query_get_value(SELECT LAST_APPLIED_TRANSACTION_LAST_TRANSIENT_ERROR_NUMBER FROM $ps_table, LAST_APPLIED_TRANSACTION_LAST_TRANSIENT_ERROR_NUMBER, 1)
--let $new_last_applied_trx_errmsg = query_get_value(SELECT LAST_APPLIED_TRANSACTION_LAST_TRANSIENT_ERROR_MESSAGE FROM $ps_table, LAST_APPLIED_TRANSACTION_LAST_TRANSIENT_ERROR_MESSAGE, 1)
--let $new_last_applied_trx_errts = query_get_value(SELECT LAST_APPLIED_TRANSACTION_LAST_TRANSIENT_ERROR_TIMESTAMP FROM $ps_table, LAST_APPLIED_TRANSACTION_LAST_TRANSIENT_ERROR_TIMESTAMP, 1)

--let $assert_cond = "$last_applied_trx" = "$new_last_applied_trx"
--let $assert_text = The GTID information about the last applied transaction was not changed
--source include/assert.inc

--let $assert_cond = "$last_applied_trx_OCT" = "$new_last_applied_trx_OCT"
--let $assert_text = The OCT information about the last applied transaction was not changed
--source include/assert.inc

--let $assert_cond = "$last_applied_trx_ICT" = "$new_last_applied_trx_ICT"
--let $assert_text = The ICT information about the last applied transaction was not changed
--source include/assert.inc

--let $assert_cond = "$last_applied_trx_start_apply" = "$new_last_applied_trx_start_apply"
--let $assert_text = The start apply timestamp information about the last applied transaction was not changed
--source include/assert.inc

--let $assert_cond = "$last_applied_trx_end_apply" = "$new_last_applied_trx_end_apply"
--let $assert_text = The end apply timestamp information about the last applied transaction was not changed
--source include/assert.inc

--let $assert_cond = "$last_applied_trx_retries_count" = "$new_last_applied_trx_retries_count"
--let $assert_text = The retries count information about the last applied transaction was not changed
--source include/assert.inc

--let $assert_cond = "$last_applied_trx_errno" = "$new_last_applied_trx_errno"
--let $assert_text = The last transient error number information about the last applied transaction was not changed
--source include/assert.inc

--let $assert_cond = "$last_applied_trx_errmsg" = "$new_last_applied_trx_errmsg"
--let $assert_text = The last transient error message information about the last applied transaction was not changed
--source include/assert.inc

--let $assert_cond = "$last_applied_trx_errts" = "$new_last_applied_trx_errts"
--let $assert_text = The last transient error timestamp information about the last applied transaction was not changed
--source include/assert.inc

# cleanup
SET @@GLOBAL.innodb_lock_wait_timeout = @saved_innodb_lock_wait_timeout;
SET @@GLOBAL.slave_transaction_retries = @saved_slave_transaction_retries;
--source include/rpl_connection_master.inc
DROP TABLE t1;
--source include/sync_slave_sql_with_master.inc
--source include/rpl_end.inc
