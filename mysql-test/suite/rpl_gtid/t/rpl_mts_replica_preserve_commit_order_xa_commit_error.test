# ==== Purpose ====
#
# Verifies that replica-preserve-commit-order maintains the commit order and stops
# newer workers from committing if one of the older worker (executing XA COMMIT)
# have errored out.
#
# ==== Implementation ====
#
# 1. We start replica (server2) with replica_preserve_commit_order
#    enabled and running with 2 applier workers.
#
# 2. On slave, we add the same first insert statement which will be applied on
#    master in step 3, but we do not commit it, to take a lock on row and block
#    slave sql thread when transaction are applied on master in setp 3.
#
# 3. The master generates some transactions (including XA PREPARE transaction)
#    which can be applied in parallel, by setting same commit parents for all
#    the inserts.
#
# 4. On slave, we verify that all the other inserts are also blocked and waiting
#    for first insert to commit i.e. applier threads are in stage 'Waiting for
#    preceding transaction to commit' and their is no data in the table.
#
# 5. On slave, we rollback the first insert executed in step 2, and verify the
#    transactions are applied on table t2, but XA transaction still in prepared
#    stage so table t1 has two rows.
#
# 6. On slave, we enable syncpoint_commit_order_manager_after_wait_100
#    and rpl_fake_commit_order_deadlock_for_timestamp_100 debug sync point and
#    then execute XA COMMIT on master. The
#    rpl_fake_commit_order_deadlock_for_timestamp_100 debug sync point would
#    make XA COMMIT fail with ER_UNKNOWN_ERROR error. Add few more insert on
#    master after XA COMMIT.
#
# 7. On slave, wait until slave sql thread get ER_UNKNOWN_ERROR error.
#    Verify table t1 has only two rows which were inserted before
#    XA transaction.
#
# 8. On slave, remove syncpoint_commit_order_manager_after_wait_100 and
#    rpl_fake_commit_order_deadlock_for_timestamp_100 debug sync points, and
#    then restart slave sql thread. Verify all data is synced to slave.
#
# 9. Cleanup.

--source include/have_debug.inc
--source include/have_debug_sync.inc

--let $rpl_skip_start_slave = 1
--source include/master-slave.inc
--let $master_uuid=`SELECT @@SERVER_UUID`
CALL mtr.add_suppression("Statement is unsafe because it is being used inside a XA transaction");

--source include/rpl_connection_slave.inc
--source include/gtid_utils.inc
CALL mtr.add_suppression(".*slave coordinator and worker threads are stopped.*");
CALL mtr.add_suppression("Could not execute Write_rows event on table test.*");
CALL mtr.add_suppression("Worker .* failed executing transaction");


--source include/rpl_connection_master.inc
--let $mts_spco_start_statement = CREATE TABLE t1 (c1 INT PRIMARY KEY) ENGINE = InnoDB; CREATE TABLE t2 (c1 INT PRIMARY KEY) ENGINE = InnoDB;

--let $mts_spco_block_statement = BEGIN; INSERT INTO t1 VALUES (3);

--let $mts_spco_parallel_statement1 = INSERT INTO t1 VALUES (1); INSERT INTO t1 VALUES (2); XA START 'xa_test_xid1'; INSERT INTO t1 VALUES (3); INSERT INTO t1 VALUES (4); XA END 'xa_test_xid1'; XA PREPARE 'xa_test_xid1';
--let $mts_spco_parallel_statement2 = BEGIN; INSERT INTO t2 VALUES (1); INSERT INTO t2 VALUES (2); COMMIT;

--let $mts_spco_assert_text1 = Verify table t1 has two rows
--let $mts_spco_assert_cond1 = "[SELECT count(*) COUNT FROM t1, COUNT, 1]" = "2"

--let $mts_spco_assert_text2 = Verify table t2 is empty
--let $mts_spco_assert_cond2 = "[SELECT count(*) COUNT FROM t2, COUNT, 1]" = "0"

--let $mts_spco_assert_text3 = Verify XA Transaction is active
--let $mts_spco_assert_cond3 = "[SELECT count(XID_GTRID) COUNT FROM performance_schema.events_transactions_current WHERE XID_GTRID = \'xa_test_xid1\', COUNT, 1]" = "1"

--let $mts_spco_rollback_statement = ROLLBACK;
--source extra/rpl_tests/rpl_mts_replica_preserve_commit_order_nobinlog.inc


--connection server_2
--let $wait_condition= SELECT count(*) = 2 FROM t2
--source include/wait_condition_or_abort.inc

--let $assert_text= Verify table t1 has two rows
--let $assert_cond= "[SELECT count(*) COUNT FROM t1, COUNT, 1]" = "2"
--source include/assert.inc


--echo
--echo # On slave, we enable syncpoint_commit_order_manager_after_wait_100
--echo # and rpl_fake_commit_order_deadlock_for_timestamp_100 debug sync point
--echo # and then execute XA COMMIT on master. The
--echo # rpl_fake_commit_order_deadlock_for_timestamp_100 debug sync point would
--echo # make XA COMMIT fail with ER_UNKNOWN_ERROR error. Add few more insert on
--echo # master after XA COMMIT.
--echo

--connection server_2
# this will make XA COMMIT block
--let $debug_point=syncpoint_commit_order_manager_after_wait_100
--source include/add_debug_point.inc

--let $debug_point=rpl_fake_commit_order_deadlock_for_timestamp_100
--source include/add_debug_point.inc

# wait till XA transaction can reach prepared state
--replace_result $master_uuid MASTER_UUID
--eval SELECT WAIT_FOR_EXECUTED_GTID_SET('$master_uuid:1-7')
--let $gtid_executed1= `SELECT @@GLOBAL.GTID_EXECUTED`

--source include/rpl_connection_master.inc
SET TIMESTAMP = 100; XA COMMIT 'xa_test_xid1';

--connection server_1
BEGIN;
INSERT INTO t1 VALUES (5);
INSERT INTO t1 VALUES (6);
COMMIT;

--echo
--echo # On slave, wait until slave sql thread get ER_UNKNOWN_ERROR error.
--echo # Verify table t1 has only two rows which were inserted before
--echo # XA transaction.
--echo

--source include/rpl_connection_slave.inc

--let $slave_sql_errno=1105 # ER_UNKNOWN_ERROR
--source include/wait_for_slave_sql_error.inc

--let $assert_text= Verify table t1 has two rows
--let $assert_cond= "[SELECT count(*) COUNT FROM t1, COUNT, 1]" = "2"
--source include/assert.inc

--let $gtid_executed2= `SELECT @@GLOBAL.GTID_EXECUTED`
--let $is_gtid_equal=`SELECT GTID_IS_EQUAL('$gtid_executed1', '$gtid_executed2') != 0`

--let $assert_cond= $is_gtid_equal = 1
--let $assert_text= No additional transaction is added on slave
--source include/assert.inc


--echo
--echo # On slave, remove syncpoint_commit_order_manager_after_wait_100 and
--echo # rpl_fake_commit_order_deadlock_for_timestamp_100 debug sync points, and
--echo # then restart slave sql thread. Verify all data is synced to slave.
--echo

# unblock so XA COMMIT can resume
--connection server_2
SET DEBUG_SYNC= 'now SIGNAL continue_commit_order_manager_after_wait_100';

--let $debug_point=syncpoint_commit_order_manager_after_wait_100
--source include/remove_debug_point.inc

--let $debug_point=rpl_fake_commit_order_deadlock_for_timestamp_100
--source include/remove_debug_point.inc

--source include/start_slave_sql.inc

--source include/rpl_connection_master.inc
--source include/sync_slave_sql_with_master.inc

--let $assert_text= Verify table t1 has six rows
--let $assert_cond= "[SELECT count(*) COUNT FROM t1, COUNT, 1]" = "6"
--source include/assert.inc

--echo
--echo # Cleanup
--echo

--source include/rpl_connection_master.inc

DROP TABLE t1;
DROP TABLE t2;

SET GLOBAL binlog_transaction_dependency_tracking=@save_binlog_transaction_dependency_tracking;

--source include/sync_slave_sql_with_master.inc
--source include/stop_slave.inc

SET GLOBAL replica_parallel_type= @save_replica_parallel_type;
--disable_warnings
SET GLOBAL replica_parallel_workers= @save_replica_parallel_workers;
--enable_warnings
SET GLOBAL replica_preserve_commit_order= @save_replica_preserve_commit_order;
--source include/start_slave.inc

--source include/gtid_utils_end.inc
--source include/rpl_end.inc
