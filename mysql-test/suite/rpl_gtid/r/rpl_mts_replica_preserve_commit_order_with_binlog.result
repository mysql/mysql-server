include/master-slave.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection master]

# 1. We start replica (server2) with the binary log turned off. Replica
#    also has replica_preserve_commit_order enabled and running with 4
#    applier workers.

[connection slave]
CALL mtr.add_suppression("You need to use --log-bin to make --binlog-format work");
SET @save_replica_parallel_workers= @@global.replica_parallel_workers;
SET @save_replica_parallel_type= @@global.replica_parallel_type;
Warnings:
Warning	1287	'@@replica_parallel_type' is deprecated and will be removed in a future release.
SET @save_replica_preserve_commit_order= @@global.replica_preserve_commit_order;
SET GLOBAL replica_parallel_type = 'LOGICAL_CLOCK';
Warnings:
Warning	1287	'@@replica_parallel_type' is deprecated and will be removed in a future release.
SET GLOBAL replica_parallel_workers= 4;
SET GLOBAL replica_preserve_commit_order= ON;
include/start_slave.inc

# 2. On master binlog_transaction_dependency_tracking
#    is set to COMMIT_ORDER.

[connection master]
SET @save_binlog_transaction_dependency_tracking= @@global.binlog_transaction_dependency_tracking;
SET @@global.binlog_transaction_dependency_tracking = COMMIT_ORDER;

# 3. On master create table t1 and t2 and sync it to slave.

[connection master]
CREATE TABLE t1 (c1 INT PRIMARY KEY) ENGINE = InnoDB;
CREATE TABLE t2 (c1 INT PRIMARY KEY) ENGINE = InnoDB;
INSERT INTO t2 VALUES (1);
include/sync_slave_sql_with_master.inc
include/assert.inc [Verify t2 contains only one row]

# 4. On server2 enable after_commit_order_thread_becomes_leader,
#    before_binlog_leader_wait and before_follower_wait
#    debug sync point which will be activated for threads having
#    @@session.timestamp 100, 101 and 102 respectively.

[connection slave]
# Adding debug point 'syncpoint_after_commit_order_thread_becomes_leader_100' to @@GLOBAL.debug
# Adding debug point 'syncpoint_before_binlog_leader_wait_101' to @@GLOBAL.debug
# Adding debug point 'syncpoint_before_follower_wait_102' to @@GLOBAL.debug
# Adding debug point 'syncpoint_before_commit_order_leader_waits_for_binlog_leader_100' to @@GLOBAL.debug

# 5. On master generate transaction T1 with timestamp 100 and wait for it
#    to reach after_commit_order_thread_becomes_leader debug sync point
#    on slave. The thread executing transaction T1 will be choosen as
#    leader for for COMMIT_ORDER_FLUSH_STAGE stage.

[connection master]
# Adding debug point 'set_commit_parent_100' to @@GLOBAL.debug
[connection server_1]
SET TIMESTAMP = 100;
BEGIN;
INSERT INTO t1 VALUES (1);
COMMIT;
# Removing debug point 'set_commit_parent_100' from @@GLOBAL.debug
[connection slave]
SET DEBUG_SYNC= "now WAIT_FOR reached_after_commit_order_thread_becomes_leader_100";

# 6. On slave generate transactions T2 and T3 with timestamp 101 and 102
#    which can be applied in parallel, by setting same commit parents
#    for all the inserts. And wait for T2 to reach
#    before_binlog_leader_wait debug sync point. The thread executing
#    transaction T2 will be choosen as leader for BINLOG_FLUSH_STAGE
#    stage.

# Adding debug point 'set_commit_parent_100' to @@GLOBAL.debug
[connection slave22]
SET TIMESTAMP = 101; BEGIN; INSERT INTO t2 VALUES (2); COMMIT;;
[connection slave]
SET DEBUG_SYNC= "now WAIT_FOR reached_before_binlog_leader_wait_101";
[connection slave222]
SET TIMESTAMP = 102; BEGIN; INSERT INTO t1 VALUES (2); COMMIT;;
[connection slave]
# Removing debug point 'set_commit_parent_100' from @@GLOBAL.debug

# 7. We signal after_commit_order_thread_becomes_leader, so leader
#    switches from commit order leader (T1) to binlog leader(T2). We
#    wait for thread executing T1 transaction to reach
#    before_commit_order_leader_waits_for_binlog_leader. The new leader
#    is thread executing transaction T2 binlog leader is verified by
#    waiting for after_binlog_leader_wait. Before binlog leader thread
#    (T2) reaches after_binlog_leader_wait it signals next transaction T3
#    which would become follower as leader is still blocked on
#    after_binlog_leader_wait debug sync point.

# Adding debug point 'syncpoint_after_binlog_leader_wait_101' to @@GLOBAL.debug
SET DEBUG_SYNC= "now SIGNAL continue_before_binlog_leader_wait_101";
SET DEBUG_SYNC= "now WAIT_FOR reached_before_follower_wait_102";
SET DEBUG_SYNC= "now SIGNAL continue_after_commit_order_thread_becomes_leader_100";
SET DEBUG_SYNC= "now WAIT_FOR reached_before_commit_order_leader_waits_for_binlog_leader_100";
SET DEBUG_SYNC= "now WAIT_FOR reached_after_binlog_leader_wait_101";

# 8. The thread executing transaction T1, T2 and T3 are waiting on debug
#    sync point before_commit_order_leader_waits_for_binlog_leader,
#    after_binlog_leader_wait and before_follower_wait. We unblock all of
#    them, so that leader (T2) can flush for T1 and T3.

SET DEBUG_SYNC= "now SIGNAL continue_after_binlog_leader_wait_101";
SET DEBUG_SYNC= "now SIGNAL continue_before_follower_wait_102";
SET DEBUG_SYNC= "now SIGNAL continue_before_commit_order_leader_waits_for_binlog_leader_100";

# 9. On slave disable after_binlog_leader_wait,
#    after_commit_order_thread_becomes_leader, before_binlog_leader_wait
#    and before_follower_wait debug sync points.

# Removing debug point 'syncpoint_after_binlog_leader_wait_101' from @@GLOBAL.debug
# Removing debug point 'syncpoint_after_commit_order_thread_becomes_leader_100' from @@GLOBAL.debug
# Removing debug point 'syncpoint_before_binlog_leader_wait_101' from @@GLOBAL.debug
# Removing debug point 'syncpoint_before_follower_wait_102' from @@GLOBAL.debug
# Removing debug point 'syncpoint_before_commit_order_leader_waits_for_binlog_leader_100' from @@GLOBAL.debug

# 10. Perform reap for send executed earlier.

[connection slave22]
[connection slave222]

# 11. Verify data inserted in step 5 and 6 is there on the slave.

[connection slave]

# 12. Cleanup

[connection master]
DROP TABLE t1;
DROP TABLE t2;
SET GLOBAL binlog_transaction_dependency_tracking=@save_binlog_transaction_dependency_tracking;
include/sync_slave_sql_with_master.inc
include/stop_slave.inc
SET GLOBAL replica_parallel_type = @save_replica_parallel_type;
Warnings:
Warning	1287	'@@replica_parallel_type' is deprecated and will be removed in a future release.
SET GLOBAL replica_parallel_workers = @save_replica_parallel_workers;
SET GLOBAL replica_preserve_commit_order = @save_replica_preserve_commit_order;
include/rpl_end.inc
