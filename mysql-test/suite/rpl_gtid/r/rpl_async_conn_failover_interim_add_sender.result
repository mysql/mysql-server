include/master-slave.inc [rpl_server_count=3]
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection master]
#
# 1. Insert data on server1 and verify that its synced to the server 2.
#
[connection server_1]
CREATE TABLE t1 (a INT) ENGINE = InnoDB;
INSERT INTO t1 VALUES (1);
include/rpl_sync.inc
[connection server_2]
SET SESSION sql_log_bin= 0;
call mtr.add_suppression("The master's UUID has changed, although this should not happen unless you have changed it manually. The old UUID was.*");
SET SESSION sql_log_bin= 1;
include/assert.inc ['There is one row on replica']
#
# 2. Verify Asynchronous Replication Connection Failover is initially
#    disabled. Also verify Asynchronous Replication is initially
#    connected to server 3.
#
include/assert.inc ['Asynchronous Replication Connection Failover is disabled']
#
# 3. Enable Asynchronous Replication Connection Failover and set retry
#    count and retry time to 2 and verify its enabled in
#    performance_schema.replication_connection_configuration.
#
include/stop_slave.inc
CHANGE REPLICATION SOURCE TO SOURCE_CONNECT_RETRY=1, SOURCE_RETRY_COUNT=2, SOURCE_CONNECTION_AUTO_FAILOVER=1;
include/start_slave.inc
include/assert.inc ['Asynchronous Replication Connection Failover is enabled']
#
# 4. Add three asynchronous connection failover servers including
#    server 1 to which it is currently connected. Verify that they are
#    inserted successfully in
#    performance_schema.replication_asynchronous_connection_failover.
#
SELECT asynchronous_connection_failover_add_source('', '127.0.0.1', SERVER_MYPORT_1, '', 70);;
asynchronous_connection_failover_add_source('', '127.0.0.1', SERVER_MYPORT_1, '', 70)
The UDF asynchronous_connection_failover_add_source() executed successfully.
SELECT asynchronous_connection_failover_add_source('', '127.0.0.1', SERVER_MYPORT_3, '', 50);;
asynchronous_connection_failover_add_source('', '127.0.0.1', SERVER_MYPORT_3, '', 50)
The UDF asynchronous_connection_failover_add_source() executed successfully.
SELECT asynchronous_connection_failover_add_source('', '127.0.0.1', 40001, '', 40);;
asynchronous_connection_failover_add_source('', '127.0.0.1', 40001, '', 40)
The UDF asynchronous_connection_failover_add_source() executed successfully.
include/assert.inc ['There are three rows in performance_schema.replication_asynchronous_connection_failover']
#
# 5. Initialize async_conn_failover_wait_new_sender dbug sync point
#    and stop server 2. The initialized dbug sync point will block replica
#    IO thread after getting sender list from
#    performance_schema.replication_asynchronous_connection_failover. Add
#    one more sender configuration detail and verify total four sender
#    details are inserted. It also verifies in
#    async_conn_failover_wait_new_sender dbug point that sender list has
#    total three rows i.e. server1, 3 and 4. After stopping server1 there
#    there were no senders to connect so it resets and would consider all
#    according to wl#12649 FR8.
#
SET @old_debug= @@global.debug;
SET GLOBAL debug = '+d,async_conn_failover_wait_new_sender, async_conn_failover_check_interim_sender';
include/rpl_stop_server.inc [server_number=1]
[connection server_2]
SET DEBUG_SYNC= 'now WAIT_FOR wait_for_new_sender_selection';
SELECT asynchronous_connection_failover_add_source('', '127.0.0.1', 50001, '', 80);;
asynchronous_connection_failover_add_source('', '127.0.0.1', 50001, '', 80)
The UDF asynchronous_connection_failover_add_source() executed successfully.
include/assert.inc ['There are four rows in performance_schema.replication_asynchronous_connection_failover']
#
# 6. Now unblock async_conn_failover_wait_new_sender dbug sync point.
#    After unblocking the dbug sync point verifies that only two senders
#    are returned, the server 2 which failed and server 5 which was
#    inserted after asynchronous connection failover process started were
#    skipped.
#
SET GLOBAL debug = '-d,async_conn_failover_wait_new_sender';
SET DEBUG_SYNC= 'now SIGNAL continue_connect_new_sender';
#
# 7. Verify that asynchronous replication channel gets connected to
#    server 3 and also verify that asynchronous replication tries
#    connecting to server 1 two (retry_count=2) times.
#
include/assert_grep.inc [Assert that the IO thread tried two times connecting to server_1]
#
# 8. It verifies that out of total four senders in
#    performance_schema.replication_asynchronous_connection_failover it
#    will only consider three servers skipping the last failing sender.
#    It verifies that
#    async_conn_failover_wait_new_sender dbug point that sender list has
#    total three rows. As the sender list os not exhausted it does not
#    consider wl#12649 FR8 and remove the last failing sender from sender
#    to be considered for async failover connection.
#
include/rpl_start_server.inc [server_number=1]
[connection server_2]
SET GLOBAL debug = '+d,async_conn_failover_wait_new_4sender';
include/rpl_stop_server.inc [server_number=3]
[connection server_2]
SET DEBUG_SYNC= 'now WAIT_FOR wait_for_new_4sender_selection';
SET GLOBAL debug = '-d,async_conn_failover_wait_new_4sender';
SET DEBUG_SYNC= 'now SIGNAL continue_connect_new_4sender';
#
# 9. Clean up
#
[connection server_1]
DROP TABLE t1;
[connection server_2]
SET GLOBAL debug= @old_debug;
include/stop_slave.inc
include/rpl_reset_slave.inc
SELECT asynchronous_connection_failover_delete_source('', '127.0.0.1', SERVER_MYPORT_1, '');;
asynchronous_connection_failover_delete_source('', '127.0.0.1', SERVER_MYPORT_1, '')
The UDF asynchronous_connection_failover_delete_source() executed successfully.
SELECT asynchronous_connection_failover_delete_source('', '127.0.0.1', SERVER_MYPORT_3, '');;
asynchronous_connection_failover_delete_source('', '127.0.0.1', SERVER_MYPORT_3, '')
The UDF asynchronous_connection_failover_delete_source() executed successfully.
SELECT asynchronous_connection_failover_delete_source('', '127.0.0.1', 40001, '');;
asynchronous_connection_failover_delete_source('', '127.0.0.1', 40001, '')
The UDF asynchronous_connection_failover_delete_source() executed successfully.
SELECT asynchronous_connection_failover_delete_source('', '127.0.0.1', 50001, '');;
asynchronous_connection_failover_delete_source('', '127.0.0.1', 50001, '')
The UDF asynchronous_connection_failover_delete_source() executed successfully.
DROP TABLE IF EXISTS t1;
include/rpl_start_server.inc [server_number=3]
include/rpl_end.inc
