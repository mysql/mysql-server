include/master-slave.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection master]
#
# Setup
#
[connection slave]
include/stop_slave.inc
CHANGE REPLICATION SOURCE TO REQUIRE_ROW_FORMAT = 1;
CALL mtr.add_suppression(".*The slave coordinator and worker threads are stopped, possibly leaving data in inconsistent state.*");
CALL mtr.add_suppression("The query does not comply with variable require_row_format restrictions");
include/start_slave.inc
# FR1: Receiver thread does not error on an event that violates
#      require_row_format when that is not filtered out.
[connection master]
CREATE TABLE test.t1 (c1 INT PRIMARY KEY);
include/sync_slave_sql_with_master.inc
include/stop_slave.inc
[connection master]
INSERT INTO t1 VALUES (1);
SET SESSION binlog_format=STATEMENT;
SET GTID_NEXT='00000000-0000-0000-0000-000000000000:1';
INSERT INTO t1 VALUES (2);
SET GTID_NEXT=AUTOMATIC;
SET SESSION binlog_format=ROW;
[connection slave]
include/start_slave_io.inc
[connection master]
include/sync_slave_io_with_master.inc
[connection slave]
START REPLICA SQL_THREAD;
include/wait_for_slave_sql_error.inc [errno=3944]
# FR2: An empty GTID transaction can be used to skip a transaction
#      that violates require_row_format
SET GTID_NEXT='00000000-0000-0000-0000-000000000000:1';
BEGIN;
COMMIT;
SET GTID_NEXT=AUTOMATIC;
include/start_slave_sql.inc
[connection master]
include/sync_slave_sql_with_master.inc
include/assert.inc [Assert that there is only one row in the replica table]
[connection master]
DROP TABLE t1;
include/sync_slave_sql_with_master.inc
include/rpl_reset.inc
# FR3: Applier thread shall not error out if the offending statement
#      is filtered out
[connection master]
CREATE DATABASE ignored_db;
CREATE TABLE ignored_db.t1 (c1 INT PRIMARY KEY);
include/sync_slave_sql_with_master.inc
[connection slave]
include/stop_slave.inc
CHANGE REPLICATION FILTER REPLICATE_IGNORE_DB = (ignored_db);;
include/start_slave_io.inc
[connection master]
use ignored_db;
SET SESSION binlog_format=STATEMENT;
INSERT INTO t1 VALUES (1);
SET SESSION binlog_format=ROW;
use test;
[connection slave]
include/start_slave_sql.inc
[connection master]
include/sync_slave_sql_with_master.inc
include/assert.inc [Assert there are no rows in the table as the change was filtered]
# clean up
include/stop_slave.inc
CHANGE REPLICATION FILTER REPLICATE_IGNORE_DB = ();
include/start_slave.inc
[connection master]
DROP DATABASE ignored_db;
include/sync_slave_sql_with_master.inc
include/rpl_reset.inc
# FR4: Applier thread shall not error out if the offending LOAD DATA
#      statement applies to an ignored database
[connection master]
CREATE DATABASE ignored_db;;
CREATE TABLE ignored_db.tload (c1 TEXT);;
include/sync_slave_sql_with_master.inc
include/stop_slave.inc
CHANGE REPLICATION FILTER REPLICATE_IGNORE_DB = (ignored_db);
include/start_slave.inc
[connection master]
USE ignored_db;
SET SESSION binlog_format=STATEMENT;
LOAD DATA INFILE '../../std_data/words.dat' INTO TABLE tload;
SET SESSION binlog_format=ROW;
use test;
include/sync_slave_sql_with_master.inc
include/assert.inc [table is empty on the secondary]
include/stop_slave.inc
CHANGE REPLICATION FILTER REPLICATE_IGNORE_DB = ();
include/start_slave.inc
[connection master]
DROP DATABASE ignored_db;
include/sync_slave_sql_with_master.inc
[connection master]
include/rpl_reset.inc
# FR5: Applier thread shall not error out if the offending LOAD DATA
#      statement applies to an ignored table
[connection master]
CREATE TABLE tload (c1 TEXT);
include/sync_slave_sql_with_master.inc
include/stop_slave.inc
CHANGE REPLICATION FILTER REPLICATE_IGNORE_TABLE = (test.tload);
include/start_slave.inc
[connection master]
SET SESSION binlog_format=STATEMENT;
LOAD DATA INFILE '../../std_data/words.dat' INTO TABLE tload;
SET SESSION binlog_format=ROW;
include/sync_slave_sql_with_master.inc
include/assert.inc [table is empty on the secondary]
include/stop_slave.inc
CHANGE REPLICATION FILTER REPLICATE_IGNORE_TABLE = ();
include/start_slave.inc
[connection master]
DROP TABLE tload;
include/sync_slave_sql_with_master.inc
[connection master]
include/rpl_reset.inc
# FR6: Applier thread shall not error out if the offending LOAD DATA
#      statement is skipped on the replica because the transaction is
#      automatically skipped (GTID had already been processed).
[connection master]
CREATE TABLE tload (c1 TEXT);
include/sync_slave_sql_with_master.inc
SET GTID_NEXT='00000000-0000-0000-0000-000000000000:1';
BEGIN;
COMMIT;
SET GTID_NEXT=AUTOMATIC;
[connection master]
SET SESSION binlog_format=STATEMENT;
SET GTID_NEXT='00000000-0000-0000-0000-000000000000:1';
LOAD DATA INFILE '../../std_data/words.dat' INTO TABLE tload;
SET GTID_NEXT=AUTOMATIC;
SET SESSION binlog_format=ROW;
include/sync_slave_sql_with_master.inc
include/assert.inc [table is empty on the secondary]
[connection master]
DROP TABLE tload;
include/sync_slave_sql_with_master.inc
[connection master]
include/rpl_reset.inc
# FR7: Applier thread shall error out if the offending LOAD DATA
#      statement is not filtered out nor skipped.
[connection master]
CREATE TABLE tload (c1 TEXT);
SET SESSION binlog_format=STATEMENT;
LOAD DATA INFILE '../../std_data/words.dat' INTO TABLE tload;
SET SESSION binlog_format=ROW;
[connection slave]
include/wait_for_slave_sql_error.inc [errno=3944]
include/stop_slave.inc
[connection slave]
RESET REPLICA;
DROP TABLE tload;
RESET MASTER;
[connection master]
DROP TABLE tload;
RESET MASTER;
[connection slave]
include/start_slave.inc
[connection master]
include/rpl_reset.inc
# Tear down
[connection master]
include/rpl_end.inc
