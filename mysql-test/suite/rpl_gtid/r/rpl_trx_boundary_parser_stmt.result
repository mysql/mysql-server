include/master-slave.inc
Warnings:
Note	####	Sending passwords in plain text without SSL/TLS is extremely insecure.
Note	####	Storing MySQL user name or password information in the master info repository is not secure and is therefore not recommended. Please consider using the USER and PASSWORD connection options for START SLAVE; see the 'START SLAVE Syntax' in the MySQL Manual for more information.
[connection master]
# Using InnoDB storage engine
## Running the test with the SQL thread stopped
[connection slave]
include/stop_slave_sql.inc
[connection slave]
[connection master]
[connection slave]
include/gtid_step_reset_on_retrieved.inc
[connection master]
CREATE TABLE t1 (i INT NOT NULL AUTO_INCREMENT PRIMARY KEY, info VARCHAR(64)) ENGINE=INNODB;
CREATE TABLE t2 (i INT) ENGINE=INNODB;
INSERT INTO t1 (info) VALUE ('Insert data without splitting transactions in the relay log');
BEGIN;
INSERT INTO t2 (i) VALUES (-6);
INSERT INTO t2 (i) VALUES (-5);
INSERT INTO t2 (i) VALUES (-4);
COMMIT;
[connection master]
include/sync_slave_io_with_master.inc
[connection slave]
include/stop_slave_io.inc
include/start_slave_io.inc
[connection slave]
include/gtid_step_assert_on_retrieved.inc [count=4, only_count=0]
Asserting based on SHOW SLAVE STATUS(Retrieved_Gtid_Set)
[connection master]
INSERT INTO t1 (info) VALUE ('Insert data rotating master binlog between two transactions');
BEGIN;
INSERT INTO t2 (i) VALUES (-3);
INSERT INTO t2 (i) VALUES (-2);
COMMIT;
FLUSH LOGS;
INSERT INTO t1 (info) VALUE ('After FLUSH LOGS at master');
BEGIN;
INSERT INTO t2 (i) VALUES (-1);
INSERT INTO t2 (i) VALUES (0);
COMMIT;
[connection master]
include/sync_slave_io_with_master.inc
[connection slave]
include/stop_slave_io.inc
include/start_slave_io.inc
[connection slave]
include/gtid_step_assert_on_retrieved.inc [count=4, only_count=0]
Asserting based on SHOW SLAVE STATUS(Retrieved_Gtid_Set)
[connection slave]
[connection master]
INSERT INTO t1 (info) VALUES ('stop_io_after_reading_gtid_log_event');
include/sync_slave_io_with_master.inc
# Adding debug point 'stop_io_after_reading_gtid_log_event' to @@GLOBAL.debug
[connection master]
BEGIN;
INSERT INTO t2 VALUES (100 * 1 + 1);
SET @val= 100 * 1 + 2;
INSERT INTO t2 VALUES (@val);
COMMIT;
[connection slave]
include/wait_for_slave_io_to_stop.inc
# Removing debug point 'stop_io_after_reading_gtid_log_event' from @@GLOBAL.debug
include/gtid_step_assert_on_retrieved.inc [count=1, only_count=0]
Asserting based on SHOW SLAVE STATUS(Retrieved_Gtid_Set)
[connection master]
INSERT INTO t2 VALUES (100 * 1 + 3);
[connection slave]
include/start_slave_io.inc
[connection master]
include/sync_slave_io_with_master.inc
include/gtid_step_assert_on_retrieved.inc [count=2, only_count=0]
Asserting based on SHOW SLAVE STATUS(Retrieved_Gtid_Set)
[connection slave]
[connection master]
INSERT INTO t1 (info) VALUES ('stop_io_after_reading_query_log_event');
include/sync_slave_io_with_master.inc
# Adding debug point 'stop_io_after_reading_query_log_event' to @@GLOBAL.debug
[connection master]
BEGIN;
INSERT INTO t2 VALUES (100 * 2 + 1);
SET @val= 100 * 2 + 2;
INSERT INTO t2 VALUES (@val);
COMMIT;
[connection slave]
include/wait_for_slave_io_to_stop.inc
# Removing debug point 'stop_io_after_reading_query_log_event' from @@GLOBAL.debug
include/gtid_step_assert_on_retrieved.inc [count=1, only_count=0]
Asserting based on SHOW SLAVE STATUS(Retrieved_Gtid_Set)
[connection master]
INSERT INTO t2 VALUES (100 * 2 + 3);
[connection slave]
include/start_slave_io.inc
[connection master]
include/sync_slave_io_with_master.inc
include/gtid_step_assert_on_retrieved.inc [count=2, only_count=0]
Asserting based on SHOW SLAVE STATUS(Retrieved_Gtid_Set)
[connection slave]
[connection master]
INSERT INTO t1 (info) VALUES ('stop_io_after_reading_user_var_log_event');
include/sync_slave_io_with_master.inc
# Adding debug point 'stop_io_after_reading_user_var_log_event' to @@GLOBAL.debug
[connection master]
BEGIN;
INSERT INTO t2 VALUES (100 * 3 + 1);
SET @val= 100 * 3 + 2;
INSERT INTO t2 VALUES (@val);
COMMIT;
[connection slave]
include/wait_for_slave_io_to_stop.inc
# Removing debug point 'stop_io_after_reading_user_var_log_event' from @@GLOBAL.debug
include/gtid_step_assert_on_retrieved.inc [count=1, only_count=0]
Asserting based on SHOW SLAVE STATUS(Retrieved_Gtid_Set)
[connection master]
INSERT INTO t2 VALUES (100 * 3 + 3);
[connection slave]
include/start_slave_io.inc
[connection master]
include/sync_slave_io_with_master.inc
include/gtid_step_assert_on_retrieved.inc [count=2, only_count=0]
Asserting based on SHOW SLAVE STATUS(Retrieved_Gtid_Set)
[connection slave]
[connection master]
INSERT INTO t1 (info) VALUES ('stop_io_after_reading_xid_log_event');
include/sync_slave_io_with_master.inc
# Adding debug point 'stop_io_after_reading_xid_log_event' to @@GLOBAL.debug
[connection master]
BEGIN;
INSERT INTO t2 VALUES (100 * 4 + 1);
SET @val= 100 * 4 + 2;
INSERT INTO t2 VALUES (@val);
COMMIT;
[connection slave]
include/wait_for_slave_io_to_stop.inc
# Removing debug point 'stop_io_after_reading_xid_log_event' from @@GLOBAL.debug
include/gtid_step_assert_on_retrieved.inc [count=2, only_count=0]
Asserting based on SHOW SLAVE STATUS(Retrieved_Gtid_Set)
[connection master]
INSERT INTO t2 VALUES (100 * 4 + 3);
[connection slave]
include/start_slave_io.inc
[connection master]
include/sync_slave_io_with_master.inc
include/gtid_step_assert_on_retrieved.inc [count=1, only_count=0]
Asserting based on SHOW SLAVE STATUS(Retrieved_Gtid_Set)
[connection master]
DROP TABLE t1,t2;
## Starting and syncing the SQL thread before next round
[connection slave]
include/start_slave_sql.inc
[connection master]
include/sync_slave_sql_with_master.inc
## Running the test with the SQL thread started
[connection slave]
[connection master]
[connection slave]
include/gtid_step_reset.inc
[connection master]
CREATE TABLE t1 (i INT NOT NULL AUTO_INCREMENT PRIMARY KEY, info VARCHAR(64)) ENGINE=INNODB;
CREATE TABLE t2 (i INT) ENGINE=INNODB;
INSERT INTO t1 (info) VALUE ('Insert data without splitting transactions in the relay log');
BEGIN;
INSERT INTO t2 (i) VALUES (-6);
INSERT INTO t2 (i) VALUES (-5);
INSERT INTO t2 (i) VALUES (-4);
COMMIT;
[connection master]
include/sync_slave_sql_with_master.inc
include/diff_tables.inc [master:t1, slave:t1]
[connection slave]
include/stop_slave_io.inc
include/start_slave_io.inc
[connection slave]
include/gtid_step_assert.inc [count=4, only_count=0]
[connection master]
INSERT INTO t1 (info) VALUE ('Insert data rotating master binlog between two transactions');
BEGIN;
INSERT INTO t2 (i) VALUES (-3);
INSERT INTO t2 (i) VALUES (-2);
COMMIT;
FLUSH LOGS;
INSERT INTO t1 (info) VALUE ('After FLUSH LOGS at master');
BEGIN;
INSERT INTO t2 (i) VALUES (-1);
INSERT INTO t2 (i) VALUES (0);
COMMIT;
[connection master]
include/sync_slave_sql_with_master.inc
include/diff_tables.inc [master:t1, slave:t1]
[connection slave]
include/stop_slave_io.inc
include/start_slave_io.inc
[connection slave]
include/gtid_step_assert.inc [count=4, only_count=0]
[connection slave]
[connection master]
INSERT INTO t1 (info) VALUES ('stop_io_after_reading_gtid_log_event');
include/sync_slave_io_with_master.inc
# Adding debug point 'stop_io_after_reading_gtid_log_event' to @@GLOBAL.debug
[connection master]
BEGIN;
INSERT INTO t2 VALUES (100 * 1 + 1);
SET @val= 100 * 1 + 2;
INSERT INTO t2 VALUES (@val);
COMMIT;
[connection slave]
include/wait_for_slave_io_to_stop.inc
# Removing debug point 'stop_io_after_reading_gtid_log_event' from @@GLOBAL.debug
include/sync_slave_sql_with_io.inc
include/gtid_step_assert.inc [count=1, only_count=0]
[connection master]
INSERT INTO t2 VALUES (100 * 1 + 3);
[connection slave]
include/start_slave_io.inc
[connection master]
include/sync_slave_sql_with_master.inc
include/gtid_step_assert.inc [count=2, only_count=0]
[connection slave]
[connection master]
INSERT INTO t1 (info) VALUES ('stop_io_after_reading_query_log_event');
include/sync_slave_io_with_master.inc
# Adding debug point 'stop_io_after_reading_query_log_event' to @@GLOBAL.debug
[connection master]
BEGIN;
INSERT INTO t2 VALUES (100 * 2 + 1);
SET @val= 100 * 2 + 2;
INSERT INTO t2 VALUES (@val);
COMMIT;
[connection slave]
include/wait_for_slave_io_to_stop.inc
# Removing debug point 'stop_io_after_reading_query_log_event' from @@GLOBAL.debug
include/sync_slave_sql_with_io.inc
include/gtid_step_assert.inc [count=1, only_count=0]
[connection master]
INSERT INTO t2 VALUES (100 * 2 + 3);
[connection slave]
include/start_slave_io.inc
[connection master]
include/sync_slave_sql_with_master.inc
include/gtid_step_assert.inc [count=2, only_count=0]
[connection slave]
[connection master]
INSERT INTO t1 (info) VALUES ('stop_io_after_reading_user_var_log_event');
include/sync_slave_io_with_master.inc
# Adding debug point 'stop_io_after_reading_user_var_log_event' to @@GLOBAL.debug
[connection master]
BEGIN;
INSERT INTO t2 VALUES (100 * 3 + 1);
SET @val= 100 * 3 + 2;
INSERT INTO t2 VALUES (@val);
COMMIT;
[connection slave]
include/wait_for_slave_io_to_stop.inc
# Removing debug point 'stop_io_after_reading_user_var_log_event' from @@GLOBAL.debug
include/sync_slave_sql_with_io.inc
include/gtid_step_assert.inc [count=1, only_count=0]
[connection master]
INSERT INTO t2 VALUES (100 * 3 + 3);
[connection slave]
include/start_slave_io.inc
[connection master]
include/sync_slave_sql_with_master.inc
include/gtid_step_assert.inc [count=2, only_count=0]
[connection slave]
[connection master]
INSERT INTO t1 (info) VALUES ('stop_io_after_reading_xid_log_event');
include/sync_slave_io_with_master.inc
# Adding debug point 'stop_io_after_reading_xid_log_event' to @@GLOBAL.debug
[connection master]
BEGIN;
INSERT INTO t2 VALUES (100 * 4 + 1);
SET @val= 100 * 4 + 2;
INSERT INTO t2 VALUES (@val);
COMMIT;
[connection slave]
include/wait_for_slave_io_to_stop.inc
# Removing debug point 'stop_io_after_reading_xid_log_event' from @@GLOBAL.debug
include/sync_slave_sql_with_io.inc
include/gtid_step_assert.inc [count=2, only_count=0]
[connection master]
INSERT INTO t2 VALUES (100 * 4 + 3);
[connection slave]
include/start_slave_io.inc
[connection master]
include/sync_slave_sql_with_master.inc
include/gtid_step_assert.inc [count=1, only_count=0]
[connection master]
include/sync_slave_sql_with_master.inc
include/diff_tables.inc [master:t1, slave:t1]
[connection master]
DROP TABLE t1,t2;
include/sync_slave_sql_with_master.inc
[connection slave]
include/stop_slave.inc
RESET MASTER;
RESET SLAVE;
Warnings:
Warning	1287	'RESET SLAVE' is deprecated and will be removed in a future release. Please use RESET REPLICA instead
[connection master]
RESET MASTER;
[connection slave]
CHANGE REPLICATION SOURCE TO SOURCE_AUTO_POSITION= 0;
include/start_slave.inc
# Using InnoDB storage engine without auto positioning
## Running the test with the SQL thread stopped
[connection slave]
include/stop_slave_sql.inc
[connection slave]
[connection master]
[connection slave]
include/gtid_step_reset_on_retrieved.inc
[connection master]
CREATE TABLE t1 (i INT NOT NULL AUTO_INCREMENT PRIMARY KEY, info VARCHAR(64)) ENGINE=INNODB;
CREATE TABLE t2 (i INT) ENGINE=INNODB;
INSERT INTO t1 (info) VALUE ('Insert data without splitting transactions in the relay log');
BEGIN;
INSERT INTO t2 (i) VALUES (-6);
INSERT INTO t2 (i) VALUES (-5);
INSERT INTO t2 (i) VALUES (-4);
COMMIT;
[connection master]
include/sync_slave_io_with_master.inc
[connection slave]
include/stop_slave_io.inc
include/start_slave_io.inc
[connection slave]
include/gtid_step_assert_on_retrieved.inc [count=4, only_count=0]
Asserting based on SHOW SLAVE STATUS(Retrieved_Gtid_Set)
[connection master]
INSERT INTO t1 (info) VALUE ('Insert data rotating master binlog between two transactions');
BEGIN;
INSERT INTO t2 (i) VALUES (-3);
INSERT INTO t2 (i) VALUES (-2);
COMMIT;
FLUSH LOGS;
INSERT INTO t1 (info) VALUE ('After FLUSH LOGS at master');
BEGIN;
INSERT INTO t2 (i) VALUES (-1);
INSERT INTO t2 (i) VALUES (0);
COMMIT;
[connection master]
include/sync_slave_io_with_master.inc
[connection slave]
include/stop_slave_io.inc
include/start_slave_io.inc
[connection slave]
include/gtid_step_assert_on_retrieved.inc [count=4, only_count=0]
Asserting based on SHOW SLAVE STATUS(Retrieved_Gtid_Set)
[connection slave]
[connection master]
INSERT INTO t1 (info) VALUES ('stop_io_after_reading_gtid_log_event');
include/sync_slave_io_with_master.inc
# Adding debug point 'stop_io_after_reading_gtid_log_event' to @@GLOBAL.debug
[connection master]
BEGIN;
INSERT INTO t2 VALUES (100 * 1 + 1);
SET @val= 100 * 1 + 2;
INSERT INTO t2 VALUES (@val);
COMMIT;
[connection slave]
include/wait_for_slave_io_to_stop.inc
# Removing debug point 'stop_io_after_reading_gtid_log_event' from @@GLOBAL.debug
include/gtid_step_assert_on_retrieved.inc [count=1, only_count=0]
Asserting based on SHOW SLAVE STATUS(Retrieved_Gtid_Set)
[connection master]
INSERT INTO t2 VALUES (100 * 1 + 3);
[connection slave]
include/start_slave_io.inc
[connection master]
include/sync_slave_io_with_master.inc
include/gtid_step_assert_on_retrieved.inc [count=2, only_count=0]
Asserting based on SHOW SLAVE STATUS(Retrieved_Gtid_Set)
[connection slave]
[connection master]
INSERT INTO t1 (info) VALUES ('stop_io_after_reading_query_log_event');
include/sync_slave_io_with_master.inc
# Adding debug point 'stop_io_after_reading_query_log_event' to @@GLOBAL.debug
[connection master]
BEGIN;
INSERT INTO t2 VALUES (100 * 2 + 1);
SET @val= 100 * 2 + 2;
INSERT INTO t2 VALUES (@val);
COMMIT;
[connection slave]
include/wait_for_slave_io_to_stop.inc
# Removing debug point 'stop_io_after_reading_query_log_event' from @@GLOBAL.debug
include/gtid_step_assert_on_retrieved.inc [count=1, only_count=0]
Asserting based on SHOW SLAVE STATUS(Retrieved_Gtid_Set)
[connection master]
INSERT INTO t2 VALUES (100 * 2 + 3);
[connection slave]
include/start_slave_io.inc
[connection master]
include/sync_slave_io_with_master.inc
include/gtid_step_assert_on_retrieved.inc [count=2, only_count=0]
Asserting based on SHOW SLAVE STATUS(Retrieved_Gtid_Set)
[connection slave]
[connection master]
INSERT INTO t1 (info) VALUES ('stop_io_after_reading_user_var_log_event');
include/sync_slave_io_with_master.inc
# Adding debug point 'stop_io_after_reading_user_var_log_event' to @@GLOBAL.debug
[connection master]
BEGIN;
INSERT INTO t2 VALUES (100 * 3 + 1);
SET @val= 100 * 3 + 2;
INSERT INTO t2 VALUES (@val);
COMMIT;
[connection slave]
include/wait_for_slave_io_to_stop.inc
# Removing debug point 'stop_io_after_reading_user_var_log_event' from @@GLOBAL.debug
include/gtid_step_assert_on_retrieved.inc [count=1, only_count=0]
Asserting based on SHOW SLAVE STATUS(Retrieved_Gtid_Set)
[connection master]
INSERT INTO t2 VALUES (100 * 3 + 3);
[connection slave]
include/start_slave_io.inc
[connection master]
include/sync_slave_io_with_master.inc
include/gtid_step_assert_on_retrieved.inc [count=2, only_count=0]
Asserting based on SHOW SLAVE STATUS(Retrieved_Gtid_Set)
[connection slave]
[connection master]
INSERT INTO t1 (info) VALUES ('stop_io_after_reading_xid_log_event');
include/sync_slave_io_with_master.inc
# Adding debug point 'stop_io_after_reading_xid_log_event' to @@GLOBAL.debug
[connection master]
BEGIN;
INSERT INTO t2 VALUES (100 * 4 + 1);
SET @val= 100 * 4 + 2;
INSERT INTO t2 VALUES (@val);
COMMIT;
[connection slave]
include/wait_for_slave_io_to_stop.inc
# Removing debug point 'stop_io_after_reading_xid_log_event' from @@GLOBAL.debug
include/gtid_step_assert_on_retrieved.inc [count=2, only_count=0]
Asserting based on SHOW SLAVE STATUS(Retrieved_Gtid_Set)
[connection master]
INSERT INTO t2 VALUES (100 * 4 + 3);
[connection slave]
include/start_slave_io.inc
[connection master]
include/sync_slave_io_with_master.inc
include/gtid_step_assert_on_retrieved.inc [count=1, only_count=0]
Asserting based on SHOW SLAVE STATUS(Retrieved_Gtid_Set)
[connection master]
DROP TABLE t1,t2;
## Starting and syncing the SQL thread before next round
[connection slave]
include/start_slave_sql.inc
[connection master]
include/sync_slave_sql_with_master.inc
## Running the test with the SQL thread started
[connection slave]
[connection master]
[connection slave]
include/gtid_step_reset.inc
[connection master]
CREATE TABLE t1 (i INT NOT NULL AUTO_INCREMENT PRIMARY KEY, info VARCHAR(64)) ENGINE=INNODB;
CREATE TABLE t2 (i INT) ENGINE=INNODB;
INSERT INTO t1 (info) VALUE ('Insert data without splitting transactions in the relay log');
BEGIN;
INSERT INTO t2 (i) VALUES (-6);
INSERT INTO t2 (i) VALUES (-5);
INSERT INTO t2 (i) VALUES (-4);
COMMIT;
[connection master]
include/sync_slave_sql_with_master.inc
include/diff_tables.inc [master:t1, slave:t1]
[connection slave]
include/stop_slave_io.inc
include/start_slave_io.inc
[connection slave]
include/gtid_step_assert.inc [count=4, only_count=0]
[connection master]
INSERT INTO t1 (info) VALUE ('Insert data rotating master binlog between two transactions');
BEGIN;
INSERT INTO t2 (i) VALUES (-3);
INSERT INTO t2 (i) VALUES (-2);
COMMIT;
FLUSH LOGS;
INSERT INTO t1 (info) VALUE ('After FLUSH LOGS at master');
BEGIN;
INSERT INTO t2 (i) VALUES (-1);
INSERT INTO t2 (i) VALUES (0);
COMMIT;
[connection master]
include/sync_slave_sql_with_master.inc
include/diff_tables.inc [master:t1, slave:t1]
[connection slave]
include/stop_slave_io.inc
include/start_slave_io.inc
[connection slave]
include/gtid_step_assert.inc [count=4, only_count=0]
[connection slave]
[connection master]
INSERT INTO t1 (info) VALUES ('stop_io_after_reading_gtid_log_event');
include/sync_slave_io_with_master.inc
# Adding debug point 'stop_io_after_reading_gtid_log_event' to @@GLOBAL.debug
[connection master]
BEGIN;
INSERT INTO t2 VALUES (100 * 1 + 1);
SET @val= 100 * 1 + 2;
INSERT INTO t2 VALUES (@val);
COMMIT;
[connection slave]
include/wait_for_slave_io_to_stop.inc
# Removing debug point 'stop_io_after_reading_gtid_log_event' from @@GLOBAL.debug
include/sync_slave_sql_with_io.inc
include/gtid_step_assert.inc [count=1, only_count=0]
[connection master]
INSERT INTO t2 VALUES (100 * 1 + 3);
[connection slave]
include/start_slave_io.inc
[connection master]
include/sync_slave_sql_with_master.inc
include/gtid_step_assert.inc [count=2, only_count=0]
[connection slave]
[connection master]
INSERT INTO t1 (info) VALUES ('stop_io_after_reading_query_log_event');
include/sync_slave_io_with_master.inc
# Adding debug point 'stop_io_after_reading_query_log_event' to @@GLOBAL.debug
[connection master]
BEGIN;
INSERT INTO t2 VALUES (100 * 2 + 1);
SET @val= 100 * 2 + 2;
INSERT INTO t2 VALUES (@val);
COMMIT;
[connection slave]
include/wait_for_slave_io_to_stop.inc
# Removing debug point 'stop_io_after_reading_query_log_event' from @@GLOBAL.debug
include/sync_slave_sql_with_io.inc
include/gtid_step_assert.inc [count=1, only_count=0]
[connection master]
INSERT INTO t2 VALUES (100 * 2 + 3);
[connection slave]
include/start_slave_io.inc
[connection master]
include/sync_slave_sql_with_master.inc
include/gtid_step_assert.inc [count=2, only_count=0]
[connection slave]
[connection master]
INSERT INTO t1 (info) VALUES ('stop_io_after_reading_user_var_log_event');
include/sync_slave_io_with_master.inc
# Adding debug point 'stop_io_after_reading_user_var_log_event' to @@GLOBAL.debug
[connection master]
BEGIN;
INSERT INTO t2 VALUES (100 * 3 + 1);
SET @val= 100 * 3 + 2;
INSERT INTO t2 VALUES (@val);
COMMIT;
[connection slave]
include/wait_for_slave_io_to_stop.inc
# Removing debug point 'stop_io_after_reading_user_var_log_event' from @@GLOBAL.debug
include/sync_slave_sql_with_io.inc
include/gtid_step_assert.inc [count=1, only_count=0]
[connection master]
INSERT INTO t2 VALUES (100 * 3 + 3);
[connection slave]
include/start_slave_io.inc
[connection master]
include/sync_slave_sql_with_master.inc
include/gtid_step_assert.inc [count=2, only_count=0]
[connection slave]
[connection master]
INSERT INTO t1 (info) VALUES ('stop_io_after_reading_xid_log_event');
include/sync_slave_io_with_master.inc
# Adding debug point 'stop_io_after_reading_xid_log_event' to @@GLOBAL.debug
[connection master]
BEGIN;
INSERT INTO t2 VALUES (100 * 4 + 1);
SET @val= 100 * 4 + 2;
INSERT INTO t2 VALUES (@val);
COMMIT;
[connection slave]
include/wait_for_slave_io_to_stop.inc
# Removing debug point 'stop_io_after_reading_xid_log_event' from @@GLOBAL.debug
include/sync_slave_sql_with_io.inc
include/gtid_step_assert.inc [count=2, only_count=0]
[connection master]
INSERT INTO t2 VALUES (100 * 4 + 3);
[connection slave]
include/start_slave_io.inc
[connection master]
include/sync_slave_sql_with_master.inc
include/gtid_step_assert.inc [count=1, only_count=0]
[connection master]
include/sync_slave_sql_with_master.inc
include/diff_tables.inc [master:t1, slave:t1]
[connection master]
DROP TABLE t1,t2;
include/sync_slave_sql_with_master.inc
[connection slave]
include/stop_slave.inc
CHANGE REPLICATION SOURCE TO SOURCE_AUTO_POSITION= 1;
include/start_slave.inc
include/rpl_end.inc
