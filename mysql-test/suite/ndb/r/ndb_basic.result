DROP TABLE IF EXISTS t1,t2,t3,t4,t5,t6,t7;
drop database if exists mysqltest;
SHOW GLOBAL STATUS LIKE 'ndb\_%';
Variable_name	Value
Ndb_api_adaptive_send_deferred_count	#
Ndb_api_adaptive_send_deferred_count_session	#
Ndb_api_adaptive_send_deferred_count_slave	#
Ndb_api_adaptive_send_forced_count	#
Ndb_api_adaptive_send_forced_count_session	#
Ndb_api_adaptive_send_forced_count_slave	#
Ndb_api_adaptive_send_unforced_count	#
Ndb_api_adaptive_send_unforced_count_session	#
Ndb_api_adaptive_send_unforced_count_slave	#
Ndb_api_bytes_received_count	#
Ndb_api_bytes_received_count_session	#
Ndb_api_bytes_received_count_slave	#
Ndb_api_bytes_sent_count	#
Ndb_api_bytes_sent_count_session	#
Ndb_api_bytes_sent_count_slave	#
Ndb_api_event_bytes_count	#
Ndb_api_event_bytes_count_injector	#
Ndb_api_event_data_count	#
Ndb_api_event_data_count_injector	#
Ndb_api_event_nondata_count	#
Ndb_api_event_nondata_count_injector	#
Ndb_api_pk_op_count	#
Ndb_api_pk_op_count_session	#
Ndb_api_pk_op_count_slave	#
Ndb_api_pruned_scan_count	#
Ndb_api_pruned_scan_count_session	#
Ndb_api_pruned_scan_count_slave	#
Ndb_api_range_scan_count	#
Ndb_api_range_scan_count_session	#
Ndb_api_range_scan_count_slave	#
Ndb_api_read_row_count	#
Ndb_api_read_row_count_session	#
Ndb_api_read_row_count_slave	#
Ndb_api_scan_batch_count	#
Ndb_api_scan_batch_count_session	#
Ndb_api_scan_batch_count_slave	#
Ndb_api_table_scan_count	#
Ndb_api_table_scan_count_session	#
Ndb_api_table_scan_count_slave	#
Ndb_api_trans_abort_count	#
Ndb_api_trans_abort_count_session	#
Ndb_api_trans_abort_count_slave	#
Ndb_api_trans_close_count	#
Ndb_api_trans_close_count_session	#
Ndb_api_trans_close_count_slave	#
Ndb_api_trans_commit_count	#
Ndb_api_trans_commit_count_session	#
Ndb_api_trans_commit_count_slave	#
Ndb_api_trans_local_read_row_count	#
Ndb_api_trans_local_read_row_count_session	#
Ndb_api_trans_local_read_row_count_slave	#
Ndb_api_trans_start_count	#
Ndb_api_trans_start_count_session	#
Ndb_api_trans_start_count_slave	#
Ndb_api_uk_op_count	#
Ndb_api_uk_op_count_session	#
Ndb_api_uk_op_count_slave	#
Ndb_api_wait_exec_complete_count	#
Ndb_api_wait_exec_complete_count_session	#
Ndb_api_wait_exec_complete_count_slave	#
Ndb_api_wait_meta_request_count	#
Ndb_api_wait_meta_request_count_session	#
Ndb_api_wait_meta_request_count_slave	#
Ndb_api_wait_nanos_count	#
Ndb_api_wait_nanos_count_session	#
Ndb_api_wait_nanos_count_slave	#
Ndb_api_wait_scan_result_count	#
Ndb_api_wait_scan_result_count_session	#
Ndb_api_wait_scan_result_count_slave	#
Ndb_cluster_node_id	#
Ndb_config_from_host	#
Ndb_config_from_port	#
Ndb_conflict_epoch_delete_delete_count	#
Ndb_conflict_fn_epoch	#
Ndb_conflict_fn_epoch2	#
Ndb_conflict_fn_epoch2_trans	#
Ndb_conflict_fn_epoch_trans	#
Ndb_conflict_fn_max	#
Ndb_conflict_fn_max_del_win	#
Ndb_conflict_fn_old	#
Ndb_conflict_last_conflict_epoch	#
Ndb_conflict_last_stable_epoch	#
Ndb_conflict_reflected_op_discard_count	#
Ndb_conflict_reflected_op_prepare_count	#
Ndb_conflict_refresh_op_count	#
Ndb_conflict_trans_conflict_commit_count	#
Ndb_conflict_trans_detect_iter_count	#
Ndb_conflict_trans_reject_count	#
Ndb_conflict_trans_row_conflict_count	#
Ndb_conflict_trans_row_reject_count	#
Ndb_connect_count	#
Ndb_execute_count	#
Ndb_index_stat_cache_clean	#
Ndb_index_stat_cache_query	#
Ndb_index_stat_status	#
Ndb_last_commit_epoch_server	#
Ndb_last_commit_epoch_session	#
Ndb_number_of_data_nodes	#
Ndb_number_of_ready_data_nodes	#
Ndb_pruned_scan_count	#
Ndb_pushed_queries_defined	#
Ndb_pushed_queries_dropped	#
Ndb_pushed_queries_executed	#
Ndb_pushed_reads	#
Ndb_scan_count	#
Ndb_schema_locks_count	#
Ndb_slave_max_replicated_epoch	#
Ndb_sorted_scan_count	#
SHOW GLOBAL VARIABLES WHERE Variable_name LIKE 'ndb\_%' and 
Variable_name NOT LIKE 'ndb_dbg\_%';
Variable_name	Value
ndb_autoincrement_prefetch_sz	#
ndb_batch_size	#
ndb_blob_read_batch_bytes	#
ndb_blob_write_batch_bytes	#
ndb_cache_check_time	#
ndb_cluster_connection_pool	#
ndb_connectstring	#
ndb_deferred_constraints	#
ndb_distribution	#
ndb_eventbuffer_free_percent	#
ndb_eventbuffer_max_alloc	#
ndb_extra_logging	#
ndb_force_send	#
ndb_index_stat_enable	#
ndb_index_stat_option	#
ndb_join_pushdown	#
ndb_log_apply_status	#
ndb_log_bin	#
ndb_log_binlog_index	#
ndb_log_empty_epochs	#
ndb_log_empty_update	#
ndb_log_exclusive_reads	#
ndb_log_orig	#
ndb_log_transaction_id	#
ndb_log_update_as_write	#
ndb_log_update_minimal	#
ndb_log_updated_only	#
ndb_mgmd_host	#
ndb_nodeid	#
ndb_optimization_delay	#
ndb_optimized_node_selection	#
ndb_recv_thread_activation_threshold	#
ndb_recv_thread_cpu_mask	#
ndb_report_thresh_binlog_epoch_slip	#
ndb_report_thresh_binlog_mem_usage	#
ndb_show_foreign_key_mock_tables	#
ndb_slave_conflict_role	#
ndb_table_no_logging	#
ndb_table_temporary	#
ndb_use_copying_alter_table	#
ndb_use_exact_count	#
ndb_use_transactions	#
ndb_version	#
ndb_version_string	#
ndb_wait_connected	#
ndb_wait_setup	#
CREATE TABLE t1 (
pk1 INT NOT NULL PRIMARY KEY,
attr1 INT NOT NULL,
attr2 INT,
attr3 VARCHAR(10)
) ENGINE=ndbcluster;
SHOW INDEX FROM t1;
Table	Non_unique	Key_name	Seq_in_index	Column_name	Collation	Cardinality	Sub_part	Packed	Null	Index_type	Comment	Index_comment
t1	0	PRIMARY	1	pk1	A	0	NULL	NULL		BTREE		
INSERT INTO t1 VALUES (9410,9412, NULL, '9412'), (9411,9413, 17, '9413');
SHOW INDEX FROM t1;
Table	Non_unique	Key_name	Seq_in_index	Column_name	Collation	Cardinality	Sub_part	Packed	Null	Index_type	Comment	Index_comment
t1	0	PRIMARY	1	pk1	A	2	NULL	NULL		BTREE		
SELECT pk1 FROM t1 ORDER BY pk1;
pk1
9410
9411
SELECT * FROM t1 ORDER BY pk1;
pk1	attr1	attr2	attr3
9410	9412	NULL	9412
9411	9413	17	9413
SELECT t1.* FROM t1 ORDER BY pk1;
pk1	attr1	attr2	attr3
9410	9412	NULL	9412
9411	9413	17	9413
UPDATE t1 SET attr1=1 WHERE pk1=9410;
SELECT * FROM t1 ORDER BY pk1;
pk1	attr1	attr2	attr3
9410	1	NULL	9412
9411	9413	17	9413
UPDATE t1 SET pk1=2 WHERE attr1=1;
SELECT * FROM t1 ORDER BY pk1;
pk1	attr1	attr2	attr3
2	1	NULL	9412
9411	9413	17	9413
UPDATE t1 SET pk1=pk1 + 1;
SELECT * FROM t1 ORDER BY pk1;
pk1	attr1	attr2	attr3
3	1	NULL	9412
9412	9413	17	9413
UPDATE t1 SET pk1=4 WHERE pk1 = 3;
SELECT * FROM t1 ORDER BY pk1;
pk1	attr1	attr2	attr3
4	1	NULL	9412
9412	9413	17	9413
DELETE FROM t1;
SELECT * FROM t1;
pk1	attr1	attr2	attr3
INSERT INTO t1 VALUES (9410,9412, NULL, '9412'), (9408, 8765, NULL, '8765'),
(7,8, NULL, NULL), (8,9, NULL, NULL), (9,10, NULL, NULL), (10,11, NULL, NULL), (11,12, NULL, NULL), (12,13, NULL, NULL), (13,14, NULL, NULL);
UPDATE t1 SET attr1 = 9999;
SELECT * FROM t1 ORDER BY pk1;
pk1	attr1	attr2	attr3
7	9999	NULL	NULL
8	9999	NULL	NULL
9	9999	NULL	NULL
10	9999	NULL	NULL
11	9999	NULL	NULL
12	9999	NULL	NULL
13	9999	NULL	NULL
9408	9999	NULL	8765
9410	9999	NULL	9412
UPDATE t1 SET attr1 = 9998 WHERE pk1 < 1000;
SELECT * FROM t1 ORDER BY pk1;
pk1	attr1	attr2	attr3
7	9998	NULL	NULL
8	9998	NULL	NULL
9	9998	NULL	NULL
10	9998	NULL	NULL
11	9998	NULL	NULL
12	9998	NULL	NULL
13	9998	NULL	NULL
9408	9999	NULL	8765
9410	9999	NULL	9412
UPDATE t1 SET attr1 = 9997 WHERE attr1 = 9999;
SELECT * FROM t1 ORDER BY pk1;
pk1	attr1	attr2	attr3
7	9998	NULL	NULL
8	9998	NULL	NULL
9	9998	NULL	NULL
10	9998	NULL	NULL
11	9998	NULL	NULL
12	9998	NULL	NULL
13	9998	NULL	NULL
9408	9997	NULL	8765
9410	9997	NULL	9412
DELETE FROM t1 WHERE pk1 = 9410;
SELECT * FROM t1 ORDER BY pk1;
pk1	attr1	attr2	attr3
7	9998	NULL	NULL
8	9998	NULL	NULL
9	9998	NULL	NULL
10	9998	NULL	NULL
11	9998	NULL	NULL
12	9998	NULL	NULL
13	9998	NULL	NULL
9408	9997	NULL	8765
DELETE FROM t1;
SELECT * FROM t1;
pk1	attr1	attr2	attr3
INSERT INTO t1 values (1, 4, NULL, NULL), (2, 4, NULL, NULL), (3, 5, NULL, NULL), (4, 4, NULL, NULL), (5, 5, NULL, NULL);
DELETE FROM t1 WHERE attr1=4;
SELECT * FROM t1 order by pk1;
pk1	attr1	attr2	attr3
3	5	NULL	NULL
5	5	NULL	NULL
DELETE FROM t1;
INSERT INTO t1 VALUES (9410,9412, NULL, NULL), (9411, 9413, NULL, NULL);
DELETE FROM t1 WHERE pk1 = 9410;
SELECT * FROM t1;
pk1	attr1	attr2	attr3
9411	9413	NULL	NULL
DROP TABLE t1;
CREATE TABLE t1 (id INT, id2 int) engine=ndbcluster;
INSERT INTO t1 values(3456, 7890);
SELECT * FROM t1;
id	id2
3456	7890
UPDATE t1 SET id=2 WHERE id2=12;
SELECT * FROM t1;
id	id2
3456	7890
UPDATE t1 SET id=1234 WHERE id2=7890;
SELECT * FROM t1;
id	id2
1234	7890
DELETE FROM t1;
INSERT INTO t1 values(3456, 7890), (3456, 7890), (3456, 7890), (3454, 7890);
SELECT * FROM t1 ORDER BY id;
id	id2
3454	7890
3456	7890
3456	7890
3456	7890
DELETE FROM t1 WHERE id = 3456;
SELECT * FROM t1 ORDER BY id;
id	id2
3454	7890
DROP TABLE t1;
CREATE TABLE t1 (
pk1 INT NOT NULL PRIMARY KEY,
attr1 INT NOT NULL
) ENGINE=NDBCLUSTER;
INSERT INTO t1 values(1, 9999);
DROP TABLE t1;
CREATE TABLE t1 (
pk1 INT NOT NULL PRIMARY KEY,
attr1 INT NOT NULL
) ENGINE=NDB;
INSERT INTO t1 values(1, 9999);
DROP TABLE t1;
CREATE TABLE t2 (
a bigint unsigned NOT NULL PRIMARY KEY,
b int unsigned not null,
c int unsigned
) engine=ndbcluster;
CREATE TABLE t3 (
a bigint unsigned NOT NULL,
b bigint unsigned not null,
c bigint unsigned,
PRIMARY KEY(a)
) engine=ndbcluster;
CREATE TABLE t4 (
a bigint unsigned NOT NULL,
b bigint unsigned not null,
c bigint unsigned NOT NULL,
d int unsigned,
PRIMARY KEY(a, b, c)
) engine=ndbcluster;
select * from t2 where a = 7 order by b;
a	b	c
7	16	5
select * from t2 where a = 7 order by a;
a	b	c
7	16	5
select * from t2 where a = 7 order by 2;
a	b	c
7	16	5
select * from t2 where a = 7 order by c;
a	b	c
7	16	5
select * from t2 where a = 7 and b = 16 order by b;
a	b	c
7	16	5
select * from t2 where a = 7 and b = 16 order by a;
a	b	c
7	16	5
select * from t2 where a = 7 and b = 17 order by a;
a	b	c
select * from t2 where a = 7 and b != 16 order by b;
a	b	c
select * from t2 where a = 7 and b = 16 and c = 5 order by b;
a	b	c
7	16	5
select * from t2 where a = 7 and b = 16 and c = 5 order by a;
a	b	c
7	16	5
select * from t2 where a = 7 and b = 16 and c = 6 order by a;
a	b	c
select * from t2 where a = 7 and b != 16 and c = 5 order by b;
a	b	c
select * from t3 where a = 7 order by b;
a	b	c
7	16	5
select * from t3 where a = 7 order by a;
a	b	c
7	16	5
select * from t3 where a = 7 order by 2;
a	b	c
7	16	5
select * from t3 where a = 7 order by c;
a	b	c
7	16	5
select * from t3 where a = 7 and b = 16 order by b;
a	b	c
7	16	5
select * from t3 where a = 7 and b = 16 order by a;
a	b	c
7	16	5
select * from t3 where a = 7 and b = 17 order by a;
a	b	c
select * from t3 where a = 7 and b != 16 order by b;
a	b	c
select * from t4 where a = 7 order by b;
a	b	c	d
7	16	5	26007
select * from t4 where a = 7 order by a;
a	b	c	d
7	16	5	26007
select * from t4 where a = 7 order by 2;
a	b	c	d
7	16	5	26007
select * from t4 where a = 7 order by c;
a	b	c	d
7	16	5	26007
select * from t4 where a = 7 and b = 16 order by b;
a	b	c	d
7	16	5	26007
select * from t4 where a = 7 and b = 16 order by a;
a	b	c	d
7	16	5	26007
select * from t4 where a = 7 and b = 17 order by a;
a	b	c	d
select * from t4 where a = 7 and b != 16 order by b;
a	b	c	d
delete from t2 where a > 5;
select x1.a, x1.b from t2 x1, t2 x2 where x1.b = x2.b order by x1.a;
a	b
1	10
3	12
5	14
select a, b FROM t2 outer_table where
a = (select a from t2 where b = outer_table.b ) order by a;
a	b
1	10
3	12
5	14
delete from t2;
delete from t3;
delete from t4;
drop table t2;
drop table t3;
drop table t4;
CREATE TABLE t5 (
a bigint unsigned NOT NULL,
b bigint unsigned not null,
c bigint unsigned NOT NULL,
d int unsigned,
PRIMARY KEY(a, b, c)
) engine=ndbcluster;
insert into t5 values(10, 19, 5, 26010);
delete from t5 where a=10 and b=19 and c=5;
select * from t5;
a	b	c	d
insert into t5 values(10, 19, 5, 26010);
update t5 set d=21997 where a=10 and b=19 and c=5;
select * from t5;
a	b	c	d
10	19	5	21997
delete from t5;
drop table t5;
CREATE TABLE t6 (
adress char(255),
a int NOT NULL PRIMARY KEY,
b int
) engine = NDB;
insert into t6 values
("Nice road 3456", 1, 23),
("Street Road 78", 3, 92),
("Road street 89C", 5, 71),
(NULL, 7, NULL);
select * from t6 order by a;
adress	a	b
Nice road 3456	1	23
Street Road 78	3	92
Road street 89C	5	71
NULL	7	NULL
select a, b from t6 order by a;
a	b
1	23
3	92
5	71
7	NULL
update t6 set adress="End of road 09" where a=3;
update t6 set b=181, adress="Street 76" where a=7;
select * from t6 order by a;
adress	a	b
Nice road 3456	1	23
End of road 09	3	92
Road street 89C	5	71
Street 76	7	181
select * from t6 where a=1;
adress	a	b
Nice road 3456	1	23
delete from t6 where a=1;
select * from t6 order by a;
adress	a	b
End of road 09	3	92
Road street 89C	5	71
Street 76	7	181
delete from t6 where b=71;
select * from t6 order by a;
adress	a	b
End of road 09	3	92
Street 76	7	181
drop table t6;
CREATE TABLE t7 (
adress char(255),
a int NOT NULL,
b int,
c int NOT NULL,
PRIMARY KEY(a, c)	
) engine = NDB;
insert into t7 values
("Highway 3456", 1, 23, 2),
("Street Road 78", 3, 92, 3),
("Main street 89C", 5, 71, 4),
(NULL, 8, NULL, 12);
select * from t7 order by a;
adress	a	b	c
Highway 3456	1	23	2
Street Road 78	3	92	3
Main street 89C	5	71	4
NULL	8	NULL	12
select a, b from t7 order by a;
a	b
1	23
3	92
5	71
8	NULL
update t7 set adress="End of road 09" where a=3;
update t7 set adress="Gatuvägen 90C" where a=5 and c=4;
update t7 set adress="No adress" where adress is NULL;
select * from t7 order by a;
adress	a	b	c
Highway 3456	1	23	2
End of road 09	3	92	3
Gatuvägen 90C	5	71	4
No adress	8	NULL	12
select * from t7 where a=1 and c=2;
adress	a	b	c
Highway 3456	1	23	2
delete from t7 where a=1;
delete from t7 where a=3 and c=3;
delete from t7 where a=5 and c=4;
select * from t7;
adress	a	b	c
No adress	8	NULL	12
delete from t7 where b=23;
select * from t7;
adress	a	b	c
No adress	8	NULL	12
drop table t7;
CREATE TABLE t1 (
pk1 INT NOT NULL PRIMARY KEY,
attr1 INT NOT NULL,
attr2 INT,
attr3 VARCHAR(10)
) ENGINE=ndbcluster;
INSERT INTO t1 VALUES (9410,9412, NULL, '9412'), (9411,9413, 17, '9413');
create database mysqltest;
use mysqltest;
CREATE TABLE t2 (
a bigint unsigned NOT NULL PRIMARY KEY,
b int unsigned not null,
c int unsigned
) engine=ndbcluster;
insert into t2 select pk1,attr1,attr2 from test.t1;
select * from t2 order by a;
a	b	c
9410	9412	NULL
9411	9413	17
select b from test.t1, t2 where c = test.t1.attr2;
b
9413
select b,test.t1.attr1 from test.t1, t2 where test.t1.pk1 < a;
b	attr1
9413	9412
drop table test.t1, t2;
drop database mysqltest;
drop database if exists ndbtest1;
create database ndbtest1;
use ndbtest1;
create table t1(id int) engine=ndbcluster;
drop database ndbtest1;
drop database ndbtest1;
ERROR HY000: Can't drop database 'ndbtest1'; database doesn't exist
use test;
create table t1 (a int primary key, b char(0));
insert into t1 values (1,"");
insert into t1 values (2,NULL);
select * from t1 order by a;
a	b
1	
2	NULL
select * from t1 order by b;
a	b
2	NULL
1	
select * from t1 where b IS NULL;
a	b
2	NULL
select * from t1 where b IS NOT NULL;
a	b
1	
drop table t1;
create table t1 ( c511 int, c510 int, c509 int, c508 int, c507 int, c506 int, c505 int, c504 int, c503 int, c502 int, c501 int, c500 int, c499 int, c498 int, c497 int, c496 int, c495 int, c494 int, c493 int, c492 int, c491 int, c490 int, c489 int, c488 int, c487 int, c486 int, c485 int, c484 int, c483 int, c482 int, c481 int, c480 int, c479 int, c478 int, c477 int, c476 int, c475 int, c474 int, c473 int, c472 int, c471 int, c470 int, c469 int, c468 int, c467 int, c466 int, c465 int, c464 int, c463 int, c462 int, c461 int, c460 int, c459 int, c458 int, c457 int, c456 int, c455 int, c454 int, c453 int, c452 int, c451 int, c450 int, c449 int, c448 int, c447 int, c446 int, c445 int, c444 int, c443 int, c442 int, c441 int, c440 int, c439 int, c438 int, c437 int, c436 int, c435 int, c434 int, c433 int, c432 int, c431 int, c430 int, c429 int, c428 int, c427 int, c426 int, c425 int, c424 int, c423 int, c422 int, c421 int, c420 int, c419 int, c418 int, c417 int, c416 int, c415 int, c414 int, c413 int, c412 int, c411 int, c410 int, c409 int, c408 int, c407 int, c406 int, c405 int, c404 int, c403 int, c402 int, c401 int, c400 int, c399 int, c398 int, c397 int, c396 int, c395 int, c394 int, c393 int, c392 int, c391 int, c390 int, c389 int, c388 int, c387 int, c386 int, c385 int, c384 int, c383 int, c382 int, c381 int, c380 int, c379 int, c378 int, c377 int, c376 int, c375 int, c374 int, c373 int, c372 int, c371 int, c370 int, c369 int, c368 int, c367 int, c366 int, c365 int, c364 int, c363 int, c362 int, c361 int, c360 int, c359 int, c358 int, c357 int, c356 int, c355 int, c354 int, c353 int, c352 int, c351 int, c350 int, c349 int, c348 int, c347 int, c346 int, c345 int, c344 int, c343 int, c342 int, c341 int, c340 int, c339 int, c338 int, c337 int, c336 int, c335 int, c334 int, c333 int, c332 int, c331 int, c330 int, c329 int, c328 int, c327 int, c326 int, c325 int, c324 int, c323 int, c322 int, c321 int, c320 int, c319 int, c318 int, c317 int, c316 int, c315 int, c314 int, c313 int, c312 int, c311 int, c310 int, c309 int, c308 int, c307 int, c306 int, c305 int, c304 int, c303 int, c302 int, c301 int, c300 int, c299 int, c298 int, c297 int, c296 int, c295 int, c294 int, c293 int, c292 int, c291 int, c290 int, c289 int, c288 int, c287 int, c286 int, c285 int, c284 int, c283 int, c282 int, c281 int, c280 int, c279 int, c278 int, c277 int, c276 int, c275 int, c274 int, c273 int, c272 int, c271 int, c270 int, c269 int, c268 int, c267 int, c266 int, c265 int, c264 int, c263 int, c262 int, c261 int, c260 int, c259 int, c258 int, c257 int, c256 int, c255 int, c254 int, c253 int, c252 int, c251 int, c250 int, c249 int, c248 int, c247 int, c246 int, c245 int, c244 int, c243 int, c242 int, c241 int, c240 int, c239 int, c238 int, c237 int, c236 int, c235 int, c234 int, c233 int, c232 int, c231 int, c230 int, c229 int, c228 int, c227 int, c226 int, c225 int, c224 int, c223 int, c222 int, c221 int, c220 int, c219 int, c218 int, c217 int, c216 int, c215 int, c214 int, c213 int, c212 int, c211 int, c210 int, c209 int, c208 int, c207 int, c206 int, c205 int, c204 int, c203 int, c202 int, c201 int, c200 int, c199 int, c198 int, c197 int, c196 int, c195 int, c194 int, c193 int, c192 int, c191 int, c190 int, c189 int, c188 int, c187 int, c186 int, c185 int, c184 int, c183 int, c182 int, c181 int, c180 int, c179 int, c178 int, c177 int, c176 int, c175 int, c174 int, c173 int, c172 int, c171 int, c170 int, c169 int, c168 int, c167 int, c166 int, c165 int, c164 int, c163 int, c162 int, c161 int, c160 int, c159 int, c158 int, c157 int, c156 int, c155 int, c154 int, c153 int, c152 int, c151 int, c150 int, c149 int, c148 int, c147 int, c146 int, c145 int, c144 int, c143 int, c142 int, c141 int, c140 int, c139 int, c138 int, c137 int, c136 int, c135 int, c134 int, c133 int, c132 int, c131 int, c130 int, c129 int, c128 int, c127 int, c126 int, c125 int, c124 int, c123 int, c122 int, c121 int, c120 int, c119 int, c118 int, c117 int, c116 int, c115 int, c114 int, c113 int, c112 int, c111 int, c110 int, c109 int, c108 int, c107 int, c106 int, c105 int, c104 int, c103 int, c102 int, c101 int, c100 int, c99 int, c98 int, c97 int, c96 int, c95 int, c94 int, c93 int, c92 int, c91 int, c90 int, c89 int, c88 int, c87 int, c86 int, c85 int, c84 int, c83 int, c82 int, c81 int, c80 int, c79 int, c78 int, c77 int, c76 int, c75 int, c74 int, c73 int, c72 int, c71 int, c70 int, c69 int, c68 int, c67 int, c66 int, c65 int, c64 int, c63 int, c62 int, c61 int, c60 int, c59 int, c58 int, c57 int, c56 int, c55 int, c54 int, c53 int, c52 int, c51 int, c50 int, c49 int, c48 int, c47 int, c46 int, c45 int, c44 int, c43 int, c42 int, c41 int, c40 int, c39 int, c38 int, c37 int, c36 int, c35 int, c34 int, c33 int, c32 int, c31 int, c30 int, c29 int, c28 int, c27 int, c26 int, c25 int, c24 int, c23 int, c22 int, c21 int, c20 int, c19 int, c18 int, c17 int, c16 int, c15 int, c14 int, c13 int, c12 int, c11 int, c10 int, c9 int, c8 int, c7 int, c6 int, c5 int, c4 int, c3 int, c2 int, c1 int, c512 varchar(10000), primary key using hash(c1)) engine=ndb partition by key(c1);
set @v10 = '0123456789';
set @v100 = concat(@v10,@v10,@v10,@v10,@v10,@v10,@v10,@v10,@v10,@v10);
set @v1000 =concat(@v100,@v100,@v100,@v100,@v100,@v100,@v100,@v100,@v100,@v100);
set @v10000 = concat(@v1000,@v1000,@v1000,@v1000,@v1000,@v1000,@v1000,@v1000,@v1000,@v1000);
set @v13000 = concat(@v10000, @v1000,@v1000,@v1000);
insert into t1 (c1,c512) values (1,@v10000), (2,@v10000), (3,@v10000);
select c1, length(c512) from t1 order by 1;
c1	length(c512)
1	10000
2	10000
3	10000
delete from t1;
drop table t1;
create table t1 (a int primary key, b varchar(13000)) engine = ndb;
insert into t1 values (1,@v13000), (2,@v13000);
select length(b) from t1 order by 1;
length(b)
13000
13000
drop table t1;
create table t1 ( c50 char(255), c49 char(255), c48 char(255), c47 char(255), c46 char(255), c45 char(255), c44 char(255), c43 char(255), c42 char(255), c41 char(255), c40 char(255), c39 char(255), c38 char(255), c37 char(255), c36 char(255), c35 char(255), c34 char(255), c33 char(255), c32 char(255), c31 char(255), c30 char(255), c29 char(255), c28 char(255), c27 char(255), c26 char(255), c25 char(255), c24 char(255), c23 char(255), c22 char(255), c21 char(255), c20 char(255), c19 char(255), c18 char(255), c17 char(255), c16 char(255), c15 char(255), c14 char(255), c13 char(255), c12 char(255), c11 char(255), c10 char(255), c9 char(255), c8 char(255), c7 char(255), c6 char(255), c5 char(255), c4 char(255), c3 char(255), c2 char(255), c1 char(255), primary key using hash(c1)) engine=ndb;
ERROR HY000: Got error 851 'Maximum 8052 bytes of FIXED columns supported, use varchar or COLUMN_FORMAT DYNAMIC instead' from NDBCLUSTER
show warnings;
Level	Code	Message
Warning	1296	Got error 851 'Maximum 8052 bytes of FIXED columns supported, use varchar or COLUMN_FORMAT DYNAMIC instead' from NDB
Error	1296	Got error 851 'Maximum 8052 bytes of FIXED columns supported, use varchar or COLUMN_FORMAT DYNAMIC instead' from NDBCLUSTER
create table `t1` (`a` int, b int, primary key (a,b)) engine=ndb partition by key(`a`,`b`,`a`);
ERROR HY000: Duplicate partition field name 'a'
create table t1 (
a1234567890123456789012345678901234567890 int primary key,
a12345678901234567890123456789a1234567890 int,
index(a12345678901234567890123456789a1234567890)
) engine=ndb;
show tables;
Tables_in_test
t1
insert into t1 values (1,1),(2,1),(3,1),(4,1),(5,2),(6,1),(7,1);
explain select * from t1 where a12345678901234567890123456789a1234567890=2;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	p0,p1,p2,p3,p4,p5,p6,p7	ref	a12345678901234567890123456789a1234567890	a12345678901234567890123456789a1234567890	5	const	#	#	NULL
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`a1234567890123456789012345678901234567890` AS `a1234567890123456789012345678901234567890`,`test`.`t1`.`a12345678901234567890123456789a1234567890` AS `a12345678901234567890123456789a1234567890` from `test`.`t1` where (`test`.`t1`.`a12345678901234567890123456789a1234567890` = 2)
select * from t1 where a12345678901234567890123456789a1234567890=2;
a1234567890123456789012345678901234567890	a12345678901234567890123456789a1234567890
5	2
drop table t1;
create table t1
(a bigint, b bigint, c bigint, d bigint, 
primary key (a,b,c,d)) 
engine=ndb
max_rows=800000000;
Warnings:
Warning	1105	Ndb might have problems storing the max amount of rows specified
insert into t1 values
(1,2,3,4),(2,3,4,5),(3,4,5,6),
(3,2,3,4),(1,3,4,5),(2,4,5,6),
(1,2,3,5),(2,3,4,8),(3,4,5,9),
(3,2,3,5),(1,3,4,8),(2,4,5,9),
(1,2,3,6),(2,3,4,6),(3,4,5,7),
(3,2,3,6),(1,3,4,6),(2,4,5,7),
(1,2,3,7),(2,3,4,7),(3,4,5,8),
(3,2,3,7),(1,3,4,7),(2,4,5,8),
(1,3,3,4),(2,4,4,5),(3,5,5,6),
(3,3,3,4),(1,4,4,5),(2,5,5,6),
(1,3,3,5),(2,4,4,8),(3,5,5,9),
(3,3,3,5),(1,4,4,8),(2,5,5,9),
(1,3,3,6),(2,4,4,6),(3,5,5,7),
(3,3,3,6),(1,4,4,6),(2,5,5,7),
(1,3,3,7),(2,4,4,7),(3,5,5,8),
(3,3,3,7),(1,4,4,7),(2,5,5,8);
select count(*) from t1;
count(*)
48
drop table t1;
create table t1
(a bigint, b bigint, c bigint, d bigint, 
primary key (a)) 
engine=ndb
max_rows=1;
drop table t1;
create table t1
(counter int(64) NOT NULL auto_increment,
datavalue char(40) default 'XXXX',
primary key (counter)
) ENGINE=ndbcluster;
insert into t1 (datavalue) values ('newval');
insert into t1 (datavalue) values ('newval');
select * from t1 order by counter;
counter	datavalue
1	newval
2	newval
insert into t1 (datavalue) select datavalue from t1 where counter < 100;
insert into t1 (datavalue) select datavalue from t1 where counter < 100;
select * from t1 order by counter;
counter	datavalue
1	newval
2	newval
3	newval
4	newval
5	newval
6	newval
7	newval
8	newval
insert into t1 (datavalue) select datavalue from t1 where counter < 100;
insert into t1 (datavalue) select datavalue from t1 where counter < 100;
select * from t1 order by counter;
counter	datavalue
1	newval
2	newval
3	newval
4	newval
5	newval
6	newval
7	newval
8	newval
9	newval
10	newval
11	newval
12	newval
13	newval
14	newval
15	newval
16	newval
17	newval
18	newval
19	newval
20	newval
21	newval
22	newval
23	newval
24	newval
25	newval
26	newval
27	newval
28	newval
29	newval
30	newval
31	newval
32	newval
drop table t1;
create table t1 (a int primary key auto_increment) engine = ndb;
insert into t1() values (),(),(),(),(),(),(),(),(),(),(),();
insert into t1(a) values (20),(28);
insert into t1() values (),(),(),(),(),(),(),(),(),(),(),();
insert into t1() values (21), (22);
drop table t1;
CREATE TABLE t1 ( b INT ) PACK_KEYS = 0 ENGINE = ndb;
select * from t1;
b
drop table t1;
create table t1 (a int) engine=ndb;
create table t2 (a int) engine=ndb;
insert into t1 values (1);
insert into t2 values (1);
delete t1.* from t1, t2 where t1.a = t2.a;
select * from t1;
a
select * from t2;
a
1
drop table t1;
drop table t2;
CREATE TABLE t1 (
i   INT,
j   INT,
x   INT,
y   INT,
z   INT
) engine=ndb;
CREATE TABLE t2 (
i   INT,
k   INT,
x   INT,
y   INT,
z   INT
) engine=ndb;
CREATE TABLE t3 (
j   INT,
k   INT,
x   INT,
y   INT,
z   INT
) engine=ndb;
INSERT INTO t1 VALUES ( 1, 2,13,14,15);
INSERT INTO t2 VALUES ( 1, 3,23,24,25);
INSERT INTO t3 VALUES ( 2, 3, 1,34,35), ( 2, 3, 1,34,36);
UPDATE      t1 AS a
INNER JOIN  t2 AS b
ON a.i = b.i
INNER JOIN  t3 AS c
ON a.j = c.j  AND  b.k = c.k
SET         a.x = b.x,
a.y = b.y,
a.z = (
SELECT  sum(z)
FROM    t3
WHERE   y = 34
)
WHERE       b.x = 23;
select * from t1;
i	j	x	y	z
1	2	23	24	71
drop table t1;
drop table t2;
drop table t3;
create table atablewithareallylongandirritatingname (a int);
insert into atablewithareallylongandirritatingname values (2);
select * from atablewithareallylongandirritatingname;
a
2
drop table atablewithareallylongandirritatingname;
create table t1 (f1 varchar(50), f2 text,f3 int, primary key(f1)) engine=NDB;
insert into t1 (f1,f2,f3)VALUES("111111","aaaaaa",1);
insert into t1 (f1,f2,f3)VALUES("222222","bbbbbb",2);
select * from t1 order by f1;
f1	f2	f3
111111	aaaaaa	1
222222	bbbbbb	2
select * from t1 order by f2;
f1	f2	f3
111111	aaaaaa	1
222222	bbbbbb	2
select * from t1 order by f3;
f1	f2	f3
111111	aaaaaa	1
222222	bbbbbb	2
drop table t1;
Illegal ndb error code: 123456
CREATE TABLE t1 (
a VARBINARY(40) NOT NULL,
b VARCHAR (256) CHARACTER SET UTF8 NOT NULL,
c VARCHAR(256) CHARACTER SET UTF8 NOT NULL,
PRIMARY KEY (b,c))  ENGINE=ndbcluster;
INSERT INTO t1 VALUES
("a","ab","abc"),("b","abc","abcd"),("c","abc","ab"),("d","ab","ab"),("e","abc","abc");
SELECT * FROM t1 ORDER BY a;
a	b	c
a	ab	abc
b	abc	abcd
c	abc	ab
d	ab	ab
e	abc	abc
DROP TABLE t1;
create table t1 (a int not null primary key, b int not null) engine=ndb;
create table t2 (a int not null primary key, b int not null) engine=ndb;
insert into t1 values (1,10), (2,20), (3,30);
insert into t2 values (1,10), (2,20), (3,30);
select * from t1 order by a;
a	b
1	10
2	20
3	30
delete from t1 where a > 0 order by a desc limit 1;
select * from t1 order by a;
a	b
1	10
2	20
delete from t1,t2 using t1,t2 where t1.a = t2.a;
select * from t2 order by a;
a	b
3	30
drop table t1,t2;
create table t1 (a int not null primary key, b int not null) engine=ndb;
insert into t1 values (1,10), (2,20), (3,30);
insert into t1 set a=1, b=100;
ERROR 23000: Duplicate entry '1' for key 'PRIMARY'
insert ignore into t1 set a=1, b=100;
Warnings:
Warning	1062	Duplicate entry '1' for key 'PRIMARY'
select * from t1 order by a;
a	b
1	10
2	20
3	30
insert into t1 set a=1, b=1000 on duplicate key update b=b+1;
select * from t1 order by a;
a	b
1	11
2	20
3	30
drop table t1;
create table t1 (a int not null primary key, b int not null) engine=ndb;
create table t2 (c int not null primary key, d int not null) engine=ndb;
insert into t1 values (1,10), (2,10), (3,30), (4, 30);
insert into t2 values (1,10), (2,10), (3,30), (4, 30);
update t1 set a = 1 where a = 3;
ERROR 23000: Duplicate entry '1' for key 'PRIMARY'
select * from t1 order by a;
a	b
1	10
2	10
3	30
4	30
update t1 set b = 1 where a > 1 order by a desc limit 1;
select * from t1 order by a;
a	b
1	10
2	10
3	30
4	1
update t1,t2 set a = 1, c = 1 where a = 3 and c = 3;
ERROR 23000: Duplicate entry '1' for key 'PRIMARY'
select * from t1 order by a;
a	b
1	10
2	10
3	30
4	1
update ignore t1,t2 set a = 1, c = 1 where a = 3 and c = 3;
Warnings:
Warning	1062	Duplicate entry '1' for key 'PRIMARY'
Warning	1062	Duplicate entry '1' for key 'PRIMARY'
select * from t1 order by a;
a	b
1	10
2	10
3	30
4	1
drop table t1,t2;
create table t1 (a varchar(100) primary key, b varchar(100)) engine = NDB;
insert into t1 values
('a', 'a'),('b','b'),('c', 'c'),('aa', 'aa'),('bb', 'bb'),('cc', 'cc');
replace into t1 values ('a', '-a');
replace into t1 values ('b', '-b');
replace into t1 values ('c', '-c');
replace into t1 values ('aa', '-aa');
replace into t1 values ('bb', '-bb');
replace into t1 values ('cc', '-cc');
replace into t1 values ('aaa', '-aaa');
replace into t1 values ('bbb', '-bbb');
replace into t1 values ('ccc', '-ccc');
select * from t1 order by 1,2;
a	b
a	-a
aa	-aa
aaa	-aaa
b	-b
bb	-bb
bbb	-bbb
c	-c
cc	-cc
ccc	-ccc
drop table t1;
End of 5.0 tests
CREATE TABLE t1 (a VARCHAR(255) NOT NULL,
CONSTRAINT pk_a PRIMARY KEY (a))engine=ndb;
CREATE TABLE t2(a VARCHAR(255) NOT NULL,
b VARCHAR(255) NOT NULL,
c VARCHAR(255) NOT NULL,
CONSTRAINT pk_b_c_id PRIMARY KEY (b,c),
CONSTRAINT fk_a FOREIGN KEY(a) REFERENCES t1(a))engine=ndb;
drop table t2, t1;
create table t1 (a int not null primary key, b int) engine=ndb;
insert into t1 values(1,1),(2,2),(3,3);
create table t2 like t1;
insert into t2 select * from t1;
select * from t1 order by a;
a	b
1	1
2	2
3	3
select * from t2 order by a;
a	b
1	1
2	2
3	3
drop table t1, t2;
create table t1 (a int not null primary key, b int not null default 0, c varchar(254)) engine=ndb;
create table if not exists t1 (a int not null primary key, b int not null default 0, c varchar(254)) engine=ndb;
create table t2 like t1;
rename table t1 to t10, t2 to t20;
drop table t10,t20;
#
# bug #39872 - explain causes segv
# (ndb_index_stat_enable=1 must be set to trigger bug)
# index stats v4: do not set, the v2 setting was local
#
CREATE TABLE `t1` (
`id` int(11) NOT NULL AUTO_INCREMENT,
PRIMARY KEY (`id`)
) ENGINE=ndbcluster DEFAULT CHARSET=utf8;
CREATE TABLE `t2` (
`id` int(11) NOT NULL,
`obj_id` int(11) DEFAULT NULL,
UNIQUE KEY `id` (`id`),
KEY `obj_id` (`obj_id`)
) ENGINE=ndbcluster DEFAULT CHARSET=utf8;
# here we used to segv
explain SELECT t1.id FROM t1 INNER JOIN t2 ON t1.id = t2.id WHERE t2.obj_id=1;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t2	p0,p1,p2,p3,p4,p5,p6,p7	ref	id,obj_id	obj_id	5	const	#	#	Parent of 2 pushed join@1
1	SIMPLE	t1	p0,p1,p2,p3,p4,p5,p6,p7	eq_ref	PRIMARY	PRIMARY	4	test.t2.id	#	#	Child of 't2' in pushed join@1
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`id` AS `id` from `test`.`t1` join `test`.`t2` where ((`test`.`t1`.`id` = `test`.`t2`.`id`) and (`test`.`t2`.`obj_id` = 1))
drop table t1, t2;
#
# Bug #47054 Cluster only deletes first matched row in delete with left join
#
CREATE TABLE child
( id INT AUTO_INCREMENT PRIMARY KEY
, parent_id INT
) ENGINE=ndb;
CREATE TABLE parent 
( id INT AUTO_INCREMENT PRIMARY KEY
) ENGINE=ndb;
INSERT INTO parent VALUES (NULL),(NULL),(NULL);
INSERT INTO child VALUES (NULL, 1),(NULL,2),(NULL,3),(NULL,4),(NULL,5);
SELECT * FROM child ORDER BY id;
id	parent_id
1	1
2	2
3	3
4	4
5	5
SELECT * 
FROM child AS c 
LEFT JOIN parent AS p ON c.parent_id = p.id 
WHERE p.id IS NULL AND c.id < 100  ORDER BY c.id;
id	parent_id	id
4	4	NULL
5	5	NULL
DELETE c.* 
FROM child AS c 
LEFT JOIN parent AS p ON c.parent_id = p.id 
WHERE p.id IS NULL AND c.id < 100;
SELECT * FROM child ORDER BY id;
id	parent_id
1	1
2	2
3	3
DROP TABLE child, parent;
CREATE TABLE t1 (a INT PRIMARY KEY, b TEXT)
ENGINE=ndb PARTITION BY KEY(a) PARTITIONS 144;
ERROR HY000: Table storage engine for 't1' doesn't have this option
show warnings;
Level	Code	Message
Warning	1296	Got error 1224 'Too many fragments' from NDB
Error	1031	Table storage engine for 't1' doesn't have this option
CREATE TABLE t1 (a INT PRIMARY KEY, b TEXT)
ENGINE=ndb;
show warnings;
Level	Code	Message
drop table t1;
create table
abcdefghijklmnopqrstuvwxyz1234567890bcdefghijklmnopqrstuvwxyz123(id int
primary key) engine=ndb;
ERROR 42000: Identifier name 'abcdefghijklmnopqrstuvwxyz1234567890bcdefghijklmnopqrstuvwxyz123' is too long
show warnings;
Level	Code	Message
Warning	1059	Ndb has an internal limit of 63 bytes on the size of schema identifiers
Error	1059	Identifier name 'abcdefghijklmnopqrstuvwxyz1234567890bcdefghijklmnopqrstuvwxyz123' is too long
Error	1031	Table storage engine for 'abcdefghijklmnopqrstuvwxyz1234567890bcdefghijklmnopqrstuvwxyz123' doesn't have this option
End of 5.1 tests
