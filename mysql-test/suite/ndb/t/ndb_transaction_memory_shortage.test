--source include/have_ndb.inc
--source include/have_ndb_debug.inc

create table t0 (c int primary key) engine=ndbcluster;

CREATE TABLE t1 (
  a int NOT NULL,
  b int NOT NULL,
  c int NOT NULL,
  d int NOT NULL,
  PRIMARY KEY (`b`,`a`),
  unique key(d),
  key (c),
  foreign key (c) references t0(c) on delete cascade
) ENGINE=ndbcluster;

# A helper table for generating inserts into t1.
create table num (n int);
insert into num value (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);

# Transient transaction memory pools from Dbtc.hpp:
# DBTC_ATTRIBUTE_BUFFER_TRANSIENT_POOL_INDEX = 0
# DBTC_COMMIT_ACK_MARKER_BUFFER_TRANSIENT_POOL_INDEX = 1
# DBTC_FIRED_TRIGGER_DATA_TRANSIENT_POOL_INDEX = 2
# DBTC_INDEX_OPERATION_TRANSIENT_POOL_INDEX = 3
# DBTC_CONNECT_RECORD_TRANSIENT_POOL_INDEX = 4
# DBTC_API_CONNECT_TIMERS_TRANSIENT_POOL_INDEX = 5
# DBTC_API_CONNECT_RECORD_TRANSIENT_POOL_INDEX = 6
# DBTC_CACHE_RECORD_TRANSIENT_POOL_INDEX = 7
# DBTC_FRAG_LOCATION_TRANSIENT_POOL_INDEX = 8
# DBTC_SCAN_FRAGMENT_TRANSIENT_POOL_INDEX = 9
# DBTC_SCAN_RECORD_TRANSIENT_POOL_INDEX = 10
# DBTC_GCP_RECORD_TRANSIENT_POOL_INDEX = 11
# DBTC_COMMIT_ACK_MARKER_TRANSIENT_POOL_INDEX = 12

set @pool = 13;
while (`select @pool > 0`)
{
  set @pool = @pool - 1;

  # Testing of two pools are disabled:
  # Pool 7: Bug#29131828 OUT OF DBTC::CACHERECORD CAUSE MEMORY CORRUPTION LIKE
  # Overuse GCP record pool (11) will abort nodes, can not recover from that.
  if (`select @pool not in (7, 11)`)
  {
    let $pool=`select @pool`;
    echo === Make pool $pool out of memory ===;
    insert into t0 (c) values (1),(2),(3),(4);
    let $errs = 0;
    let $mysql_errno=0;

    # Send DUMP to all data nodes to set new max size of pool for fired triggers.
    #   TcSetTransientPoolMaxSize(2556)
    #   MAX_SIZE(0)
    exec $NDB_MGM --no-defaults --verbose=0 --execute "ALL DUMP 2556 $pool 0";

    error 0,1296,1297;
    insert into t1 select x1.n+x2.n*10+x3.n*100, 1, 1+(x1.n+x2.n+x3.n) MOD 3, 1+x1.n+x2.n*10+x3.n*100 from num as x1, num as x2, num as x3;
    echo mysql_errno $mysql_errno;
    let $errs = $errs + $mysql_errno;
    show warnings;

    error 0, 1297;
    update t1 set b = d, d = d + c * 1000;
    echo mysql_errno $mysql_errno;
    let $errs = $errs + $mysql_errno;
    show warnings;
    echo mysql_errno $mysql_errno;

    error 0, 1297;
    delete from t1 where a = 2222 and b = 1;
    echo mysql_errno $mysql_errno;
    let $errs = $errs + $mysql_errno;
    show warnings;
    echo mysql_errno $mysql_errno;

    error 0, 1297;
    delete from t1 where d = 3333;
    echo mysql_errno $mysql_errno;
    let $errs = $errs + $mysql_errno;
    show warnings;
    echo mysql_errno $mysql_errno;

    error 0, 1297;
    delete from t1 where c = 2;
    echo mysql_errno $mysql_errno;
    let $errs = $errs + $mysql_errno;
    show warnings;
    echo mysql_errno $mysql_errno;

    error 0, 1296, 1297;
    delete from t0 where c = 3;
    echo mysql_errno $mysql_errno;
    let $errs = $errs + $mysql_errno;
    show warnings;
    echo mysql_errno $mysql_errno;

    if (!`select $errs`)
    {
      die Some operation should have failed!;
    }
    # Send DUMP to all data nodes to reset max size of pool for fired triggers.
    #   TcResetTransientPoolMaxSize(2557)
    exec $NDB_MGM --no-defaults --verbose=0 --execute "ALL DUMP 2557 $pool";
    sleep 0.1;
    delete from t0;
  }
}

drop table num;
drop table t1;
drop table t0;
