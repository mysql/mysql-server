######################################################################
# Test restoring backups of different endianness
######################################################################

-- source include/have_multi_ndb.inc
-- source suite/ndb/include/backup_restore_setup.inc

#
# Bug #27543 restore of backup from different endian does not work for blob column
# Bug #30024 restore of backup from different endian does not work for datetime column
# Bug #28674 backup will run forever if disk full and later write succes will kill ndb node
#
# The table structure and data list below
#
# CREATE TABLE  t_num (
#   t_pk		INT PRIMARY KEY,
#   t_bit		BIT(64), 
#   t_tinyint	TINYINT, 
#   t_bool	BOOL, 
#   t_smallint	SMALLINT,
#   t_mediumint	MEDIUMINT,
#   t_int		INT,
#   t_bigint	BIGINT,
#   t_float	FLOAT,
#   t_double	DOUBLE,
#   t_decimal	DECIMAL (37, 16)
# ) ENGINE=NDBCLUSTER;
# 
# INSERT INTO t_num VALUE (
#   1,
#   b'1010101010101010101010101010101010101010101010101010101010101010',
#   125,
#   1,
#   32765,
#   8388606,
#   2147483647,
#   9223372036854775807,
#   1e+20,
#   1e+150,
#   '331.0000000000'
# );
# 
# CREATE TABLE  t_datetime (
#   t_pk		INT PRIMARY KEY,
#   t_date	DATE,
#   t_datetime	DATETIME,
#   t_timestamp	TIMESTAMP,
#   t_time	TIME,
#   t_year	YEAR
# ) ENGINE=NDBCLUSTER;
#   
# INSERT INTO t_datetime VALUE (
#   1,
#   '1998-01-01',
#   '2006-08-10 10:11:12',
#   20021029165106,
#   '19:38:34',
#   2155
# );
# 
# CREATE TABLE  t_string_1 (
#   t_pk		INT PRIMARY KEY,
#   t_char	CHAR(255),
#   t_varchar	VARCHAR(655),
#   t_binary	BINARY(255),
#   t_varbinary	VARBINARY(6553)
# ) ENGINE=NDBCLUSTER;
# 
# CREATE TABLE  t_string_2 (
#   t_pk		INT PRIMARY KEY,
#   t_tinyblob	TINYBLOB,
#   t_tinytext	TINYTEXT,
#   t_blob	BLOB,
#   t_text	TEXT,
#   t_mediumblob	MEDIUMBLOB,
#   t_mediumtext	MEDIUMTEXT,
#   t_longblob	LONGBLOB,
#   t_longtext	LONGTEXT,
#   t_enum	ENUM('001001','001004','001010','001018','001019','001020','001021','001027','001028','001029','001030','001031','001100','002003','002004','002005','002007')DEFAULT '001001' NOT NULL,
#   t_set		SET('a','B')
# ) ENGINE=NDBCLUSTER;
# 
# INSERT INTO t_string_1 VALUE (
#   1,
#   'abcdefghijklmn',
#   'abcdefghijklmnabcdefghijklmnabcdefghijklmnabcdefghijklmn',
#   0x612020,
#   0x4100
# );
# 
# INSERT INTO t_string_2 VALUE (
#   1,
#   'abcdefghijklmnabcdefghijklmn',
#   'abcdefghijklmnabcdefghijklmn',
#   'a123456789b123456789c123456789d123456789e123456789f123456789g123456789',
#   'a123456789b123456789c123456789d123456789e123456789f123456789g123456789',
#   'a123456789b123456789c123456789d123456789e123456789f123456789g123456789',
#   'a123456789b123456789c123456789d123456789e123456789f123456789g123456789',
#   'a123456789b123456789c123456789d123456789e123456789f123456789g123456789',
#   'a123456789b123456789c123456789d123456789e123456789f123456789g123456789',
#   '001001',
#   'a'
# ); 
#  
# CREATE TABLE t_gis (
#   t_pk			INT PRIMARY KEY,
#   t_point		POINT,
#   t_linestring		LINESTRING,
#   t_polygon		POLYGON,
#   t_multipoint		MULTIPOINT,
#   t_multilinestring	MULTILINESTRING,
#   t_multipolygon	MULTIPOLYGON,
#   t_geometrycollection	GEOMETRYCOLLECTION,
#   t_geometry		GEOMETRY
# ) ENGINE=NDBCLUSTER;
# 
# INSERT INTO t_gis VALUE (
#   1,
#   ST_PointFromText('POINT(10 10)'),
#   ST_LineStringFromText('LINESTRING(10 10,20 10,20 20,10 20,10 10)'),
#   ST_PolyFromText('POLYGON((0 0,50 0,50 50,0 50,0 0), (10 10,20 10,20 20,10 20,10 10))'),
#   ST_MPointFromText('MULTIPOINT(1 1,11 11,11 21,21 21)'),
#   ST_MLineFromText('MULTILINESTRING((10 48,10 21,10 0))'),
#   ST_MPolyFromText('MULTIPOLYGON(((28 26,28 0,84 0,84 42,28 26),(52 18,66 23,73 9,48 6,52 18)),((59 18,67 18,67 13,59 13,59 18)))'),
#   ST_GeomCollFromText('GEOMETRYCOLLECTION(POINT(0 0), LINESTRING(0 0,10 10))'),
#   ST_MPolyFromText('MULTIPOLYGON(((28 26,28 0,84 0,84 42,28 26),(52 18,66 23,73 9,48 6,52 18)),((59 18,67 18,67 13,59 13,59 18)))')
# );
# 
# INSERT INTO t_gis VALUE (
#   2,
#   ST_PointFromWKB(ST_AsWKB(ST_PointFromText('POINT(10 20)'))),
#   ST_LineStringFromWKB(LineString(Point(10, 10), Point(40, 10))),
#   ST_PolyFromWKB(Polygon(LineString(Point(0, 0), Point(30, 0), Point(30, 30), Point(0, 0)))),
#   ST_MPointFromWKB(MultiPoint(Point(3, 6), Point(4, 10))),
#   ST_MLineFromWKB(MultiLineString(LineString(Point(1, 2), Point(3, 5)), LineString(Point(2, 5), Point(5, 8), Point(21, 7)))),
#   ST_MPolyFromWKB(MultiPolygon(Polygon(LineString(Point(0, 3), Point(3, 3), Point(3, 0), Point(0, 3))))),
#   ST_GeometryFromWKB(GeometryCollection(Point(44, 6), LineString(Point(3, 6), Point(7, 9)))),
#   ST_GeometryFromWKB(GeometryCollection(Point(44, 6), LineString(Point(3, 6), Point(7, 9))))
# );

# Turn off metadata check so it doesn't intefere with table discovery
--connection server2
SET @old_ndb_metadata_check_mysqld2 = @@global.ndb_metadata_check;
SET GLOBAL ndb_metadata_check = false;
--connection server1
SET @old_ndb_metadata_check_mysqld1 = @@global.ndb_metadata_check;
SET GLOBAL ndb_metadata_check = false;

# Suppress expected warnings in the log due to table with old temporal types
--disable_query_log
call mtr.add_suppression("NDB: Table upgrade required");
call mtr.add_suppression("NDB: Failed to create entry in DD for table");
call mtr.add_suppression("NDB: Failed to install table");
--enable_query_log

#
# Restore backup files (from little endian)
#

--exec $NDB_RESTORE -b 1 -n 1 -m -r $NDB_SAVED_BACKUPS/51_data_le >> $NDB_TOOLS_OUTPUT
--exec $NDB_RESTORE -b 1 -n 2 -r $NDB_SAVED_BACKUPS/51_data_le >> $NDB_TOOLS_OUTPUT

SHOW CREATE TABLE t_num;
# The `t_datetime` table is not expected to be usable. It contains old
# temporal types which have been removed in 8.0. The upgrade of the
# table metadata is not supported
--error ER_NO_SUCH_TABLE
SHOW CREATE TABLE t_datetime;
SHOW WARNINGS;
SHOW CREATE TABLE t_string_1;
SHOW CREATE TABLE t_string_2;
SHOW CREATE TABLE t_gis;
--error ER_NO_SUCH_TABLE
SELECT * FROM t_datetime;
SHOW WARNINGS;
SELECT t_pk,hex(t_bit),t_tinyint,t_bool,t_smallint,t_mediumint,t_int,t_bigint,t_float,t_double,t_decimal FROM t_num;
SELECT t_pk,t_char,t_varchar,hex(t_binary),hex(t_varbinary) FROM t_string_1;
SELECT * FROM t_string_2;
SELECT ST_AsText(t_point), ST_AsText(t_linestring),ST_AsText(t_polygon) FROM t_gis ORDER by t_pk;
SELECT ST_AsText(t_multipoint), ST_AsText(t_multilinestring),ST_AsText(t_multipolygon) FROM t_gis ORDER by t_pk;
SELECT ST_AsText(t_geometrycollection), ST_AsText(t_geometry) FROM t_gis ORDER by t_pk;

# Clean up tables
DROP TABLE t_num,t_string_1,t_string_2,t_gis;
--exec $NDB_DROP_TABLE --no-defaults -d test t_datetime >> $NDB_TOOLS_OUTPUT

#
# Restore backup files (from big endian)
#

--exec $NDB_RESTORE -b 1 -n 1 -m -r $NDB_SAVED_BACKUPS/51_data_be >> $NDB_TOOLS_OUTPUT
--exec $NDB_RESTORE -b 1 -n 2 -r $NDB_SAVED_BACKUPS/51_data_be >> $NDB_TOOLS_OUTPUT

SHOW CREATE TABLE t_num;
--error ER_NO_SUCH_TABLE
SHOW CREATE TABLE t_datetime;
SHOW WARNINGS;
SHOW CREATE TABLE t_string_1;
SHOW CREATE TABLE t_string_2;
SHOW CREATE TABLE t_gis;
--error ER_NO_SUCH_TABLE
SELECT * FROM t_datetime;
SHOW WARNINGS;
SELECT t_pk,hex(t_bit),t_tinyint,t_bool,t_smallint,t_mediumint,t_int,t_bigint,t_float,t_double,t_decimal FROM t_num;
SELECT t_pk,t_char,t_varchar,hex(t_binary),hex(t_varbinary) FROM t_string_1;
SELECT * FROM t_string_2;
SELECT ST_AsText(t_point), ST_AsText(t_linestring),ST_AsText(t_polygon) FROM t_gis ORDER by t_pk;
SELECT ST_AsText(t_multipoint), ST_AsText(t_multilinestring),ST_AsText(t_multipolygon) FROM t_gis ORDER by t_pk;
SELECT ST_AsText(t_geometrycollection), ST_AsText(t_geometry) FROM t_gis ORDER by t_pk;

DROP TABLE t_num,t_string_1,t_string_2,t_gis;
--exec $NDB_DROP_TABLE --no-defaults -d test t_datetime >> $NDB_TOOLS_OUTPUT

# Reset metadata check value
--connection server2
SET GLOBAL ndb_metadata_check = @old_ndb_metadata_check_mysqld2;
--connection server1
SET GLOBAL ndb_metadata_check = @old_ndb_metadata_check_mysqld1;

--remove_file $NDB_TOOLS_OUTPUT
