-- source include/have_ndb.inc
-- source include/count_sessions.inc
-- source suite/ndb/include/backup_restore_setup.inc

--echo #
--echo # 18075170 - sql node restart required to avoid deadlock after
--echo #            restore
--echo #
# Test Auto Discover option within a transaction and make sure the transaction
# is not broken.
CREATE TABLE t1 (id INT) ENGINE=NDBCluster;
CREATE TABLE t2 (id INT) ENGINE=NDBCluster;

INSERT INTO t1 VALUES (1);
INSERT INTO t2 VALUES (1);

-- source include/ndb_backup.inc

DROP TABLE t1;
DROP TABLE t2;

-- source include/ndb_restore_master.inc

SET autocommit = 0;
SELECT * FROM t1;

# Without fix below select was resulting in DEADLOCK error. With fix select
# should succeed.
SELECT * FROM t2;
ROLLBACK;
SET autocommit = 1;

drop table t1;
drop table t2;

#
# Checking lock preservation in transaction
#
# Using existing backup to create the scenario. Tables are deleted as part of
# above test cleanup. Thus restoring the backup will bring the system to
# required state.
-- source include/ndb_restore_master.inc

SET autocommit = 0;
SELECT * FROM t1;
SELECT * FROM t2;

connect(con2, localhost, root);
--SEND ALTER TABLE t1 ADD val INT

connection default;
# Alter from con2 will be in waiting state as there is a lock on t1 from
# default connection due to active transaction. We check for this condition
# then releasing the lock by rollbacking active transaction.
let $wait_condition=
  SELECT count(*) = 1 FROM information_schema.processlist WHERE state
  LIKE "Waiting%" AND info = "ALTER TABLE t1 ADD val INT";
--source include/wait_condition.inc
ROLLBACK;
SET autocommit = 1;

connection con2;
--REAP

disconnect con2;
connection default;
drop table t1;
drop table t2;

# Wait till all disconnects are completed
-- source include/wait_until_count_sessions.inc
--source suite/ndb/include/backup_restore_cleanup.inc
--remove_file $NDB_TOOLS_OUTPUT
