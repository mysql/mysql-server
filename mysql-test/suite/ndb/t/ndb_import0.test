--source include/have_ndb.inc
--source include/not_windows.inc
--source suite/ndb/include/ndb_find_import_tool.inc

--echo # manual ndb_import tests

--echo # database argument is required
--error 1
exec $NDB_IMPORT --state-dir=$MYSQLTEST_VARDIR/tmp --keep-state --verbose=1
     >> $NDB_TOOLS_OUTPUT 2>&1;

--echo # no args is ok
--error 0
exec $NDB_IMPORT --state-dir=$MYSQLTEST_VARDIR/tmp --keep-state --verbose=1
     test >> $NDB_TOOLS_OUTPUT 2>&1;

--echo # table does not exist
--error 1
exec $NDB_IMPORT --state-dir=$MYSQLTEST_VARDIR/tmp --keep-state --verbose=1
     test '/foo/data/t1.csv' >> $NDB_TOOLS_OUTPUT 2>&1;

create table t1 (
  a int primary key,
  b int
) engine=ndb;

--echo # csv file does not exist
--error 1
exec $NDB_IMPORT --state-dir=$MYSQLTEST_VARDIR/tmp --keep-state --verbose=1
     test '/foo/data/t1.csv' >> $NDB_TOOLS_OUTPUT 2>&1;

perl;
use strict;
use Symbol;
my $vardir = $ENV{MYSQLTEST_VARDIR}
  or die "need MYSQLTEST_VARDIR";
my $file = "$vardir/tmp/t1.csv";
my $fh = gensym();
open($fh, ">$file")
  or die "$file: open for write failed: $!";
for my $i (0..999) {
  print $fh $i, "\t", $i*10, "\n";
}
close($fh)
  or die "$file: close after write failed: $!";
exit(0)
EOF

--echo # bad state dir
--error 1
exec $NDB_IMPORT --state-dir=/foo/state --keep-state --verbose=1
     test $MYSQLTEST_VARDIR/tmp/t1.csv >> $NDB_TOOLS_OUTPUT 2>&1;

--echo # normal import
exec $NDB_IMPORT --state-dir=$MYSQLTEST_VARDIR/tmp --keep-state --verbose=1
     --input-type=csv --output-type=ndb
     test $MYSQLTEST_VARDIR/tmp/t1.csv >> $NDB_TOOLS_OUTPUT 2>&1;
select count(*) from t1;

--echo # invalid --input-type
--error 1
exec $NDB_IMPORT --state-dir=$MYSQLTEST_VARDIR/tmp --keep-state --verbose=1
     --input-type=xxx --output-type=ndb
     test $MYSQLTEST_VARDIR/tmp/t1.csv >> $NDB_TOOLS_OUTPUT 2>&1;

--echo # invalid --output-type
--error 1
exec $NDB_IMPORT --state-dir=$MYSQLTEST_VARDIR/tmp --keep-state --verbose=1
     --input-type=csv --output-type=xxx
     test $MYSQLTEST_VARDIR/tmp/t1.csv >> $NDB_TOOLS_OUTPUT 2>&1;

--echo # simple utf8 test

perl;
use strict;
use Symbol;
my $vardir = $ENV{MYSQLTEST_VARDIR}
  or die "need MYSQLTEST_VARDIR";
my $file = "$vardir/tmp/t2.csv";
my $fh = gensym();
open($fh, ">$file")
  or die "$file: open for write failed: $!";
binmode($fh, ":utf8");
my $c1 = chr(0x00e4);
my $c2 = chr(0x263a);
my $c3 = chr(0x2665);
print $fh 0, "\t", '\N', "\n";
print $fh 1, "\t", $c1, "\n";
print $fh 2, "\t", $c1, $c2, "\n";
print $fh 3, "\t", $c1, $c2, $c3, "\n";
close($fh)
  or die "$file: close after write failed: $!";
exit(0);
EOF

create table t2 (
  a int primary key,
  b char(3)
) charset utf8
  engine=ndb;

create table t2ver (
  a int primary key,
  b char(3)
) charset utf8
  engine=ndb;

exec $NDB_IMPORT --state-dir=$MYSQLTEST_VARDIR/tmp --keep-state --verbose=1
     test $MYSQLTEST_VARDIR/tmp/t2.csv >> $NDB_TOOLS_OUTPUT 2>&1;

--disable_query_log
eval load data infile '$MYSQLTEST_VARDIR/tmp/t2.csv'
into table t2ver
character set utf8;
--enable_query_log

select count(*) from t2 x, t2ver y
where x.a = y.a
and (x.b = y.b or (x.b is null and y.b is null));

--echo # simple hidden-pk test

perl;
use strict;
use Symbol;
my $vardir = $ENV{MYSQLTEST_VARDIR}
  or die "need MYSQLTEST_VARDIR";
my $file = "$vardir/tmp/t3.csv";
my $fh = gensym();
open($fh, ">$file")
  or die "$file: open for write failed: $!";
for my $i (1..1000) {
  print $fh 10*$i, "\n";
}
close($fh)
  or die "$file: close after write failed: $!";
exit(0);
EOF

create table t3 (
  b int not null,
  # unique key would turn into pk
  key bx (b)
) engine=ndb;

create table t3ver like t3;

exec $NDB_IMPORT --state-dir=$MYSQLTEST_VARDIR/tmp --keep-state --verbose=1
     test $MYSQLTEST_VARDIR/tmp/t3.csv >> $NDB_TOOLS_OUTPUT 2>&1;

--disable_query_log
eval load data infile '$MYSQLTEST_VARDIR/tmp/t3.csv'
into table t3ver;
--enable_query_log

select count(*) from t3;
select count(*) from t3ver;

select count(*) from t3 x, t3ver y
where x.b = y.b;

--echo # test with rejects and no --keep-state

perl;
use strict;
use Symbol;
my $vardir = $ENV{MYSQLTEST_VARDIR}
  or die "need MYSQLTEST_VARDIR";
my $file = "$vardir/tmp/t4.csv";
my $fh = gensym();
open($fh, ">$file")
  or die "$file: open for write failed: $!";
for my $i (0..999) {
  if ($i == 333) {
    print $fh $i, "\t", $i*10, "\t", 333, "\n";
  } elsif ($i == 666) {
    print $fh 111, "\t", $i*10, "\n";
  } elsif ($i == 999) {
    print $fh $i, "\t", "abcde", "\n";
  } else {
    print $fh $i, "\t", $i*10, "\n";
  }
}
close($fh)
  or die "$file: close after write failed: $!";
exit(0)
EOF

create table t4 (
  a int primary key,
  b int not null
) engine=ndb;

exec $NDB_IMPORT --state-dir=$MYSQLTEST_VARDIR/tmp --verbose=1
     --rejects=3
     test $MYSQLTEST_VARDIR/tmp/t4.csv >> $NDB_TOOLS_OUTPUT 2>&1;

--error 1
--file_exists $MYSQLTEST_VARDIR/tmp/t4.res
--error 0
--file_exists $MYSQLTEST_VARDIR/tmp/t4.rej
--error 1
--file_exists $MYSQLTEST_VARDIR/tmp/t4.map
--error 1
--file_exists $MYSQLTEST_VARDIR/tmp/t4.stt

drop table t1, t2, t2ver, t3, t3ver, t4;
