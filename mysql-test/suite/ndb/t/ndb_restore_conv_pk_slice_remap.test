-- source include/have_ndb.inc
<<<<<<< HEAD
-- source include/have_ndb_debug.inc
-- source suite/ndb/include/backup_restore_setup.inc

--disable_query_log
set @old_ndb_autoincrement_prefetch_sz = @@session.ndb_autoincrement_prefetch_sz;
set ndb_autoincrement_prefetch_sz = 1;
--enable_query_log
=======
-- source include/not_embedded.inc
-- source include/have_ndb_debug.inc
>>>>>>> pr/231

use test;


--echo Based on the test in ndb_restore_conv_remap
--echo But adds :
--echo   - Log content (requiring ndb_debug)
--echo   - Restore by slice
--echo   - PK changes
--echo
--echo Schema has multiple tables connected via
--echo 'entry_key' which is remapped during restore
--echo Some tables also have their own local autoincrement id
--echo as part of their PK
--echo Some tables have TEXT(Blob) columns requiring staging
--echo tables to restore, others have schema changes which
--echo can be handled directly inline.


create table idx_tbl (entry_key bigint unsigned not null auto_increment,
                      k1 varchar(100), 
                      k2 varchar(100), 
                      data int,
                      primary key (k1, k2),
                      unique(entry_key)) engine=ndb;

create table type1_1 (entry_key bigint unsigned not null primary key,
                      data int) engine=ndb;

create table type1_2 (entry_key bigint unsigned not null primary key,
                      data int) engine=ndb;

create table type2_1 (entry_key bigint unsigned not null,
                      mv_idx bigint unsigned not null auto_increment,
                      data int,
                      primary key (entry_key, mv_idx)) engine=ndb;

create table type2_2 (entry_key bigint unsigned not null,
                      mv_idx bigint unsigned not null auto_increment,
                      data text,
                      primary key (entry_key, mv_idx)) engine=ndb;

# Old style type2 tables

# With TEXT (staging)
create table type2_3 (mv_idx bigint unsigned not null auto_increment,
                      entry_key bigint unsigned not null,
                      data text,
                      primary key (mv_idx)) engine = ndb;

# Without TEXT (direct - will use dynamically created pk mapping index)
create table type2_4 (mv_idx bigint unsigned not null auto_increment,
                      entry_key bigint unsigned not null,
                      data int,
                      primary key (mv_idx)) engine = ndb;

--echo Populate a number of entities, each with
--echo a couple of type_1 rows and a few sets of type_2 rows

insert into idx_tbl (k1,k2,data) values ('Edinburgh', 'UK', 1);
<<<<<<< HEAD
select last_insert_id() into @ek;
=======
select @ek:=last_insert_id();
>>>>>>> pr/231
  insert into type1_1 values (@ek, 11);
  insert into type1_2 values (@ek, 12);
  insert into type2_1 (entry_key, data) values (@ek, 110);
  insert into type2_1 (entry_key, data) values (@ek, 111);
  insert into type2_1 (entry_key, data) values (@ek, 112);
  insert into type2_1 (entry_key, data) values (@ek, 113);
  insert into type2_2 (entry_key, data) values (@ek, repeat("0121", 10000));
  insert into type2_2 (entry_key, data) values (@ek, repeat("0122", 10000));
  insert into type2_3 (entry_key, data) values (@ek, repeat("0124", 10000));
  insert into type2_3 (entry_key, data) values (@ek, repeat("0125", 10000));
  insert into type2_4 (entry_key, data) values (@ek, 126);
  insert into type2_4 (entry_key, data) values (@ek, 127);

insert into idx_tbl (k1,k2,data) values ('Bristol', 'UK', 2);
<<<<<<< HEAD
select last_insert_id() into @ek;
=======
select @ek:=last_insert_id();
>>>>>>> pr/231
  insert into type1_1 values (@ek, 21);
  insert into type1_2 values (@ek, 22);
  insert into type2_1 (entry_key, data) values (@ek, 210);
  insert into type2_1 (entry_key, data) values (@ek, 211);
  insert into type2_1 (entry_key, data) values (@ek, 212);
  insert into type2_1 (entry_key, data) values (@ek, 213);
  insert into type2_2 (entry_key, data) values (@ek, repeat("0221", 10000));
  insert into type2_2 (entry_key, data) values (@ek, repeat("0222", 10000));
  insert into type2_3 (entry_key, data) values (@ek, repeat("0224", 10000));
  insert into type2_3 (entry_key, data) values (@ek, repeat("0225", 10000));
  insert into type2_4 (entry_key, data) values (@ek, 226);
  insert into type2_4 (entry_key, data) values (@ek, 227);

insert into idx_tbl (k1,k2,data) values ('Glasgow', 'UK', 3);
<<<<<<< HEAD
select last_insert_id() into @ek;
=======
select @ek:=last_insert_id();
>>>>>>> pr/231
  insert into type1_1 values (@ek, 31);
  insert into type1_2 values (@ek, 32);
  insert into type2_1 (entry_key, data) values (@ek, 310);
  insert into type2_1 (entry_key, data) values (@ek, 311);
  insert into type2_1 (entry_key, data) values (@ek, 312);
  insert into type2_1 (entry_key, data) values (@ek, 313);
  insert into type2_2 (entry_key, data) values (@ek, repeat("0321", 10000));
  insert into type2_2 (entry_key, data) values (@ek, repeat("0322", 10000));
  insert into type2_3 (entry_key, data) values (@ek, repeat("0324", 10000));
  insert into type2_3 (entry_key, data) values (@ek, repeat("0325", 10000));
  insert into type2_4 (entry_key, data) values (@ek, 326);
  insert into type2_4 (entry_key, data) values (@ek, 327);

insert into idx_tbl (k1,k2,data) values ('London', 'UK', 4);
<<<<<<< HEAD
select last_insert_id() into @ek;
=======
select @ek:=last_insert_id();
>>>>>>> pr/231
  insert into type1_1 values (@ek, 41);
  insert into type1_2 values (@ek, 42);
  insert into type2_1 (entry_key, data) values (@ek, 410);
  insert into type2_1 (entry_key, data) values (@ek, 411);
  insert into type2_1 (entry_key, data) values (@ek, 412);
  insert into type2_1 (entry_key, data) values (@ek, 413);
  insert into type2_2 (entry_key, data) values (@ek, repeat("0421", 10000));
  insert into type2_2 (entry_key, data) values (@ek, repeat("0422", 10000));
  insert into type2_3 (entry_key, data) values (@ek, repeat("0424", 10000));
  insert into type2_3 (entry_key, data) values (@ek, repeat("0425", 10000));
  insert into type2_4 (entry_key, data) values (@ek, 426);
  insert into type2_4 (entry_key, data) values (@ek, 427);

insert into idx_tbl (k1,k2,data) values ('Paris', 'France', 5);
<<<<<<< HEAD
select last_insert_id() into @ek;
=======
select @ek:=last_insert_id();
>>>>>>> pr/231
  insert into type1_1 values (@ek, 51);
  insert into type1_2 values (@ek, 52);
  insert into type2_1 (entry_key, data) values (@ek, 510);
  insert into type2_1 (entry_key, data) values (@ek, 511);
  insert into type2_1 (entry_key, data) values (@ek, 512);
  insert into type2_1 (entry_key, data) values (@ek, 513);
  insert into type2_2 (entry_key, data) values (@ek, repeat("0521", 10000));
  insert into type2_2 (entry_key, data) values (@ek, repeat("0522", 10000));
  insert into type2_3 (entry_key, data) values (@ek, repeat("0524", 10000));
  insert into type2_3 (entry_key, data) values (@ek, repeat("0525", 10000));
  insert into type2_4 (entry_key, data) values (@ek, 526);
  insert into type2_4 (entry_key, data) values (@ek, 527);

insert into idx_tbl (k1,k2,data) values ('Heidelberg', 'Germany', 6);
<<<<<<< HEAD
select last_insert_id() into @ek;
=======
select @ek:=last_insert_id();
>>>>>>> pr/231
  insert into type1_1 values (@ek, 61);
  insert into type1_2 values (@ek, 62);
  insert into type2_1 (entry_key, data) values (@ek, 610);
  insert into type2_1 (entry_key, data) values (@ek, 611);
  insert into type2_1 (entry_key, data) values (@ek, 612);
  insert into type2_1 (entry_key, data) values (@ek, 613);
  insert into type2_2 (entry_key, data) values (@ek, repeat("0621", 10000));
  insert into type2_2 (entry_key, data) values (@ek, repeat("0622", 10000));
  insert into type2_3 (entry_key, data) values (@ek, repeat("0624", 10000));
  insert into type2_3 (entry_key, data) values (@ek, repeat("0625", 10000));
  insert into type2_4 (entry_key, data) values (@ek, 626);
  insert into type2_4 (entry_key, data) values (@ek, 627);

insert into idx_tbl (k1,k2,data) values ('Riga', 'Latvia', 7);
<<<<<<< HEAD
select last_insert_id() into @ek;
=======
select @ek:=last_insert_id();
>>>>>>> pr/231
  insert into type1_1 values (@ek, 71);
  insert into type1_2 values (@ek, 72);
  insert into type2_1 (entry_key, data) values (@ek, 710);
  insert into type2_1 (entry_key, data) values (@ek, 711);
  insert into type2_1 (entry_key, data) values (@ek, 712);
  insert into type2_1 (entry_key, data) values (@ek, 713);
  insert into type2_2 (entry_key, data) values (@ek, repeat("0721", 10000));
  insert into type2_2 (entry_key, data) values (@ek, repeat("0722", 10000));
  insert into type2_3 (entry_key, data) values (@ek, repeat("0724", 10000));
  insert into type2_3 (entry_key, data) values (@ek, repeat("0725", 10000));
  insert into type2_4 (entry_key, data) values (@ek, 726);
  insert into type2_4 (entry_key, data) values (@ek, 727);

insert into idx_tbl (k1,k2,data) values ('Orlando', 'USA', 8);
<<<<<<< HEAD
select last_insert_id() into @ek;
=======
select @ek:=last_insert_id();
>>>>>>> pr/231
  insert into type1_1 values (@ek, 81);
  insert into type1_2 values (@ek, 82);
  insert into type2_1 (entry_key, data) values (@ek, 810);
  insert into type2_1 (entry_key, data) values (@ek, 811);
  insert into type2_1 (entry_key, data) values (@ek, 812);
  insert into type2_1 (entry_key, data) values (@ek, 813);
  insert into type2_2 (entry_key, data) values (@ek, repeat("0821", 10000));
  insert into type2_2 (entry_key, data) values (@ek, repeat("0822", 10000));
  insert into type2_3 (entry_key, data) values (@ek, repeat("0824", 10000));
  insert into type2_3 (entry_key, data) values (@ek, repeat("0825", 10000));
  insert into type2_4 (entry_key, data) values (@ek, 826);
  insert into type2_4 (entry_key, data) values (@ek, 827);

--echo Start backup
--echo Cause backup to stall to allow changes
<<<<<<< HEAD
--exec $NDB_MGM -e "all error 10039" >> $NDB_TOOLS_OUTPUT
=======
--exec $NDB_MGM --no-defaults --ndb-connectstring="$NDB_CONNECTSTRING" -e "all error 10039" >> $NDB_TOOLS_OUTPUT
>>>>>>> pr/231
--source suite/ndb/t/ndb_backup_nowait_start.inc

--echo Now make some changes during the backup
update idx_tbl set data = data+10;
update type1_1 set data = data+100;
update type1_2 set data = data+100;
update type2_1 set data = data+1000;
update type2_2 set data = repeat(right(data, 4)+1000, 5000);
update type2_3 set data = repeat(right(data, 4)+2000, 5000);
update type2_4 set data = data + 3000;

update idx_tbl set data = data-10;
update type1_1 set data = data-100;
update type1_2 set data = data-100;
update type2_1 set data = data-1000;
update type2_2 set data = repeat(concat("0", right(data, 4)-1000), 10000);
update type2_3 set data = repeat(concat("0", right(data, 4)-2000), 10000);
update type2_4 set data = data - 3000;

--echo Unblock backup
<<<<<<< HEAD
--exec $NDB_MGM -e "all error 0" >> $NDB_TOOLS_OUTPUT
=======
--exec $NDB_MGM --no-defaults --ndb-connectstring="$NDB_CONNECTSTRING" -e "all error 0" >> $NDB_TOOLS_OUTPUT
>>>>>>> pr/231

--source suite/ndb/t/ndb_backup_nowait_wait.inc
--let first_backup_id=$the_backup_id


select * from idx_tbl order by entry_key;
select * from type1_1 order by entry_key;
select * from type1_2 order by entry_key;
select * from type2_1 order by entry_key, mv_idx;
select entry_key, mv_idx, right(data, 4) from type2_2 order by entry_key, mv_idx;
select entry_key, mv_idx, right(data, 4) from type2_3 order by entry_key, mv_idx;
select * from type2_4 order by entry_key, mv_idx;

--echo First set of content
--echo --------------------
select idx_tbl.entry_key,
       idx_tbl.k1,
       idx_tbl.k2,
       idx_tbl.data,
       type1_1.data,
       type1_2.data,
       type2_1.mv_idx,
       type2_1.data,
       type2_2.mv_idx,
       right(type2_2.data, 4),
       length(type2_2.data),
       right(type2_3.data, 4),
       length(type2_3.data),
       type2_4.mv_idx,
       type2_4.data
  from
       idx_tbl join type1_1 join type1_2 join type2_1 join type2_2 join type2_3 join type2_4
    on
       idx_tbl.entry_key = type1_1.entry_key
       and
       idx_tbl.entry_key = type1_2.entry_key
       and
       idx_tbl.entry_key = type2_1.entry_key
       and
       idx_tbl.entry_key = type2_2.entry_key
       and
       idx_tbl.entry_key = type2_3.entry_key
       and
       idx_tbl.entry_key = type2_4.entry_key
  order by idx_tbl.entry_key, type2_1.data, right(type2_2.data, 4), right(type2_3.data, 4), type2_4.data;

--echo Show auto-inc values
select count(1), max(entry_key) from test.idx_tbl;
<<<<<<< HEAD
show create table idx_tbl;
select count(1), max(mv_idx) from test.type2_1;
show create table type2_1;
select count(1), max(mv_idx) from test.type2_2;
show create table type2_2;
select count(1), max(mv_idx) from test.type2_3;
show create table type2_3;
select count(1), max(mv_idx) from test.type2_4;
show create table type2_4;
=======
select table_name, auto_increment from information_schema.tables where table_schema='test' and table_name='idx_tbl';
select count(1), max(mv_idx) from test.type2_1;
select table_name, auto_increment from information_schema.tables where table_schema='test' and table_name='type2_1';
select count(1), max(mv_idx) from test.type2_2;
select table_name, auto_increment from information_schema.tables where table_schema='test' and table_name='type2_2';
select count(1), max(mv_idx) from test.type2_3;
select table_name, auto_increment from information_schema.tables where table_schema='test' and table_name='type2_3';
select count(1), max(mv_idx) from test.type2_4;
select table_name, auto_increment from information_schema.tables where table_schema='test' and table_name='type2_4';
>>>>>>> pr/231

--echo No mv_idx duplicates in type_2 tables
select mv_idx, count(1) as ct 
  from type2_1 group by mv_idx 
having ct > 1;
select mv_idx, count(1) as ct 
  from type2_2 group by mv_idx 
having ct > 1;
select mv_idx, count(1) as ct 
  from type2_3 group by mv_idx 
having ct > 1;
select mv_idx, count(1) as ct 
  from type2_4 group by mv_idx 
having ct > 1;

--echo Create a different set of entities, with the same auto-inc
--echo keys for entry_key and mv_idx
update idx_tbl set k1="Stockholm", k2="Sweden" where entry_key = 1;
update idx_tbl set k1="Trondheim", k2="Norway" where entry_key = 2;
update idx_tbl set k1="Portland", k2="USA" where entry_key=3;
update idx_tbl set k1="Bangalore", k2="India" where entry_key=4;
update idx_tbl set k1="Helsinki", k2="Finland" where entry_key=5;
update idx_tbl set k1="Lisbon", k2="Portugal" where entry_key=6;
update idx_tbl set k1="Norrwaste", k2="Sweden" where entry_key=7;
update idx_tbl set k1="ROW", k2="Earth" where entry_key=8;

--echo Modify data to be distinct
update idx_tbl set data = data+10;
update type1_1 set data = data+100;
update type1_2 set data = data+100;
update type2_1 set data = data+1000;
update type2_2 set data = repeat(right(data, 4)+1000, 10000);
update type2_3 set data = repeat(right(data, 4)+2000, 10000);
update type2_4 set data = data+3000;

--echo Start backup
--echo Cause backup to stall to allow changes
<<<<<<< HEAD
--exec $NDB_MGM -e "all error 10039" >> $NDB_TOOLS_OUTPUT
=======
--exec $NDB_MGM --no-defaults --ndb-connectstring="$NDB_CONNECTSTRING" -e "all error 10039" >> $NDB_TOOLS_OUTPUT
>>>>>>> pr/231
--source suite/ndb/t/ndb_backup_nowait_start.inc

--echo Now make some changes during the backup
update idx_tbl set data = data+10;
update type1_1 set data = data+100;
update type1_2 set data = data+100;
update type2_1 set data = data+1000;
update type2_2 set data = repeat(right(data, 4)+1000, 5000);
update type2_3 set data = repeat(right(data, 4)+2000, 5000);
update type2_4 set data = data + 3000;

update idx_tbl set data = data-10;
update type1_1 set data = data-100;
update type1_2 set data = data-100;
update type2_1 set data = data-1000;
update type2_2 set data = repeat(right(data, 4)-1000, 10000);
update type2_3 set data = repeat(right(data, 4)-2000, 10000);
update type2_4 set data = data - 3000;

--echo Unblock backup
<<<<<<< HEAD
--exec $NDB_MGM -e "all error 0" >> $NDB_TOOLS_OUTPUT
=======
--exec $NDB_MGM --no-defaults --ndb-connectstring="$NDB_CONNECTSTRING" -e "all error 0" >> $NDB_TOOLS_OUTPUT
>>>>>>> pr/231

--source suite/ndb/t/ndb_backup_nowait_wait.inc
--let second_backup_id=$the_backup_id

--echo Second set of content
--echo ---------------------
select idx_tbl.entry_key,
       idx_tbl.k1,
       idx_tbl.k2,
       idx_tbl.data,
       type1_1.data,
       type1_2.data,
       type2_1.mv_idx,
       type2_1.data,
       type2_2.mv_idx,
       right(type2_2.data, 4),
       length(type2_2.data),
       right(type2_3.data, 4),
       length(type2_3.data),
       type2_4.mv_idx,
       type2_4.data
  from
       idx_tbl join type1_1 join type1_2 join type2_1 join type2_2 join type2_3 join type2_4
    on
       idx_tbl.entry_key = type1_1.entry_key
       and
       idx_tbl.entry_key = type1_2.entry_key
       and
       idx_tbl.entry_key = type2_1.entry_key
       and
       idx_tbl.entry_key = type2_2.entry_key
       and
       idx_tbl.entry_key = type2_3.entry_key
       and
       idx_tbl.entry_key = type2_4.entry_key
  order by idx_tbl.entry_key, type2_1.data, right(type2_2.data, 4), right(type2_3.data, 4), type2_4.data;

--echo Show auto-inc values
select count(1), max(entry_key) from test.idx_tbl;
<<<<<<< HEAD
show create table idx_tbl;
select count(1), max(mv_idx) from test.type2_1;
show create table type2_1;
select count(1), max(mv_idx) from test.type2_2;
show create table type2_2;
select count(1), max(mv_idx) from test.type2_3;
show create table type2_3;
select count(1), max(mv_idx) from test.type2_4;
show create table type2_4;
=======
select table_name, auto_increment from information_schema.tables where table_schema='test' and table_name='idx_tbl';
select count(1), max(mv_idx) from test.type2_1;
select table_name, auto_increment from information_schema.tables where table_schema='test' and table_name='type2_1';
select count(1), max(mv_idx) from test.type2_2;
select table_name, auto_increment from information_schema.tables where table_schema='test' and table_name='type2_2';
select count(1), max(mv_idx) from test.type2_3;
select table_name, auto_increment from information_schema.tables where table_schema='test' and table_name='type2_3';
select count(1), max(mv_idx) from test.type2_4;
select table_name, auto_increment from information_schema.tables where table_schema='test' and table_name='type2_4';
>>>>>>> pr/231

--echo No mv_idx duplicates in type_2 tables
select mv_idx, count(1) as ct 
  from type2_1 group by mv_idx 
having ct > 1;
select mv_idx, count(1) as ct 
  from type2_2 group by mv_idx 
having ct > 1;
select mv_idx, count(1) as ct 
  from type2_3 group by mv_idx 
having ct > 1;
select mv_idx, count(1) as ct 
  from type2_4 group by mv_idx 
having ct > 1;

select * from idx_tbl order by entry_key;
select * from type1_1 order by entry_key;
select * from type1_2 order by entry_key;
select * from type2_1 order by entry_key, mv_idx;
select entry_key, mv_idx, right(data, 4) from type2_2 order by entry_key, mv_idx;
select entry_key, mv_idx, right(data, 4) from type2_3 order by entry_key, mv_idx;
select * from type2_4 order by entry_key, mv_idx;

drop table idx_tbl, type1_1, type1_2, type2_1, type2_2, type2_3, type2_4;

--echo Recreate tables
create table idx_tbl (entry_key bigint unsigned not null auto_increment,
                      k1 varchar(100), 
                      k2 varchar(100), 
                      data int,
                      primary key (k1, k2),
                      unique(entry_key)) engine=ndb;

create table type1_1 (entry_key bigint unsigned not null primary key,
                      data int) engine=ndb;

create table type1_2 (entry_key bigint unsigned not null primary key,
                      data int) engine=ndb;

create table type2_1 (entry_key bigint unsigned not null,
                      mv_idx bigint unsigned not null auto_increment,
                      data int,
                      primary key (entry_key, mv_idx)) engine=ndb;

create table type2_2 (entry_key bigint unsigned not null,
                      mv_idx bigint unsigned not null auto_increment,
                      data text,
                      primary key (entry_key, mv_idx)) engine=ndb;

# Convert old type_2 tables to new format

create table type2_3 (entry_key bigint unsigned not null,
                      mv_idx bigint unsigned not null auto_increment,
                      data text,
                      primary key (entry_key, mv_idx)) engine = ndb;

create table type2_4 (entry_key bigint unsigned not null,
                      mv_idx bigint unsigned not null auto_increment,
                      data int,
                      primary key (entry_key, mv_idx)) engine = ndb;

--echo Run normal restore for first set of content
# Varying #slices for fun
<<<<<<< HEAD
--exec $NDB_RESTORE -b $first_backup_id -n 1 -r --allow-pk-changes --num-slices=3 --slice-id=0 $NDB_BACKUPS-$first_backup_id >> $NDB_TOOLS_OUTPUT
--exec $NDB_RESTORE -b $first_backup_id -n 1 -r --allow-pk-changes --num-slices=3 --slice-id=1 $NDB_BACKUPS-$first_backup_id >> $NDB_TOOLS_OUTPUT
--exec $NDB_RESTORE -b $first_backup_id -n 1 -r --allow-pk-changes --num-slices=3 --slice-id=2 $NDB_BACKUPS-$first_backup_id >> $NDB_TOOLS_OUTPUT

--exec $NDB_RESTORE -b $first_backup_id -n 2 -r --allow-pk-changes --num-slices=4 --slice-id=0 $NDB_BACKUPS-$first_backup_id >> $NDB_TOOLS_OUTPUT
--exec $NDB_RESTORE -b $first_backup_id -n 2 -r --allow-pk-changes --num-slices=4 --slice-id=1 $NDB_BACKUPS-$first_backup_id >> $NDB_TOOLS_OUTPUT
--exec $NDB_RESTORE -b $first_backup_id -n 2 -r --allow-pk-changes --num-slices=4 --slice-id=2 $NDB_BACKUPS-$first_backup_id >> $NDB_TOOLS_OUTPUT
--exec $NDB_RESTORE -b $first_backup_id -n 2 -r --allow-pk-changes --num-slices=4 --slice-id=3 $NDB_BACKUPS-$first_backup_id >> $NDB_TOOLS_OUTPUT

--let next_entry_key=query_get_value(select auto_increment from information_schema.tables where table_schema='test' and table_name='idx_tbl', AUTO_INCREMENT, 1)
--let next_type2_1=query_get_value(select auto_increment from information_schema.tables where table_schema='test' and table_name='type2_1', AUTO_INCREMENT, 1)
--let next_type2_2=query_get_value(select auto_increment from information_schema.tables where table_schema='test' and table_name='type2_2', AUTO_INCREMENT, 1)
--let next_type2_3=query_get_value(select auto_increment from information_schema.tables where table_schema='test' and table_name='type2_3', AUTO_INCREMENT, 1)
--let next_type2_4=query_get_value(select auto_increment from information_schema.tables where table_schema='test' and table_name='type2_4', AUTO_INCREMENT, 1)
=======
--exec $NDB_RESTORE --no-defaults -b $first_backup_id -n 1 -r --allow-pk-changes --num-slices=3 --slice-id=0 $NDB_BACKUPS-$first_backup_id >> $NDB_TOOLS_OUTPUT
--exec $NDB_RESTORE --no-defaults -b $first_backup_id -n 1 -r --allow-pk-changes --num-slices=3 --slice-id=1 $NDB_BACKUPS-$first_backup_id >> $NDB_TOOLS_OUTPUT
--exec $NDB_RESTORE --no-defaults -b $first_backup_id -n 1 -r --allow-pk-changes --num-slices=3 --slice-id=2 $NDB_BACKUPS-$first_backup_id >> $NDB_TOOLS_OUTPUT

--exec $NDB_RESTORE --no-defaults -b $first_backup_id -n 2 -r --allow-pk-changes --num-slices=4 --slice-id=0 $NDB_BACKUPS-$first_backup_id >> $NDB_TOOLS_OUTPUT
--exec $NDB_RESTORE --no-defaults -b $first_backup_id -n 2 -r --allow-pk-changes --num-slices=4 --slice-id=1 $NDB_BACKUPS-$first_backup_id >> $NDB_TOOLS_OUTPUT
--exec $NDB_RESTORE --no-defaults -b $first_backup_id -n 2 -r --allow-pk-changes --num-slices=4 --slice-id=2 $NDB_BACKUPS-$first_backup_id >> $NDB_TOOLS_OUTPUT
--exec $NDB_RESTORE --no-defaults -b $first_backup_id -n 2 -r --allow-pk-changes --num-slices=4 --slice-id=3 $NDB_BACKUPS-$first_backup_id >> $NDB_TOOLS_OUTPUT

--let next_entry_key=query_get_value(select auto_increment from information_schema.tables where table_schema='test' and table_name='idx_tbl', auto_increment, 1)
--let next_type2_1=query_get_value(select auto_increment from information_schema.tables where table_schema='test' and table_name='type2_1', auto_increment, 1)
--let next_type2_2=query_get_value(select auto_increment from information_schema.tables where table_schema='test' and table_name='type2_2', auto_increment, 1)
--let next_type2_3=query_get_value(select auto_increment from information_schema.tables where table_schema='test' and table_name='type2_3', auto_increment, 1)
--let next_type2_4=query_get_value(select auto_increment from information_schema.tables where table_schema='test' and table_name='type2_4', auto_increment, 1)
>>>>>>> pr/231


--let remap_args = -x test.idx_tbl.entry_key:offset:$next_entry_key
--let remap_args = $remap_args -x test.type1_1.entry_key:offset:$next_entry_key
--let remap_args = $remap_args -x test.type1_2.entry_key:offset:$next_entry_key
--let remap_args = $remap_args -x test.type2_1.entry_key:offset:$next_entry_key
--let remap_args = $remap_args -x test.type2_1.mv_idx:offset:$next_type2_1
--let remap_args = $remap_args -x test.type2_2.entry_key:offset:$next_entry_key
--let remap_args = $remap_args -x test.type2_2.mv_idx:offset:$next_type2_2
--let remap_args = $remap_args -x test.type2_3.entry_key:offset:$next_entry_key
--let remap_args = $remap_args -x test.type2_3.mv_idx:offset:$next_type2_3
--let remap_args = $remap_args -x test.type2_4.entry_key:offset:$next_entry_key
--let remap_args = $remap_args -x test.type2_4.mv_idx:offset:$next_type2_4

--echo Remap args : $remap_args

--echo Run offset restore for second set of content
<<<<<<< HEAD
--exec $NDB_RESTORE -b $second_backup_id -n 1 -r --allow-pk-changes --num-slices=5 --slice-id=0 $remap_args $NDB_BACKUPS-$second_backup_id >> $NDB_TOOLS_OUTPUT
--exec $NDB_RESTORE -b $second_backup_id -n 1 -r --allow-pk-changes --num-slices=5 --slice-id=1 $remap_args $NDB_BACKUPS-$second_backup_id >> $NDB_TOOLS_OUTPUT
--exec $NDB_RESTORE -b $second_backup_id -n 1 -r --allow-pk-changes --num-slices=5 --slice-id=2 $remap_args $NDB_BACKUPS-$second_backup_id >> $NDB_TOOLS_OUTPUT
--exec $NDB_RESTORE -b $second_backup_id -n 1 -r --allow-pk-changes --num-slices=5 --slice-id=3 $remap_args $NDB_BACKUPS-$second_backup_id >> $NDB_TOOLS_OUTPUT
--exec $NDB_RESTORE -b $second_backup_id -n 1 -r --allow-pk-changes --num-slices=5 --slice-id=4 $remap_args $NDB_BACKUPS-$second_backup_id >> $NDB_TOOLS_OUTPUT


--exec $NDB_RESTORE -b $second_backup_id -n 2 -r --allow-pk-changes --num-slices=3 --slice-id=0 $remap_args $NDB_BACKUPS-$second_backup_id >> $NDB_TOOLS_OUTPUT
--exec $NDB_RESTORE -b $second_backup_id -n 2 -r --allow-pk-changes --num-slices=3 --slice-id=1 $remap_args $NDB_BACKUPS-$second_backup_id >> $NDB_TOOLS_OUTPUT
--exec $NDB_RESTORE -b $second_backup_id -n 2 -r --allow-pk-changes --num-slices=3 --slice-id=2 $remap_args $NDB_BACKUPS-$second_backup_id >> $NDB_TOOLS_OUTPUT
=======
--exec $NDB_RESTORE --no-defaults -b $second_backup_id -n 1 -r --allow-pk-changes --num-slices=5 --slice-id=0 $remap_args $NDB_BACKUPS-$second_backup_id >> $NDB_TOOLS_OUTPUT
--exec $NDB_RESTORE --no-defaults -b $second_backup_id -n 1 -r --allow-pk-changes --num-slices=5 --slice-id=1 $remap_args $NDB_BACKUPS-$second_backup_id >> $NDB_TOOLS_OUTPUT
--exec $NDB_RESTORE --no-defaults -b $second_backup_id -n 1 -r --allow-pk-changes --num-slices=5 --slice-id=2 $remap_args $NDB_BACKUPS-$second_backup_id >> $NDB_TOOLS_OUTPUT
--exec $NDB_RESTORE --no-defaults -b $second_backup_id -n 1 -r --allow-pk-changes --num-slices=5 --slice-id=3 $remap_args $NDB_BACKUPS-$second_backup_id >> $NDB_TOOLS_OUTPUT
--exec $NDB_RESTORE --no-defaults -b $second_backup_id -n 1 -r --allow-pk-changes --num-slices=5 --slice-id=4 $remap_args $NDB_BACKUPS-$second_backup_id >> $NDB_TOOLS_OUTPUT


--exec $NDB_RESTORE --no-defaults -b $second_backup_id -n 2 -r --allow-pk-changes --num-slices=3 --slice-id=0 $remap_args $NDB_BACKUPS-$second_backup_id >> $NDB_TOOLS_OUTPUT
--exec $NDB_RESTORE --no-defaults -b $second_backup_id -n 2 -r --allow-pk-changes --num-slices=3 --slice-id=1 $remap_args $NDB_BACKUPS-$second_backup_id >> $NDB_TOOLS_OUTPUT
--exec $NDB_RESTORE --no-defaults -b $second_backup_id -n 2 -r --allow-pk-changes --num-slices=3 --slice-id=2 $remap_args $NDB_BACKUPS-$second_backup_id >> $NDB_TOOLS_OUTPUT
>>>>>>> pr/231

--echo Combined dataset
--echo -----------------
select idx_tbl.entry_key,
       idx_tbl.k1,
       idx_tbl.k2,
       idx_tbl.data,
       type1_1.data,
       type1_2.data,
       type2_1.mv_idx,
       type2_1.data,
       type2_2.mv_idx,
       right(type2_2.data, 4),
       length(type2_2.data),
       right(type2_3.data, 4),
       length(type2_3.data),
       type2_4.mv_idx,
       type2_4.data
  from
       idx_tbl join type1_1 join type1_2 join type2_1 join type2_2 join type2_3 join type2_4
    on
       idx_tbl.entry_key = type1_1.entry_key
       and
       idx_tbl.entry_key = type1_2.entry_key
       and
       idx_tbl.entry_key = type2_1.entry_key
       and
       idx_tbl.entry_key = type2_2.entry_key
       and
       idx_tbl.entry_key = type2_3.entry_key
       and
       idx_tbl.entry_key = type2_4.entry_key
  order by idx_tbl.entry_key, type2_1.data, right(type2_2.data, 4), right(type2_3.data, 4), type2_4.data;

--echo Show auto-inc values
select count(1), max(entry_key) from test.idx_tbl;
<<<<<<< HEAD
show create table idx_tbl;
select count(1), max(mv_idx) from test.type2_1;
show create table type2_1;
select count(1), max(mv_idx) from test.type2_2;
show create table type2_2;
select count(1), max(mv_idx) from test.type2_3;
show create table type2_3;
select count(1), max(mv_idx) from test.type2_4;
show create table type2_4;
=======
select table_name, auto_increment from information_schema.tables where table_schema='test' and table_name='idx_tbl';
select count(1), max(mv_idx) from test.type2_1;
select table_name, auto_increment from information_schema.tables where table_schema='test' and table_name='type2_1';
select count(1), max(mv_idx) from test.type2_2;
select table_name, auto_increment from information_schema.tables where table_schema='test' and table_name='type2_2';
select count(1), max(mv_idx) from test.type2_3;
select table_name, auto_increment from information_schema.tables where table_schema='test' and table_name='type2_3';
select count(1), max(mv_idx) from test.type2_4;
select table_name, auto_increment from information_schema.tables where table_schema='test' and table_name='type2_4';
>>>>>>> pr/231

--echo No mv_idx duplicates in type_2 tables
select mv_idx, count(1) as ct 
  from type2_1 group by mv_idx 
having ct > 1;
select mv_idx, count(1) as ct 
  from type2_2 group by mv_idx 
having ct > 1;
select mv_idx, count(1) as ct 
  from type2_3 group by mv_idx 
having ct > 1;
select mv_idx, count(1) as ct 
  from type2_4 group by mv_idx 
having ct > 1;

select * from idx_tbl order by entry_key;
select * from type1_1 order by entry_key;
select * from type1_2 order by entry_key;
select * from type2_1 order by entry_key, mv_idx;
select entry_key, mv_idx, right(data, 4) from type2_2 order by entry_key, mv_idx;
select entry_key, mv_idx, right(data, 4) from type2_3 order by entry_key, mv_idx;
select * from type2_4 order by entry_key, mv_idx;

--echo Verify the insert of further entity succeeds
insert into idx_tbl (k1,k2,data) values ('Sancerre', 'France', 9);
<<<<<<< HEAD
select last_insert_id() into @ek;
=======
select @ek:=last_insert_id();
>>>>>>> pr/231
  insert into type1_1 values (@ek, 91);
  insert into type1_2 values (@ek, 92);
  insert into type2_1 (entry_key, data) values (@ek, 910);
  insert into type2_1 (entry_key, data) values (@ek, 911);
  insert into type2_1 (entry_key, data) values (@ek, 912);
  insert into type2_1 (entry_key, data) values (@ek, 913);
  insert into type2_2 (entry_key, data) values (@ek, repeat("0921", 10000));
  insert into type2_2 (entry_key, data) values (@ek, repeat("0922", 10000));
  insert into type2_3 (entry_key, data) values (@ek, repeat("0923", 10000));
  insert into type2_3 (entry_key, data) values (@ek, repeat("0924", 10000));
  insert into type2_4 (entry_key, data) values (@ek, 925);
  insert into type2_4 (entry_key, data) values (@ek, 926);

--echo Modified content
--echo ----------------

<<<<<<< HEAD
show create table type2_3;
=======
select table_name, auto_increment from information_schema.tables where table_schema='test' and table_name='type2_3';

>>>>>>> pr/231

--echo No mv_idx duplicates in type_2 tables
select mv_idx, count(1) as ct 
  from type2_1 group by mv_idx 
having ct > 1;
select mv_idx, count(1) as ct 
  from type2_2 group by mv_idx 
having ct > 1;
select mv_idx, count(1) as ct 
  from type2_3 group by mv_idx 
having ct > 1;

select * from idx_tbl order by entry_key;
select * from type1_1 order by entry_key;
select * from type1_2 order by entry_key;
select * from type2_1 order by entry_key, mv_idx;
select entry_key, mv_idx, right(data, 4) from type2_2 order by entry_key, mv_idx;
select entry_key, mv_idx, right(data, 4) from type2_3 order by entry_key, mv_idx;

<<<<<<< HEAD
drop table idx_tbl, type1_1, type1_2, type2_1, type2_2, type2_3, type2_4;

--disable_query_log
set ndb_autoincrement_prefetch_sz = @old_ndb_autoincrement_prefetch_sz;
--enable_query_log

--source suite/ndb/include/backup_restore_cleanup.inc
--remove_file $NDB_TOOLS_OUTPUT
=======
drop table idx_tbl, type1_1, type1_2, type2_1, type2_2, type2_3, type2_4;
>>>>>>> pr/231
