# suite/funcs_1/t/is_table_constraints.test
#
# Check the layout of information_schema.table_constraints and the impact of
# CREATE/ALTER/DROP TABLE/VIEW/SCHEMA/COLUMN ... on it.
#
# Note:
#    This test is not intended
#    - to show information about the all time existing tables
#      within the databases information_schema and mysql
#    - for checking storage engine properties
#      Therefore please do not alter $engine_typee.
#
# Author:
# 2008-01-23 mleich WL#4203 Reorganize and fix the data dictionary tests of
#                           testsuite funcs_1
#                   Create this script based on older scripts and new code.
#

# Result differences depending on FS case sensitivity.
if (!$require_case_insensitive_file_system)
{
  --source include/have_case_sensitive_file_system.inc
}


let $engine_type       = InnoDB;

let $is_table = TABLE_CONSTRAINTS;

# The table INFORMATION_SCHEMA.TABLE_CONSTRAINTS must exist
eval SHOW TABLES FROM information_schema LIKE '$is_table';

--echo #######################################################################
--echo # Testcase 3.2.1.1: INFORMATION_SCHEMA tables can be queried via SELECT
--echo #######################################################################
# Ensure that every INFORMATION_SCHEMA table can be queried with a SELECT
# statement, just as if it were an ordinary user-defined table.
#
--source suite/funcs_1/datadict/is_table_query.inc


--echo #########################################################################
--echo # Testcase 3.2.10.1: INFORMATION_SCHEMA.TABLE_CONSTRAINTS layout
--echo #########################################################################
# Ensure that the INFORMATION_SCHEMA.TABLE_CONSTRAINTS table has the following
# columns, in the following order:
#
# CONSTRAINT_CATALOG (always shows NULL),
# CONSTRAINT_SCHEMA (shows the database, or schema, in which
#       a constraint an accessible table resides),
# CONSTRAINT_NAME (shows the name of a constraint defined on
#       an accessible table),
# TABLE_SCHEMA (shows the database, or schema, in which the
#       table resides),
# TABLE_NAME (shows the name of the table),
# CONSTRAINT_TYPE (shows the type of the constraint; either
#       'primary key', 'foreign key', 'unique', 'check').
#
--source suite/funcs_1/datadict/datadict_bug_12777.inc
eval DESCRIBE          information_schema.$is_table;
--source suite/funcs_1/datadict/datadict_bug_12777.inc
eval SHOW CREATE TABLE information_schema.$is_table;
--source suite/funcs_1/datadict/datadict_bug_12777.inc
eval SHOW COLUMNS FROM information_schema.$is_table;

# Note: Retrieval of information within information_schema.columns about
#       information_schema.table_constraints is in is_columns_is.test.

# Show that CONSTRAINT_CATALOG IS NULL
SELECT constraint_catalog, constraint_schema, constraint_name,
       table_schema, table_name
FROM information_schema.table_constraints
WHERE constraint_catalog IS NOT NULL AND
      table_name != 'ndb_binlog_index'
ORDER BY table_schema,table_name, constraint_name;


--echo #########################################################################################
--echo # Testcase 3.2.7.2 + 3.2.7.3: INFORMATION_SCHEMA.TABLE_CONSTRAINTS accessible information
--echo #########################################################################################
# 3.2.7.2:  Ensure that the table shows the relevant information on every
#           column, defined to be part of an index key, which is accessible to
#           the current user or to PUBLIC.
# 3.2.7.3:  Ensure that the table does not show any information on any indexed
#           column that is not accessible to the current user or PUBLIC.
#
# Note: Check of content within table_constraints about tables within
#       database           is checked in
#       mysql              is_table_constraints_mysql
#       information_schema is_table_constraints_is
#
--disable_warnings
DROP DATABASE IF EXISTS db_datadict;
--enable_warnings
CREATE DATABASE db_datadict;
--replace_result $engine_type <some_engine_type>
eval
CREATE TABLE db_datadict.t1 (f1 BIGINT, f2 BIGINT, f3 BIGINT, f4 BIGINT,
       f5 BIGINT, f6 BIGINT, PRIMARY KEY (f1,f2))
ENGINE = $engine_type;
CREATE UNIQUE INDEX my_idx1 ON db_datadict.t1(f6,f1);
CREATE UNIQUE INDEX my_idx2 ON db_datadict.t1(f3);
--replace_result $engine_type <some_engine_type>
eval
CREATE TABLE db_datadict.t2 (f1 BIGINT, f2 BIGINT, f3 BIGINT, f4 BIGINT,
       f5 BIGINT, f6 BIGINT, PRIMARY KEY (f1,f2))
ENGINE = $engine_type;

--error 0,ER_CANNOT_USER
DROP   USER 'testuser1'@'localhost';
CREATE USER 'testuser1'@'localhost';
GRANT SELECT(f5) ON db_datadict.t1 TO 'testuser1'@'localhost';
SHOW GRANTS FOR 'testuser1'@'localhost';

let $my_select = SELECT * FROM information_schema.table_constraints
WHERE table_schema = 'db_datadict'
ORDER BY table_schema,table_name, constraint_name;
let $my_show1 = SHOW INDEXES FROM db_datadict.t1;
let $my_show2 = SHOW INDEXES FROM db_datadict.t2;

eval $my_select;
# 1 Table           Note: We intentinally suppress the protocolling of all
# 2 Non_unique            output being not of interest or depending on
# 3 Key_name              storage engine used for the table.
# 4 Seq_in_index
# 5 Column_name
# 6 Collation
# 7 Cardinality
# 8 Sub_part
# 9 Packed
# 10 Null
# 11 Index_type
# 12 Comment
--replace_column 6 ### 7 ### 8 ### 9 ### 10 ### 11 ### 12 ###
eval $my_show1;
--replace_column 6 ### 7 ### 8 ### 9 ### 10 ### 11 ### 12 ###
eval $my_show2;

--echo # Establish connection testuser1 (user=testuser1)
--replace_result $MASTER_MYPORT MYSQL_PORT $MASTER_MYSOCK MYSQL_SOCK
connect (testuser1, localhost, testuser1, , db_datadict);
SHOW GRANTS FOR 'testuser1'@'localhost';
eval $my_select;
--replace_column 6 ### 7 ### 8 ### 9 ### 10 ### 11 ### 12 ###
eval $my_show1;
--error ER_TABLEACCESS_DENIED_ERROR
eval $my_show2;

# Cleanup
--echo # Switch to connection default and close connection testuser1
connection default;
disconnect testuser1;
DROP USER 'testuser1'@'localhost';
DROP DATABASE db_datadict;


--echo #########################################################################################
--echo # Testcase 3.2.1.13+3.2.1.14+3.2.1.15: INFORMATION_SCHEMA.TABLE_CONSTRAINTS modifications
--echo #########################################################################################
# 3.2.1.13: Ensure that the creation of any new database object (e.g. table or
#           column) automatically inserts all relevant information on that
#           object into every appropriate INFORMATION_SCHEMA table.
# 3.2.1.14: Ensure that the alteration of any existing database object
#           automatically updates all relevant information on that object in
#           every appropriate INFORMATION_SCHEMA table.
# 3.2.1.15: Ensure that the dropping of any existing database object
#           automatically deletes all relevant information on that object from
#           every appropriate INFORMATION_SCHEMA table.
#
--disable_warnings
DROP DATABASE IF EXISTS db_datadict;
DROP TABLE IF EXISTS test.t1_my_table;
--enable_warnings
CREATE DATABASE db_datadict;

SELECT table_name FROM information_schema.table_constraints
WHERE table_name LIKE 't1_my_table%';
--replace_result $engine_type <engine_type>
eval
CREATE TABLE test.t1_my_table
   (f1 CHAR(12), f2 TIMESTAMP, f4 BIGINT, PRIMARY KEY(f1,f2))
DEFAULT CHARACTER SET latin1 COLLATE latin1_swedish_ci
ENGINE = $engine_type;
# Settings used in CREATE TABLE must be visible
# in information_schema.table_constraints.
SELECT constraint_name, table_schema, table_name, constraint_type
FROM information_schema.table_constraints
WHERE table_name = 't1_my_table';
#
# Check modification of TABLE_NAME
SELECT table_name FROM information_schema.table_constraints
WHERE table_name LIKE 't1_my_table%';
RENAME TABLE test.t1_my_table TO test.t1_my_tablex;
SELECT table_name FROM information_schema.table_constraints
WHERE table_name LIKE 't1_my_table%';
#
# Check modification of TABLE_SCHEMA
SELECT table_schema,table_name FROM information_schema.table_constraints
WHERE table_name = 't1_my_tablex';
RENAME TABLE test.t1_my_tablex TO db_datadict.t1_my_tablex;
SELECT table_schema,table_name FROM information_schema.table_constraints
WHERE table_name = 't1_my_tablex';
#
let $my_select = SELECT constraint_schema, constraint_name, table_schema,
table_name, constraint_type
FROM information_schema.table_constraints
WHERE table_name = 't1_my_tablex'
ORDER BY table_schema,table_name, constraint_name;
#
# Check ADD INDEX being not UNIQUE (does not show up in table_constraints)
eval $my_select;
CREATE INDEX f2 ON db_datadict.t1_my_tablex(f2);
eval $my_select;
DROP INDEX f2 ON db_datadict.t1_my_tablex;
#
# Check ADD UNIQUE INDEX without name explicit assigned
eval $my_select;
ALTER TABLE db_datadict.t1_my_tablex ADD UNIQUE (f2);
eval $my_select;
DROP INDEX f2 ON db_datadict.t1_my_tablex;
#
# Check ADD UNIQUE INDEX with name explicit assigned
eval $my_select;
ALTER TABLE db_datadict.t1_my_tablex ADD UNIQUE my_idx (f4,f1);
eval $my_select;
DROP INDEX my_idx ON db_datadict.t1_my_tablex;
eval $my_select;
ALTER TABLE db_datadict.t1_my_tablex ADD UNIQUE my_idx (f2);
eval $my_select;
#
# Check DROP COLUMN (removing an UNIQUE INDEX)
eval $my_select;
ALTER TABLE db_datadict.t1_my_tablex
DROP COLUMN f2;
eval $my_select;
#
# Check impact of DROP TABLE
SELECT table_name
FROM information_schema.table_constraints
WHERE table_name = 't1_my_tablex';
DROP TABLE db_datadict.t1_my_tablex;
SELECT table_name
FROM information_schema.table_constraints
WHERE table_name = 't1_my_tablex';
#
# No UNIQUE CONSTRAINT -> no entry in key_column_usage
SELECT table_name FROM information_schema.table_constraints
WHERE table_name = 't1_my_tablex';
--replace_result $engine_type <engine_type>
eval
CREATE TABLE db_datadict.t1_my_tablex
ENGINE = $engine_type AS
SELECT 1 AS f1;
SELECT table_name FROM information_schema.table_constraints
WHERE table_name = 't1_my_tablex';
# UNIQUE CONSTRAINT -> entry in key_column_usage
ALTER TABLE db_datadict.t1_my_tablex ADD PRIMARY KEY(f1);
SELECT table_name FROM information_schema.table_constraints
WHERE table_name = 't1_my_tablex';
#
# Check impact of DROP SCHEMA
SELECT table_name FROM information_schema.table_constraints
WHERE table_name = 't1_my_tablex';
DROP DATABASE db_datadict;
SELECT table_name FROM information_schema.table_constraints
WHERE table_name = 't1_my_tablex';
#


--echo ########################################################################
--echo # Testcases 3.2.1.3-3.2.1.5 + 3.2.1.8-3.2.1.12: INSERT/UPDATE/DELETE and
--echo #           DDL on INFORMATION_SCHEMA tables are not supported
--echo ########################################################################
# 3.2.1.3:  Ensure that no user may execute an INSERT statement on any
#           INFORMATION_SCHEMA table.
# 3.2.1.4:  Ensure that no user may execute an UPDATE statement on any
#           INFORMATION_SCHEMA table.
# 3.2.1.5:  Ensure that no user may execute a DELETE statement on any
#           INFORMATION_SCHEMA table.
# 3.2.1.8:  Ensure that no user may create an index on an
#           INFORMATION_SCHEMA table.
# 3.2.1.9:  Ensure that no user may alter the definition of an
#           INFORMATION_SCHEMA table.
# 3.2.1.10: Ensure that no user may drop an INFORMATION_SCHEMA table.
# 3.2.1.11: Ensure that no user may move an INFORMATION_SCHEMA table to any
#           other database.
# 3.2.1.12: Ensure that no user may directly add to, alter, or delete any data
#           in an INFORMATION_SCHEMA table.
#
--disable_warnings
DROP DATABASE IF EXISTS db_datadict;
DROP TABLE IF EXISTS db_datadict.t1;
--enable_warnings
CREATE DATABASE db_datadict;
--replace_result $engine_type <engine_type>
eval
CREATE TABLE db_datadict.t1 (f1 BIGINT, UNIQUE(f1))
ENGINE = $engine_type;

--error ER_DBACCESS_DENIED_ERROR

--error ER_DBACCESS_DENIED_ERROR
INSERT INTO information_schema.table_constraints
       (constraint_schema, constraint_name, table_name)
VALUES (          'mysql',       'primary',       'db');
--error ER_DBACCESS_DENIED_ERROR
INSERT INTO information_schema.table_constraints
SELECT * FROM information_schema.table_constraints;

--error ER_DBACCESS_DENIED_ERROR
UPDATE information_schema.table_constraints
SET  table_name = 'db1' WHERE constraint_name = 'primary';

--error ER_DBACCESS_DENIED_ERROR
DELETE FROM information_schema.table_constraints WHERE table_name = 't1';
--error ER_DBACCESS_DENIED_ERROR
TRUNCATE information_schema.table_constraints;

--error ER_DBACCESS_DENIED_ERROR
CREATE INDEX i3 ON information_schema.table_constraints(table_name);

--error ER_DBACCESS_DENIED_ERROR
ALTER TABLE information_schema.table_constraints ADD f1 INT;

--error ER_DBACCESS_DENIED_ERROR
DROP TABLE information_schema.table_constraints;

--error ER_DBACCESS_DENIED_ERROR
ALTER TABLE information_schema.table_constraints
RENAME db_datadict.table_constraints;
--error ER_DBACCESS_DENIED_ERROR
ALTER TABLE information_schema.table_constraints
RENAME information_schema.xtable_constraints;

# Cleanup
DROP TABLE db_datadict.t1;
DROP DATABASE db_datadict;

