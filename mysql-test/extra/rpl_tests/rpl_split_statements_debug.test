# ==== Purpose ====
#
# This is part of rpl_split_statements.test which covers DROP DATABASE
# statement.
#
# DROP DATABASE: this statement will first drop all non-temporary
# tables in the database, then stored routines and events in it,
# and then try to remove database from the data-dictionary.
# If there is an error during one of the latter steps, then the
# statement will be logged as a single DROP TABLE statement listing
# all tables. If there are many tables, the statement becomes big.
# To avoid too big statements, the statement is split into multiple
# DROP TABLE statements, each with length at most 1024 bytes.
#
# If GTID_NEXT='UUID:NUMBER', the statement will not be logged and
# the gtid will not be added to GTID_EXECUTED, if the statement
# fails. This is regardless of whether it would result in multiple
# DROP statements or just one.
#
# This test verifies that all DROP DATABASE works, for all values of
# GTID_MODE/GTID_NEXT, and both on a client connection and in a slave
# connection.
#
# === Implementation ===
#
# We try five different error scenarios:
#
#   3.1. Database exists and is empty.
#   3.2. Database exists and contains one table.
#   3.3. Database exists and contains many tables with long names, so
#        that the statement gets split into multiple transactions in
#        the binary log.
#   3.4. Database has not been created, but the directory exists.
#   3.5. Database has not created and the directory does not exist.
#   3.6. Database exists and contains one InnoDB and one MyISAM table,
#        so the statement gets split into multiple transactions (but
#        for different reasons than in 3.3).
#
#   We run these six scenarios in three ways:
#
#   - On master with GTID_MODE='AUTOMATIC'
#   - On master with GTID_MODE!='AUTOMATIC' ('ANONYMOUS'/'UUID:NUMBER',
#     depending on GTID_MODE).
#   - On slave.
#
# We also run scenario with successful drop of database which contains one
# InnoDB and one MyISAM table. In AUTOMATIC/ANONYMOUS mode such statement
# is split into DROP TABLE IF EXISTS for MyISAM table and DROP DATABASE
# statement. With GTID assigned it is logged as single DROP DATABASE
# statement.
#
# This last scenario and scenario 3.6 also provide coverage for changes to
# DROP DATABASE binary logging which were implemented as part of WL#7743
# "New data dictionary: changes to DDL-related parts of SE API".

# We use DBUG_EXECUTE_IF to simulate errors during DROP DATABASE.
--source include/have_debug.inc

# It suffices to test one binlog_format.
--source include/have_binlog_format_statement.inc

--let $rpl_gtid_utils= 1
--source include/master-slave.inc

CALL mtr.add_suppression('Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT.');
if ($gtid_mode_on)
{
  CALL mtr.add_suppression('Cannot execute statement because it needs to be written to the binary log as multiple statements');
  CALL mtr.add_suppression('DROP DATABASE failed; some tables may have been dropped but the database directory remains.');
}
--connection slave
CALL mtr.add_suppression("Error dropping database");
CALL mtr.add_suppression("Can't drop database '.*'; database doesn't exist");
CALL mtr.add_suppression("Slave SQL for channel '': ... The slave coordinator and worker threads are stopped, possibly leaving data in inconsistent state. .* Error_code: 1756");
CALL mtr.add_suppression("Slave SQL for channel '': .* Error_code: 1105");
--connection master

--let $gtid_step_gtid_mode_agnostic= 1

--echo ==== Case 3: DROP DATABASE ====

--echo ---- Initialize ----

--echo # db1, db2, db3: no tables.
CREATE DATABASE db1;
CREATE DATABASE db2;
CREATE DATABASE db3;
--source include/rpl_sync.inc

--echo # db4, db5, db6: one table.
CREATE DATABASE db4;
CREATE DATABASE db5;
CREATE DATABASE db6;
CREATE TABLE db4.t1 (a INT);
CREATE TABLE db5.t1 (a INT);
CREATE TABLE db6.t1 (a INT);
--source include/rpl_sync.inc

--echo # db7, db8, db9: many tables with long names.
CREATE DATABASE db7;
CREATE DATABASE db8;
CREATE DATABASE db9;
let $i= 0;
--let $long_text= `SELECT REPEAT('a', 60)`
--disable_query_log
while ($i < 20)
{
  # This is very slow for some reason, so do three tables in parallel.
  eval CREATE TABLE db7.$long_text$i (a INT);
  eval CREATE TABLE db8.$long_text$i (a INT);
  eval CREATE TABLE db9.$long_text$i (a INT);
  --inc $i
}
--enable_query_log
--source include/rpl_sync.inc

--echo # db10, db11: not a database, but the directory and the entry exist.
--mkdir $server_1_datadir/db10
--mkdir $server_1_datadir/db11
--write_file $server_1_datadir/db10/file.txt
EOF
--write_file $server_1_datadir/db11/file.txt
EOF

--echo # db12 is not a database, but the empty directory exists on master.
--mkdir $server_1_datadir/db12

--source include/rpl_sync.inc

--echo # db16, db17, db18, db19, db20: one MyISAM and one InnoDB table.
CREATE DATABASE db16;
CREATE DATABASE db17;
CREATE DATABASE db18;
CREATE DATABASE db19;
CREATE DATABASE db20;
CREATE TABLE db16.t1 (a INT) ENGINE=InnoDB;
CREATE TABLE db17.t1 (a INT) ENGINE=InnoDB;
CREATE TABLE db18.t1 (a INT) ENGINE=InnoDB;
CREATE TABLE db19.t1 (a INT) ENGINE=InnoDB;
CREATE TABLE db20.t1 (a INT) ENGINE=InnoDB;
CREATE TABLE db16.t2 (a INT) ENGINE=MyISAM;
CREATE TABLE db17.t2 (a INT) ENGINE=MyISAM;
CREATE TABLE db18.t2 (a INT) ENGINE=MyISAM;
CREATE TABLE db19.t2 (a INT) ENGINE=MyISAM;
CREATE TABLE db20.t2 (a INT) ENGINE=MyISAM;
--source include/rpl_sync.inc

--echo ---- DROP DATABASE is split on master; GTID_NEXT=AUTOMATIC ----

--echo # db1: no table.
--source include/save_binlog_position.inc
SET GTID_NEXT = 'AUTOMATIC';

SET DEBUG= '+d, rm_db_fail_after_dropping_tables';
--error ER_UNKNOWN_ERROR
DROP DATABASE db1;
SET DEBUG= '-d, rm_db_fail_after_dropping_tables';

--let $event_sequence= ()
--source include/assert_binlog_events.inc

--echo # db4: one table.
--source include/save_binlog_position.inc
SET GTID_NEXT = 'AUTOMATIC';

SET DEBUG= '+d, rm_db_fail_after_dropping_tables';
--error ER_UNKNOWN_ERROR
DROP DATABASE db4;
SET DEBUG= '-d, rm_db_fail_after_dropping_tables';

if ($gtid_mode_on)
{
  --let $event_sequence= Gtid # !Q(DROP TABLE.*)
}
if (!$gtid_mode_on)
{
  --let $event_sequence= Anonymous_Gtid # !Q(DROP TABLE.*)
}
--source include/assert_binlog_events.inc

--echo # db7: many tables with long names.
--source include/save_binlog_position.inc
SET GTID_NEXT = 'AUTOMATIC';

SET DEBUG= '+d, rm_db_fail_after_dropping_tables';
--error ER_UNKNOWN_ERROR
DROP DATABASE db7;
SET DEBUG= '-d, rm_db_fail_after_dropping_tables';

if ($gtid_mode_on)
{
  --let $event_sequence= Gtid # !Q(DROP TABLE.*) # Gtid # !Q(DROP TABLE.*)
}
if (!$gtid_mode_on)
{
  --let $event_sequence= Anonymous_Gtid # !Q(DROP TABLE.*) # Anonymous_Gtid # !Q(DROP TABLE.*)
}
--source include/assert_binlog_events.inc

--echo # db10: not a database, but directory exists.
--source include/save_binlog_position.inc
SET GTID_NEXT = 'AUTOMATIC';

--replace_result \\ /
--error ER_DB_DROP_EXISTS
DROP DATABASE db10;

--let $event_sequence= ()
--source include/assert_binlog_events.inc

--echo # db13: not a database.
--source include/save_binlog_position.inc
SET GTID_NEXT = 'AUTOMATIC';

--replace_result \\ /
--error ER_DB_DROP_EXISTS
DROP DATABASE db13;

--let $event_sequence= ()
--source include/assert_binlog_events.inc

--echo # db16: one MyISAM and one InnoDB table.
--source include/save_binlog_position.inc
SET GTID_NEXT = 'AUTOMATIC';
SET DEBUG= '+d, rm_db_fail_after_dropping_tables';
--error ER_UNKNOWN_ERROR
DROP DATABASE db16;
SET DEBUG= '-d, rm_db_fail_after_dropping_tables';
if ($gtid_mode_on)
{
  --let $event_sequence= Gtid # !Q(DROP TABLE.*) # Gtid # !Q(DROP TABLE.*)
}
if (!$gtid_mode_on)
{
  --let $event_sequence= Anonymous_Gtid # !Q(DROP TABLE.*) # Anonymous_Gtid # !Q(DROP TABLE.*)
}
--source include/assert_binlog_events.inc

--echo # db19: Successfull DROP DATABASE for one MyISAM and one InnoDB table.
--source include/save_binlog_position.inc
SET GTID_NEXT = 'AUTOMATIC';
DROP DATABASE db19;
if ($gtid_mode_on)
{
  --let $event_sequence= Gtid # !Q(DROP TABLE.*) # Gtid # !Q(DROP DATABASE.*)
}
if (!$gtid_mode_on)
{
  --let $event_sequence= Anonymous_Gtid # !Q(DROP TABLE.*) # Anonymous_Gtid # !Q(DROP DATABASE.*)
}
--source include/assert_binlog_events.inc

--echo ---- DROP DATABASE is split on master; GTID_NEXT=non-automatic ----

--echo # db2: no table.
--source include/save_binlog_position.inc
--source include/set_gtid_next_gtid_mode_agnostic.inc
if (!$gtid_mode_on)
{
  SET DEBUG= '+d, rm_db_fail_after_dropping_tables';
  --error ER_UNKNOWN_ERROR
  DROP DATABASE db2;
  SET DEBUG= '-d, rm_db_fail_after_dropping_tables';

  --let $event_sequence= ()
  --source include/assert_binlog_events.inc
}
if ($gtid_mode_on)
{
  SET DEBUG= '+d, rm_db_fail_after_dropping_tables';
  --error ER_UNKNOWN_ERROR
  DROP DATABASE db2;
  --replace_result $server_1_uuid MASTER_UUID \\ /
  SHOW WARNINGS;
  SET DEBUG= '-d, rm_db_fail_after_dropping_tables';

  --let $event_sequence= ()
  --source include/assert_binlog_events.inc
}
SET GTID_NEXT = 'AUTOMATIC';

--echo # db5: one table.
--source include/save_binlog_position.inc
--source include/set_gtid_next_gtid_mode_agnostic.inc
if (!$gtid_mode_on)
{
  SET DEBUG= '+d, rm_db_fail_after_dropping_tables';
  --error ER_UNKNOWN_ERROR
  DROP DATABASE db5;
  SET DEBUG= '-d, rm_db_fail_after_dropping_tables';

  --let $event_sequence= Anonymous_Gtid # !Q(DROP TABLE.*)
  --source include/assert_binlog_events.inc
}
if ($gtid_mode_on)
{
  SET DEBUG= '+d, rm_db_fail_after_dropping_tables';
  --error ER_UNKNOWN_ERROR
  DROP DATABASE db5;
  --replace_result $server_1_uuid MASTER_UUID \\ /
  SHOW WARNINGS;
  SET DEBUG= '-d, rm_db_fail_after_dropping_tables';

  --let $event_sequence= ()
  --source include/assert_binlog_events.inc
}
SET GTID_NEXT = 'AUTOMATIC';

--echo # db8: many tables with long names.
--source include/save_binlog_position.inc
--source include/set_gtid_next_gtid_mode_agnostic.inc
if (!$gtid_mode_on)
{
  SET DEBUG= '+d, rm_db_fail_after_dropping_tables';
  --error ER_UNKNOWN_ERROR
  DROP DATABASE db8;
  SET DEBUG= '-d, rm_db_fail_after_dropping_tables';

  --let $event_sequence= Anonymous_Gtid # !Q(DROP TABLE.*) # Anonymous_Gtid # !Q(DROP TABLE.*)
  --source include/assert_binlog_events.inc
}
if ($gtid_mode_on)
{
  SET DEBUG= '+d, rm_db_fail_after_dropping_tables';
  --error ER_UNKNOWN_ERROR
  DROP DATABASE db8;
  --replace_result $server_1_uuid MASTER_UUID \\ /
  SHOW WARNINGS;
  SET DEBUG= '-d, rm_db_fail_after_dropping_tables';

  --let $event_sequence= ()
  --source include/assert_binlog_events.inc
}
SET GTID_NEXT = 'AUTOMATIC';

--echo # db11: not a database, but directory exists.
--source include/save_binlog_position.inc
--source include/set_gtid_next_gtid_mode_agnostic.inc
--replace_result \\ /
--error ER_DB_DROP_EXISTS
DROP DATABASE db11;
--let $event_sequence= ()
--source include/assert_binlog_events.inc
SET GTID_NEXT = 'AUTOMATIC';

--echo # db14: not a database.
--source include/save_binlog_position.inc
--source include/set_gtid_next_gtid_mode_agnostic.inc
 --error ER_DB_DROP_EXISTS
DROP DATABASE db14;
--let $event_sequence= ()
--source include/assert_binlog_events.inc
SET GTID_NEXT = 'AUTOMATIC';

--echo # db17: one MyISAM and one InnoDB table.
--source include/save_binlog_position.inc
--source include/set_gtid_next_gtid_mode_agnostic.inc
if (!$gtid_mode_on)
{
  SET DEBUG= '+d, rm_db_fail_after_dropping_tables';
  --error ER_UNKNOWN_ERROR
  DROP DATABASE db17;
  SET DEBUG= '-d, rm_db_fail_after_dropping_tables';

  --let $event_sequence= Anonymous_Gtid # !Q(DROP TABLE.*) # Anonymous_Gtid # !Q(DROP TABLE.*)
  --source include/assert_binlog_events.inc
}
if ($gtid_mode_on)
{
  SET DEBUG= '+d, rm_db_fail_after_dropping_tables';
  --error ER_UNKNOWN_ERROR
  DROP DATABASE db17;
  --replace_result $server_1_uuid MASTER_UUID \\ /
  SHOW WARNINGS;
  SET DEBUG= '-d, rm_db_fail_after_dropping_tables';

  --let $event_sequence= ()
  --source include/assert_binlog_events.inc
}
SET GTID_NEXT = 'AUTOMATIC';

--echo # db20: Successfull DROP DATABASE for one MyISAM and one InnoDB table.
--echo #       No splitting if GTID is assigned.
--source include/save_binlog_position.inc
--source include/set_gtid_next_gtid_mode_agnostic.inc
DROP DATABASE db20;
if ($gtid_mode_on)
{
  --let $event_sequence= Gtid # !Q(DROP DATABASE.*)
}
if (!$gtid_mode_on)
{
  --let $event_sequence= Anonymous_Gtid # !Q(DROP TABLE.*) # Anonymous_Gtid # !Q(DROP DATABASE.*)
}
--source include/assert_binlog_events.inc
SET GTID_NEXT = 'AUTOMATIC';

--source include/rpl_sync.inc

--echo ---- DROP DATABASE is split on slave ----

SET GTID_NEXT = 'AUTOMATIC';

--let $slave_sql_errno= convert_error(ER_UNKNOWN_ERROR)

--connection slave
SET GLOBAL DEBUG= '+d, rm_db_fail_after_dropping_tables';
--let $rpl_connection_name= master
--source include/rpl_connection.inc
--echo # db3: no table.
DROP DATABASE db3;
--source include/sync_slave_io_with_master.inc
--source include/wait_for_slave_sql_error.inc
--source include/rpl_skip_to_end_of_relay_log.inc
--let $rpl_connection_name= master
--source include/rpl_connection.inc

--echo # db6: one table.
DROP DATABASE db6;
--source include/sync_slave_io_with_master.inc
--source include/wait_for_slave_sql_error.inc
--source include/rpl_skip_to_end_of_relay_log.inc
--let $rpl_connection_name= master
--source include/rpl_connection.inc

--echo # db9: many tables with long names.
DROP DATABASE db9;
--source include/sync_slave_io_with_master.inc
--source include/wait_for_slave_sql_error.inc
--source include/rpl_skip_to_end_of_relay_log.inc
--connection slave
SET GLOBAL DEBUG= '-d, rm_db_fail_after_dropping_tables';
--let $rpl_connection_name= master
--source include/rpl_connection.inc

--echo # db12: not a database, but an empty directory exists.
--error ER_DB_DROP_EXISTS
DROP DATABASE db12;

--echo # db18: one MyISAM and one InnoDB table.
--connection slave
SET GLOBAL DEBUG= '+d, rm_db_fail_after_dropping_tables';
--let $rpl_connection_name= master
--source include/rpl_connection.inc
DROP DATABASE db18;
--source include/sync_slave_io_with_master.inc
--source include/wait_for_slave_sql_error.inc
--source include/rpl_skip_to_end_of_relay_log.inc
--connection slave
SET GLOBAL DEBUG= '-d, rm_db_fail_after_dropping_tables';
--let $rpl_connection_name= master
--source include/rpl_connection.inc

--echo ---- Clean up ----

--remove_file $server_1_datadir/db10/file.txt
--remove_file $server_1_datadir/db11/file.txt
--rmdir $server_1_datadir/db10
--rmdir $server_1_datadir/db11
--rmdir $server_1_datadir/db12

DROP DATABASE db1;
DROP DATABASE db2;
DROP DATABASE IF EXISTS db3;
DROP DATABASE db4;
DROP DATABASE db5;
DROP DATABASE IF EXISTS db6;
DROP DATABASE db7;
DROP DATABASE db8;
DROP DATABASE IF EXISTS db9;
DROP DATABASE IF EXISTS db10;
DROP DATABASE IF EXISTS db11;
DROP DATABASE IF EXISTS db12;
DROP DATABASE db16;
DROP DATABASE db17;
DROP DATABASE IF EXISTS db18;

--source include/rpl_sync.inc

--source include/rpl_end.inc
