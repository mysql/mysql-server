set global log_bin_trust_routine_creators=1;
ERROR HY000: Unknown system variable 'log_bin_trust_routine_creators'
set table_type='MyISAM';
ERROR HY000: Unknown system variable 'table_type'
select @@table_type='MyISAM';
ERROR HY000: Unknown system variable 'table_type'
backup table t1 to 'data.txt';
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'backup table t1 to 'data.txt'' at line 1
restore table t1 from 'data.txt';
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'restore table t1 from 'data.txt'' at line 1
show plugin;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'plugin' at line 1
load table t1 from master;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'table t1 from master' at line 1
load data from master;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'from master' at line 1
SHOW INNODB STATUS;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'INNODB STATUS' at line 1
create table t1 (t6 timestamp) type=myisam;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'type=myisam' at line 1
show table types;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'types' at line 1
show mutex status;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'mutex status' at line 1
# WL#13070 Deprecate && as synonym for AND and || as synonym for OR in SQL statements
set sql_mode=pipes_as_concat;
select 2 || 3;
2 || 3
23
select 2 or 3;
2 or 3
1
select concat(2,3);
concat(2,3)
23
set sql_mode='';
select 2 || 3;
2 || 3
1
Warnings:
Warning	1287	'|| as a synonym for OR' is deprecated and will be removed in a future release. Please use OR instead
select 2 or 3;
2 or 3
1
set sql_mode=default;
# WL#13068 Deprecate BINARY keyword for specifying _bin collations
# (I) Those statements SHOULD WARN
create table t1 (v varchar(10) binary);
Warnings:
Warning	1287	'BINARY as attribute of a type' is deprecated and will be removed in a future release. Please use a CHARACTER SET clause with _bin collation instead
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `v` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 (v varchar(10) character set latin1 binary);
Warnings:
Warning	1287	'BINARY as attribute of a type' is deprecated and will be removed in a future release. Please use a CHARACTER SET clause with _bin collation instead
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `v` varchar(10) CHARACTER SET latin1 COLLATE latin1_bin DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 (v varchar(10) binary character set latin1);
Warnings:
Warning	1287	'BINARY as attribute of a type' is deprecated and will be removed in a future release. Please use a CHARACTER SET clause with _bin collation instead
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `v` varchar(10) CHARACTER SET latin1 COLLATE latin1_bin DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 (v varchar(10) binary ascii);
Warnings:
Warning	1287	'BINARY as attribute of a type' is deprecated and will be removed in a future release. Please use a CHARACTER SET clause with _bin collation instead
Warning	1287	'ASCII' is deprecated and will be removed in a future release. Please use CHARACTER SET charset_name instead
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `v` varchar(10) CHARACTER SET latin1 COLLATE latin1_bin DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 (v varchar(10) ascii binary);
Warnings:
Warning	1287	'ASCII' is deprecated and will be removed in a future release. Please use CHARACTER SET charset_name instead
Warning	1287	'BINARY as attribute of a type' is deprecated and will be removed in a future release. Please use a CHARACTER SET clause with _bin collation instead
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `v` varchar(10) CHARACTER SET latin1 COLLATE latin1_bin DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 (v varchar(10) binary unicode);
Warnings:
Warning	1287	'BINARY as attribute of a type' is deprecated and will be removed in a future release. Please use a CHARACTER SET clause with _bin collation instead
Warning	1287	'UNICODE' is deprecated and will be removed in a future release. Please use CHARACTER SET charset_name instead
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `v` varchar(10) CHARACTER SET ucs2 COLLATE ucs2_bin DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 (v varchar(10) unicode binary);
Warnings:
Warning	1287	'UNICODE' is deprecated and will be removed in a future release. Please use CHARACTER SET charset_name instead
Warning	1287	'BINARY as attribute of a type' is deprecated and will be removed in a future release. Please use a CHARACTER SET clause with _bin collation instead
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `v` varchar(10) CHARACTER SET ucs2 COLLATE ucs2_bin DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 (v varchar(10));
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `v` varchar(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
alter table t1 modify v varchar(10) binary character set latin1;
Warnings:
Warning	1287	'BINARY as attribute of a type' is deprecated and will be removed in a future release. Please use a CHARACTER SET clause with _bin collation instead
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `v` varchar(10) CHARACTER SET latin1 COLLATE latin1_bin DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
alter table t1 modify v varchar(10) unicode binary;
Warnings:
Warning	1287	'UNICODE' is deprecated and will be removed in a future release. Please use CHARACTER SET charset_name instead
Warning	1287	'BINARY as attribute of a type' is deprecated and will be removed in a future release. Please use a CHARACTER SET clause with _bin collation instead
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `v` varchar(10) CHARACTER SET ucs2 COLLATE ucs2_bin DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
alter table t1 modify v varchar(10) binary ascii;
Warnings:
Warning	1287	'BINARY as attribute of a type' is deprecated and will be removed in a future release. Please use a CHARACTER SET clause with _bin collation instead
Warning	1287	'ASCII' is deprecated and will be removed in a future release. Please use CHARACTER SET charset_name instead
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `v` varchar(10) CHARACTER SET latin1 COLLATE latin1_bin DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
select collation(cast('a' as char(2))), collation(cast('a' as char(2) binary));
collation(cast('a' as char(2)))	collation(cast('a' as char(2) binary))
utf8mb4_0900_ai_ci	utf8mb4_bin
Warnings:
Warning	1287	'BINARY as attribute of a type' is deprecated and will be removed in a future release. Please use a CHARACTER SET clause with _bin collation instead
select collation(convert('a', char(2))), collation(convert('a', char(2) binary));
collation(convert('a', char(2)))	collation(convert('a', char(2) binary))
utf8mb4_0900_ai_ci	utf8mb4_bin
Warnings:
Warning	1287	'BINARY as attribute of a type' is deprecated and will be removed in a future release. Please use a CHARACTER SET clause with _bin collation instead
select collation(convert('a',char(2) ascii)), collation(convert('a',char(2) ascii binary));
collation(convert('a',char(2) ascii))	collation(convert('a',char(2) ascii binary))
latin1_swedish_ci	latin1_bin
Warnings:
Warning	1287	'ASCII' is deprecated and will be removed in a future release. Please use CHARACTER SET charset_name instead
Warning	1287	'ASCII' is deprecated and will be removed in a future release. Please use CHARACTER SET charset_name instead
Warning	1287	'BINARY as attribute of a type' is deprecated and will be removed in a future release. Please use a CHARACTER SET clause with _bin collation instead
# (II) Those statements SHOULDN'T WARN, as they do make
# "binary" charset, not just a "_bin" collation of another charset.
create table t1 (v binary(10));
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `v` binary(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 (v varchar(10)) character set binary;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `v` varbinary(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=binary
drop table t1;
create table t1 (v varchar(10));
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `v` varchar(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
alter table t1 character set binary;
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `v` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=binary
drop table t1;
create database mysqltest2 default character set = binary;
show create database mysqltest2 ;
Database	Create Database
mysqltest2	CREATE DATABASE `mysqltest2` /*!40100 DEFAULT CHARACTER SET binary */ /*!80016 DEFAULT ENCRYPTION='N' */
drop database mysqltest2;
create database mysqltest2 default character set = latin1;
show create database mysqltest2 ;
Database	Create Database
mysqltest2	CREATE DATABASE `mysqltest2` /*!40100 DEFAULT CHARACTER SET latin1 */ /*!80016 DEFAULT ENCRYPTION='N' */
alter database mysqltest2 default character set = binary;
show create database mysqltest2 ;
Database	Create Database
mysqltest2	CREATE DATABASE `mysqltest2` /*!40100 DEFAULT CHARACTER SET binary */ /*!80016 DEFAULT ENCRYPTION='N' */
drop database mysqltest2;
select @@character_set_client;
@@character_set_client
utf8mb4
set character set binary;
select @@character_set_client;
@@character_set_client
binary
set character set default;
select @@character_set_client;
@@character_set_client
utf8mb4
set names binary;
select @@character_set_client;
@@character_set_client
binary
set names default;
select convert("123" using binary);
convert("123" using binary)
123
select char(123 using binary);
char(123 using binary)
{
select collation(char(123)), collation(char(123 using binary));
collation(char(123))	collation(char(123 using binary))
binary	binary
create table t1 (v varchar(10) byte);
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `v` varbinary(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
insert into t1 values("xyz");
select * from t1 into outfile 'tmp1.txt' character set binary;
load data infile 'tmp1.txt' into table t1 character set binary;
select * from t1;
v
xyz
xyz
drop table t1;

# WL#13588 Deprecate support for prefix keys in partition functions.

CREATE SCHEMA testdb;

# Should show deprecation warnings on CREATE TABLE for affected tables.

CREATE TABLE testdb.t1 (
a VARCHAR (10000),
b VARCHAR (25),
c VARCHAR (10),
PRIMARY KEY (a(10),b,c(2))
) PARTITION BY KEY() PARTITIONS 2;
Warnings:
Warning	1681	Column 'testdb.t1.a' having prefix key part 'a(10)' is ignored by the partitioning function. Use of prefixed columns in the PARTITION BY KEY() clause is deprecated and will be removed in a future release.
Warning	1681	Column 'testdb.t1.c' having prefix key part 'c(2)' is ignored by the partitioning function. Use of prefixed columns in the PARTITION BY KEY() clause is deprecated and will be removed in a future release.

CREATE TABLE testdb.t2 (
a VARCHAR (200),
b VARCHAR (10),
PRIMARY KEY (a(2),b)
) PARTITION BY KEY() PARTITIONS 2;
Warnings:
Warning	1681	Column 'testdb.t2.a' having prefix key part 'a(2)' is ignored by the partitioning function. Use of prefixed columns in the PARTITION BY KEY() clause is deprecated and will be removed in a future release.

CREATE TABLE testdb.t3 (
a VARCHAR (200),
b VARCHAR (10),
PRIMARY KEY (a(2),b)
) PARTITION BY KEY() PARTITIONS 10;
Warnings:
Warning	1681	Column 'testdb.t3.a' having prefix key part 'a(2)' is ignored by the partitioning function. Use of prefixed columns in the PARTITION BY KEY() clause is deprecated and will be removed in a future release.

# Should not show deprecation warnings if prefix key is not used
# in the PARTITION BY KEY() clause.
CREATE TABLE testdb.t4 (
a VARCHAR (200),
b VARCHAR (10),
c VARCHAR (100),
KEY (a),
KEY (b(5))
) PARTITION BY KEY(c) PARTITIONS 10;

# Should not show deprecation warnings for CREATE TABLE LIKE.
CREATE TABLE testdb.l1 LIKE testdb.t1;

# Should show deprecation warnings for ALTER TABLE on affected tables.

ALTER TABLE testdb.t1 COMMENT='t1';
Warnings:
Warning	1681	Column 'testdb.t1.a' having prefix key part 'a(10)' is ignored by the partitioning function. Use of prefixed columns in the PARTITION BY KEY() clause is deprecated and will be removed in a future release.
Warning	1681	Column 'testdb.t1.c' having prefix key part 'c(2)' is ignored by the partitioning function. Use of prefixed columns in the PARTITION BY KEY() clause is deprecated and will be removed in a future release.

# Should show deprecation warnings if a table having prefix keys is
# altered to be partitioned by key.
CREATE TABLE testdb.t5 (
a VARCHAR (10000),
b VARCHAR (25),
c VARCHAR (10),
PRIMARY KEY (a(10),b,c(2))
);
ALTER TABLE testdb.t5 PARTITION BY KEY() PARTITIONS 10;
Warnings:
Warning	1681	Column 'testdb.t5.a' having prefix key part 'a(10)' is ignored by the partitioning function. Use of prefixed columns in the PARTITION BY KEY() clause is deprecated and will be removed in a future release.
Warning	1681	Column 'testdb.t5.c' having prefix key part 'c(2)' is ignored by the partitioning function. Use of prefixed columns in the PARTITION BY KEY() clause is deprecated and will be removed in a future release.

# Should not show deprecation warnings on removing partitioning from an
# affected table.
ALTER TABLE testdb.t5 REMOVE PARTITIONING;

# Should not show deprecation warning if prefix length = column length.
CREATE TABLE testdb.t6 (
a VARCHAR (200),
b VARCHAR (10),
PRIMARY KEY (a(200),b)
) PARTITION BY KEY() PARTITIONS 10;

# Should not show deprecation warnings for RENAME TABLE.
RENAME TABLE testdb.t1 TO testdb.t1_renamed;

# Should show deprecation warnings if prefix key is used in the
# PARTITION BY KEY() clause, regardless of lettercase.
CREATE TABLE testdb.t7 (
a VARCHAR (200),
b VARCHAR (10),
c VARCHAR (100),
KEY (a),
KEY (b(5))
) PARTITION BY KEY(B) PARTITIONS 2;
Warnings:
Warning	1681	Column 'testdb.t7.b' having prefix key part 'b(5)' is ignored by the partitioning function. Use of prefixed columns in the PARTITION BY KEY() clause is deprecated and will be removed in a future release.

CREATE TABLE testdb.t8 (
A VARCHAR (200),
B VARCHAR (10),
C VARCHAR (100),
KEY (A),
KEY (B(5))
) PARTITION BY KEY(b) PARTITIONS 2;
Warnings:
Warning	1681	Column 'testdb.t8.B' having prefix key part 'B(5)' is ignored by the partitioning function. Use of prefixed columns in the PARTITION BY KEY() clause is deprecated and will be removed in a future release.

# Should not show deprecation warnings when there is no index.
CREATE TABLE testdb.m1 (
firstname VARCHAR (25) NOT NULL,
lastname VARCHAR (25) NOT NULL,
username VARCHAR (16) NOT NULL,
email VARCHAR (35),
joined DATE NOT NULL
) PARTITION BY KEY(joined) PARTITIONS 6;

# Should not show deprecation warnings for table partitioned by range.
CREATE TABLE testdb.m2 (
firstname VARCHAR (25) NOT NULL,
lastname VARCHAR (25) NOT NULL,
username VARCHAR (16) NOT NULL,
email VARCHAR (35),
joined DATE NOT NULL
) PARTITION BY RANGE(YEAR(joined)) (
PARTITION p0 VALUES LESS THAN (1960),
PARTITION p1 VALUES LESS THAN (1970),
PARTITION p2 VALUES LESS THAN (1980),
PARTITION p3 VALUES LESS THAN (1990),
PARTITION p4 VALUES LESS THAN MAXVALUE
);

# Should not show deprecation warnings for table with a prefix key
# partitioned by range
CREATE TABLE testdb.m3 (
firstname VARCHAR (25) NOT NULL,
lastname VARCHAR (25) NOT NULL,
username VARCHAR (16) NOT NULL,
email VARCHAR (35),
joined DATE NOT NULL,
PRIMARY KEY(firstname(5),joined)
) PARTITION BY RANGE(YEAR(joined)) (
PARTITION p0 VALUES LESS THAN (1960),
PARTITION p1 VALUES LESS THAN (1970),
PARTITION p2 VALUES LESS THAN (1980),
PARTITION p3 VALUES LESS THAN (1990),
PARTITION p4 VALUES LESS THAN MAXVALUE
);

# Should show deprecation warnings for combinations of column type
# CHAR|VARCHAR|BINARY|VARBINARY, [LINEAR] KEY, and ALGORITHM=1|2

CREATE TABLE testdb.t_char_linear_alg1 (
prefix_col CHAR (100),
other_col VARCHAR (5),
PRIMARY KEY (prefix_col(10), other_col)
) PARTITION BY LINEAR KEY ALGORITHM=1 () PARTITIONS 3;
Warnings:
Warning	1681	Column 'testdb.t_char_linear_alg1.prefix_col' having prefix key part 'prefix_col(10)' is ignored by the partitioning function. Use of prefixed columns in the PARTITION BY KEY() clause is deprecated and will be removed in a future release.

CREATE TABLE testdb.t_varchar_linear_alg1 (
prefix_col VARCHAR (100),
other_col VARCHAR (5),
PRIMARY KEY (prefix_col(10), other_col)
) PARTITION BY LINEAR KEY ALGORITHM=1 () PARTITIONS 3;
Warnings:
Warning	1681	Column 'testdb.t_varchar_linear_alg1.prefix_col' having prefix key part 'prefix_col(10)' is ignored by the partitioning function. Use of prefixed columns in the PARTITION BY KEY() clause is deprecated and will be removed in a future release.

CREATE TABLE testdb.t_binary_linear_alg1 (
prefix_col BINARY (100),
other_col VARCHAR (5),
PRIMARY KEY (prefix_col(10), other_col)
) PARTITION BY LINEAR KEY ALGORITHM=1 () PARTITIONS 3;
Warnings:
Warning	1681	Column 'testdb.t_binary_linear_alg1.prefix_col' having prefix key part 'prefix_col(10)' is ignored by the partitioning function. Use of prefixed columns in the PARTITION BY KEY() clause is deprecated and will be removed in a future release.

CREATE TABLE testdb.t_varbinary_linear_alg1 (
prefix_col VARBINARY (100),
other_col VARCHAR (5),
PRIMARY KEY (prefix_col(10), other_col)
) PARTITION BY LINEAR KEY ALGORITHM=1 () PARTITIONS 3;
Warnings:
Warning	1681	Column 'testdb.t_varbinary_linear_alg1.prefix_col' having prefix key part 'prefix_col(10)' is ignored by the partitioning function. Use of prefixed columns in the PARTITION BY KEY() clause is deprecated and will be removed in a future release.

CREATE TABLE testdb.t_char_nonlinear_alg1 (
prefix_col CHAR (100),
other_col VARCHAR (5),
PRIMARY KEY (prefix_col(10), other_col)
) PARTITION BY KEY ALGORITHM=1 () PARTITIONS 3;
Warnings:
Warning	1681	Column 'testdb.t_char_nonlinear_alg1.prefix_col' having prefix key part 'prefix_col(10)' is ignored by the partitioning function. Use of prefixed columns in the PARTITION BY KEY() clause is deprecated and will be removed in a future release.

CREATE TABLE testdb.t_varchar_nonlinear_alg1 (
prefix_col VARCHAR (100),
other_col VARCHAR (5),
PRIMARY KEY (prefix_col(10), other_col)
) PARTITION BY KEY ALGORITHM=1 () PARTITIONS 3;
Warnings:
Warning	1681	Column 'testdb.t_varchar_nonlinear_alg1.prefix_col' having prefix key part 'prefix_col(10)' is ignored by the partitioning function. Use of prefixed columns in the PARTITION BY KEY() clause is deprecated and will be removed in a future release.

CREATE TABLE testdb.t_binary_nonlinear_alg1 (
prefix_col BINARY (100),
other_col VARCHAR (5),
PRIMARY KEY (prefix_col(10), other_col)
) PARTITION BY KEY ALGORITHM=1 () PARTITIONS 3;
Warnings:
Warning	1681	Column 'testdb.t_binary_nonlinear_alg1.prefix_col' having prefix key part 'prefix_col(10)' is ignored by the partitioning function. Use of prefixed columns in the PARTITION BY KEY() clause is deprecated and will be removed in a future release.

CREATE TABLE testdb.t_varbinary_nonlinear_alg1 (
prefix_col VARBINARY (100),
other_col VARCHAR (5),
PRIMARY KEY (prefix_col(10), other_col)
) PARTITION BY KEY ALGORITHM=1 () PARTITIONS 3;
Warnings:
Warning	1681	Column 'testdb.t_varbinary_nonlinear_alg1.prefix_col' having prefix key part 'prefix_col(10)' is ignored by the partitioning function. Use of prefixed columns in the PARTITION BY KEY() clause is deprecated and will be removed in a future release.

CREATE TABLE testdb.t_char_linear_alg2 (
prefix_col CHAR (100),
other_col VARCHAR (5),
PRIMARY KEY (prefix_col(10), other_col)
) PARTITION BY LINEAR KEY ALGORITHM=2 () PARTITIONS 3;
Warnings:
Warning	1681	Column 'testdb.t_char_linear_alg2.prefix_col' having prefix key part 'prefix_col(10)' is ignored by the partitioning function. Use of prefixed columns in the PARTITION BY KEY() clause is deprecated and will be removed in a future release.

CREATE TABLE testdb.t_varchar_linear_alg2 (
prefix_col VARCHAR (100),
other_col VARCHAR (5),
PRIMARY KEY (prefix_col(10), other_col)
) PARTITION BY LINEAR KEY ALGORITHM=2 () PARTITIONS 3;
Warnings:
Warning	1681	Column 'testdb.t_varchar_linear_alg2.prefix_col' having prefix key part 'prefix_col(10)' is ignored by the partitioning function. Use of prefixed columns in the PARTITION BY KEY() clause is deprecated and will be removed in a future release.

CREATE TABLE testdb.t_binary_linear_alg2 (
prefix_col BINARY (100),
other_col VARCHAR (5),
PRIMARY KEY (prefix_col(10), other_col)
) PARTITION BY LINEAR KEY ALGORITHM=2 () PARTITIONS 3;
Warnings:
Warning	1681	Column 'testdb.t_binary_linear_alg2.prefix_col' having prefix key part 'prefix_col(10)' is ignored by the partitioning function. Use of prefixed columns in the PARTITION BY KEY() clause is deprecated and will be removed in a future release.

CREATE TABLE testdb.t_varbinary_linear_alg2 (
prefix_col VARBINARY (100),
other_col VARCHAR (5),
PRIMARY KEY (prefix_col(10), other_col)
) PARTITION BY LINEAR KEY ALGORITHM=2 () PARTITIONS 3;
Warnings:
Warning	1681	Column 'testdb.t_varbinary_linear_alg2.prefix_col' having prefix key part 'prefix_col(10)' is ignored by the partitioning function. Use of prefixed columns in the PARTITION BY KEY() clause is deprecated and will be removed in a future release.

CREATE TABLE testdb.t_char_nonlinear_alg2 (
prefix_col CHAR (100),
other_col VARCHAR (5),
PRIMARY KEY (prefix_col(10), other_col)
) PARTITION BY KEY ALGORITHM=2 () PARTITIONS 3;
Warnings:
Warning	1681	Column 'testdb.t_char_nonlinear_alg2.prefix_col' having prefix key part 'prefix_col(10)' is ignored by the partitioning function. Use of prefixed columns in the PARTITION BY KEY() clause is deprecated and will be removed in a future release.

CREATE TABLE testdb.t_varchar_nonlinear_alg2 (
prefix_col VARCHAR (100),
other_col VARCHAR (5),
PRIMARY KEY (prefix_col(10), other_col)
) PARTITION BY KEY ALGORITHM=2 () PARTITIONS 3;
Warnings:
Warning	1681	Column 'testdb.t_varchar_nonlinear_alg2.prefix_col' having prefix key part 'prefix_col(10)' is ignored by the partitioning function. Use of prefixed columns in the PARTITION BY KEY() clause is deprecated and will be removed in a future release.

CREATE TABLE testdb.t_binary_nonlinear_alg2 (
prefix_col BINARY (100),
other_col VARCHAR (5),
PRIMARY KEY (prefix_col(10), other_col)
) PARTITION BY KEY ALGORITHM=2 () PARTITIONS 3;
Warnings:
Warning	1681	Column 'testdb.t_binary_nonlinear_alg2.prefix_col' having prefix key part 'prefix_col(10)' is ignored by the partitioning function. Use of prefixed columns in the PARTITION BY KEY() clause is deprecated and will be removed in a future release.

CREATE TABLE testdb.t_varbinary_nonlinear_alg2 (
prefix_col VARBINARY (100),
other_col VARCHAR (5),
PRIMARY KEY (prefix_col(10), other_col)
) PARTITION BY KEY ALGORITHM=2 () PARTITIONS 3;
Warnings:
Warning	1681	Column 'testdb.t_varbinary_nonlinear_alg2.prefix_col' having prefix key part 'prefix_col(10)' is ignored by the partitioning function. Use of prefixed columns in the PARTITION BY KEY() clause is deprecated and will be removed in a future release.

# Cleanup.

DROP SCHEMA testdb;

# WL#14064 Deprecate INFORMATION_SCHEMA.TABLESPACES

# Should show a deprecation warning in all cases.
SELECT * FROM INFORMATION_SCHEMA.TABLESPACES;
TABLESPACE_NAME	ENGINE	TABLESPACE_TYPE	LOGFILE_GROUP_NAME	EXTENT_SIZE	AUTOEXTEND_SIZE	MAXIMUM_SIZE	NODEGROUP_ID	TABLESPACE_COMMENT
Warnings:
Warning	1681	'INFORMATION_SCHEMA.TABLESPACES' is deprecated and will be removed in a future release.
SELECT * FROM INFORMATION_SCHEMA.tablespaces;
TABLESPACE_NAME	ENGINE	TABLESPACE_TYPE	LOGFILE_GROUP_NAME	EXTENT_SIZE	AUTOEXTEND_SIZE	MAXIMUM_SIZE	NODEGROUP_ID	TABLESPACE_COMMENT
Warnings:
Warning	1681	'INFORMATION_SCHEMA.TABLESPACES' is deprecated and will be removed in a future release.
SELECT * FROM INFORMATION_SCHEMA.TABLES JOIN INFORMATION_SCHEMA.TABLESPACES;
TABLE_CATALOG	TABLE_SCHEMA	TABLE_NAME	TABLE_TYPE	ENGINE	VERSION	ROW_FORMAT	TABLE_ROWS	AVG_ROW_LENGTH	DATA_LENGTH	MAX_DATA_LENGTH	INDEX_LENGTH	DATA_FREE	AUTO_INCREMENT	CREATE_TIME	UPDATE_TIME	CHECK_TIME	TABLE_COLLATION	CHECKSUM	CREATE_OPTIONS	TABLE_COMMENT	TABLESPACE_NAME	ENGINE	TABLESPACE_TYPE	LOGFILE_GROUP_NAME	EXTENT_SIZE	AUTOEXTEND_SIZE	MAXIMUM_SIZE	NODEGROUP_ID	TABLESPACE_COMMENT
Warnings:
Warning	1681	'INFORMATION_SCHEMA.TABLESPACES' is deprecated and will be removed in a future release.
SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME IN (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLESPACES);
TABLE_CATALOG	TABLE_SCHEMA	TABLE_NAME	TABLE_TYPE	ENGINE	VERSION	ROW_FORMAT	TABLE_ROWS	AVG_ROW_LENGTH	DATA_LENGTH	MAX_DATA_LENGTH	INDEX_LENGTH	DATA_FREE	AUTO_INCREMENT	CREATE_TIME	UPDATE_TIME	CHECK_TIME	TABLE_COLLATION	CHECKSUM	CREATE_OPTIONS	TABLE_COMMENT
Warnings:
Warning	1681	'INFORMATION_SCHEMA.TABLESPACES' is deprecated and will be removed in a future release.
