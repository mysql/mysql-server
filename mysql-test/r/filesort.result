#
# Bug#24709595 WL#8741: ASSERTION `SORTORDER->NEED_STRXNFRM == 0' FAILED
#
CREATE TABLE t1(
c VARCHAR(10) CHARACTER SET utf8 DEFAULT NULL
);
Warnings:
Warning	3719	'utf8' is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.
CREATE TABLE t2(
c1 VARCHAR(255) CHARACTER SET utf8 DEFAULT NULL,
c2 VARCHAR(10) CHARACTER SET utf8 DEFAULT NULL
);
Warnings:
Warning	3719	'utf8' is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.
Warning	3719	'utf8' is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.
INSERT INTO t1 VALUES('x');
INSERT INTO t2 VALUES('g','if'), ('not','ojgygqcgqi');
SELECT * FROM t2 WHERE (c2) <> (SELECT MAX(c) FROM t1 GROUP BY c1);
c1	c2
g	if
not	ojgygqcgqi
DROP TABLE t1, t2;
#
# Bug#29660945: SIG 6 AT TEMPTABLE::HANDLER::POSITION | SRC/HANDLER.CC
#
SET optimizer_switch='block_nested_loop=off';
CREATE TABLE t1 (
f1 varchar(255),
f2 varchar(255)
);
INSERT INTO t1 VALUES (NULL,'A');
INSERT INTO t1 VALUES ('A',NULL);
SELECT * FROM t1 AS alias1 JOIN t1 AS alias2 ON alias1.f1=alias2.f2 ORDER BY alias2.f1 LIMIT 50;
f1	f2	f1	f2
A	NULL	NULL	A
DROP TABLE t1;
SET optimizer_switch=DEFAULT;
SET sort_buffer_size=32768;
CREATE TABLE t1 (
f1 INTEGER,
f2 LONGBLOB
);
INSERT INTO t1 VALUES ( 2, REPEAT('-', 1048576) );
INSERT INTO t1 VALUES ( 1, REPEAT('x', 1048576) );
SELECT * FROM t1 ORDER BY f1;
f1	f2
1	x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}x{1024}
2	-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}-{1024}
DROP TABLE t1;
SET sort_buffer_size=DEFAULT;
#
# Bug #30687020: ORDER BY DOES NOT WORK FOR A COLUMN WITH A STRING FUNCTION AND UTF8MB4_0900_AI_C
#
CREATE TABLE t1 ( f1 VARCHAR(100) );
INSERT INTO t1 VALUES (''), (NULL), (''), (NULL);
SELECT CONCAT(f1, '') AS dummy FROM t1 ORDER BY dummy;
dummy
NULL
NULL


DROP TABLE t1;
#
# Bug #30791074: WEIGHT_STRING: ASSERTION `0' FAILED. IN TIME_ZONE_UTC::TIME_TO_GMT_SEC
#
CREATE TABLE t1 ( f1 INTEGER );
INSERT INTO t1 VALUES (0), (1), (101);
SELECT * FROM t1 ORDER BY UNIX_TIMESTAMP(f1);
f1
0
1
101
Warnings:
Warning	1292	Incorrect datetime value: '1'
DROP TABLE t1;
#
# Bug #31397840: Wrong result of SELECT DISTINCT JSON_ARRAYAGG
#
SET sql_mode='';
CREATE TABLE t1
(
id            INT PRIMARY KEY,
char_field    CHAR(10)
);
INSERT INTO t1 VALUES (580801, '580801');
INSERT INTO t1 VALUES (580901, '580901');
INSERT INTO t1 VALUES (581001, '581001');
INSERT INTO t1 VALUES (581101, '581101');
ANALYZE TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
SELECT DISTINCT JSON_ARRAYAGG(char_field), JSON_ARRAYAGG(2) FROM t1 GROUP BY id ORDER BY id;
JSON_ARRAYAGG(char_field)	JSON_ARRAYAGG(2)
["580801"]	[2]
["580901"]	[2]
["581001"]	[2]
["581101"]	[2]
Warnings:
Warning	1235	This version of MySQL doesn't yet support 'sorting of non-scalar JSON values'
EXPLAIN FORMAT=tree SELECT DISTINCT JSON_ARRAYAGG(char_field), JSON_ARRAYAGG(2) FROM t1 GROUP BY id ORDER BY id;
EXPLAIN
-> Sort: t1.id
    -> Sort with duplicate removal: `JSON_ARRAYAGG(char_field)`, `JSON_ARRAYAGG(2)`
        -> Stream results
            -> Group aggregate: json_arrayagg(t1.char_field), json_arrayagg(2)
                -> Sort: t1.id
                    -> Table scan on t1

DROP TABLE t1;
SET sql_mode=DEFAULT;
#
# Bug #31588831: ASSERTION FAILURE IN NEWWEEDOUTACCESSPATHFORTABLES() AT SQL/SQL_EXECUTOR.CC
#
CREATE TABLE t1 (pk INTEGER, f2 INTEGER, PRIMARY KEY (pk));
CREATE TABLE t2 (pk INTEGER, f2 INTEGER, PRIMARY KEY (pk));
INSERT INTO t1 VALUES (1,1), (2,2);
ANALYZE TABLE t1, t2;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
test.t2	analyze	status	OK
EXPLAIN FORMAT=tree SELECT * FROM
t1
LEFT JOIN t1 AS table2 ON 119 IN (
SELECT SUBQUERY1_t2.pk
FROM t1 AS SUBQUERY1_t1, (t2 AS SUBQUERY1_t2 STRAIGHT_JOIN t1 ON TRUE)
)
ORDER BY t1.f2;
EXPLAIN
-> Remove duplicate (t1, table2) rows using temporary table (weedout)
    -> Nested loop left join
        -> Sort row IDs: t1.f2
            -> Table scan on t1
        -> Nested loop inner join
            -> Nested loop inner join
                -> Nested loop inner join
                    -> Constant row from SUBQUERY1_t2  (cost=0.17..0.17 rows=1)
                    -> Table scan on table2
                -> Index scan on SUBQUERY1_t1 using PRIMARY
            -> Index scan on t1 using PRIMARY

DROP TABLE t1, t2;
#
# Bug #32169770: HYPERGRAPH: ASSERTION `M_PART_INFO->IS_PARTITION_USED(M_LAST_PART)' FAILED.
#
CREATE TABLE t1 (a LONGTEXT);
INSERT INTO t1 VALUES ('a');
CREATE TABLE t2 (a INTEGER PRIMARY KEY) PARTITION BY key() PARTITIONS 2;
SELECT 1 AS a FROM t1 LEFT JOIN t2 ON FALSE GROUP BY a;
a
1
DROP TABLE t1, t2;
#
# Bug #32617876: SIG11 IN SORT_PARAM::MAKE_SORTKEY|SQL/FILESORT.CC WITH HYPERGRAPH
#
CREATE TABLE t1 (
a LONGBLOB,
b INTEGER,
c INTEGER
);
INSERT INTO t1 VALUES (NULL,1,3);
INSERT INTO t1 VALUES (NULL,1,NULL);
ANALYZE TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
SELECT *
FROM t1
LEFT JOIN (
t1 AS t2 JOIN t1 AS t3 ON t2.c = t3.b
JOIN ( SELECT DISTINCT b FROM t1 ) AS d1
) ON TRUE
ORDER BY t1.c;
a	b	c	a	b	c	a	b	c	b
NULL	1	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
NULL	1	3	NULL	NULL	NULL	NULL	NULL	NULL	NULL
DROP TABLE t1;
#
# Bug #32685064: ASSERTION `M_INDEX_CURSOR.IS_POSITIONED()' FAILED WITH HYPERGRAPH
#
CREATE TABLE t1 (a LONGTEXT);
INSERT INTO t1 VALUES ('8');
SELECT 'a' AS f1 FROM t1 WHERE a='8' GROUP BY f1 ORDER BY CONCAT(f1);
f1
a
DROP TABLE t1;
#
# Bug #33030289 REGRESSION: ASSERTION `REC_SZ <= M_ELEMENT_SIZE' FAILED.
#
CREATE TABLE t(a DECIMAL(55,19) NOT NULL);
INSERT INTO t VALUES(0),(1),(2),(3),(4),(5);
SELECT
(
SELECT 1 FROM t
ORDER BY ST_HAUSDORFFDISTANCE(a, ST_ASTEXT(1,'axis-order=lat-long')), a
LIMIT 1
);
ERROR 22023: Invalid GIS data provided to function st_astext.
DROP TABLE t;
#
# Bug #32738705: "OUT OF SORT MEMORY ERROR" HAS AN INCONSISTENT RELATIONSHIP WITH THE BUFFER SIZE
#
CREATE TABLE t1 ( a INTEGER, b TEXT );
INSERT INTO t1 VALUES (1, REPEAT('x', 40001));
INSERT INTO t1 VALUES (2, REPEAT('x', 40002));
INSERT INTO t1 VALUES (3, REPEAT('x', 40003));
INSERT INTO t1 VALUES (4, REPEAT('x', 40005));
INSERT INTO t1 VALUES (5, REPEAT('x', 40008));
INSERT INTO t1 VALUES (6, REPEAT('x', 40013));
SET sort_buffer_size=65536;
SELECT a, LENGTH(b) FROM t1 ORDER BY a DESC;
a	LENGTH(b)
6	40013
5	40008
4	40005
3	40003
2	40002
1	40001
SET sort_buffer_size=DEFAULT;
DROP TABLE t1;
