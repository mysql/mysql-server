set @old_concurrent_insert= @@global.concurrent_insert;
set @@global.concurrent_insert= 0;
SET @old_log_output = @@global.log_output;
SET GLOBAL LOG_OUTPUT = 'FILE';
flush status;
show status like 'Table_lock%';
Variable_name	Value
Table_locks_immediate	0
Table_locks_waited	0
select * from information_schema.session_status where variable_name like 'Table_lock%';
VARIABLE_NAME	VARIABLE_VALUE
TABLE_LOCKS_IMMEDIATE	0
TABLE_LOCKS_WAITED	0
set sql_log_bin=0;
set @old_general_log = @@global.general_log;
set global general_log = 'OFF';
drop table if exists t1;
create table t1(n int) engine=myisam;
insert into t1 values(1);
select get_lock('mysqltest_lock', 100);
get_lock('mysqltest_lock', 100)
1
# Switched to connection: con2
# Sending:
update t1 set n = get_lock('mysqltest_lock', 100) ;
# Switched to connection: con1
# Wait for the first UPDATE to get blocked.
# Sending:
update t1 set n = 3;
# Switched to connection: default
# wait for the second UPDATE to get blocked
select release_lock('mysqltest_lock');
release_lock('mysqltest_lock')
1
# Switched to connection: con2
# Reaping first UPDATE
select release_lock('mysqltest_lock');
release_lock('mysqltest_lock')
1
# Switched to connection: con1
# Reaping second UPDATE
show status like 'Table_locks_waited';
Variable_name	Value
Table_locks_waited	1
# Switched to connection: default
drop table t1;
set global general_log = @old_general_log;
select 1;
1
1
show status like 'last_query_cost';
Variable_name	Value
Last_query_cost	0.000000
create table t1 (a int);
insert into t1 values (1),(2),(3),(4),(5),(6),(7),(8),(9),(10);
insert into t1 values (1),(2),(3),(4),(5),(6),(7),(8),(9),(10);
insert into t1 values (1),(2),(3),(4),(5),(6),(7),(8),(9),(10);
insert into t1 values (1),(2),(3),(4),(5),(6),(7),(8),(9),(10);
insert into t1 values (1),(2),(3),(4),(5),(6),(7),(8),(9),(10);
select * from t1 where a=6;
a
6
6
6
6
6
show status like 'last_query_cost';
Variable_name	Value
Last_query_cost	12.084449
show status like 'last_query_cost';
Variable_name	Value
Last_query_cost	12.084449
select 1;
1
1
show status like 'last_query_cost';
Variable_name	Value
Last_query_cost	0.000000
drop table t1;
FLUSH STATUS;
SHOW STATUS LIKE 'max_used_connections';
Variable_name	Value
Max_used_connections	1
SELECT * FROM INFORMATION_SCHEMA.SESSION_STATUS WHERE VARIABLE_NAME LIKE 'max_used_connections';
VARIABLE_NAME	VARIABLE_VALUE
MAX_USED_CONNECTIONS	1
SET @save_thread_cache_size=@@thread_cache_size;
SET GLOBAL thread_cache_size=3;
SHOW STATUS LIKE 'max_used_connections';
Variable_name	Value
Max_used_connections	3
SELECT * FROM INFORMATION_SCHEMA.SESSION_STATUS WHERE VARIABLE_NAME LIKE 'max_used_connections';
VARIABLE_NAME	VARIABLE_VALUE
MAX_USED_CONNECTIONS	3
FLUSH STATUS;
SHOW STATUS LIKE 'max_used_connections';
Variable_name	Value
Max_used_connections	2
SELECT * FROM INFORMATION_SCHEMA.SESSION_STATUS WHERE VARIABLE_NAME LIKE 'max_used_connections';
VARIABLE_NAME	VARIABLE_VALUE
MAX_USED_CONNECTIONS	2
SHOW STATUS LIKE 'max_used_connections';
Variable_name	Value
Max_used_connections	3
SELECT * FROM INFORMATION_SCHEMA.SESSION_STATUS WHERE VARIABLE_NAME LIKE 'max_used_connections';
VARIABLE_NAME	VARIABLE_VALUE
MAX_USED_CONNECTIONS	3
SHOW STATUS LIKE 'max_used_connections';
Variable_name	Value
Max_used_connections	4
SELECT * FROM INFORMATION_SCHEMA.SESSION_STATUS WHERE VARIABLE_NAME LIKE 'max_used_connections';
VARIABLE_NAME	VARIABLE_VALUE
MAX_USED_CONNECTIONS	4
SET GLOBAL thread_cache_size=@save_thread_cache_size;
CREATE TABLE t1 ( a INT );
INSERT INTO t1 VALUES (1), (2);
SELECT a FROM t1 LIMIT 1;
a
1
SHOW SESSION STATUS LIKE 'Last_query_cost';
Variable_name	Value
Last_query_cost	2.402418
EXPLAIN SELECT a FROM t1;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`a` AS `a` from `test`.`t1`
SHOW SESSION STATUS LIKE 'Last_query_cost';
Variable_name	Value
Last_query_cost	2.402418
SELECT a FROM t1 UNION SELECT a FROM t1 ORDER BY a;
a
1
2
SHOW SESSION STATUS LIKE 'Last_query_cost';
Variable_name	Value
Last_query_cost	0.000000
EXPLAIN SELECT a FROM t1 UNION SELECT a FROM t1 ORDER BY a;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	t1	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	NULL
2	UNION	t1	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	NULL
NULL	UNION RESULT	<union1,2>	NULL	ALL	NULL	NULL	NULL	NULL	NULL	NULL	Using temporary; Using filesort
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`a` AS `a` from `test`.`t1` union /* select#2 */ select `test`.`t1`.`a` AS `a` from `test`.`t1` order by `a`
SHOW SESSION STATUS LIKE 'Last_query_cost';
Variable_name	Value
Last_query_cost	0.000000
SELECT a IN (SELECT a FROM t1) FROM t1 LIMIT 1;
a IN (SELECT a FROM t1)
1
SHOW SESSION STATUS LIKE 'Last_query_cost';
Variable_name	Value
Last_query_cost	0.000000
SELECT (SELECT a FROM t1 LIMIT 1) x FROM t1 LIMIT 1;
x
1
SHOW SESSION STATUS LIKE 'Last_query_cost';
Variable_name	Value
Last_query_cost	0.000000
SELECT * FROM t1 a, t1 b LIMIT 1;
a	a
1	1
SHOW SESSION STATUS LIKE 'Last_query_cost';
Variable_name	Value
Last_query_cost	5.205912
DROP TABLE t1;
flush status;
show status like 'Com%function';
Variable_name	Value
Com_alter_function	0
Com_create_function	0
Com_drop_function	0
create function f1 (x INTEGER) returns integer
begin
declare ret integer;
set ret = x * 10;
return ret;
end //
drop function f1;
show status like 'Com%function';
Variable_name	Value
Com_alter_function	0
Com_create_function	1
Com_drop_function	1
create database db37908;
create table db37908.t1(f1 int);
insert into db37908.t1 values(1);
set @orig_sql_mode = @@sql_mode;
set sql_mode=(select replace(@@sql_mode,'NO_AUTO_CREATE_USER',''));
Warnings:
Warning	3090	Changing sql mode 'NO_AUTO_CREATE_USER' is deprecated. It will be removed in a future release.
grant usage,execute on test.* to mysqltest_1@localhost;
Warnings:
Warning	1287	Using GRANT for creating new user is deprecated and will be removed in future release. Create new user with CREATE USER statement.
set sql_mode= @orig_sql_mode;
Warnings:
Warning	3090	Changing sql mode 'NO_AUTO_CREATE_USER' is deprecated. It will be removed in a future release.
create procedure proc37908() begin select 1; end |
create function func37908() returns int sql security invoker
return (select * from db37908.t1 limit 1)|
select * from db37908.t1;
ERROR 42000: SELECT command denied to user 'mysqltest_1'@'localhost' for table 't1'
show status where variable_name ='uptime' and 2 in (select * from db37908.t1);
ERROR 42000: SELECT command denied to user 'mysqltest_1'@'localhost' for table 't1'
show procedure status where name ='proc37908' and 1 in (select f1 from db37908.t1);
ERROR 42000: SELECT command denied to user 'mysqltest_1'@'localhost' for table 't1'
show function status where name ='func37908' and 1 in (select func37908());
ERROR 42000: SELECT command denied to user 'mysqltest_1'@'localhost' for table 't1'
drop database db37908;
drop procedure proc37908;
drop function func37908;
REVOKE ALL PRIVILEGES, GRANT OPTION FROM mysqltest_1@localhost;
DROP USER mysqltest_1@localhost;
DROP PROCEDURE IF EXISTS p1;
DROP FUNCTION IF EXISTS f1;
CREATE FUNCTION f1() RETURNS INTEGER
BEGIN
DECLARE foo INTEGER;
DECLARE bar INTEGER;
SET foo=1;
SET bar=2;
RETURN foo;
END $$
CREATE PROCEDURE p1()
BEGIN
SELECT 1;
END $$
SELECT f1();
f1()
1
CALL p1();
1
1
SELECT 9;
9
9
DROP PROCEDURE p1;
DROP FUNCTION f1;
#
# Test coverage for status variables which were introduced by
# WL#5772 "Add partitioned Table Definition Cache to avoid
# using LOCK_open and its derivatives in DML queries".
#
create table t1 (i int);
create table t2 (j int);
create table t3 (k int);
# Flush table cache to ensure that it is empty and reset status
# variables. Since to test cache overflow we will need to reduce
# its size, also save original table cache size.
flush tables;
flush status;
set @old_table_open_cache= @@table_open_cache;
# Check that after reset all status variables are zero.
show status like 'table_open_cache_%';
Variable_name	Value
Table_open_cache_hits	0
Table_open_cache_misses	0
Table_open_cache_overflows	0
# The first statement accessing t1 after flush should result
# in table cache miss.
select * from t1;
i
show status like 'table_open_cache_%';
Variable_name	Value
Table_open_cache_hits	0
Table_open_cache_misses	1
Table_open_cache_overflows	0
# The second statement accessing the same table should
# result in table cache hit.
select * from t1;
i
show status like 'table_open_cache_%';
Variable_name	Value
Table_open_cache_hits	1
Table_open_cache_misses	1
Table_open_cache_overflows	0
# Again table cache miss if accessing different table.
select * from t2;
j
show status like 'table_open_cache_%';
Variable_name	Value
Table_open_cache_hits	1
Table_open_cache_misses	2
Table_open_cache_overflows	0
# And cache hit then accessing it second time.
select * from t2;
j
show status like 'table_open_cache_%';
Variable_name	Value
Table_open_cache_hits	2
Table_open_cache_misses	2
Table_open_cache_overflows	0
# The below statement should result in 2 cache hits and 
# 4 cache misses since it needs 6 table instances in total.
select * from t1 as a, t2 as b, t1 as c, t2 as d, t1 as e, t2 as f;
i	j	i	j	i	j
show status like 'table_open_cache_%';
Variable_name	Value
Table_open_cache_hits	4
Table_open_cache_misses	6
Table_open_cache_overflows	0
# Reduce size of table cache to check that status
# variable tracking cache overflows works.
set @@global.table_open_cache= 4;
# The below statement should result in table cache hit, but
# as a side effect it should result in trimming of table
# cache by 2 TABLE instances, meaning that overflow counter
# will get increased by 2.
select * from t1;
i
show status like 'table_open_cache_%';
Variable_name	Value
Table_open_cache_hits	5
Table_open_cache_misses	6
Table_open_cache_overflows	2
# This statement should result in 4 cache hits, 2 cache misses/
# overflows.
select * from t1 as a, t2 as b, t1 as c, t2 as d, t1 as e, t2 as f;
i	j	i	j	i	j
show status like 'table_open_cache_%';
Variable_name	Value
Table_open_cache_hits	9
Table_open_cache_misses	8
Table_open_cache_overflows	4
# Finally, the below statement should result in 1 cache miss
# and 1 overflow since it accesses table which is not yet in
# cache and table cache is full.
select * from t3;
k
show status like 'table_open_cache_%';
Variable_name	Value
Table_open_cache_hits	9
Table_open_cache_misses	9
Table_open_cache_overflows	5
# Cleanup
set @@global.table_open_cache= @old_table_open_cache;
drop tables t1, t2, t3;
SHOW STATUS LIKE 'max_used_connections_time';
Variable_name	Value
Max_used_connections_time	DTVALUE
# Should report 4
SHOW STATUS LIKE 'max_used_connections';
Variable_name	Value
Max_used_connections	4
# Should report 4
SHOW STATUS LIKE 'max_used_connections';
Variable_name	Value
Max_used_connections	4
# This should report 0 as it must have the same value as above
TIMESTAMPDIFF(SECOND,'DTVALUE','DTVALUE') <> 0
0
# This should report 0 as timestamp is updated only when connection count strictly exceeds the previos highest value
TIMESTAMPDIFF(SECOND,'DTVALUE','DTVALUE') <> 0
0
FLUSH STATUS;
# This should not report 0 as FLUSH STATUS is called.
TIMESTAMPDIFF(SECOND,'DTVALUE','DTVALUE') <> 0
1
set @@global.concurrent_insert= @old_concurrent_insert;
SET GLOBAL log_output = @old_log_output;
