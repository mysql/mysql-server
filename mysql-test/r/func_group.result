drop table if exists t1,t2,t3,t4,t5,t6;
set @sav_dpi= @@div_precision_increment;
set div_precision_increment= 5;
show variables like 'div_precision_increment';
Variable_name	Value
div_precision_increment	5
create table t1 (grp int, a bigint unsigned, c char(10) not null);
insert into t1 values (1,1,"a");
insert into t1 values (2,2,"b");
insert into t1 values (2,3,"c");
insert into t1 values (3,4,"E");
insert into t1 values (3,5,"C");
insert into t1 values (3,6,"D");
select a,c,sum(a) from t1 group by a;
a	c	sum(a)
1	a	1
2	b	2
3	c	3
4	E	4
5	C	5
6	D	6
select a,c,sum(a) from t1 where a > 10 group by a;
a	c	sum(a)
select sum(a) from t1 where a > 10;
sum(a)
NULL
select a from t1 order by rand(10);
a
2
6
1
3
5
4
select distinct a from t1 order by rand(10);
a
2
6
1
3
5
4
select count(distinct a),count(distinct grp) from t1;
count(distinct a)	count(distinct grp)
6	3
insert into t1 values (null,null,'');
select count(distinct a),count(distinct grp) from t1;
count(distinct a)	count(distinct grp)
6	3
select sum(all a),count(all a),avg(all a),std(all a),variance(all a),bit_or(all a),bit_and(all a),min(all a),max(all a),min(all c),max(all c) from t1;
sum(all a)	count(all a)	avg(all a)	std(all a)	variance(all a)	bit_or(all a)	bit_and(all a)	min(all a)	max(all a)	min(all c)	max(all c)
21	6	3.50000	1.70783	2.91667	7	0	1	6		E
select grp, sum(a),count(a),avg(a),std(a),variance(a),bit_or(a),bit_and(a),min(a),max(a),min(c),max(c) from t1 group by grp;
grp	sum(a)	count(a)	avg(a)	std(a)	variance(a)	bit_or(a)	bit_and(a)	min(a)	max(a)	min(c)	max(c)
NULL	NULL	0	NULL	NULL	NULL	0	18446744073709551615	NULL	NULL		
1	1	1	1.00000	0.00000	0.00000	1	1	1	1	a	a
2	5	2	2.50000	0.50000	0.25000	3	2	2	3	b	c
3	15	3	5.00000	0.81650	0.66667	7	4	4	6	C	E
select grp, sum(a)+count(a)+avg(a)+std(a)+variance(a)+bit_or(a)+bit_and(a)+min(a)+max(a)+min(c)+max(c) as sum from t1 group by grp;
grp	sum
NULL	NULL
1	7
2	20.25
3	45.48316324759439
create table t2 (grp int, a bigint unsigned, c char(10));
insert into t2 select grp,max(a)+max(grp),max(c) from t1 group by grp;
replace into t2 select grp, a, c from t1 limit 2,1;
select * from t2;
grp	a	c
NULL	NULL	
1	2	a
2	5	c
3	9	E
2	3	c
drop table t1,t2;
CREATE TABLE t1 (id int(11),value1 float(10,2));
INSERT INTO t1 VALUES (1,0.00),(1,1.00), (1,2.00), (2,10.00), (2,11.00), (2,12.00);
CREATE TABLE t2 (id int(11),name char(20));
INSERT INTO t2 VALUES (1,'Set One'),(2,'Set Two');
select id, avg(value1), std(value1), variance(value1) from t1 group by id;
id	avg(value1)	std(value1)	variance(value1)
1	1.0000000	0.816497	0.666667
2	11.0000000	0.816497	0.666667
select name, avg(value1), std(value1), variance(value1) from t1, t2 where t1.id = t2.id group by t1.id;
name	avg(value1)	std(value1)	variance(value1)
Set One	1.0000000	0.816497	0.666667
Set Two	11.0000000	0.816497	0.666667
drop table t1,t2;
create table t1 (id int not null);
create table t2 (id int not null,rating int null);
insert into t1 values(1),(2),(3);
insert into t2 values(1, 3),(2, NULL),(2, NULL),(3, 2),(3, NULL);
select t1.id, avg(rating) from t1 left join t2 on ( t1.id = t2.id ) group by t1.id;
id	avg(rating)
1	3.00000
2	NULL
3	2.00000
select sql_small_result t2.id, avg(rating) from t2 group by t2.id;
id	avg(rating)
1	3.00000
2	NULL
3	2.00000
select sql_big_result t2.id, avg(rating) from t2 group by t2.id;
id	avg(rating)
1	3.00000
2	NULL
3	2.00000
select sql_small_result t2.id, avg(rating+0.0e0) from t2 group by t2.id;
id	avg(rating+0.0e0)
1	3
2	NULL
3	2
select sql_big_result t2.id, avg(rating+0.0e0) from t2 group by t2.id;
id	avg(rating+0.0e0)
1	3
2	NULL
3	2
drop table t1,t2;
create table t1 (a smallint(6) primary key, c char(10), b text);
INSERT INTO t1 VALUES (1,'1','1');
INSERT INTO t1 VALUES (2,'2','2');
INSERT INTO t1 VALUES (4,'4','4');
select count(*) from t1;
count(*)
3
select count(*) from t1 where a = 1;
count(*)
1
select count(*) from t1 where a = 100;
count(*)
0
select count(*) from t1 where a >= 10;
count(*)
0
select count(a) from t1 where a = 1;
count(a)
1
select count(a) from t1 where a = 100;
count(a)
0
select count(a) from t1 where a >= 10;
count(a)
0
select count(b) from t1 where b >= 2;
count(b)
2
select count(b) from t1 where b >= 10;
count(b)
0
select count(c) from t1 where c = 10;
count(c)
0
drop table t1;
CREATE TABLE t1 (d DATETIME, i INT);
INSERT INTO t1 VALUES (NOW(), 1);
SELECT COUNT(i), i, COUNT(i)*i FROM t1 GROUP BY i;
COUNT(i)	i	COUNT(i)*i
1	1	1
SELECT COUNT(i), (i+0), COUNT(i)*(i+0) FROM t1 GROUP BY i;
COUNT(i)	(i+0)	COUNT(i)*(i+0)
1	1	1
DROP TABLE t1;
create table t1 (
num float(5,2),
user char(20)
);
insert into t1 values (10.3,'nem'),(20.53,'monty'),(30.23,'sinisa');
insert into t1 values (30.13,'nem'),(20.98,'monty'),(10.45,'sinisa');
insert into t1 values (5.2,'nem'),(8.64,'monty'),(11.12,'sinisa');
select sum(num) from t1;
sum(num)
147.58
select sum(num) from t1 group by user;
sum(num)
50.15
45.63
51.80
drop table t1;
create table t1 (a1 int, a2 char(3), key k1(a1), key k2(a2));
insert into t1 values(10,'aaa'), (10,null), (10,'bbb'), (20,'zzz');
create table t2(a1 char(3), a2 int, a3 real, key k1(a1), key k2(a2, a1));
select * from t1;
a1	a2
10	aaa
10	NULL
10	bbb
20	zzz
select min(a2) from t1;
min(a2)
aaa
select max(t1.a1), max(t2.a2) from t1, t2;
max(t1.a1)	max(t2.a2)
NULL	NULL
select max(t1.a1) from t1, t2;
max(t1.a1)
NULL
select max(t2.a2), max(t1.a1) from t1, t2;
max(t2.a2)	max(t1.a1)
NULL	NULL
explain select min(a2) from t1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
explain select max(t1.a1), max(t2.a2) from t1, t2;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No matching min/max row
insert into t2 values('AAA', 10, 0.5);
insert into t2 values('BBB', 20, 1.0);
select t1.a1, t1.a2, t2.a1, t2.a2 from t1,t2;
a1	a2	a1	a2
10	aaa	AAA	10
10	aaa	BBB	20
10	NULL	AAA	10
10	NULL	BBB	20
10	bbb	AAA	10
10	bbb	BBB	20
20	zzz	AAA	10
20	zzz	BBB	20
SET @save_optimizer_switch=@@optimizer_switch;
SET optimizer_switch='outer_join_with_cache=off';
select max(t1.a1), max(t2.a1) from t1, t2 where t2.a2=9;
max(t1.a1)	max(t2.a1)
NULL	NULL
select max(t2.a1), max(t1.a1) from t1, t2 where t2.a2=9;
max(t2.a1)	max(t1.a1)
NULL	NULL
select t1.a1, t1.a2, t2.a1, t2.a2 from t1 left outer join t2 on t1.a1=10;
a1	a2	a1	a2
10	aaa	AAA	10
10	aaa	BBB	20
10	NULL	AAA	10
10	NULL	BBB	20
10	bbb	AAA	10
10	bbb	BBB	20
20	zzz	NULL	NULL
select max(t1.a2) from t1 left outer join t2 on t1.a1=10;
max(t1.a2)
zzz
select max(t2.a1) from t2 left outer join t1 on t2.a2=10 where t2.a2=20;
max(t2.a1)
BBB
select max(t2.a1) from t2 left outer join t1 on t2.a2=10 where t2.a2=10;
max(t2.a1)
AAA
select max(t2.a1) from t1 left outer join t2 on t1.a2=t2.a1 and 1=0 where t2.a1='AAA';
max(t2.a1)
NULL
select max(t1.a2),max(t2.a1) from t1 left outer join t2 on t1.a1=10;
max(t1.a2)	max(t2.a1)
zzz	BBB
SET optimizer_switch=@save_optimizer_switch;
drop table t1,t2;
CREATE TABLE t1 (a int, b int);
select count(b), sum(b), avg(b), std(b), min(b), max(b), bit_and(b), bit_or(b) from t1;
count(b)	sum(b)	avg(b)	std(b)	min(b)	max(b)	bit_and(b)	bit_or(b)
0	NULL	NULL	NULL	NULL	NULL	18446744073709551615	0
select a,count(b), sum(b), avg(b), std(b), min(b), max(b), bit_and(b), bit_or(b) from t1 group by a;
a	count(b)	sum(b)	avg(b)	std(b)	min(b)	max(b)	bit_and(b)	bit_or(b)
insert into t1 values (1,null);
select a,count(b), sum(b), avg(b), std(b), min(b), max(b), bit_and(b), bit_or(b) from t1 group by a;
a	count(b)	sum(b)	avg(b)	std(b)	min(b)	max(b)	bit_and(b)	bit_or(b)
1	0	NULL	NULL	NULL	NULL	NULL	18446744073709551615	0
insert into t1 values (1,null);
insert into t1 values (2,null);
select a,count(b), sum(b), avg(b), std(b), min(b), max(b), bit_and(b), bit_or(b) from t1 group by a;
a	count(b)	sum(b)	avg(b)	std(b)	min(b)	max(b)	bit_and(b)	bit_or(b)
1	0	NULL	NULL	NULL	NULL	NULL	18446744073709551615	0
2	0	NULL	NULL	NULL	NULL	NULL	18446744073709551615	0
select SQL_BIG_RESULT a,count(b), sum(b), avg(b), std(b), min(b), max(b), bit_and(b), bit_or(b) from t1 group by a;
a	count(b)	sum(b)	avg(b)	std(b)	min(b)	max(b)	bit_and(b)	bit_or(b)
1	0	NULL	NULL	NULL	NULL	NULL	18446744073709551615	0
2	0	NULL	NULL	NULL	NULL	NULL	18446744073709551615	0
insert into t1 values (2,1);
select a,count(b), sum(b), avg(b), std(b), min(b), max(b), bit_and(b), bit_or(b) from t1 group by a;
a	count(b)	sum(b)	avg(b)	std(b)	min(b)	max(b)	bit_and(b)	bit_or(b)
1	0	NULL	NULL	NULL	NULL	NULL	18446744073709551615	0
2	1	1	1.00000	0.00000	1	1	1	1
select SQL_BIG_RESULT a,count(b), sum(b), avg(b), std(b), min(b), max(b), bit_and(b), bit_or(b) from t1 group by a;
a	count(b)	sum(b)	avg(b)	std(b)	min(b)	max(b)	bit_and(b)	bit_or(b)
1	0	NULL	NULL	NULL	NULL	NULL	18446744073709551615	0
2	1	1	1.00000	0.00000	1	1	1	1
insert into t1 values (3,1);
select a,count(b), sum(b), avg(b), std(b), min(b), max(b), bit_and(b), bit_or(b) from t1 group by a;
a	count(b)	sum(b)	avg(b)	std(b)	min(b)	max(b)	bit_and(b)	bit_or(b)
1	0	NULL	NULL	NULL	NULL	NULL	18446744073709551615	0
2	1	1	1.00000	0.00000	1	1	1	1
3	1	1	1.00000	0.00000	1	1	1	1
select SQL_BIG_RESULT a,count(b), sum(b), avg(b), std(b), min(b), max(b), bit_and(b), bit_or(b), bit_xor(b) from t1 group by a;
a	count(b)	sum(b)	avg(b)	std(b)	min(b)	max(b)	bit_and(b)	bit_or(b)	bit_xor(b)
1	0	NULL	NULL	NULL	NULL	NULL	18446744073709551615	0	0
2	1	1	1.00000	0.00000	1	1	1	1	1
3	1	1	1.00000	0.00000	1	1	1	1	1
explain extended select SQL_BIG_RESULT a,count(b), sum(b), avg(b), std(b), min(b), max(b), bit_and(b), bit_or(b), bit_xor(b) from t1 group by a;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	5	100.00	Using filesort
Warnings:
Note	1003	select sql_big_result `test`.`t1`.`a` AS `a`,count(`test`.`t1`.`b`) AS `count(b)`,sum(`test`.`t1`.`b`) AS `sum(b)`,avg(`test`.`t1`.`b`) AS `avg(b)`,std(`test`.`t1`.`b`) AS `std(b)`,min(`test`.`t1`.`b`) AS `min(b)`,max(`test`.`t1`.`b`) AS `max(b)`,bit_and(`test`.`t1`.`b`) AS `bit_and(b)`,bit_or(`test`.`t1`.`b`) AS `bit_or(b)`,bit_xor(`test`.`t1`.`b`) AS `bit_xor(b)` from `test`.`t1` group by `test`.`t1`.`a`
drop table t1;
create table t1 (col int);
insert into t1 values (-1), (-2), (-3);
select bit_and(col), bit_or(col) from t1;
bit_and(col)	bit_or(col)
18446744073709551612	18446744073709551615
select SQL_BIG_RESULT bit_and(col), bit_or(col) from t1 group by col;
bit_and(col)	bit_or(col)
18446744073709551613	18446744073709551613
18446744073709551614	18446744073709551614
18446744073709551615	18446744073709551615
drop table t1;
create table t1 (a int);
select avg(2) from t1;
avg(2)
NULL
drop table t1;
create table t1(
a1 char(3) primary key,
a2 smallint,
a3 char(3),
a4 real,
a5 date,
key k1(a2,a3),
key k2(a4 desc,a1),
key k3(a5,a1)
);
create table t2(
a1 char(3) primary key,
a2 char(17),
a3 char(2),
a4 char(3),
key k1(a3, a2),
key k2(a4)
);
insert into t1 values('AME',0,'SEA',0.100,date'1942-02-19');
insert into t1 values('HBR',1,'SEA',0.085,date'1948-03-05');
insert into t1 values('BOT',2,'SEA',0.085,date'1951-11-29');
insert into t1 values('BMC',3,'SEA',0.085,date'1958-09-08');
insert into t1 values('TWU',0,'LAX',0.080,date'1969-10-05');
insert into t1 values('BDL',0,'DEN',0.080,date'1960-11-27');
insert into t1 values('DTX',1,'NYC',0.080,date'1961-05-04');
insert into t1 values('PLS',1,'WDC',0.075,date'1949-01-02');
insert into t1 values('ZAJ',2,'CHI',0.075,date'1960-06-15');
insert into t1 values('VVV',2,'MIN',0.075,date'1959-06-28');
insert into t1 values('GTM',3,'DAL',0.070,date'1977-09-23');
insert into t1 values('SSJ',null,'CHI',null,date'1974-03-19');
insert into t1 values('KKK',3,'ATL',null,null);
insert into t1 values('XXX',null,'MIN',null,null);
insert into t1 values('WWW',1,'LED',null,null);
insert into t2 values('TKF','Seattle','WA','AME');
insert into t2 values('LCC','Los Angeles','CA','TWU');
insert into t2 values('DEN','Denver','CO','BDL');
insert into t2 values('SDC','San Diego','CA','TWU');
insert into t2 values('NOL','New Orleans','LA','GTM');
insert into t2 values('LAK','Los Angeles','CA','TWU');
insert into t2 values('AAA','AAA','AA','AME');
select * from t1;
a1	a2	a3	a4	a5
AME	0	SEA	0.1	1942-02-19
HBR	1	SEA	0.085	1948-03-05
BOT	2	SEA	0.085	1951-11-29
BMC	3	SEA	0.085	1958-09-08
TWU	0	LAX	0.08	1969-10-05
BDL	0	DEN	0.08	1960-11-27
DTX	1	NYC	0.08	1961-05-04
PLS	1	WDC	0.075	1949-01-02
ZAJ	2	CHI	0.075	1960-06-15
VVV	2	MIN	0.075	1959-06-28
GTM	3	DAL	0.07	1977-09-23
SSJ	NULL	CHI	NULL	1974-03-19
KKK	3	ATL	NULL	NULL
XXX	NULL	MIN	NULL	NULL
WWW	1	LED	NULL	NULL
select * from t2;
a1	a2	a3	a4
TKF	Seattle	WA	AME
LCC	Los Angeles	CA	TWU
DEN	Denver	CO	BDL
SDC	San Diego	CA	TWU
NOL	New Orleans	LA	GTM
LAK	Los Angeles	CA	TWU
AAA	AAA	AA	AME
explain 
select min(a1) from t1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
select min(a1) from t1;
min(a1)
AME
explain 
select max(a4) from t1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
select max(a4) from t1;
max(a4)
0.1
explain 
select min(a5), max(a5) from t1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
select min(a5), max(a5) from t1;
min(a5)	max(a5)
1942-02-19	1977-09-23
explain 
select min(a3) from t1 where a2 = 2;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
select min(a3) from t1 where a2 = 2;
min(a3)
CHI
explain 
select min(a1), max(a1) from t1 where a4 = 0.080;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
select min(a1), max(a1) from t1 where a4 = 0.080;
min(a1)	max(a1)
BDL	TWU
explain 
select min(t1.a5), max(t2.a3) from t1, t2;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
select min(t1.a5), max(t2.a3) from t1, t2;
min(t1.a5)	max(t2.a3)
1942-02-19	WA
explain 
select min(t1.a3), max(t2.a2) from t1, t2 where t1.a2 = 0 and t2.a3 = 'CA';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
select min(t1.a3), max(t2.a2) from t1, t2 where t1.a2 = 0 and t2.a3 = 'CA';
min(t1.a3)	max(t2.a2)
DEN	San Diego
explain 
select min(a1) from t1 where a1 > 'KKK';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
select min(a1) from t1 where a1 > 'KKK';
min(a1)
PLS
explain 
select min(a1) from t1 where a1 >= 'KKK';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
select min(a1) from t1 where a1 >= 'KKK';
min(a1)
KKK
explain 
select max(a3) from t1 where a2 = 2 and a3 < 'SEA';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
select max(a3) from t1 where a2 = 2 and a3 < 'SEA';
max(a3)
MIN
explain 
select max(a5) from t1 where a5 < date'1970-01-01';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
select max(a5) from t1 where a5 < date'1970-01-01';
max(a5)
1969-10-05
explain 
select max(a3) from t1 where a2 is null;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
select max(a3) from t1 where a2 is null;
max(a3)
MIN
explain 
select max(a3) from t1 where a2 = 0 and a3 between 'K' and 'Q';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
select max(a3) from t1 where a2 = 0 and a3 between 'K' and 'Q';
max(a3)
LAX
explain
select min(a1), max(a1) from t1 where a1 between 'A' and 'P';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
select min(a1), max(a1) from t1 where a1 between 'A' and 'P';
min(a1)	max(a1)
AME	KKK
explain 
select max(a3) from t1 where a3 < 'SEA' and a2 = 2 and a3 <= 'MIN';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
select max(a3) from t1 where a3 < 'SEA' and a2 = 2 and a3 <= 'MIN';
max(a3)
MIN
explain 
select max(a3) from t1 where a3 = 'MIN' and a2 = 2;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
select max(a3) from t1 where a3 = 'MIN' and a2 = 2;
max(a3)
MIN
explain 
select max(a3) from t1 where a3 = 'DEN' and a2 = 2;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No matching min/max row
select max(a3) from t1 where a3 = 'DEN' and a2 = 2;
max(a3)
NULL
explain
select max(t1.a3), min(t2.a2) from t1, t2 where t1.a2 = 2 and t1.a3 < 'MIN' and t2.a3 = 'CA';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
select max(t1.a3), min(t2.a2) from t1, t2 where t1.a2 = 2 and t1.a3 < 'MIN' and t2.a3 = 'CA';
max(t1.a3)	min(t2.a2)
CHI	Los Angeles
explain
select max(a3) from t1 where a2 is null and a2 = 2;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Impossible WHERE
select max(a3) from t1 where a2 is null and a2 = 2;
max(a3)
NULL
explain
select max(a2) from t1 where a2 >= 1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
select max(a2) from t1 where a2 >= 1;
max(a2)
3
explain
select min(a3) from t1 where a2 = 2 and a3 < 'SEA';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
select min(a3) from t1 where a2 = 2 and a3 < 'SEA';
min(a3)
CHI
explain
select min(a3) from t1 where a2 = 4;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No matching min/max row
select min(a3) from t1 where a2 = 4;
min(a3)
NULL
explain
select min(a3) from t1 where a2 = 2 and a3 > 'SEA';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No matching min/max row
select min(a3) from t1 where a2 = 2 and a3 > 'SEA';
min(a3)
NULL
explain
select (min(a4)+max(a4))/2 from t1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
select (min(a4)+max(a4))/2 from t1;
(min(a4)+max(a4))/2
0.085
explain
select min(a3) from t1 where 2 = a2;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
select min(a3) from t1 where 2 = a2;
min(a3)
CHI
explain
select max(a3) from t1 where a2 = 2 and 'SEA' > a3;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
select max(a3) from t1 where a2 = 2 and 'SEA' > a3;
max(a3)
MIN
explain
select max(a3) from t1 where a2 = 2 and 'SEA' < a3;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No matching min/max row
select max(a3) from t1 where a2 = 2 and 'SEA' < a3;
max(a3)
NULL
explain
select min(a3) from t1 where a2 = 2 and a3 >= 'CHI';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
select min(a3) from t1 where a2 = 2 and a3 >= 'CHI';
min(a3)
CHI
explain
select min(a3) from t1 where a2 = 2 and a3 >= 'CHI' and a3 < 'SEA';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
select min(a3) from t1 where a2 = 2 and a3 >= 'CHI' and a3 < 'SEA';
min(a3)
CHI
explain
select min(a3) from t1 where a2 = 2 and a3 >= 'CHI' and a3 = 'MIN';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
select min(a3) from t1 where a2 = 2 and a3 >= 'CHI' and a3 = 'MIN';
min(a3)
MIN
explain
select min(a3) from t1 where a2 = 2 and a3 >= 'SEA' and a3 = 'MIN';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Impossible WHERE
select min(a3) from t1 where a2 = 2 and a3 >= 'SEA' and a3 = 'MIN';
min(a3)
NULL
explain
select min(t1.a1), min(t2.a4) from t1,t2 where t1.a1 < 'KKK' and t2.a4 < 'KKK';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
select min(t1.a1), min(t2.a4) from t1,t2 where t1.a1 < 'KKK' and t2.a4 < 'KKK';
min(t1.a1)	min(t2.a4)
AME	AME
explain 
select min(a1) from t1 where a1 > 'KKK' or a1 < 'XXX';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	index	PRIMARY	PRIMARY	3	NULL	15	Using where; Using index
explain 
select min(a1) from t1 where a1 != 'KKK';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	index	PRIMARY	PRIMARY	3	NULL	15	Using where; Using index
explain
select max(a3) from t1 where a2 < 2 and a3 < 'SEA';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	range	k1	k1	3	NULL	6	Using where; Using index
explain
select max(t1.a3), min(t2.a2) from t1, t2 where t1.a2 = 2 and t1.a3 < 'MIN' and t2.a3 > 'CA';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	range	k1	k1	7	NULL	1	Using where; Using index
1	SIMPLE	t2	range	k1	k1	3	NULL	4	Using where; Using index; Using join buffer (flat, BNL join)
explain
select min(a4 - 0.01) from t1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	index	NULL	k2	12	NULL	15	Using index
explain
select max(a4 + 0.01) from t1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	index	NULL	k2	12	NULL	15	Using index
explain
select min(a3) from t1 where (a2 +1 ) is null;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	index	NULL	k1	7	NULL	15	Using where; Using index
explain
select min(a3) from t1 where (a2 + 1) = 2;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	index	NULL	k1	7	NULL	15	Using where; Using index
explain
select min(a3) from t1 where 2 = (a2 + 1);
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	index	NULL	k1	7	NULL	15	Using where; Using index
explain
select min(a2) from t1 where a2 < 2 * a2 - 8;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	index	NULL	k1	7	NULL	15	Using where; Using index
explain
select min(a1) from t1  where a1 between a3 and 'KKK';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	ALL	PRIMARY	NULL	NULL	NULL	15	Using where
explain
select min(a4) from t1  where (a4 + 0.01) between 0.07 and 0.08;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	index	NULL	k2	12	NULL	15	Using where; Using index
explain
select concat(min(t1.a1),min(t2.a4)) from t1, t2 where t2.a4 <> 'AME';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t2	range	k2	k2	4	NULL	6	Using where; Using index
1	SIMPLE	t1	index	NULL	PRIMARY	3	NULL	15	Using index; Using join buffer (flat, BNL join)
drop table t1, t2;
create table t1 (a char(10));
insert into t1 values ('a'),('b'),('c');
select coercibility(max(a)) from t1;
coercibility(max(a))
2
drop table t1;
create table t1 (a char character set latin2);
insert into t1 values ('a'),('b');
select charset(max(a)), coercibility(max(a)),
charset(min(a)), coercibility(min(a)) from t1;
charset(max(a))	coercibility(max(a))	charset(min(a))	coercibility(min(a))
latin2	2	latin2	2
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` char(1) CHARACTER SET latin2 DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
create table t2 select max(a),min(a) from t1;
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `max(a)` char(1) CHARACTER SET latin2 DEFAULT NULL,
  `min(a)` char(1) CHARACTER SET latin2 DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t2;
create table t2 select concat(a) from t1;
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `concat(a)` varchar(1) CHARACTER SET latin2 DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t2,t1;
create table t1 (a int);
insert into t1 values (1);
select max(a) as b from t1 having b=1;
b
1
select a from t1 having a=1;
a
1
drop table t1;
create table t1 (a int);
select variance(2) from t1;
variance(2)
NULL
select stddev(2) from t1;
stddev(2)
NULL
drop table t1;
create table t1 (a int);
insert into t1 values (1),(2);
prepare stmt1 from 'SELECT COUNT(*) FROM t1';
execute stmt1;
COUNT(*)
2
execute stmt1;
COUNT(*)
2
execute stmt1;
COUNT(*)
2
deallocate prepare stmt1;
drop table t1;
create table t1 (a int, primary key(a));
insert into t1 values (1),(2);
prepare stmt1 from 'SELECT max(a) FROM t1';
execute stmt1;
max(a)
2
execute stmt1;
max(a)
2
execute stmt1;
max(a)
2
deallocate prepare stmt1;
drop table t1;
CREATE TABLE t1 (a int primary key);
INSERT INTO t1 VALUES (1),(2),(3),(4);
SELECT MAX(a) FROM t1 WHERE a > 5;
MAX(a)
NULL
SELECT MIN(a) FROM t1 WHERE a < 0;
MIN(a)
NULL
DROP TABLE t1;
CREATE TABLE t1 (
id int(10) unsigned NOT NULL auto_increment,
val enum('one','two','three') NOT NULL default 'one',
PRIMARY KEY  (id)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
INSERT INTO t1 VALUES
(1,'one'),(2,'two'),(3,'three'),(4,'one'),(5,'two');
select val, count(*) from t1 group by val;
val	count(*)
one	2
two	2
three	1
drop table t1;
CREATE TABLE t1 (
id int(10) unsigned NOT NULL auto_increment,
val set('one','two','three') NOT NULL default 'one',
PRIMARY KEY  (id)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
INSERT INTO t1 VALUES
(1,'one'),(2,'two'),(3,'three'),(4,'one'),(5,'two');
select val, count(*) from t1 group by val;
val	count(*)
one	2
two	2
three	1
drop table t1;
create table t1(a int, b datetime);
insert into t1 values (1, NOW()), (2, NOW());
create table t2 select MAX(b) from t1 group by a;
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `MAX(b)` datetime DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1, t2;
create table t1(f1 datetime);
insert into t1 values (now());
create table t2 select f2 from (select max(now()) f2 from t1) a;
show columns from t2;
Field	Type	Null	Key	Default	Extra
f2	datetime	YES		NULL	
drop table t2;
create table t2 select f2 from (select now() f2 from t1) a;
show columns from t2;
Field	Type	Null	Key	Default	Extra
f2	datetime	NO		0000-00-00 00:00:00	
drop table t2, t1;
CREATE TABLE t1(
id int PRIMARY KEY,
a  int,
b  int,
INDEX i_b_id(a,b,id),
INDEX i_id(a,id)
);
INSERT INTO t1 VALUES 
(1,1,4), (2,2,1), (3,1,3), (4,2,1), (5,1,1);
SELECT MAX(id) FROM t1 WHERE id < 3 AND a=2 AND b=6;
MAX(id)
NULL
DROP TABLE t1;
CREATE TABLE t1(
id int PRIMARY KEY,
a  int,
b  int,
INDEX i_id(a,id),
INDEX i_b_id(a,b,id)
);
INSERT INTO t1 VALUES 
(1,1,4), (2,2,1), (3,1,3), (4,2,1), (5,1,1);
SELECT MAX(id) FROM t1 WHERE id < 3 AND a=2 AND b=6;
MAX(id)
NULL
DROP TABLE t1;
CREATE TABLE t1 (id int PRIMARY KEY, b char(3), INDEX(b));
INSERT INTO t1 VALUES (1,'xx'), (2,'aa');
SELECT * FROM t1;
id	b
1	xx
2	aa
SELECT MAX(b) FROM t1 WHERE b < 'ppppp';
MAX(b)
aa
SHOW WARNINGS;
Level	Code	Message
SELECT MAX(b) FROM t1 WHERE b < 'pp';
MAX(b)
aa
DROP TABLE t1;
CREATE TABLE t1 (id int PRIMARY KEY, b char(16), INDEX(b(4)));
INSERT INTO t1 VALUES (1, 'xxxxbbbb'), (2, 'xxxxaaaa');
SELECT MAX(b) FROM t1;
MAX(b)
xxxxbbbb
EXPLAIN SELECT MAX(b) FROM t1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	2	
DROP TABLE t1;
CREATE TABLE t1 (id int , b varchar(512), INDEX(b(250))) COLLATE latin1_bin;
INSERT INTO t1 VALUES
(1,CONCAT(REPEAT('_', 250), "qq")), (1,CONCAT(REPEAT('_', 250), "zz")),
(1,CONCAT(REPEAT('_', 250), "aa")), (1,CONCAT(REPEAT('_', 250), "ff"));
SELECT MAX(b) FROM t1;
MAX(b)
__________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________zz
EXPLAIN SELECT MAX(b) FROM t1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	4	
DROP TABLE t1;
CREATE TABLE t1 (a INT, b INT);
INSERT INTO t1 VALUES (1,1),(1,2),(2,3);
SELECT (SELECT COUNT(DISTINCT t1.b)) FROM t1 GROUP BY t1.a;
(SELECT COUNT(DISTINCT t1.b))
2
1
SELECT (SELECT COUNT(DISTINCT 12)) FROM t1 GROUP BY t1.a;
(SELECT COUNT(DISTINCT 12))
1
1
SELECT AVG(2), BIT_AND(2), BIT_OR(2), BIT_XOR(2), COUNT(*), COUNT(12),
COUNT(DISTINCT 12), MIN(2),MAX(2),STD(2), VARIANCE(2),SUM(2),
GROUP_CONCAT(2),GROUP_CONCAT(DISTINCT 2);
AVG(2)	BIT_AND(2)	BIT_OR(2)	BIT_XOR(2)	COUNT(*)	COUNT(12)	COUNT(DISTINCT 12)	MIN(2)	MAX(2)	STD(2)	VARIANCE(2)	SUM(2)	GROUP_CONCAT(2)	GROUP_CONCAT(DISTINCT 2)
2.00000	2	2	2	1	1	1	2	2	0.00000	0.00000	2	2	2
DROP TABLE t1;
create table t2 (ff double);
insert into t2 values (2.2);
select cast(sum(distinct ff) as decimal(5,2)) from t2;
cast(sum(distinct ff) as decimal(5,2))
2.20
select cast(sum(distinct ff) as signed) from t2;
cast(sum(distinct ff) as signed)
2
select cast(variance(ff) as decimal(10,3)) from t2;
cast(variance(ff) as decimal(10,3))
0.000
select cast(min(ff) as decimal(5,2)) from t2;
cast(min(ff) as decimal(5,2))
2.20
create table t1 (df decimal(5,1));
insert into t1 values(1.1);
insert into t1 values(2.2);
select cast(sum(distinct df) as signed) from t1;
cast(sum(distinct df) as signed)
3
select cast(min(df) as signed) from t1;
cast(min(df) as signed)
1
select 1e8 * sum(distinct df) from t1;
1e8 * sum(distinct df)
330000000
select 1e8 * min(df) from t1;
1e8 * min(df)
110000000.00000001
create table t3 (ifl int);
insert into t3 values(1), (2);
select cast(min(ifl) as decimal(5,2)) from t3;
cast(min(ifl) as decimal(5,2))
1.00
drop table t1, t2, t3;
CREATE TABLE t1 (id int(11),value1 float(10,2));
INSERT INTO t1 VALUES (1,0.00),(1,1.00), (1,2.00), (2,10.00), (2,11.00), (2,12.00), (2,13.00);
select id, stddev_pop(value1), var_pop(value1), stddev_samp(value1), var_samp(value1) from t1 group by id;
id	stddev_pop(value1)	var_pop(value1)	stddev_samp(value1)	var_samp(value1)
1	0.816497	0.666667	1.000000	1.000000
2	1.118034	1.250000	1.290994	1.666667
DROP TABLE t1;
CREATE TABLE t1 (col1 decimal(16,12));
INSERT INTO t1 VALUES (-5.00000000001),(-5.00000000002),(-5.00000000003),(-5.00000000000),(-5.00000000001),(-5.00000000002);
insert into t1 select * from t1;
select col1,count(col1),sum(col1),avg(col1) from t1 group by col1;
col1	count(col1)	sum(col1)	avg(col1)
-5.000000000030	2	-10.000000000060	-5.00000000003000000
-5.000000000020	4	-20.000000000080	-5.00000000002000000
-5.000000000010	4	-20.000000000040	-5.00000000001000000
-5.000000000000	2	-10.000000000000	-5.00000000000000000
DROP TABLE t1;
create table t1 (col1 decimal(16,12));
insert into t1 values (-5.00000000001);
insert into t1 values (-5.00000000001);
select col1,sum(col1),max(col1),min(col1) from t1 group by col1;
col1	sum(col1)	max(col1)	min(col1)
-5.000000000010	-10.000000000020	-5.000000000010	-5.000000000010
delete from t1;
insert into t1 values (5.00000000001);
insert into t1 values (5.00000000001);
select col1,sum(col1),max(col1),min(col1) from t1 group by col1;
col1	sum(col1)	max(col1)	min(col1)
5.000000000010	10.000000000020	5.000000000010	5.000000000010
DROP TABLE t1;
CREATE TABLE t1 (a VARCHAR(400));
INSERT INTO t1 (a) VALUES ("A"), ("a"), ("a "), ("a   "),
("B"), ("b"), ("b "), ("b   ");
SELECT COUNT(DISTINCT a) FROM t1;
COUNT(DISTINCT a)
2
DROP TABLE t1;
CREATE TABLE t1 (a int, b int, c int);
INSERT INTO t1 (a, b, c) VALUES
(1,1,1), (1,1,2), (1,1,3),
(1,2,1), (1,2,2), (1,2,3),
(1,3,1), (1,3,2), (1,3,3),
(2,1,1), (2,1,2), (2,1,3),
(2,2,1), (2,2,2), (2,2,3),
(2,3,1), (2,3,2), (2,3,3),
(3,1,1), (3,1,2), (3,1,3),
(3,2,1), (3,2,2), (3,2,3),
(3,3,1), (3,3,2), (3,3,3);
SELECT b/c as v, a FROM t1 ORDER BY v;
v	a
0.33333	3
0.33333	1
0.33333	2
0.50000	1
0.50000	2
0.50000	3
0.66667	2
0.66667	1
0.66667	3
1.00000	3
1.00000	2
1.00000	3
1.00000	1
1.00000	2
1.00000	3
1.00000	2
1.00000	1
1.00000	1
1.50000	3
1.50000	2
1.50000	1
2.00000	1
2.00000	3
2.00000	2
3.00000	3
3.00000	2
3.00000	1
SELECT b/c as v, SUM(a) FROM t1 GROUP BY v;
v	SUM(a)
0.33333	6
0.50000	6
0.66667	6
1.00000	18
1.50000	6
2.00000	6
3.00000	6
SELECT SUM(a) FROM t1 GROUP BY b/c;
SUM(a)
6
6
6
18
6
6
6
DROP TABLE t1;
set div_precision_increment= @sav_dpi;
CREATE TABLE t1 (a INT PRIMARY KEY, b INT);
INSERT INTO t1 VALUES (1,1), (2,2);
CREATE TABLE t2 (a INT PRIMARY KEY, b INT);
INSERT INTO t2 VALUES (1,1), (3,3);
SELECT SQL_NO_CACHE 
(SELECT SUM(c.a) FROM t1 ttt, t2 ccc 
WHERE ttt.a = ccc.b AND ttt.a = t.a GROUP BY ttt.a) AS minid   
FROM t1 t, t2 c WHERE t.a = c.b;
minid
1
DROP TABLE t1,t2;
create table t1 select variance(0);
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `variance(0)` double(8,4) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
create table t1 select stddev(0);
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `stddev(0)` double(8,4) DEFAULT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1
drop table t1;
create table bug22555 (i smallint primary key auto_increment, s1 smallint, s2 smallint, e decimal(30,10), o double);
insert into bug22555 (s1, s2, e, o) values (53, 78, 11.4276528, 6.828112), (17, 78, 5.916793, 1.8502951), (18, 76, 2.679231, 9.17975591), (31, 62, 6.07831, 0.1), (19, 41, 5.37463, 15.1), (83, 73, 14.567426, 7.959222), (92, 53, 6.10151, 13.1856852), (7, 12, 13.92272, 3.442007), (92, 35, 11.95358909, 6.01376678), (38, 84, 2.572, 7.904571);
select std(s1/s2) from bug22555 group by i;
std(s1/s2)
0.00000000
0.00000000
0.00000000
0.00000000
0.00000000
0.00000000
0.00000000
0.00000000
0.00000000
0.00000000
select std(e) from bug22555 group by i;
std(e)
0.00000000000000
0.00000000000000
0.00000000000000
0.00000000000000
0.00000000000000
0.00000000000000
0.00000000000000
0.00000000000000
0.00000000000000
0.00000000000000
select std(o) from bug22555 group by i;
std(o)
0
0
0
0
0
0
0
0
0
0
drop table bug22555;
create table bug22555 (i smallint, s1 smallint, s2 smallint, o1 double, o2 double, e1 decimal, e2 decimal);
insert into bug22555 values (1,53,78,53,78,53,78),(2,17,78,17,78,17,78),(3,18,76,18,76,18,76);
select i, count(*) from bug22555 group by i;
i	count(*)
1	1
2	1
3	1
select std(s1/s2) from bug22555 where i=1;
std(s1/s2)
0.00000000
select std(s1/s2) from bug22555 where i=2;
std(s1/s2)
0.00000000
select std(s1/s2) from bug22555 where i=3;
std(s1/s2)
0.00000000
select std(s1/s2) from bug22555 where i=1 group by i;
std(s1/s2)
0.00000000
select std(s1/s2) from bug22555 where i=2 group by i;
std(s1/s2)
0.00000000
select std(s1/s2) from bug22555 where i=3 group by i;
std(s1/s2)
0.00000000
select std(s1/s2) from bug22555 group by i order by i;
std(s1/s2)
0.00000000
0.00000000
0.00000000
select i, count(*), std(o1/o2) from bug22555 group by i order by i;
i	count(*)	std(o1/o2)
1	1	0
2	1	0
3	1	0
select i, count(*), std(e1/e2) from bug22555 group by i order by i;
i	count(*)	std(e1/e2)
1	1	0.00000000
2	1	0.00000000
3	1	0.00000000
set @saved_div_precision_increment=@@div_precision_increment;
set div_precision_increment=19;
select i, count(*), variance(s1/s2) from bug22555 group by i order by i;
i	count(*)	variance(s1/s2)
1	1	0.000000000000000000000000000000
2	1	0.000000000000000000000000000000
3	1	0.000000000000000000000000000000
select i, count(*), variance(o1/o2) from bug22555 group by i order by i;
i	count(*)	variance(o1/o2)
1	1	0
2	1	0
3	1	0
select i, count(*), variance(e1/e2) from bug22555 group by i order by i;
i	count(*)	variance(e1/e2)
1	1	0.000000000000000000000000000000
2	1	0.000000000000000000000000000000
3	1	0.000000000000000000000000000000
select i, count(*), std(s1/s2) from bug22555 group by i order by i;
i	count(*)	std(s1/s2)
1	1	0.000000000000000000000000000000
2	1	0.000000000000000000000000000000
3	1	0.000000000000000000000000000000
select i, count(*), std(o1/o2) from bug22555 group by i order by i;
i	count(*)	std(o1/o2)
1	1	0
2	1	0
3	1	0
select i, count(*), std(e1/e2) from bug22555 group by i order by i;
i	count(*)	std(e1/e2)
1	1	0.000000000000000000000000000000
2	1	0.000000000000000000000000000000
3	1	0.000000000000000000000000000000
set div_precision_increment=20;
select i, count(*), variance(s1/s2) from bug22555 group by i order by i;
i	count(*)	variance(s1/s2)
1	1	0.000000000000000000000000000000
2	1	0.000000000000000000000000000000
3	1	0.000000000000000000000000000000
select i, count(*), variance(o1/o2) from bug22555 group by i order by i;
i	count(*)	variance(o1/o2)
1	1	0
2	1	0
3	1	0
select i, count(*), variance(e1/e2) from bug22555 group by i order by i;
i	count(*)	variance(e1/e2)
1	1	0.000000000000000000000000000000
2	1	0.000000000000000000000000000000
3	1	0.000000000000000000000000000000
select i, count(*), std(s1/s2) from bug22555 group by i order by i;
i	count(*)	std(s1/s2)
1	1	0.000000000000000000000000000000
2	1	0.000000000000000000000000000000
3	1	0.000000000000000000000000000000
select i, count(*), std(o1/o2) from bug22555 group by i order by i;
i	count(*)	std(o1/o2)
1	1	0
2	1	0
3	1	0
select i, count(*), std(e1/e2) from bug22555 group by i order by i;
i	count(*)	std(e1/e2)
1	1	0.000000000000000000000000000000
2	1	0.000000000000000000000000000000
3	1	0.000000000000000000000000000000
set @@div_precision_increment=@saved_div_precision_increment;
insert into bug22555 values (1,53,78,53,78,53,78),(2,17,78,17,78,17,78),(3,18,76,18,76,18,76);
insert into bug22555 values (1,53,78,53,78,53,78),(2,17,78,17,78,17,78),(3,18,76,18,76,18,76);
insert into bug22555 values (1,53,78,53,78,53,78),(2,17,78,17,78,17,78),(3,18,76,18,76,18,76);
select i, count(*), std(s1/s2) from bug22555 group by i order by i;
i	count(*)	std(s1/s2)
1	4	0.00000000
2	4	0.00000000
3	4	0.00000000
select i, count(*), round(std(o1/o2), 16) from bug22555 group by i order by i;
i	count(*)	round(std(o1/o2), 16)
1	4	0.0000000000000000
2	4	0.0000000000000000
3	4	0.0000000000000000
select i, count(*), std(e1/e2) from bug22555 group by i order by i;
i	count(*)	std(e1/e2)
1	4	0.00000000
2	4	0.00000000
3	4	0.00000000
select std(s1/s2) from bug22555;
std(s1/s2)
0.21325764
select std(o1/o2) from bug22555;
std(o1/o2)
0.2132576358664934
select std(e1/e2) from bug22555;
std(e1/e2)
0.21325764
set @saved_div_precision_increment=@@div_precision_increment;
set div_precision_increment=19;
select i, count(*), std(s1/s2) from bug22555 group by i order by i;
i	count(*)	std(s1/s2)
1	4	0.000000000000000000000000000000
2	4	0.000000000000000000000000000000
3	4	0.000000000000000000000000000000
select i, count(*), round(std(o1/o2), 16) from bug22555 group by i order by i;
i	count(*)	round(std(o1/o2), 16)
1	4	0.0000000000000000
2	4	0.0000000000000000
3	4	0.0000000000000000
select i, count(*), std(e1/e2) from bug22555 group by i order by i;
i	count(*)	std(e1/e2)
1	4	0.000000000000000000000000000000
2	4	0.000000000000000000000000000000
3	4	0.000000000000000000000000000000
select round(std(s1/s2), 17) from bug22555;
round(std(s1/s2), 17)
0.21325763586649340
select std(o1/o2) from bug22555;
std(o1/o2)
0.2132576358664934
select round(std(e1/e2), 17) from bug22555;
round(std(e1/e2), 17)
0.21325763586649340
set div_precision_increment=20;
select i, count(*), std(s1/s2) from bug22555 group by i order by i;
i	count(*)	std(s1/s2)
1	4	0.000000000000000000000000000000
2	4	0.000000000000000000000000000000
3	4	0.000000000000000000000000000000
select i, count(*), round(std(o1/o2), 16) from bug22555 group by i order by i;
i	count(*)	round(std(o1/o2), 16)
1	4	0.0000000000000000
2	4	0.0000000000000000
3	4	0.0000000000000000
select i, count(*), std(e1/e2) from bug22555 group by i order by i;
i	count(*)	std(e1/e2)
1	4	0.000000000000000000000000000000
2	4	0.000000000000000000000000000000
3	4	0.000000000000000000000000000000
select round(std(s1/s2), 17) from bug22555;
round(std(s1/s2), 17)
0.21325763586649340
select std(o1/o2) from bug22555;
std(o1/o2)
0.2132576358664934
select round(std(e1/e2), 17) from bug22555;
round(std(e1/e2), 17)
0.21325763586649340
set @@div_precision_increment=@saved_div_precision_increment;
drop table bug22555;
create table bug22555 (s smallint, o double, e decimal);
insert into bug22555 values (1,1,1),(2,2,2),(3,3,3),(6,6,6),(7,7,7);
select var_samp(s), var_pop(s) from bug22555;
var_samp(s)	var_pop(s)
6.7000	5.3600
select var_samp(o), var_pop(o) from bug22555;
var_samp(o)	var_pop(o)
6.7	5.36
select var_samp(e), var_pop(e) from bug22555;
var_samp(e)	var_pop(e)
6.7000	5.3600
drop table bug22555;
create table bug22555 (s smallint, o double, e decimal);
insert into bug22555 values (null,null,null),(null,null,null);
select var_samp(s) as 'null', var_pop(s) as 'null' from bug22555;
null	null
NULL	NULL
select var_samp(o) as 'null', var_pop(o) as 'null' from bug22555;
null	null
NULL	NULL
select var_samp(e) as 'null', var_pop(e) as 'null' from bug22555;
null	null
NULL	NULL
insert into bug22555 values (1,1,1);
select var_samp(s) as 'null', var_pop(s) as '0' from bug22555;
null	0
NULL	0.0000
select var_samp(o) as 'null', var_pop(o) as '0' from bug22555;
null	0
NULL	0
select var_samp(e) as 'null', var_pop(e) as '0' from bug22555;
null	0
NULL	0.0000
insert into bug22555 values (2,2,2);
select var_samp(s) as '0.5', var_pop(s) as '0.25' from bug22555;
0.5	0.25
0.5000	0.2500
select var_samp(o) as '0.5', var_pop(o) as '0.25' from bug22555;
0.5	0.25
0.5	0.25
select var_samp(e) as '0.5', var_pop(e) as '0.25' from bug22555;
0.5	0.25
0.5000	0.2500
drop table bug22555;
create table t1 (a decimal(20));
insert into t1 values (12345678901234567890);
select count(a) from t1;
count(a)
1
select count(distinct a) from t1;
count(distinct a)
1
drop table t1;
CREATE TABLE t1 (a INT, b INT);
INSERT INTO t1 VALUES (1,1),(1,2),(1,3),(1,4),(1,5),(1,6),(1,7),(1,8);
INSERT INTO t1 SELECT a, b+8       FROM t1;
INSERT INTO t1 SELECT a, b+16      FROM t1;
INSERT INTO t1 SELECT a, b+32      FROM t1;
INSERT INTO t1 SELECT a, b+64      FROM t1;
INSERT INTO t1 SELECT a, b+128     FROM t1;
INSERT INTO t1 SELECT a, b+256     FROM t1;
INSERT INTO t1 SELECT a, b+512     FROM t1;
INSERT INTO t1 SELECT a, b+1024    FROM t1;
INSERT INTO t1 SELECT a, b+2048    FROM t1;
INSERT INTO t1 SELECT a, b+4096    FROM t1;
INSERT INTO t1 SELECT a, b+8192    FROM t1;
INSERT INTO t1 SELECT a, b+16384   FROM t1;
INSERT INTO t1 SELECT a, b+32768   FROM t1;
SELECT a,COUNT(DISTINCT b) AS cnt FROM t1 GROUP BY a HAVING cnt > 50;
a	cnt
1	65536
SELECT a,SUM(DISTINCT b) AS sumation FROM t1 GROUP BY a HAVING sumation > 50;
a	sumation
1	2147516416
SELECT a,AVG(DISTINCT b) AS average FROM t1 GROUP BY a HAVING average > 50;
a	average
1	32768.5000
DROP TABLE t1;
CREATE TABLE t1 ( a INT, b INT, KEY(a) );
INSERT INTO t1 VALUES (NULL, 1), (NULL, 2);
EXPLAIN SELECT MIN(a), MIN(b) FROM t1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	2	
SELECT MIN(a), MIN(b) FROM t1;
MIN(a)	MIN(b)
NULL	1
CREATE TABLE t2( a INT, b INT, c INT, KEY(a, b) );
INSERT INTO t2 ( a, b, c ) VALUES ( 1, NULL, 2 ), ( 1, 3, 4 ), ( 1, 4, 4 );
EXPLAIN SELECT MIN(b), MIN(c) FROM t2 WHERE a = 1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t2	ref	a	a	5	const	2	
SELECT MIN(b), MIN(c) FROM t2 WHERE a = 1;
MIN(b)	MIN(c)
3	2
CREATE TABLE t3 (a INT, b INT, c int, KEY(a, b));
INSERT INTO t3 VALUES (1, NULL, 1), (2, NULL, 2),  (2, NULL, 2),  (3, NULL, 3);
EXPLAIN SELECT MIN(a), MIN(b) FROM t3 where a = 2;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
SELECT MIN(a), MIN(b) FROM t3 where a = 2;
MIN(a)	MIN(b)
2	NULL
CREATE TABLE t4 (a INT, b INT, c int, KEY(a, b));
INSERT INTO t4 VALUES (1, 1, 1), (2, NULL, 2),  (2, NULL, 2),  (3, 1, 3);
EXPLAIN SELECT MIN(a), MIN(b) FROM t4 where a = 2;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
SELECT MIN(a), MIN(b) FROM t4 where a = 2;
MIN(a)	MIN(b)
2	NULL
SELECT MIN(b), min(c) FROM t4 where a = 2;
MIN(b)	min(c)
NULL	2
CREATE TABLE t5( a INT, b INT, KEY( a, b) );
INSERT INTO t5 VALUES( 1, 1 ), ( 1, 2 );
EXPLAIN SELECT MIN(a), MIN(b) FROM t5 WHERE a = 1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
SELECT MIN(a), MIN(b) FROM t5 WHERE a = 1;
MIN(a)	MIN(b)
1	1
SELECT MIN(a), MIN(b) FROM t5 WHERE a = 1 and b > 1;
MIN(a)	MIN(b)
1	2
DROP TABLE t1, t2, t3, t4, t5;
CREATE TABLE t1 (a INT);
INSERT INTO t1 values (),(),();
SELECT (SELECT SLEEP(0) FROM t1 ORDER BY AVG(DISTINCT a) ) as x FROM t1 
GROUP BY x;
x
0
SELECT 1 FROM t1 GROUP BY (SELECT SLEEP(0) FROM t1 ORDER BY AVG(DISTINCT a) );
1
1
DROP TABLE t1;
CREATE TABLE t1 (a int, b date NOT NULL, KEY k1 (a,b));
SELECT MIN(b) FROM t1 WHERE a=1 AND b>'2007-08-01';
MIN(b)
NULL
DROP TABLE t1;
CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (1),(2),(3),(4);
SET SQL_MODE=ONLY_FULL_GROUP_BY;
SELECT a FROM t1 HAVING COUNT(*)>2;
ERROR 42000: Mixing of GROUP columns (MIN(),MAX(),COUNT(),...) with no GROUP columns is illegal if there is no GROUP BY clause
SELECT COUNT(*), a FROM t1;
ERROR 42000: Mixing of GROUP columns (MIN(),MAX(),COUNT(),...) with no GROUP columns is illegal if there is no GROUP BY clause
SET SQL_MODE=DEFAULT;
SELECT a FROM t1 HAVING COUNT(*)>2;
a
1
SELECT COUNT(*), a FROM t1;
COUNT(*)	a
4	1
DROP TABLE t1;
set SQL_MODE=ONLY_FULL_GROUP_BY;
CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (1),(2),(3),(4);
CREATE VIEW v1 AS SELECT a,(a + 1) AS y FROM t1;
EXPLAIN EXTENDED SELECT y FROM v1 GROUP BY v1.y;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	4	100.00	Using temporary; Using filesort
Warnings:
Note	1003	select (`test`.`t1`.`a` + 1) AS `y` from `test`.`t1` group by (`test`.`t1`.`a` + 1)
DROP VIEW v1;
DROP TABLE t1;
SET SQL_MODE=DEFAULT;
CREATE TABLE t1(a DOUBLE);
INSERT INTO t1 VALUES (10), (20);
SELECT AVG(a), CAST(AVG(a) AS DECIMAL) FROM t1;
AVG(a)	CAST(AVG(a) AS DECIMAL)
15	15
DROP TABLE t1;
CREATE TABLE derived1 (a bigint(21));
INSERT INTO derived1 VALUES (2);
CREATE TABLE D (
pk int(11) NOT NULL AUTO_INCREMENT,
int_nokey int(11) DEFAULT NULL,
int_key int(11) DEFAULT NULL,
filler blob,
PRIMARY KEY (pk),
KEY int_key (int_key)
);
INSERT INTO D VALUES 
(39,40,4,repeat('  X', 42)),
(43,56,4,repeat('  X', 42)),
(47,12,4,repeat('  X', 42)),
(71,28,4,repeat('  X', 42)),
(76,54,4,repeat('  X', 42)),
(83,45,4,repeat('  X', 42)),
(105,53,12,NULL);
SELECT 
(SELECT COUNT( int_nokey ) 
FROM derived1 AS X 
WHERE 
X.int_nokey < 61 
GROUP BY pk 
LIMIT 1) 
FROM D AS X 
WHERE X.int_key < 13  
GROUP BY int_nokey LIMIT 1;
(SELECT COUNT( int_nokey ) 
FROM derived1 AS X 
WHERE 
X.int_nokey < 61 
GROUP BY pk 
LIMIT 1)
1
DROP TABLE derived1;
DROP TABLE D;
CREATE TABLE t1 (a INT, b INT);
INSERT INTO t1 VALUES (1,1), (1,2), (1,3);
CREATE TABLE t2 (b INT);
INSERT INTO t2 VALUES (3),(4);
SET SQL_MODE='ONLY_FULL_GROUP_BY';
SELECT COUNT(*) FROM t1;
COUNT(*)
3
SELECT COUNT(*) FROM t1 where a=1;
COUNT(*)
3
SELECT COUNT(*),a FROM t1;
ERROR 42000: Mixing of GROUP columns (MIN(),MAX(),COUNT(),...) with no GROUP columns is illegal if there is no GROUP BY clause
SELECT COUNT(*) FROM t1 a JOIN t1 b ON a.a= b.a;
COUNT(*)
9
SELECT COUNT(*), (SELECT count(*) FROM t1 inr WHERE inr.a = outr.a) 
FROM t1 outr;
ERROR 42000: Mixing of GROUP columns (MIN(),MAX(),COUNT(),...) with no GROUP columns is illegal if there is no GROUP BY clause
SELECT COUNT(*) FROM t1 outr, (SELECT b, count(*) FROM t2) as t3;
ERROR 42000: Mixing of GROUP columns (MIN(),MAX(),COUNT(),...) with no GROUP columns is illegal if there is no GROUP BY clause
SELECT COUNT(*) FROM t1 outr where (1,1) in (SELECT a, count(*) FROM t2);
COUNT(*)
0
SELECT COUNT(*) FROM t1 a JOIN t1 outr 
ON a.a= (SELECT count(*) FROM t1 inr WHERE inr.a = outr.a);
COUNT(*)
0
SELECT * FROM (SELECT a FROM t1 GROUP BY a) sq JOIN t2 ON a = b;
a	b
SET SQL_MODE=default;
DROP TABLE t1,t2;
End of 5.0 tests
#
# BUG#47280 - strange results from count(*) with order by multiple 
#             columns without where/group
# 
# 
# Initialize test
# 
CREATE TABLE t1 (
pk INT NOT NULL,
i INT,
PRIMARY KEY (pk)
);
INSERT INTO t1 VALUES (1,11),(2,12),(3,13);
#
# Start test
# All the following queries shall return 1 record
#

# Masking all correct values {11...13} for column i in this result. 
SELECT MAX(pk) as max, i
FROM t1
ORDER BY max;
max	i
3	#

EXPLAIN
SELECT MAX(pk) as max, i
FROM t1
ORDER BY max;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	3	Using temporary

# Only 11 is correct for collumn i in this result
SELECT MAX(pk) as max, i
FROM t1
WHERE pk<2
ORDER BY max;
max	i
1	11
#
# Cleanup
#
DROP TABLE t1;
#
# Bug#43668: Wrong comparison and MIN/MAX for YEAR(2)
#
create table t1 (f1 year(2), f2 year(4), f3 date, f4 datetime);
Warnings:
Note	1287	'YEAR(2)' is deprecated and will be removed in a future release. Please use YEAR(4) instead
insert into t1 values
(98,1998,19980101,"1998-01-01 00:00:00"),
(00,2000,20000101,"2000-01-01 00:00:01"),
(02,2002,20020101,"2002-01-01 23:59:59"),
(60,2060,20600101,"2060-01-01 11:11:11"),
(70,1970,19700101,"1970-11-11 22:22:22"),
(NULL,NULL,NULL,NULL),
(71,1971,19710101,"1971-11-11 22:22:22");
select min(f1),max(f1) from t1;
min(f1)	max(f1)
70	60
select min(f2),max(f2) from t1;
min(f2)	max(f2)
1970	2060
select min(f3),max(f3) from t1;
min(f3)	max(f3)
1970-01-01	2060-01-01
select min(f4),max(f4) from t1;
min(f4)	max(f4)
1970-11-11 22:22:22	2060-01-01 11:11:11
select a.f1 as a, b.f1 as b, a.f1 > b.f1 as gt,
a.f1 < b.f1 as lt, a.f1<=>b.f1 as eq
from t1 a, t1 b;
a	b	gt	lt	eq
98	98	0	0	1
00	98	1	0	0
02	98	1	0	0
60	98	1	0	0
70	98	0	1	0
NULL	98	NULL	NULL	0
71	98	0	1	0
98	00	0	1	0
00	00	0	0	1
02	00	1	0	0
60	00	1	0	0
70	00	0	1	0
NULL	00	NULL	NULL	0
71	00	0	1	0
98	02	0	1	0
00	02	0	1	0
02	02	0	0	1
60	02	1	0	0
70	02	0	1	0
NULL	02	NULL	NULL	0
71	02	0	1	0
98	60	0	1	0
00	60	0	1	0
02	60	0	1	0
60	60	0	0	1
70	60	0	1	0
NULL	60	NULL	NULL	0
71	60	0	1	0
98	70	1	0	0
00	70	1	0	0
02	70	1	0	0
60	70	1	0	0
70	70	0	0	1
NULL	70	NULL	NULL	0
71	70	1	0	0
98	NULL	NULL	NULL	0
00	NULL	NULL	NULL	0
02	NULL	NULL	NULL	0
60	NULL	NULL	NULL	0
70	NULL	NULL	NULL	0
NULL	NULL	NULL	NULL	1
71	NULL	NULL	NULL	0
98	71	1	0	0
00	71	1	0	0
02	71	1	0	0
60	71	1	0	0
70	71	0	1	0
NULL	71	NULL	NULL	0
71	71	0	0	1
select a.f1 as a, b.f2 as b, a.f1 > b.f2 as gt,
a.f1 < b.f2 as lt, a.f1<=>b.f2 as eq
from t1 a, t1 b;
a	b	gt	lt	eq
98	1998	0	0	1
00	1998	1	0	0
02	1998	1	0	0
60	1998	1	0	0
70	1998	0	1	0
NULL	1998	NULL	NULL	0
71	1998	0	1	0
98	2000	0	1	0
00	2000	0	0	1
02	2000	1	0	0
60	2000	1	0	0
70	2000	0	1	0
NULL	2000	NULL	NULL	0
71	2000	0	1	0
98	2002	0	1	0
00	2002	0	1	0
02	2002	0	0	1
60	2002	1	0	0
70	2002	0	1	0
NULL	2002	NULL	NULL	0
71	2002	0	1	0
98	2060	0	1	0
00	2060	0	1	0
02	2060	0	1	0
60	2060	0	0	1
70	2060	0	1	0
NULL	2060	NULL	NULL	0
71	2060	0	1	0
98	1970	1	0	0
00	1970	1	0	0
02	1970	1	0	0
60	1970	1	0	0
70	1970	0	0	1
NULL	1970	NULL	NULL	0
71	1970	1	0	0
98	NULL	NULL	NULL	0
00	NULL	NULL	NULL	0
02	NULL	NULL	NULL	0
60	NULL	NULL	NULL	0
70	NULL	NULL	NULL	0
NULL	NULL	NULL	NULL	1
71	NULL	NULL	NULL	0
98	1971	1	0	0
00	1971	1	0	0
02	1971	1	0	0
60	1971	1	0	0
70	1971	0	1	0
NULL	1971	NULL	NULL	0
71	1971	0	0	1
select a.f1 as a, b.f3 as b, a.f1 > b.f3 as gt,
a.f1 < b.f3 as lt, a.f1<=>b.f3 as eq
from t1 a, t1 b;
a	b	gt	lt	eq
98	1998-01-01	0	1	0
00	1998-01-01	1	0	0
02	1998-01-01	1	0	0
60	1998-01-01	1	0	0
70	1998-01-01	0	1	0
NULL	1998-01-01	NULL	NULL	0
71	1998-01-01	0	1	0
98	2000-01-01	0	1	0
00	2000-01-01	0	1	0
02	2000-01-01	1	0	0
60	2000-01-01	1	0	0
70	2000-01-01	0	1	0
NULL	2000-01-01	NULL	NULL	0
71	2000-01-01	0	1	0
98	2002-01-01	0	1	0
00	2002-01-01	0	1	0
02	2002-01-01	0	1	0
60	2002-01-01	1	0	0
70	2002-01-01	0	1	0
NULL	2002-01-01	NULL	NULL	0
71	2002-01-01	0	1	0
98	2060-01-01	0	1	0
00	2060-01-01	0	1	0
02	2060-01-01	0	1	0
60	2060-01-01	0	1	0
70	2060-01-01	0	1	0
NULL	2060-01-01	NULL	NULL	0
71	2060-01-01	0	1	0
98	1970-01-01	1	0	0
00	1970-01-01	1	0	0
02	1970-01-01	1	0	0
60	1970-01-01	1	0	0
70	1970-01-01	0	1	0
NULL	1970-01-01	NULL	NULL	0
71	1970-01-01	1	0	0
98	NULL	NULL	NULL	0
00	NULL	NULL	NULL	0
02	NULL	NULL	NULL	0
60	NULL	NULL	NULL	0
70	NULL	NULL	NULL	0
NULL	NULL	NULL	NULL	1
71	NULL	NULL	NULL	0
98	1971-01-01	1	0	0
00	1971-01-01	1	0	0
02	1971-01-01	1	0	0
60	1971-01-01	1	0	0
70	1971-01-01	0	1	0
NULL	1971-01-01	NULL	NULL	0
71	1971-01-01	0	1	0
select a.f1 as a, b.f4 as b, a.f1 > b.f4 as gt,
a.f1 < b.f4 as lt, a.f1<=>b.f4 as eq
from t1 a, t1 b;
a	b	gt	lt	eq
98	1998-01-01 00:00:00	0	1	0
00	1998-01-01 00:00:00	1	0	0
02	1998-01-01 00:00:00	1	0	0
60	1998-01-01 00:00:00	1	0	0
70	1998-01-01 00:00:00	0	1	0
NULL	1998-01-01 00:00:00	NULL	NULL	0
71	1998-01-01 00:00:00	0	1	0
98	2000-01-01 00:00:01	0	1	0
00	2000-01-01 00:00:01	0	1	0
02	2000-01-01 00:00:01	1	0	0
60	2000-01-01 00:00:01	1	0	0
70	2000-01-01 00:00:01	0	1	0
NULL	2000-01-01 00:00:01	NULL	NULL	0
71	2000-01-01 00:00:01	0	1	0
98	2002-01-01 23:59:59	0	1	0
00	2002-01-01 23:59:59	0	1	0
02	2002-01-01 23:59:59	0	1	0
60	2002-01-01 23:59:59	1	0	0
70	2002-01-01 23:59:59	0	1	0
NULL	2002-01-01 23:59:59	NULL	NULL	0
71	2002-01-01 23:59:59	0	1	0
98	2060-01-01 11:11:11	0	1	0
00	2060-01-01 11:11:11	0	1	0
02	2060-01-01 11:11:11	0	1	0
60	2060-01-01 11:11:11	0	1	0
70	2060-01-01 11:11:11	0	1	0
NULL	2060-01-01 11:11:11	NULL	NULL	0
71	2060-01-01 11:11:11	0	1	0
98	1970-11-11 22:22:22	1	0	0
00	1970-11-11 22:22:22	1	0	0
02	1970-11-11 22:22:22	1	0	0
60	1970-11-11 22:22:22	1	0	0
70	1970-11-11 22:22:22	0	1	0
NULL	1970-11-11 22:22:22	NULL	NULL	0
71	1970-11-11 22:22:22	1	0	0
98	NULL	NULL	NULL	0
00	NULL	NULL	NULL	0
02	NULL	NULL	NULL	0
60	NULL	NULL	NULL	0
70	NULL	NULL	NULL	0
NULL	NULL	NULL	NULL	1
71	NULL	NULL	NULL	0
98	1971-11-11 22:22:22	1	0	0
00	1971-11-11 22:22:22	1	0	0
02	1971-11-11 22:22:22	1	0	0
60	1971-11-11 22:22:22	1	0	0
70	1971-11-11 22:22:22	0	1	0
NULL	1971-11-11 22:22:22	NULL	NULL	0
71	1971-11-11 22:22:22	0	1	0
select *, f1 = f2 from t1;
f1	f2	f3	f4	f1 = f2
98	1998	1998-01-01	1998-01-01 00:00:00	1
00	2000	2000-01-01	2000-01-01 00:00:01	1
02	2002	2002-01-01	2002-01-01 23:59:59	1
60	2060	2060-01-01	2060-01-01 11:11:11	1
70	1970	1970-01-01	1970-11-11 22:22:22	1
NULL	NULL	NULL	NULL	NULL
71	1971	1971-01-01	1971-11-11 22:22:22	1
drop table t1;
#
# Bug #54465: assert: field_types == 0 || field_types[field_pos] ==
#             MYSQL_TYPE_LONGLONG
#
CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (1), (2);
SELECT MAX((SELECT 1 FROM t1 ORDER BY @var LIMIT 1)) m FROM t1 t2, t1 
ORDER BY t1.a;
m
1
DROP TABLE t1;
#
#  Bug#58030 crash in Item_func_geometry_from_text::val_str
#
SELECT MAX(TIMESTAMP(RAND(0)));
SELECT MIN(TIMESTAMP(RAND(0)));
#
#  Bug#58177 crash and valgrind warnings in decimal and protocol sending functions...
#
SELECT MIN(GET_LOCK('aaaaaaaaaaaaaaaaa',0) / '0b1111111111111111111111111111111111111111111111111111111111111111111111111' ^ (RAND()));
SELECT MIN(GET_LOCK('aaaaaaaaaaaaaaaaa',0) / '0b1111111111111111111111111111111111111111111111111111111111111111111111111' ^ (RAND()));
SELECT MIN(GET_LOCK('aaaaaaaaaaaaaaaaa',0) / '0b1111111111111111111111111111111111111111111111111111111111111111111111111' ^ (RAND()));
SELECT MIN(GET_LOCK('aaaaaaaaaaaaaaaaa',0) / '0b1111111111111111111111111111111111111111111111111111111111111111111111111' ^ (RAND()));
SELECT RELEASE_LOCK('aaaaaaaaaaaaaaaaa');
#
# Bug #11766094 - 59132: MIN() AND MAX() REMOVE UNSIGNEDNESS 
#
CREATE TABLE t1 (a BIGINT UNSIGNED);
INSERT INTO t1 VALUES (18446668621106209655);
SELECT MAX(LENGTH(a)), LENGTH(MAX(a)), MIN(a), MAX(a), CONCAT(MIN(a)), CONCAT(MAX(a)) FROM t1;
MAX(LENGTH(a))	LENGTH(MAX(a))	MIN(a)	MAX(a)	CONCAT(MIN(a))	CONCAT(MAX(a))
20	20	18446668621106209655	18446668621106209655	18446668621106209655	18446668621106209655
DROP TABLE t1;
#
# Bug #11766270  59343: YEAR(4): INCORRECT RESULT AND VALGRIND WARNINGS WITH MIN/MAX, UNION
#
CREATE TABLE t1(f1 YEAR(4));
INSERT INTO t1 VALUES (0000),(2001);
(SELECT MAX(f1) FROM t1) UNION (SELECT MAX(f1) FROM t1);
Catalog	Database	Table	Table_alias	Column	Column_alias	Type	Length	Max length	Is_null	Flags	Decimals	Charsetnr
def				MAX(f1)	MAX(f1)	13	4	4	Y	32864	0	63
MAX(f1)
2001
DROP TABLE t1;
#
# LP BUG#813418 - incorrect optimisation of max/min by index for
# negated BETWEEN
CREATE TABLE t1 (a int, KEY (a));
INSERT INTO t1 VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10);
SELECT MAX(a) FROM t1 WHERE a NOT BETWEEN 3 AND 9;
MAX(a)
10
drop table t1;
#
End of 5.1 tests
#
# Bug #904345: MIN/MAX optimization  with constant FALSE condition
#
CREATE TABLE t1 (a int NOT NULL, KEY(a));
INSERT INTO t1 VALUES (10), (8), (11), (7), (15), (12), (9);
CREATE TABLE t2 (a int, b int);
INSERT INTO t2 VALUES
(8,2), (6,9), (8,4), (5,3), (9,1);
EXPLAIN EXTENDED
SELECT MAX(a) FROM t1 WHERE (1,2) IN (SELECT 3,4) AND a<10;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Impossible WHERE
2	SUBQUERY	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No tables used
Warnings:
Note	1003	select max(`test`.`t1`.`a`) AS `MAX(a)` from `test`.`t1` where 0
SELECT MAX(a) FROM t1 WHERE (1,2) IN (SELECT 3,4) AND a<10;
MAX(a)
NULL
EXPLAIN EXTENDED
SELECT MAX(a) FROM t1 WHERE (1,2) IN (SELECT a,b FROM t2 WHERE b<5) and a<10;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	<subquery2>	eq_ref	distinct_key	distinct_key	8	func,func	1	100.00	
1	PRIMARY	t1	range	a	a	4	NULL	4	100.00	Using where; Using index; Using join buffer (flat, BNL join)
2	MATERIALIZED	t2	ALL	NULL	NULL	NULL	NULL	5	100.00	Using where
Warnings:
Note	1003	select max(`test`.`t1`.`a`) AS `MAX(a)` from `test`.`t1` semi join (`test`.`t2`) where ((`test`.`t2`.`a` = 1) and (`test`.`t2`.`b` = 2) and (`test`.`t1`.`a` < 10))
SELECT MAX(a) FROM t1 WHERE (1,2) IN (SELECT a,b FROM t2 WHERE b<5) and a<10;
MAX(a)
NULL
EXPLAIN EXTENDED
SELECT MAX(a) FROM t1 WHERE RAND()*0<>0 AND a<10;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	range	a	a	4	NULL	4	100.00	Using where; Using index
Warnings:
Note	1003	select max(`test`.`t1`.`a`) AS `MAX(a)` from `test`.`t1` where (((rand() * 0) <> 0) and (`test`.`t1`.`a` < 10))
SELECT MAX(a) FROM t1 WHERE RAND()*0<>0 AND a<10;
MAX(a)
NULL
DROP TABLE t1,t2;
#
# Bug #879860: MIN/MAX for subquery returning empty set 
#
CREATE TABLE t1 (a int PRIMARY KEY);
INSERT INTO t1 VALUES (1);
CREATE TABLE t2 (a int NOT NULL);
INSERT INTO t2 VALUES (10);
CREATE TABLE t3 ( a int, b int);
INSERT INTO t3 VALUES (19,1), (20,5);
EXPLAIN EXTENDED
SELECT (SELECT MIN(t1.a) FROM t1,t2 WHERE t2.a = t3.b) FROM t3;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	t3	ALL	NULL	NULL	NULL	NULL	2	100.00	
2	DEPENDENT SUBQUERY	t1	system	NULL	NULL	NULL	NULL	1	100.00	
2	DEPENDENT SUBQUERY	t2	system	NULL	NULL	NULL	NULL	1	100.00	
Warnings:
Note	1276	Field or reference 'test.t3.b' of SELECT #2 was resolved in SELECT #1
Note	1003	select <expr_cache><`test`.`t3`.`b`>((select min(1) from dual where (10 = `test`.`t3`.`b`))) AS `(SELECT MIN(t1.a) FROM t1,t2 WHERE t2.a = t3.b)` from `test`.`t3`
SELECT (SELECT MIN(t1.a) FROM t1,t2 WHERE t2.a = t3.b) FROM t3;
(SELECT MIN(t1.a) FROM t1,t2 WHERE t2.a = t3.b)
NULL
NULL
DROP TABLE t1,t2,t3;
#
# Bug #884175: MIN/MAX for short varchar = long const  
#
CREATE TABLE t1 (f1 varchar(1), f2 varchar(1), KEY (f2));
INSERT INTO t1 VALUES ('b', 'b'), ('a','a');
EXPLAIN 
SELECT MAX(f1) FROM t1 WHERE f1 = 'abc';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	2	Using where
SELECT MAX(f1) FROM t1 WHERE f1 = 'abc';
MAX(f1)
NULL
EXPLAIN
SELECT MAX(f2) FROM t1 WHERE f2 = 'abc';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	ref	f2	f2	4	const	1	Using where; Using index
SELECT MAX(f2) FROM t1 WHERE f2 = 'abc';
MAX(f2)
NULL
EXPLAIN
SELECT MIN(f1) FROM t1 WHERE f1 >= 'abc';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	2	Using where
SELECT MIN(f1) FROM t1 WHERE f1 >= 'abc';
MIN(f1)
b
EXPLAIN
SELECT MIN(f2) FROM t1 WHERE f2 >= 'abc';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	index	f2	f2	4	NULL	2	Using where; Using index
SELECT MIN(f2) FROM t1 WHERE f2 >= 'abc';
MIN(f2)
b
EXPLAIN
SELECT MIN(f1) FROM t1 WHERE f1 BETWEEN 'abc' AND 'b' ;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	ALL	NULL	NULL	NULL	NULL	2	Using where
SELECT MIN(f1) FROM t1 WHERE f1 BETWEEN 'abc' AND 'b' ;
MIN(f1)
b
EXPLAIN
SELECT MIN(f2) FROM t1 WHERE f2 BETWEEN 'abc' AND 'b' ;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	index	f2	f2	4	NULL	2	Using where; Using index
SELECT MIN(f2) FROM t1 WHERE f2 BETWEEN 'abc' AND 'b' ;
MIN(f2)
b
DROP TABLE t1;
End of 5.2 tests
#
# BUG#46680 - Assertion failed in file item_subselect.cc, 
#             line 305 crashing on HAVING subquery
#
# Create tables
#
CREATE TABLE t1 (
pk INT,
v VARCHAR(1) DEFAULT NULL,
PRIMARY KEY(pk)
);
CREATE TABLE t2 LIKE t1;
CREATE TABLE t3 LIKE t1;
CREATE TABLE empty1 (a int);
INSERT INTO t1 VALUES (1,'c'),(2,NULL);
INSERT INTO t2 VALUES (3,'m'),(4,NULL);
INSERT INTO t3 VALUES (1,'n');
set @save_optimizer_switch=@@optimizer_switch;
set @@optimizer_switch='materialization=on,in_to_exists=off,semijoin=off';

#
# 1) Test that subquery materialization is setup for query with
#    premature optimize() exit due to "Impossible WHERE"
#
SELECT MIN(t2.pk)
FROM t2 JOIN t1 ON t1.pk=t2.pk
WHERE 'j'
HAVING ('m') IN ( 
SELECT v
FROM t2);
MIN(t2.pk)
NULL
Warnings:
Warning	1292	Truncated incorrect INTEGER value: 'j'
Warning	1292	Truncated incorrect INTEGER value: 'j'

EXPLAIN
SELECT MIN(t2.pk)
FROM t2 JOIN t1 ON t1.pk=t2.pk
WHERE 'j'
HAVING ('m') IN ( 
SELECT v
FROM t2);
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Impossible WHERE
2	MATERIALIZED	t2	ALL	NULL	NULL	NULL	NULL	2	
Warnings:
Warning	1292	Truncated incorrect INTEGER value: 'j'
Warning	1292	Truncated incorrect INTEGER value: 'j'

#
# 2) Test that subquery materialization is setup for query with
#    premature optimize() exit due to "No matching min/max row"
#
SELECT MIN(t2.pk)
FROM t2 
WHERE t2.pk>10
HAVING ('m') IN ( 
SELECT v
FROM t2);
MIN(t2.pk)
NULL

EXPLAIN
SELECT MIN(t2.pk)
FROM t2 
WHERE t2.pk>10
HAVING ('m') IN ( 
SELECT v
FROM t2);
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No matching min/max row
2	MATERIALIZED	t2	ALL	NULL	NULL	NULL	NULL	2	

#
# 3) Test that subquery materialization is setup for query with
#    premature optimize() exit due to "Select tables optimized away"
#
SELECT MIN(pk)
FROM t1
WHERE pk=NULL
HAVING ('m') IN ( 
SELECT v
FROM t2);
MIN(pk)
NULL

EXPLAIN
SELECT MIN(pk)
FROM t1
WHERE pk=NULL
HAVING ('m') IN ( 
SELECT v
FROM t2);
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Impossible WHERE noticed after reading const tables
2	MATERIALIZED	t2	ALL	NULL	NULL	NULL	NULL	2	

#
# 4) Test that subquery materialization is setup for query with
#    premature optimize() exit due to "No matching row in const table"
#

SELECT MIN(a)
FROM (SELECT a FROM empty1) tt
HAVING ('m') IN ( 
SELECT v
FROM t2);
MIN(a)
NULL

set @tmp_optimizer_switch=@@optimizer_switch;
set optimizer_switch='derived_merge=off,derived_with_keys=off';
EXPLAIN 
SELECT MIN(a)
FROM (SELECT a FROM empty1) tt
HAVING ('m') IN ( 
SELECT v
FROM t2);
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	<derived2>	system	NULL	NULL	NULL	NULL	0	const row not found
3	MATERIALIZED	t2	ALL	NULL	NULL	NULL	NULL	2	
2	DERIVED	NULL	NULL	NULL	NULL	NULL	NULL	NULL	no matching row in const table
set optimizer_switch=@tmp_optimizer_switch;

#
# 5) Test that subquery materialization is setup for query with
#    premature optimize() exit due to "Impossible WHERE noticed 
#    after reading const tables"
#
SELECT min(t1.pk)
FROM t1
WHERE t1.pk IN (SELECT 1 from t3 where pk>10)
HAVING ('m') IN ( 
SELECT v
FROM t2);
min(t1.pk)
NULL

EXPLAIN
SELECT min(t1.pk)
FROM t1
WHERE t1.pk IN (SELECT 1 from t3 where pk>10)
HAVING ('m') IN ( 
SELECT v
FROM t2);
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	PRIMARY	t1	index	NULL	PRIMARY	4	NULL	2	Using where; Using index
3	MATERIALIZED	t2	ALL	NULL	NULL	NULL	NULL	2	
2	MATERIALIZED	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Impossible WHERE noticed after reading const tables
set @@optimizer_switch=@save_optimizer_switch;
#
# Cleanup for BUG#46680
#
DROP TABLE IF EXISTS t1,t2,t3,empty1;
create table t1 (i int, d date);
insert into t1 values (1, '2008-10-02'), (2, '2010-12-12');
select avg(export_set( 3, 'y', sha(i))), group_concat(d) from t1 group by d order by i;
avg(export_set( 3, 'y', sha(i)))	group_concat(d)
0	2008-10-02
0	2010-12-12
drop table t1;
#
# MDEV-4290: crash in st_select_lex::mark_as_dependent
#
create table `t1`(`a` int);
select 1 from t1 v1 right join t1 on count(*);
ERROR HY000: Invalid use of group function
select 1 from t1 order by
(
select 1 from 
(
select 1 from t1 v1 right join t1 on count(*)
) v   
);
ERROR HY000: Invalid use of group function
insert into t1 values (1),(1),(2),(2);
select count(*) from t1;
count(*)
4
select z from (select count(*) as z from t1) v;
z
4
# next is how it implemented now (may be changed in case of dependent
# derived tables)
select z from (select count(*) as z from t1) v group by 1;
z
4
drop table t1;
CREATE TABLE t1 (i1 int, INDEX(i1));
INSERT INTO t1 VALUES (9),(8);
CREATE TABLE t2 (i2 int);
INSERT INTO t2 VALUES (8),(4);
CREATE TABLE t3 (i3 int, INDEX(i3));
INSERT INTO t3 VALUES (9),(8);
SELECT MAX(t3.i3) FROM t3, t2, t1 WHERE t1.i1 = t2.i2 AND ( 0 OR t3.i3 = t2.i2 );
MAX(t3.i3)
8
SELECT MAX(t3.i3) FROM t3, t2, t1 WHERE t1.i1 = t2.i2 AND  t3.i3 = t2.i2;
MAX(t3.i3)
8
DROP TABLE  t1,t2,t3;
# end of 5.3 tests
#
# Bug#52123 Assertion failed: aggregator == aggr->Aggrtype(),
#           file .\item_sum.cc, line 587
#
CREATE TABLE t1(a int, KEY(a));
INSERT INTO t1 VALUES (1), (2);
SELECT 1 FROM t1 ORDER BY AVG(DISTINCT a);
1
1
DROP TABLE t1;
#
# Bug#55648: Server crash on MIN/MAX on maximum time value
#
CREATE TABLE t1(c1 TIME NOT NULL);
INSERT INTO t1 VALUES('837:59:59');
INSERT INTO t1 VALUES('838:59:59');
SELECT MAX(c1) FROM t1;
MAX(c1)
838:59:59
DROP TABLE t1;
# End of the bug#55648
#
# Bug#56120: Failed assertion on MIN/MAX on negative time value
#
CREATE TABLE t1(c1 TIME NOT NULL);
INSERT INTO t1 VALUES('-00:00:01');
SELECT MAX(c1),MIN(c1) FROM t1;
MAX(c1)	MIN(c1)
-00:00:01	-00:00:01
DROP TABLE t1;
# End of the bug#56120
#
# Bug#57932 "query with AVG(DISTINCT) returns NULL if last
# aggregated value was NULL"
#
CREATE TABLE t1 (col_int_nokey int(11));
INSERT INTO t1 VALUES (7),(8),(NULL);
SELECT AVG(DISTINCT col_int_nokey) FROM t1;
AVG(DISTINCT col_int_nokey)
7.5000
SELECT AVG(DISTINCT outr.col_int_nokey) FROM t1 AS outr LEFT JOIN t1 AS outr2 ON
outr.col_int_nokey = outr2.col_int_nokey;
AVG(DISTINCT outr.col_int_nokey)
7.5000
DROP TABLE t1;
# End of the bug#57932
#
# MDEV-5257: MIN/MAX Optimization (Select tables optimized away) does not work for DateTime
# MDEV-3855: MIN/MAX optimization doesnt work for int_col > INET_ATON
#  (correct the fix for Bug #884175)
#
CREATE TABLE `t1` (
`a` int(11) NOT NULL AUTO_INCREMENT,
`b` datetime DEFAULT NULL,
PRIMARY KEY (`a`),
KEY `idx_b` (`b`)
);
INSERT INTO `t1` (b) VALUES ('2013-01-06 23:59:59');
INSERT INTO `t1` (b) VALUES ('2013-02-06 23:59:59');
INSERT INTO `t1` (b) VALUES ('2013-03-06 23:59:59');
INSERT INTO `t1` (b) VALUES ('2013-04-06 23:59:59');
INSERT INTO `t1` (b) VALUES ('2013-05-06 23:59:59');
INSERT INTO `t1` (b) VALUES ('2013-06-06 23:59:59');
INSERT INTO `t1` (b) VALUES ('2013-07-06 23:59:59');
# The following should produce "Select tables optimized away"
EXPLAIN SELECT MIN(b) FROM t1 WHERE b <= '2013-11-06 23:59:59';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
set names utf8;
# Should be the same as above:
EXPLAIN SELECT MIN(b) FROM t1 WHERE b <= '2013-11-06 23:59:59';
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
DROP TABLE t1;
CREATE TABLE `t1` (
`a` int(11) NOT NULL AUTO_INCREMENT,
`b` bigint(20) DEFAULT NULL,
PRIMARY KEY (`a`),
KEY `idx_b` (`b`)
);
insert into t1 (b) values (INET_ATON('192.168.0.1'));
insert into t1 (b) values (INET_ATON('192.168.0.2'));
insert into t1 (b) values (INET_ATON('192.168.0.3'));
insert into t1 (b) values (INET_ATON('192.168.0.4'));
insert into t1 (b) values (INET_ATON('192.168.200.200'));
# should show "Select tables optimized away"
explain select MIN(b) from t1 where b >= inet_aton('192.168.119.32');
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
DROP TABLE t1;
#
# MDEV-6743 crash in GROUP_CONCAT(IF () ORDER BY 1)
#
CREATE TABLE t1 (pk INT, t2_id INT, t5_id INT, PRIMARY KEY (pk));
INSERT INTO t1 VALUES (1,3,12),(2,3,15);
CREATE TABLE t2 (pk INT, PRIMARY KEY (pk));
INSERT INTO t2 VALUES (4),(5);
CREATE TABLE t3 (t2_id INT, t4_id INT);
INSERT INTO t3 VALUES (6,11),(7,12);
CREATE TABLE t4 (id INT);
INSERT INTO t4 VALUES (13),(14);
CREATE TABLE t5 (pk INT, f VARCHAR(50), t6_id INT, PRIMARY KEY (pk));
INSERT INTO t5 VALUES (9,'FOO',NULL);
CREATE TABLE t6 (pk INT, f VARCHAR(120), b TINYINT(4), PRIMARY KEY (pk));
PREPARE stmt FROM "
  SELECT      t1.t2_id, GROUP_CONCAT(IF (t6.b, t6.f, t5.f) ORDER BY 1)
  FROM        t1
  JOIN        t2 ON t1.t2_id = t2.pk
  JOIN        t3 ON t2.pk = t3.t2_id
  JOIN        t4 ON t4.id = t3.t4_id
  JOIN        t5 ON t1.t5_id = t5.pk
  LEFT JOIN   t6 ON t6.pk = t5.t6_id
  GROUP BY    t1.t2_id
";
EXECUTE stmt;
t2_id	GROUP_CONCAT(IF (t6.b, t6.f, t5.f) ORDER BY 1)
EXECUTE stmt;
t2_id	GROUP_CONCAT(IF (t6.b, t6.f, t5.f) ORDER BY 1)
EXECUTE stmt;
t2_id	GROUP_CONCAT(IF (t6.b, t6.f, t5.f) ORDER BY 1)
DROP TABLE t1,t2,t3,t4,t5,t6;
#
# MDEV-10500 CASE/IF Statement returns multiple values and shifts further result values to the next column
#
CREATE TABLE t1 (
id int not null AUTO_INCREMENT,
active bool not null,
data1 bigint,
data2 bigint,
data3 bigint,
primary key (id)
);
INSERT INTO t1 (active,data1,data2,data3) VALUES (1,null,100,200);
SELECT
CASE WHEN active THEN SUM(data1) END AS C_1,
SUM(data2) AS C_2,
SUM(data3) AS C_3
FROM t1;
C_1	C_2	C_3
NULL	100	200
SELECT
IF(active, SUM(data1), 5) AS C_1,
SUM(data2) AS C_2,
SUM(data3) AS C_3
FROM t1;
C_1	C_2	C_3
NULL	100	200
DROP TABLE t1;
#
# MDEV-10468 Assertion `nr >= 0.0' failed in Item_sum_std::val_real()
#
SELECT STDDEV_POP(f) FROM (SELECT "1e+309" AS f UNION SELECT "-1e+309" AS f) tbl;
STDDEV_POP(f)
1.7976931348623157e308
Warnings:
Warning	1292	Truncated incorrect DOUBLE value: '1e+309'
Warning	1292	Truncated incorrect DOUBLE value: '-1e+309'
SELECT STDDEV(f) FROM (SELECT 1.7976931348623157e+308 AS f UNION SELECT -1.7976931348623157e+308 AS f) tbl;
STDDEV(f)
1.7976931348623157e308
