drop table if exists t1,t2;
set @sav_dpi= @@div_precision_increment;
set div_precision_increment= 5;
show variables like 'div_precision_increment';
Variable_name	Value
div_precision_increment	5
create table t1 (grp int, a bigint unsigned, c char(10) not null);
insert into t1 values (1,1,"a");
insert into t1 values (2,2,"b");
insert into t1 values (2,3,"c");
insert into t1 values (3,4,"E");
insert into t1 values (3,5,"C");
insert into t1 values (3,6,"D");
select a,c,sum(a) from t1 group by a;
a	c	sum(a)
1	a	1
2	b	2
3	c	3
4	E	4
5	C	5
6	D	6
select a,c,sum(a) from t1 where a > 10 group by a;
a	c	sum(a)
select sum(a) from t1 where a > 10;
sum(a)
NULL
select a from t1 order by rand(10);
a
2
6
1
3
5
4
select distinct a from t1 order by rand(10);
a
2
6
1
3
5
4
select count(distinct a),count(distinct grp) from t1;
count(distinct a)	count(distinct grp)
6	3
insert into t1 values (null,null,'');
select count(distinct a),count(distinct grp) from t1;
count(distinct a)	count(distinct grp)
6	3
select sum(all a),count(all a),avg(all a),std(all a),variance(all a),bit_or(all a),bit_and(all a),min(all a),max(all a),min(all c),max(all c) from t1;
sum(all a)	count(all a)	avg(all a)	std(all a)	variance(all a)	bit_or(all a)	bit_and(all a)	min(all a)	max(all a)	min(all c)	max(all c)
21	6	3.50000	1.707825127659933	2.9166666666666665	7	0	1	6		E
select grp, sum(a),count(a),avg(a),std(a),variance(a),bit_or(a),bit_and(a),min(a),max(a),min(c),max(c) from t1 group by grp;
grp	sum(a)	count(a)	avg(a)	std(a)	variance(a)	bit_or(a)	bit_and(a)	min(a)	max(a)	min(c)	max(c)
1	1	1	1.00000	0	0	1	1	1	1	a	a
2	5	2	2.50000	0.5	0.25	3	2	2	3	b	c
3	15	3	5.00000	0.816496580927726	0.6666666666666666	7	4	4	6	C	E
NULL	NULL	0	NULL	NULL	NULL	0	18446744073709551615	NULL	NULL		
select grp, sum(a)+count(a)+avg(a)+std(a)+variance(a)+bit_or(a)+bit_and(a)+min(a)+max(a)+min(c)+max(c) as sum from t1 group by grp;
grp	sum
1	7
2	20.25
3	45.48316324759439
NULL	NULL
create table t2 (grp int, a bigint unsigned, c char(10));
insert into t2 select grp,max(a)+max(grp),max(c) from t1 group by grp;
replace into t2 select grp, a, c from t1 limit 2,1;
select * from t2;
grp	a	c
1	2	a
2	3	c
2	5	c
3	9	E
NULL	NULL	
drop table t1,t2;
CREATE TABLE t1 (id int(11),value1 float(10,2));
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Specifying number of digits for floating point data types is deprecated and will be removed in a future release.
INSERT INTO t1 VALUES (1,0.00),(1,1.00), (1,2.00), (2,10.00), (2,11.00), (2,12.00);
CREATE TABLE t2 (id int(11),name char(20));
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
INSERT INTO t2 VALUES (1,'Set One'),(2,'Set Two');
select id, avg(value1), std(value1), variance(value1) from t1 group by id;
id	avg(value1)	std(value1)	variance(value1)
1	1.0000000	0.816496580927726	0.6666666666666666
2	11.0000000	0.816496580927726	0.6666666666666666
select name, avg(value1), std(value1), variance(value1) from t1, t2 where t1.id = t2.id group by t1.id;
name	avg(value1)	std(value1)	variance(value1)
Set One	1.0000000	0.816496580927726	0.6666666666666666
Set Two	11.0000000	0.816496580927726	0.6666666666666666
drop table t1,t2;
create table t1 (id int not null);
create table t2 (id int not null,rating int null);
insert into t1 values(1),(2),(3);
insert into t2 values(1, 3),(2, NULL),(2, NULL),(3, 2),(3, NULL);
select t1.id, avg(rating) from t1 left join t2 on ( t1.id = t2.id ) group by t1.id;
id	avg(rating)
1	3.00000
2	NULL
3	2.00000
select sql_small_result t2.id, avg(rating) from t2 group by t2.id;
id	avg(rating)
1	3.00000
2	NULL
3	2.00000
select sql_big_result t2.id, avg(rating) from t2 group by t2.id;
id	avg(rating)
1	3.00000
2	NULL
3	2.00000
select sql_small_result t2.id, avg(rating+0.0e0) from t2 group by t2.id;
id	avg(rating+0.0e0)
1	3
2	NULL
3	2
select sql_big_result t2.id, avg(rating+0.0e0) from t2 group by t2.id;
id	avg(rating+0.0e0)
1	3
2	NULL
3	2
drop table t1,t2;
create table t1 (a smallint(6) primary key, c char(10), b text);
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
INSERT INTO t1 VALUES (1,'1','1');
INSERT INTO t1 VALUES (2,'2','2');
INSERT INTO t1 VALUES (4,'4','4');
select count(*) from t1;
count(*)
3
select count(*) from t1 where a = 1;
count(*)
1
select count(*) from t1 where a = 100;
count(*)
0
select count(*) from t1 where a >= 10;
count(*)
0
select count(a) from t1 where a = 1;
count(a)
1
select count(a) from t1 where a = 100;
count(a)
0
select count(a) from t1 where a >= 10;
count(a)
0
select count(b) from t1 where b >= 2;
count(b)
2
select count(b) from t1 where b >= 10;
count(b)
0
select count(c) from t1 where c = 10;
count(c)
0
drop table t1;
CREATE TABLE t1 (d DATETIME, i INT);
INSERT INTO t1 VALUES (NOW(), 1);
SELECT COUNT(i), i, COUNT(i)*i FROM t1 GROUP BY i;
COUNT(i)	i	COUNT(i)*i
1	1	1
SELECT COUNT(i), (i+0), COUNT(i)*(i+0) FROM t1 GROUP BY i;
COUNT(i)	(i+0)	COUNT(i)*(i+0)
1	1	1
DROP TABLE t1;
create table t1 (
num float(5,2),
user char(20)
);
Warnings:
Warning	1681	Specifying number of digits for floating point data types is deprecated and will be removed in a future release.
insert into t1 values (10.3,'nem'),(20.53,'monty'),(30.23,'sinisa');
insert into t1 values (30.13,'nem'),(20.98,'monty'),(10.45,'sinisa');
insert into t1 values (5.2,'nem'),(8.64,'monty'),(11.12,'sinisa');
select sum(num) from t1;
sum(num)
147.58
select sum(num) from t1 group by user;
sum(num)
45.63
50.15
51.80
drop table t1;
create table t1 (a1 int, a2 char(3), key k1(a1), key k2(a2));
insert into t1 values(10,'aaa'), (10,null), (10,'bbb'), (20,'zzz');
create table t2(a1 char(3), a2 int, a3 real, key k1(a1), key k2(a2, a1));
analyze table t1, t2;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
test.t2	analyze	status	OK
select * from t1;
a1	a2
10	aaa
10	NULL
10	bbb
20	zzz
select min(a2) from t1;
min(a2)
aaa
select max(t1.a1), max(t2.a2) from t1, t2;
max(t1.a1)	max(t2.a2)
NULL	NULL
select max(t1.a1) from t1, t2;
max(t1.a1)
NULL
select max(t2.a2), max(t1.a1) from t1, t2;
max(t2.a2)	max(t1.a1)
NULL	NULL
explain select min(a2) from t1;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t1`.`a2`) AS `min(a2)` from `test`.`t1`
explain select max(t1.a1), max(t2.a2) from t1, t2;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No matching min/max row
Warnings:
Note	1003	/* select#1 */ select max(`test`.`t1`.`a1`) AS `max(t1.a1)`,max(`test`.`t2`.`a2`) AS `max(t2.a2)` from `test`.`t1` join `test`.`t2`
insert into t2 values('AAA', 10, 0.5);
insert into t2 values('BBB', 20, 1.0);
select t1.a1, t1.a2, t2.a1, t2.a2 from t1,t2;
a1	a2	a1	a2
10	NULL	AAA	10
10	NULL	BBB	20
10	aaa	AAA	10
10	aaa	BBB	20
10	bbb	AAA	10
10	bbb	BBB	20
20	zzz	AAA	10
20	zzz	BBB	20
select max(t1.a1), max(t2.a1) from t1, t2 where t2.a2=9;
max(t1.a1)	max(t2.a1)
NULL	NULL
select max(t2.a1), max(t1.a1) from t1, t2 where t2.a2=9;
max(t2.a1)	max(t1.a1)
NULL	NULL
select t1.a1, t1.a2, t2.a1, t2.a2 from t1 left outer join t2 on t1.a1=10;
a1	a2	a1	a2
10	NULL	AAA	10
10	NULL	BBB	20
10	aaa	AAA	10
10	aaa	BBB	20
10	bbb	AAA	10
10	bbb	BBB	20
20	zzz	NULL	NULL
select max(t1.a2) from t1 left outer join t2 on t1.a1=10;
max(t1.a2)
zzz
select max(t2.a1) from t2 left outer join t1 on t2.a2=10 where t2.a2=20;
max(t2.a1)
BBB
select max(t2.a1) from t2 left outer join t1 on t2.a2=10 where t2.a2=10;
max(t2.a1)
AAA
select max(t2.a1) from t1 left outer join t2 on t1.a2=t2.a1 and 1=0 where t2.a1='AAA';
max(t2.a1)
NULL
select max(t1.a2),max(t2.a1) from t1 left outer join t2 on t1.a1=10;
max(t1.a2)	max(t2.a1)
zzz	BBB
drop table t1,t2;
CREATE TABLE t1 (a int, b int);
select count(b), sum(b), avg(b), std(b), min(b), max(b), bit_and(b), bit_or(b) from t1;
count(b)	sum(b)	avg(b)	std(b)	min(b)	max(b)	bit_and(b)	bit_or(b)
0	NULL	NULL	NULL	NULL	NULL	18446744073709551615	0
select a,count(b), sum(b), avg(b), std(b), min(b), max(b), bit_and(b), bit_or(b) from t1 group by a;
a	count(b)	sum(b)	avg(b)	std(b)	min(b)	max(b)	bit_and(b)	bit_or(b)
insert into t1 values (1,null);
select a,count(b), sum(b), avg(b), std(b), min(b), max(b), bit_and(b), bit_or(b) from t1 group by a;
a	count(b)	sum(b)	avg(b)	std(b)	min(b)	max(b)	bit_and(b)	bit_or(b)
1	0	NULL	NULL	NULL	NULL	NULL	18446744073709551615	0
insert into t1 values (1,null);
insert into t1 values (2,null);
select a,count(b), sum(b), avg(b), std(b), min(b), max(b), bit_and(b), bit_or(b) from t1 group by a;
a	count(b)	sum(b)	avg(b)	std(b)	min(b)	max(b)	bit_and(b)	bit_or(b)
1	0	NULL	NULL	NULL	NULL	NULL	18446744073709551615	0
2	0	NULL	NULL	NULL	NULL	NULL	18446744073709551615	0
select SQL_BIG_RESULT a,count(b), sum(b), avg(b), std(b), min(b), max(b), bit_and(b), bit_or(b) from t1 group by a;
a	count(b)	sum(b)	avg(b)	std(b)	min(b)	max(b)	bit_and(b)	bit_or(b)
1	0	NULL	NULL	NULL	NULL	NULL	18446744073709551615	0
2	0	NULL	NULL	NULL	NULL	NULL	18446744073709551615	0
insert into t1 values (2,1);
select a,count(b), sum(b), avg(b), std(b), min(b), max(b), bit_and(b), bit_or(b) from t1 group by a;
a	count(b)	sum(b)	avg(b)	std(b)	min(b)	max(b)	bit_and(b)	bit_or(b)
1	0	NULL	NULL	NULL	NULL	NULL	18446744073709551615	0
2	1	1	1.00000	0	1	1	1	1
select SQL_BIG_RESULT a,count(b), sum(b), avg(b), std(b), min(b), max(b), bit_and(b), bit_or(b) from t1 group by a;
a	count(b)	sum(b)	avg(b)	std(b)	min(b)	max(b)	bit_and(b)	bit_or(b)
1	0	NULL	NULL	NULL	NULL	NULL	18446744073709551615	0
2	1	1	1.00000	0	1	1	1	1
insert into t1 values (3,1);
select a,count(b), sum(b), avg(b), std(b), min(b), max(b), bit_and(b), bit_or(b) from t1 group by a;
a	count(b)	sum(b)	avg(b)	std(b)	min(b)	max(b)	bit_and(b)	bit_or(b)
1	0	NULL	NULL	NULL	NULL	NULL	18446744073709551615	0
2	1	1	1.00000	0	1	1	1	1
3	1	1	1.00000	0	1	1	1	1
select SQL_BIG_RESULT a,count(b), sum(b), avg(b), std(b), min(b), max(b), bit_and(b), bit_or(b), bit_xor(b) from t1 group by a;
a	count(b)	sum(b)	avg(b)	std(b)	min(b)	max(b)	bit_and(b)	bit_or(b)	bit_xor(b)
1	0	NULL	NULL	NULL	NULL	NULL	18446744073709551615	0	0
2	1	1	1.00000	0	1	1	1	1	1
3	1	1	1.00000	0	1	1	1	1	1
analyze table t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
explain select SQL_BIG_RESULT a,count(b), sum(b), avg(b), std(b), min(b), max(b), bit_and(b), bit_or(b), bit_xor(b) from t1 group by a;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	NULL	NULL	NULL	NULL	5	100.00	Using filesort
Warnings:
Note	1003	/* select#1 */ select sql_big_result `test`.`t1`.`a` AS `a`,count(`test`.`t1`.`b`) AS `count(b)`,sum(`test`.`t1`.`b`) AS `sum(b)`,avg(`test`.`t1`.`b`) AS `avg(b)`,std(`test`.`t1`.`b`) AS `std(b)`,min(`test`.`t1`.`b`) AS `min(b)`,max(`test`.`t1`.`b`) AS `max(b)`,bit_and(`test`.`t1`.`b`) AS `bit_and(b)`,bit_or(`test`.`t1`.`b`) AS `bit_or(b)`,bit_xor(`test`.`t1`.`b`) AS `bit_xor(b)` from `test`.`t1` group by `test`.`t1`.`a`
drop table t1;
create table t1 (col int);
insert into t1 values (-1), (-2), (-3);
select bit_and(col), bit_or(col) from t1;
bit_and(col)	bit_or(col)
18446744073709551612	18446744073709551615
select SQL_BIG_RESULT bit_and(col), bit_or(col) from t1 group by col;
bit_and(col)	bit_or(col)
18446744073709551613	18446744073709551613
18446744073709551614	18446744073709551614
18446744073709551615	18446744073709551615
drop table t1;
create table t1 (a int);
select avg(2) from t1;
avg(2)
NULL
drop table t1;
create table t1(
a1 char(3) primary key,
a2 smallint,
a3 char(3),
a4 real,
a5 date,
key k1(a2,a3),
key k2(a4,a1),
key k3(a5,a1)
);
create table t2(
a1 char(3) primary key,
a2 char(17),
a3 char(2),
a4 char(3),
key k1(a3, a2),
key k2(a4)
);
insert into t1 values('AME',0,'SEA',0.100,date'1942-02-19');
insert into t1 values('HBR',1,'SEA',0.085,date'1948-03-05');
insert into t1 values('BOT',2,'SEA',0.085,date'1951-11-29');
insert into t1 values('BMC',3,'SEA',0.085,date'1958-09-08');
insert into t1 values('TWU',0,'LAX',0.080,date'1969-10-05');
insert into t1 values('BDL',0,'DEN',0.080,date'1960-11-27');
insert into t1 values('DTX',1,'NYC',0.080,date'1961-05-04');
insert into t1 values('PLS',1,'WDC',0.075,date'1949-01-02');
insert into t1 values('ZAJ',2,'CHI',0.075,date'1960-06-15');
insert into t1 values('VVV',2,'MIN',0.075,date'1959-06-28');
insert into t1 values('GTM',3,'DAL',0.070,date'1977-09-23');
insert into t1 values('SSJ',null,'CHI',null,date'1974-03-19');
insert into t1 values('KKK',3,'ATL',null,null);
insert into t1 values('XXX',null,'MIN',null,null);
insert into t1 values('WWW',1,'LED',null,null);
insert into t2 values('TKF','Seattle','WA','AME');
insert into t2 values('LCC','Los Angeles','CA','TWU');
insert into t2 values('DEN','Denver','CO','BDL');
insert into t2 values('SDC','San Diego','CA','TWU');
insert into t2 values('NOL','New Orleans','LA','GTM');
insert into t2 values('LAK','Los Angeles','CA','TWU');
insert into t2 values('AAA','AAA','AA','AME');
analyze table t1, t2;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
test.t2	analyze	status	OK
select * from t1;
a1	a2	a3	a4	a5
AME	0	SEA	0.1	1942-02-19
BDL	0	DEN	0.08	1960-11-27
BMC	3	SEA	0.085	1958-09-08
BOT	2	SEA	0.085	1951-11-29
DTX	1	NYC	0.08	1961-05-04
GTM	3	DAL	0.07	1977-09-23
HBR	1	SEA	0.085	1948-03-05
KKK	3	ATL	NULL	NULL
PLS	1	WDC	0.075	1949-01-02
SSJ	NULL	CHI	NULL	1974-03-19
TWU	0	LAX	0.08	1969-10-05
VVV	2	MIN	0.075	1959-06-28
WWW	1	LED	NULL	NULL
XXX	NULL	MIN	NULL	NULL
ZAJ	2	CHI	0.075	1960-06-15
select * from t2;
a1	a2	a3	a4
AAA	AAA	AA	AME
DEN	Denver	CO	BDL
LAK	Los Angeles	CA	TWU
LCC	Los Angeles	CA	TWU
NOL	New Orleans	LA	GTM
SDC	San Diego	CA	TWU
TKF	Seattle	WA	AME
explain 
select min(a1) from t1;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t1`.`a1`) AS `min(a1)` from `test`.`t1`
select min(a1) from t1;
min(a1)
AME
explain 
select max(a4) from t1;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select max(`test`.`t1`.`a4`) AS `max(a4)` from `test`.`t1`
select max(a4) from t1;
max(a4)
0.1
explain 
select min(a5), max(a5) from t1;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t1`.`a5`) AS `min(a5)`,max(`test`.`t1`.`a5`) AS `max(a5)` from `test`.`t1`
select min(a5), max(a5) from t1;
min(a5)	max(a5)
1942-02-19	1977-09-23
explain 
select min(a3) from t1 where a2 = 2;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t1`.`a3`) AS `min(a3)` from `test`.`t1` where multiple equal(2, `test`.`t1`.`a2`)
select min(a3) from t1 where a2 = 2;
min(a3)
CHI
explain 
select min(a1), max(a1) from t1 where a4 = 0.080;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t1`.`a1`) AS `min(a1)`,max(`test`.`t1`.`a1`) AS `max(a1)` from `test`.`t1` where (`test`.`t1`.`a4` = 0.08)
select min(a1), max(a1) from t1 where a4 = 0.080;
min(a1)	max(a1)
BDL	TWU
explain 
select min(t1.a5), max(t2.a3) from t1, t2;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t1`.`a5`) AS `min(t1.a5)`,max(`test`.`t2`.`a3`) AS `max(t2.a3)` from `test`.`t1` join `test`.`t2`
select min(t1.a5), max(t2.a3) from t1, t2;
min(t1.a5)	max(t2.a3)
1942-02-19	WA
explain 
select min(t1.a3), max(t2.a2) from t1, t2 where t1.a2 = 0 and t2.a3 = 'CA';
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t1`.`a3`) AS `min(t1.a3)`,max(`test`.`t2`.`a2`) AS `max(t2.a2)` from `test`.`t1` join `test`.`t2` where (multiple equal(0, `test`.`t1`.`a2`) and multiple equal('CA', `test`.`t2`.`a3`))
select min(t1.a3), max(t2.a2) from t1, t2 where t1.a2 = 0 and t2.a3 = 'CA';
min(t1.a3)	max(t2.a2)
DEN	San Diego
explain 
select min(a1) from t1 where a1 > 'KKK';
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t1`.`a1`) AS `min(a1)` from `test`.`t1` where (`test`.`t1`.`a1` > 'KKK')
select min(a1) from t1 where a1 > 'KKK';
min(a1)
PLS
explain 
select min(a1) from t1 where a1 >= 'KKK';
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t1`.`a1`) AS `min(a1)` from `test`.`t1` where (`test`.`t1`.`a1` >= 'KKK')
select min(a1) from t1 where a1 >= 'KKK';
min(a1)
KKK
explain 
select max(a3) from t1 where a2 = 2 and a3 < 'SEA';
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select max(`test`.`t1`.`a3`) AS `max(a3)` from `test`.`t1` where ((`test`.`t1`.`a3` < 'SEA') and multiple equal(2, `test`.`t1`.`a2`))
select max(a3) from t1 where a2 = 2 and a3 < 'SEA';
max(a3)
MIN
explain 
select max(a5) from t1 where a5 < date'1970-01-01';
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select max(`test`.`t1`.`a5`) AS `max(a5)` from `test`.`t1` where (`test`.`t1`.`a5` < DATE'1970-01-01')
select max(a5) from t1 where a5 < date'1970-01-01';
max(a5)
1969-10-05
explain 
select max(a3) from t1 where a2 is null;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select max(`test`.`t1`.`a3`) AS `max(a3)` from `test`.`t1` where (`test`.`t1`.`a2` is null)
select max(a3) from t1 where a2 is null;
max(a3)
MIN
explain 
select max(a3) from t1 where a2 = 0 and a3 between 'K' and 'Q';
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select max(`test`.`t1`.`a3`) AS `max(a3)` from `test`.`t1` where ((`test`.`t1`.`a3` between 'K' and 'Q') and multiple equal(0, `test`.`t1`.`a2`))
select max(a3) from t1 where a2 = 0 and a3 between 'K' and 'Q';
max(a3)
LAX
explain
select min(a1), max(a1) from t1 where a1 between 'A' and 'P';
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t1`.`a1`) AS `min(a1)`,max(`test`.`t1`.`a1`) AS `max(a1)` from `test`.`t1` where (`test`.`t1`.`a1` between 'A' and 'P')
select min(a1), max(a1) from t1 where a1 between 'A' and 'P';
min(a1)	max(a1)
AME	KKK
explain 
select max(a3) from t1 where a3 < 'SEA' and a2 = 2 and a3 <= 'MIN';
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select max(`test`.`t1`.`a3`) AS `max(a3)` from `test`.`t1` where ((`test`.`t1`.`a3` < 'SEA') and (`test`.`t1`.`a3` <= 'MIN') and multiple equal(2, `test`.`t1`.`a2`))
select max(a3) from t1 where a3 < 'SEA' and a2 = 2 and a3 <= 'MIN';
max(a3)
MIN
explain 
select max(a3) from t1 where a3 = 'MIN' and a2 = 2;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select max(`test`.`t1`.`a3`) AS `max(a3)` from `test`.`t1` where (multiple equal('MIN', `test`.`t1`.`a3`) and multiple equal(2, `test`.`t1`.`a2`))
select max(a3) from t1 where a3 = 'MIN' and a2 = 2;
max(a3)
MIN
explain 
select max(a3) from t1 where a3 = 'DEN' and a2 = 2;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No matching min/max row
Warnings:
Note	1003	/* select#1 */ select max(`test`.`t1`.`a3`) AS `max(a3)` from `test`.`t1` where (multiple equal('DEN', `test`.`t1`.`a3`) and multiple equal(2, `test`.`t1`.`a2`))
select max(a3) from t1 where a3 = 'DEN' and a2 = 2;
max(a3)
NULL
explain
select max(t1.a3), min(t2.a2) from t1, t2 where t1.a2 = 2 and t1.a3 < 'MIN' and t2.a3 = 'CA';
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select max(`test`.`t1`.`a3`) AS `max(t1.a3)`,min(`test`.`t2`.`a2`) AS `min(t2.a2)` from `test`.`t1` join `test`.`t2` where ((`test`.`t1`.`a3` < 'MIN') and multiple equal(2, `test`.`t1`.`a2`) and multiple equal('CA', `test`.`t2`.`a3`))
select max(t1.a3), min(t2.a2) from t1, t2 where t1.a2 = 2 and t1.a3 < 'MIN' and t2.a3 = 'CA';
max(t1.a3)	min(t2.a2)
CHI	Los Angeles
explain
select max(a3) from t1 where a2 is null and a2 = 2;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Impossible WHERE
Warnings:
Note	1003	/* select#1 */ select max(`test`.`t1`.`a3`) AS `max(a3)` from `test`.`t1` where false
select max(a3) from t1 where a2 is null and a2 = 2;
max(a3)
NULL
explain
select max(a2) from t1 where a2 >= 1;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select max(`test`.`t1`.`a2`) AS `max(a2)` from `test`.`t1` where (`test`.`t1`.`a2` >= 1)
select max(a2) from t1 where a2 >= 1;
max(a2)
3
explain
select min(a3) from t1 where a2 = 2 and a3 < 'SEA';
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t1`.`a3`) AS `min(a3)` from `test`.`t1` where ((`test`.`t1`.`a3` < 'SEA') and multiple equal(2, `test`.`t1`.`a2`))
select min(a3) from t1 where a2 = 2 and a3 < 'SEA';
min(a3)
CHI
explain
select min(a3) from t1 where a2 = 4;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No matching min/max row
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t1`.`a3`) AS `min(a3)` from `test`.`t1` where multiple equal(4, `test`.`t1`.`a2`)
select min(a3) from t1 where a2 = 4;
min(a3)
NULL
explain
select min(a3) from t1 where a2 = 2 and a3 > 'SEA';
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No matching min/max row
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t1`.`a3`) AS `min(a3)` from `test`.`t1` where ((`test`.`t1`.`a3` > 'SEA') and multiple equal(2, `test`.`t1`.`a2`))
select min(a3) from t1 where a2 = 2 and a3 > 'SEA';
min(a3)
NULL
explain
select (min(a4)+max(a4))/2 from t1;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select ((min(`test`.`t1`.`a4`) + max(`test`.`t1`.`a4`)) / 2) AS `(min(a4)+max(a4))/2` from `test`.`t1`
select (min(a4)+max(a4))/2 from t1;
(min(a4)+max(a4))/2
0.085
explain
select min(a3) from t1 where 2 = a2;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t1`.`a3`) AS `min(a3)` from `test`.`t1` where multiple equal(2, `test`.`t1`.`a2`)
select min(a3) from t1 where 2 = a2;
min(a3)
CHI
explain
select max(a3) from t1 where a2 = 2 and 'SEA' > a3;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select max(`test`.`t1`.`a3`) AS `max(a3)` from `test`.`t1` where (('SEA' > `test`.`t1`.`a3`) and multiple equal(2, `test`.`t1`.`a2`))
select max(a3) from t1 where a2 = 2 and 'SEA' > a3;
max(a3)
MIN
explain
select max(a3) from t1 where a2 = 2 and 'SEA' < a3;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No matching min/max row
Warnings:
Note	1003	/* select#1 */ select max(`test`.`t1`.`a3`) AS `max(a3)` from `test`.`t1` where (('SEA' < `test`.`t1`.`a3`) and multiple equal(2, `test`.`t1`.`a2`))
select max(a3) from t1 where a2 = 2 and 'SEA' < a3;
max(a3)
NULL
explain
select min(a3) from t1 where a2 = 2 and a3 >= 'CHI';
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t1`.`a3`) AS `min(a3)` from `test`.`t1` where ((`test`.`t1`.`a3` >= 'CHI') and multiple equal(2, `test`.`t1`.`a2`))
select min(a3) from t1 where a2 = 2 and a3 >= 'CHI';
min(a3)
CHI
explain
select min(a3) from t1 where a2 = 2 and a3 >= 'CHI' and a3 < 'SEA';
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t1`.`a3`) AS `min(a3)` from `test`.`t1` where ((`test`.`t1`.`a3` >= 'CHI') and (`test`.`t1`.`a3` < 'SEA') and multiple equal(2, `test`.`t1`.`a2`))
select min(a3) from t1 where a2 = 2 and a3 >= 'CHI' and a3 < 'SEA';
min(a3)
CHI
explain
select min(a3) from t1 where a2 = 2 and a3 >= 'CHI' and a3 = 'MIN';
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t1`.`a3`) AS `min(a3)` from `test`.`t1` where (multiple equal(2, `test`.`t1`.`a2`) and multiple equal('MIN', `test`.`t1`.`a3`))
select min(a3) from t1 where a2 = 2 and a3 >= 'CHI' and a3 = 'MIN';
min(a3)
MIN
explain
select min(a3) from t1 where a2 = 2 and a3 >= 'SEA' and a3 = 'MIN';
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Impossible WHERE
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t1`.`a3`) AS `min(a3)` from `test`.`t1` where false
select min(a3) from t1 where a2 = 2 and a3 >= 'SEA' and a3 = 'MIN';
min(a3)
NULL
explain
select min(t1.a1), min(t2.a4) from t1,t2 where t1.a1 < 'KKK' and t2.a4 < 'KKK';
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t1`.`a1`) AS `min(t1.a1)`,min(`test`.`t2`.`a4`) AS `min(t2.a4)` from `test`.`t1` join `test`.`t2` where ((`test`.`t1`.`a1` < 'KKK') and (`test`.`t2`.`a4` < 'KKK'))
select min(t1.a1), min(t2.a4) from t1,t2 where t1.a1 < 'KKK' and t2.a4 < 'KKK';
min(t1.a1)	min(t2.a4)
AME	AME
ANALYZE TABLE t1, t2;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
test.t2	analyze	status	OK
explain 
select min(a1) from t1 where a1 > 'KKK' or a1 < 'XXX';
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	index	PRIMARY	k1	16	NULL	15	55.55	Using where; Using index
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t1`.`a1`) AS `min(a1)` from `test`.`t1` where ((`test`.`t1`.`a1` > 'KKK') or (`test`.`t1`.`a1` < 'XXX'))
explain 
select min(a1) from t1 where a1 != 'KKK';
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	index	PRIMARY	k1	16	NULL	15	93.33	Using where; Using index
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t1`.`a1`) AS `min(a1)` from `test`.`t1` where (`test`.`t1`.`a1` <> 'KKK')
explain
select max(a3) from t1 where a2 < 2 and a3 < 'SEA';
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	range	k1	k1	3	NULL	7	33.33	Using where; Using index
Warnings:
Note	1003	/* select#1 */ select max(`test`.`t1`.`a3`) AS `max(a3)` from `test`.`t1` where ((`test`.`t1`.`a2` < 2) and (`test`.`t1`.`a3` < 'SEA'))
explain
select max(t1.a3), min(t2.a2) from t1, t2 where t1.a2 = 2 and t1.a3 < 'MIN' and t2.a3 > 'CA';
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	range	k1	k1	16	NULL	1	100.00	Using where; Using index
1	SIMPLE	t2	NULL	range	k1	k1	9	NULL	3	100.00	Using where; Using index; Using join buffer (hash join)
Warnings:
Note	1003	/* select#1 */ select max(`test`.`t1`.`a3`) AS `max(t1.a3)`,min(`test`.`t2`.`a2`) AS `min(t2.a2)` from `test`.`t1` join `test`.`t2` where ((`test`.`t1`.`a2` = 2) and (`test`.`t1`.`a3` < 'MIN') and (`test`.`t2`.`a3` > 'CA'))
explain
select min(a4 - 0.01) from t1;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	index	NULL	k2	21	NULL	15	100.00	Using index
Warnings:
Note	1003	/* select#1 */ select min((`test`.`t1`.`a4` - 0.01)) AS `min(a4 - 0.01)` from `test`.`t1`
explain
select max(a4 + 0.01) from t1;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	index	NULL	k2	21	NULL	15	100.00	Using index
Warnings:
Note	1003	/* select#1 */ select max((`test`.`t1`.`a4` + 0.01)) AS `max(a4 + 0.01)` from `test`.`t1`
explain
select min(a3) from t1 where (a2 +1 ) is null;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	index	NULL	k1	16	NULL	15	100.00	Using where; Using index
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t1`.`a3`) AS `min(a3)` from `test`.`t1` where ((`test`.`t1`.`a2` + 1) is null)
explain
select min(a3) from t1 where (a2 + 1) = 2;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	index	NULL	k1	16	NULL	15	100.00	Using where; Using index
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t1`.`a3`) AS `min(a3)` from `test`.`t1` where ((`test`.`t1`.`a2` + 1) = 2)
explain
select min(a3) from t1 where 2 = (a2 + 1);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	index	NULL	k1	16	NULL	15	100.00	Using where; Using index
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t1`.`a3`) AS `min(a3)` from `test`.`t1` where (2 = (`test`.`t1`.`a2` + 1))
explain
select min(a2) from t1 where a2 < 2 * a2 - 8;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	index	NULL	k1	16	NULL	15	33.33	Using where; Using index
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t1`.`a2`) AS `min(a2)` from `test`.`t1` where (`test`.`t1`.`a2` < ((2 * `test`.`t1`.`a2`) - 8))
explain
select min(a1) from t1  where a1 between a3 and 'KKK';
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	index	PRIMARY	k1	16	NULL	15	11.11	Using where; Using index
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t1`.`a1`) AS `min(a1)` from `test`.`t1` where (`test`.`t1`.`a1` between `test`.`t1`.`a3` and 'KKK')
explain
select min(a4) from t1  where (a4 + 0.01) between 0.07 and 0.08;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	index	NULL	k2	21	NULL	15	100.00	Using where; Using index
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t1`.`a4`) AS `min(a4)` from `test`.`t1` where ((`test`.`t1`.`a4` + 0.01) between 0.07 and 0.08)
explain
select concat(min(t1.a1),min(t2.a4)) from t1, t2 where t2.a4 <> 'AME';
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t2	NULL	range	k2	k2	13	NULL	6	100.00	Using where; Using index
1	SIMPLE	t1	NULL	index	NULL	k1	16	NULL	15	100.00	Using index; Using join buffer (hash join)
Warnings:
Note	1003	/* select#1 */ select concat(min(`test`.`t1`.`a1`),min(`test`.`t2`.`a4`)) AS `concat(min(t1.a1),min(t2.a4))` from `test`.`t1` join `test`.`t2` where (`test`.`t2`.`a4` <> 'AME')
drop table t1, t2;
create table t1 (a char(10));
insert into t1 values ('a'),('b'),('c');
select coercibility(max(a)) from t1;
coercibility(max(a))
2
drop table t1;
create table t1 (a char character set latin2);
insert into t1 values ('a'),('b');
select charset(max(a)), coercibility(max(a)),
charset(min(a)), coercibility(min(a)) from t1;
charset(max(a))	coercibility(max(a))	charset(min(a))	coercibility(min(a))
latin2	2	latin2	2
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` char(1) CHARACTER SET latin2 COLLATE latin2_general_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
create table t2 select max(a),min(a) from t1;
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `max(a)` char(1) CHARACTER SET latin2 DEFAULT NULL,
  `min(a)` char(1) CHARACTER SET latin2 DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t2;
create table t2 select concat(a) from t1;
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `concat(a)` varchar(1) CHARACTER SET latin2 DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t2,t1;
create table t1 (a int);
insert into t1 values (1);
select max(a) as b from t1 having b=1;
b
1
select a from t1 having a=1;
a
1
drop table t1;
create table t1 (a int);
select variance(2) from t1;
variance(2)
NULL
select stddev(2) from t1;
stddev(2)
NULL
drop table t1;
create table t1 (a int);
insert into t1 values (1),(2);
prepare stmt1 from 'SELECT COUNT(*) FROM t1';
execute stmt1;
COUNT(*)
2
execute stmt1;
COUNT(*)
2
execute stmt1;
COUNT(*)
2
deallocate prepare stmt1;
drop table t1;
create table t1 (a int, primary key(a));
insert into t1 values (1),(2);
prepare stmt1 from 'SELECT max(a) FROM t1';
execute stmt1;
max(a)
2
execute stmt1;
max(a)
2
execute stmt1;
max(a)
2
deallocate prepare stmt1;
drop table t1;
CREATE TABLE t1 (a int primary key);
INSERT INTO t1 VALUES (1),(2),(3),(4);
SELECT MAX(a) FROM t1 WHERE a > 5;
MAX(a)
NULL
SELECT MIN(a) FROM t1 WHERE a < 0;
MIN(a)
NULL
DROP TABLE t1;
CREATE TABLE t1 (
id int(10) unsigned NOT NULL auto_increment,
val enum('one','two','three') NOT NULL default 'one',
PRIMARY KEY  (id)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	3719	'utf8' is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.
INSERT INTO t1 VALUES
(1,'one'),(2,'two'),(3,'three'),(4,'one'),(5,'two');
select val, count(*) from t1 group by val;
val	count(*)
one	2
two	2
three	1
drop table t1;
CREATE TABLE t1 (
id int(10) unsigned NOT NULL auto_increment,
val set('one','two','three') NOT NULL default 'one',
PRIMARY KEY  (id)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	3719	'utf8' is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.
INSERT INTO t1 VALUES
(1,'one'),(2,'two'),(3,'three'),(4,'one'),(5,'two');
select val, count(*) from t1 group by val;
val	count(*)
one	2
two	2
three	1
drop table t1;
create table t1(a int, b datetime);
insert into t1 values (1, NOW()), (2, NOW());
create table t2 select MAX(b) from t1 group by a;
show create table t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `MAX(b)` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1, t2;
SET sql_mode = 'NO_ENGINE_SUBSTITUTION';
create table t1(f1 datetime);
insert into t1 values (now());
create table t2 select f2 from (select max(now()) f2 from t1) a;
show columns from t2;
Field	Type	Null	Key	Default	Extra
f2	datetime	YES		NULL	
drop table t2;
create table t2 select f2 from (select now() f2 from t1) a;
show columns from t2;
Field	Type	Null	Key	Default	Extra
f2	datetime	NO		0000-00-00 00:00:00	
drop table t2, t1;
SET sql_mode = default;
CREATE TABLE t1(
id int PRIMARY KEY,
a  int,
b  int,
INDEX i_b_id(a,b,id),
INDEX i_id(a,id)
);
INSERT INTO t1 VALUES 
(1,1,4), (2,2,1), (3,1,3), (4,2,1), (5,1,1);
SELECT MAX(id) FROM t1 WHERE id < 3 AND a=2 AND b=6;
MAX(id)
NULL
DROP TABLE t1;
CREATE TABLE t1(
id int PRIMARY KEY,
a  int,
b  int,
INDEX i_id(a,id),
INDEX i_b_id(a,b,id)
);
INSERT INTO t1 VALUES 
(1,1,4), (2,2,1), (3,1,3), (4,2,1), (5,1,1);
SELECT MAX(id) FROM t1 WHERE id < 3 AND a=2 AND b=6;
MAX(id)
NULL
DROP TABLE t1;
CREATE TABLE t1 (id int PRIMARY KEY, b char(3), INDEX(b));
INSERT INTO t1 VALUES (1,'xx'), (2,'aa');
SELECT * FROM t1;
id	b
1	xx
2	aa
SELECT MAX(b) FROM t1 WHERE b < 'ppppp';
MAX(b)
aa
SHOW WARNINGS;
Level	Code	Message
SELECT MAX(b) FROM t1 WHERE b < 'pp';
MAX(b)
aa
DROP TABLE t1;
CREATE TABLE t1 (id int PRIMARY KEY, b char(16), INDEX(b(4)));
INSERT INTO t1 VALUES (1, 'xxxxbbbb'), (2, 'xxxxaaaa');
ANALYZE TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
SELECT MAX(b) FROM t1;
MAX(b)
xxxxbbbb
EXPLAIN SELECT MAX(b) FROM t1;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select max(`test`.`t1`.`b`) AS `MAX(b)` from `test`.`t1`
DROP TABLE t1;
CREATE TABLE t1 (id int , b varchar(512), INDEX(b(250))) COLLATE latin1_bin;
INSERT INTO t1 VALUES
(1,CONCAT(REPEAT('_', 250), "qq")), (1,CONCAT(REPEAT('_', 250), "zz")),
(1,CONCAT(REPEAT('_', 250), "aa")), (1,CONCAT(REPEAT('_', 250), "ff"));
SELECT MAX(b) FROM t1;
MAX(b)
__________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________zz
ANALYZE TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
EXPLAIN SELECT MAX(b) FROM t1;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	NULL	NULL	NULL	NULL	4	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select max(`test`.`t1`.`b`) AS `MAX(b)` from `test`.`t1`
DROP TABLE t1;
CREATE TABLE t1 (a INT, b INT);
INSERT INTO t1 VALUES (1,1),(1,2),(2,3);
SELECT (SELECT COUNT(DISTINCT t1.b)) FROM t1 GROUP BY t1.a;
(SELECT COUNT(DISTINCT t1.b))
2
1
SELECT (SELECT COUNT(DISTINCT 12)) FROM t1 GROUP BY t1.a;
(SELECT COUNT(DISTINCT 12))
1
1
SELECT AVG(2), BIT_AND(2), BIT_OR(2), BIT_XOR(2), COUNT(*), COUNT(12),
COUNT(DISTINCT 12), MIN(2),MAX(2),STD(2), VARIANCE(2),SUM(2),
GROUP_CONCAT(2),GROUP_CONCAT(DISTINCT 2);
AVG(2)	BIT_AND(2)	BIT_OR(2)	BIT_XOR(2)	COUNT(*)	COUNT(12)	COUNT(DISTINCT 12)	MIN(2)	MAX(2)	STD(2)	VARIANCE(2)	SUM(2)	GROUP_CONCAT(2)	GROUP_CONCAT(DISTINCT 2)
2.00000	2	2	2	1	1	1	2	2	0	0	2	2	2
DROP TABLE t1;
create table t2 (ff double);
insert into t2 values (2.2);
select cast(sum(distinct ff) as decimal(5,2)) from t2;
cast(sum(distinct ff) as decimal(5,2))
2.20
select cast(sum(distinct ff) as signed) from t2;
cast(sum(distinct ff) as signed)
2
select cast(variance(ff) as decimal(10,3)) from t2;
cast(variance(ff) as decimal(10,3))
0.000
select cast(min(ff) as decimal(5,2)) from t2;
cast(min(ff) as decimal(5,2))
2.20
create table t1 (df decimal(5,1));
insert into t1 values(1.1);
insert into t1 values(2.2);
select cast(sum(distinct df) as signed) from t1;
cast(sum(distinct df) as signed)
3
select cast(min(df) as signed) from t1;
cast(min(df) as signed)
1
select 1e8 * sum(distinct df) from t1;
1e8 * sum(distinct df)
330000000
select 1e8 * min(df) from t1;
1e8 * min(df)
110000000.00000001
create table t3 (ifl int);
insert into t3 values(1), (2);
select cast(min(ifl) as decimal(5,2)) from t3;
cast(min(ifl) as decimal(5,2))
1.00
drop table t1, t2, t3;
CREATE TABLE t1 (id int(11),value1 float(10,2));
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Specifying number of digits for floating point data types is deprecated and will be removed in a future release.
INSERT INTO t1 VALUES (1,0.00),(1,1.00), (1,2.00), (2,10.00), (2,11.00), (2,12.00), (2,13.00);
select id, stddev_pop(value1), var_pop(value1), stddev_samp(value1), var_samp(value1) from t1 group by id;
id	stddev_pop(value1)	var_pop(value1)	stddev_samp(value1)	var_samp(value1)
1	0.816496580927726	0.6666666666666666	1	1
2	1.118033988749895	1.25	1.2909944487358056	1.6666666666666667
DROP TABLE t1;
CREATE TABLE t1 (col1 decimal(16,12));
INSERT INTO t1 VALUES (-5.00000000001),(-5.00000000002),(-5.00000000003),(-5.00000000000),(-5.00000000001),(-5.00000000002);
insert into t1 select * from t1;
select col1,count(col1),sum(col1),avg(col1) from t1 group by col1;
col1	count(col1)	sum(col1)	avg(col1)
-5.000000000000	2	-10.000000000000	-5.00000000000000000
-5.000000000010	4	-20.000000000040	-5.00000000001000000
-5.000000000020	4	-20.000000000080	-5.00000000002000000
-5.000000000030	2	-10.000000000060	-5.00000000003000000
DROP TABLE t1;
create table t1 (col1 decimal(16,12));
insert into t1 values (-5.00000000001);
insert into t1 values (-5.00000000001);
select col1,sum(col1),max(col1),min(col1) from t1 group by col1;
col1	sum(col1)	max(col1)	min(col1)
-5.000000000010	-10.000000000020	-5.000000000010	-5.000000000010
delete from t1;
insert into t1 values (5.00000000001);
insert into t1 values (5.00000000001);
select col1,sum(col1),max(col1),min(col1) from t1 group by col1;
col1	sum(col1)	max(col1)	min(col1)
5.000000000010	10.000000000020	5.000000000010	5.000000000010
DROP TABLE t1;
CREATE TABLE t1 (a VARCHAR(400)) charset latin1;
INSERT INTO t1 (a) VALUES ("A"), ("a"), ("a "), ("a   "),
("B"), ("b"), ("b "), ("b   ");
SELECT COUNT(DISTINCT a) FROM t1;
COUNT(DISTINCT a)
2
DROP TABLE t1;
CREATE TABLE t1 (a int, b int, c int);
INSERT INTO t1 (a, b, c) VALUES
(1,1,1), (1,1,2), (1,1,3),
(1,2,1), (1,2,2), (1,2,3),
(1,3,1), (1,3,2), (1,3,3),
(2,1,1), (2,1,2), (2,1,3),
(2,2,1), (2,2,2), (2,2,3),
(2,3,1), (2,3,2), (2,3,3),
(3,1,1), (3,1,2), (3,1,3),
(3,2,1), (3,2,2), (3,2,3),
(3,3,1), (3,3,2), (3,3,3);
SELECT b/c as v, a FROM t1 ORDER BY v, a;
v	a
0.33333	1
0.33333	2
0.33333	3
0.50000	1
0.50000	2
0.50000	3
0.66667	1
0.66667	2
0.66667	3
1.00000	1
1.00000	1
1.00000	1
1.00000	2
1.00000	2
1.00000	2
1.00000	3
1.00000	3
1.00000	3
1.50000	1
1.50000	2
1.50000	3
2.00000	1
2.00000	2
2.00000	3
3.00000	1
3.00000	2
3.00000	3
SELECT b/c as v, SUM(a) FROM t1 GROUP BY v;
v	SUM(a)
0.33333	6
0.50000	6
0.66667	6
1.00000	18
1.50000	6
2.00000	6
3.00000	6
SELECT SUM(a) FROM t1 GROUP BY b/c;
SUM(a)
18
6
6
6
6
6
6
DROP TABLE t1;
set div_precision_increment= @sav_dpi;
CREATE TABLE t1 (a INT PRIMARY KEY, b INT);
INSERT INTO t1 VALUES (1,1), (2,2);
CREATE TABLE t2 (a INT PRIMARY KEY, b INT);
INSERT INTO t2 VALUES (1,1), (3,3);
SELECT
(SELECT SUM(c.a) FROM t1 ttt, t2 ccc 
WHERE ttt.a = ccc.b AND ttt.a = t.a GROUP BY ttt.a) AS minid   
FROM t1 t, t2 c WHERE t.a = c.b;
minid
1
DROP TABLE t1,t2;
create table t1 select variance(0);
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `variance(0)` double DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table t1 select stddev(0);
show create table t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `stddev(0)` double DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
drop table t1;
create table bug22555 (i smallint primary key auto_increment, s1 smallint, s2 smallint, e decimal(30,10), o double);
insert into bug22555 (s1, s2, e, o) values (53, 78, 11.4276528, 6.828112), (17, 78, 5.916793, 1.8502951), (18, 76, 2.679231, 9.17975591), (31, 62, 6.07831, 0.1), (19, 41, 5.37463, 15.1), (83, 73, 14.567426, 7.959222), (92, 53, 6.10151, 13.1856852), (7, 12, 13.92272, 3.442007), (92, 35, 11.95358909, 6.01376678), (38, 84, 2.572, 7.904571);
select std(s1/s2) from bug22555 group by i;
std(s1/s2)
0
0
0
0
0
0
0
0
0
0
select std(e) from bug22555 group by i;
std(e)
0
0
0
0
0
0
0
0
0
0
select std(o) from bug22555 group by i;
std(o)
0
0
0
0
0
0
0
0
0
0
drop table bug22555;
create table bug22555 (i smallint, s1 smallint, s2 smallint, o1 double, o2 double, e1 decimal, e2 decimal);
insert into bug22555 values (1,53,78,53,78,53,78),(2,17,78,17,78,17,78),(3,18,76,18,76,18,76);
select i, count(*) from bug22555 group by i;
i	count(*)
1	1
2	1
3	1
select std(s1/s2) from bug22555 where i=1;
std(s1/s2)
0
select std(s1/s2) from bug22555 where i=2;
std(s1/s2)
0
select std(s1/s2) from bug22555 where i=3;
std(s1/s2)
0
select std(s1/s2) from bug22555 where i=1 group by i;
std(s1/s2)
0
select std(s1/s2) from bug22555 where i=2 group by i;
std(s1/s2)
0
select std(s1/s2) from bug22555 where i=3 group by i;
std(s1/s2)
0
select std(s1/s2) from bug22555 group by i order by i;
std(s1/s2)
0
0
0
select i, count(*), std(o1/o2) from bug22555 group by i order by i;
i	count(*)	std(o1/o2)
1	1	0
2	1	0
3	1	0
select i, count(*), std(e1/e2) from bug22555 group by i order by i;
i	count(*)	std(e1/e2)
1	1	0
2	1	0
3	1	0
set @saved_div_precision_increment=@@div_precision_increment;
set div_precision_increment=19;
select i, count(*), variance(s1/s2) from bug22555 group by i order by i;
i	count(*)	variance(s1/s2)
1	1	0
2	1	0
3	1	0
select i, count(*), variance(o1/o2) from bug22555 group by i order by i;
i	count(*)	variance(o1/o2)
1	1	0
2	1	0
3	1	0
select i, count(*), variance(e1/e2) from bug22555 group by i order by i;
i	count(*)	variance(e1/e2)
1	1	0
2	1	0
3	1	0
select i, count(*), std(s1/s2) from bug22555 group by i order by i;
i	count(*)	std(s1/s2)
1	1	0
2	1	0
3	1	0
select i, count(*), std(o1/o2) from bug22555 group by i order by i;
i	count(*)	std(o1/o2)
1	1	0
2	1	0
3	1	0
select i, count(*), std(e1/e2) from bug22555 group by i order by i;
i	count(*)	std(e1/e2)
1	1	0
2	1	0
3	1	0
set div_precision_increment=20;
select i, count(*), variance(s1/s2) from bug22555 group by i order by i;
i	count(*)	variance(s1/s2)
1	1	0
2	1	0
3	1	0
select i, count(*), variance(o1/o2) from bug22555 group by i order by i;
i	count(*)	variance(o1/o2)
1	1	0
2	1	0
3	1	0
select i, count(*), variance(e1/e2) from bug22555 group by i order by i;
i	count(*)	variance(e1/e2)
1	1	0
2	1	0
3	1	0
select i, count(*), std(s1/s2) from bug22555 group by i order by i;
i	count(*)	std(s1/s2)
1	1	0
2	1	0
3	1	0
select i, count(*), std(o1/o2) from bug22555 group by i order by i;
i	count(*)	std(o1/o2)
1	1	0
2	1	0
3	1	0
select i, count(*), std(e1/e2) from bug22555 group by i order by i;
i	count(*)	std(e1/e2)
1	1	0
2	1	0
3	1	0
set @@div_precision_increment=@saved_div_precision_increment;
insert into bug22555 values (1,53,78,53,78,53,78),(2,17,78,17,78,17,78),(3,18,76,18,76,18,76);
insert into bug22555 values (1,53,78,53,78,53,78),(2,17,78,17,78,17,78),(3,18,76,18,76,18,76);
insert into bug22555 values (1,53,78,53,78,53,78),(2,17,78,17,78,17,78),(3,18,76,18,76,18,76);
select i, count(*), std(s1/s2) from bug22555 group by i order by i;
i	count(*)	std(s1/s2)
1	4	0
2	4	0
3	4	0
select i, count(*), round(std(o1/o2), 16) from bug22555 group by i order by i;
i	count(*)	round(std(o1/o2), 16)
1	4	0
2	4	0
3	4	0
select i, count(*), std(e1/e2) from bug22555 group by i order by i;
i	count(*)	std(e1/e2)
1	4	0
2	4	0
3	4	0
select std(s1/s2) from bug22555;
std(s1/s2)
0.21325763593256278
select std(o1/o2) from bug22555;
std(o1/o2)
0.2132576358664934
select std(e1/e2) from bug22555;
std(e1/e2)
0.21325763593256278
set @saved_div_precision_increment=@@div_precision_increment;
set div_precision_increment=19;
select i, count(*), std(s1/s2) from bug22555 group by i order by i;
i	count(*)	std(s1/s2)
1	4	0
2	4	0
3	4	0
select i, count(*), round(std(o1/o2), 16) from bug22555 group by i order by i;
i	count(*)	round(std(o1/o2), 16)
1	4	0
2	4	0
3	4	0
select i, count(*), std(e1/e2) from bug22555 group by i order by i;
i	count(*)	std(e1/e2)
1	4	0
2	4	0
3	4	0
select round(std(s1/s2), 17) from bug22555;
round(std(s1/s2), 17)
0.2132576358664934
select std(o1/o2) from bug22555;
std(o1/o2)
0.2132576358664934
select round(std(e1/e2), 17) from bug22555;
round(std(e1/e2), 17)
0.2132576358664934
set div_precision_increment=20;
select i, count(*), std(s1/s2) from bug22555 group by i order by i;
i	count(*)	std(s1/s2)
1	4	0
2	4	0
3	4	0
select i, count(*), round(std(o1/o2), 16) from bug22555 group by i order by i;
i	count(*)	round(std(o1/o2), 16)
1	4	0
2	4	0
3	4	0
select i, count(*), std(e1/e2) from bug22555 group by i order by i;
i	count(*)	std(e1/e2)
1	4	0
2	4	0
3	4	0
select round(std(s1/s2), 17) from bug22555;
round(std(s1/s2), 17)
0.2132576358664934
select std(o1/o2) from bug22555;
std(o1/o2)
0.2132576358664934
select round(std(e1/e2), 17) from bug22555;
round(std(e1/e2), 17)
0.2132576358664934
set @@div_precision_increment=@saved_div_precision_increment;
drop table bug22555;
create table bug22555 (s smallint, o double, e decimal);
insert into bug22555 values (1,1,1),(2,2,2),(3,3,3),(6,6,6),(7,7,7);
select var_samp(s), var_pop(s) from bug22555;
var_samp(s)	var_pop(s)
6.7	5.36
select var_samp(o), var_pop(o) from bug22555;
var_samp(o)	var_pop(o)
6.7	5.36
select var_samp(e), var_pop(e) from bug22555;
var_samp(e)	var_pop(e)
6.7	5.36
drop table bug22555;
create table bug22555 (s smallint, o double, e decimal);
insert into bug22555 values (null,null,null),(null,null,null);
select var_samp(s) as 'null', var_pop(s) as 'null' from bug22555;
null	null
NULL	NULL
select var_samp(o) as 'null', var_pop(o) as 'null' from bug22555;
null	null
NULL	NULL
select var_samp(e) as 'null', var_pop(e) as 'null' from bug22555;
null	null
NULL	NULL
insert into bug22555 values (1,1,1);
select var_samp(s) as 'null', var_pop(s) as '0' from bug22555;
null	0
NULL	0
select var_samp(o) as 'null', var_pop(o) as '0' from bug22555;
null	0
NULL	0
select var_samp(e) as 'null', var_pop(e) as '0' from bug22555;
null	0
NULL	0
insert into bug22555 values (2,2,2);
select var_samp(s) as '0.5', var_pop(s) as '0.25' from bug22555;
0.5	0.25
0.5	0.25
select var_samp(o) as '0.5', var_pop(o) as '0.25' from bug22555;
0.5	0.25
0.5	0.25
select var_samp(e) as '0.5', var_pop(e) as '0.25' from bug22555;
0.5	0.25
0.5	0.25
drop table bug22555;
create table t1 (a decimal(20));
insert into t1 values (12345678901234567890);
select count(a) from t1;
count(a)
1
select count(distinct a) from t1;
count(distinct a)
1
drop table t1;
CREATE TABLE t1 (a INT, b INT);
INSERT INTO t1 VALUES (1,1),(1,2),(1,3),(1,4),(1,5),(1,6),(1,7),(1,8);
INSERT INTO t1 SELECT a, b+8       FROM t1;
INSERT INTO t1 SELECT a, b+16      FROM t1;
INSERT INTO t1 SELECT a, b+32      FROM t1;
INSERT INTO t1 SELECT a, b+64      FROM t1;
INSERT INTO t1 SELECT a, b+128     FROM t1;
INSERT INTO t1 SELECT a, b+256     FROM t1;
INSERT INTO t1 SELECT a, b+512     FROM t1;
INSERT INTO t1 SELECT a, b+1024    FROM t1;
INSERT INTO t1 SELECT a, b+2048    FROM t1;
INSERT INTO t1 SELECT a, b+4096    FROM t1;
INSERT INTO t1 SELECT a, b+8192    FROM t1;
INSERT INTO t1 SELECT a, b+16384   FROM t1;
INSERT INTO t1 SELECT a, b+32768   FROM t1;
SELECT a,COUNT(DISTINCT b) AS cnt FROM t1 GROUP BY a HAVING cnt > 50;
a	cnt
1	65536
SELECT a,SUM(DISTINCT b) AS sumation FROM t1 GROUP BY a HAVING sumation > 50;
a	sumation
1	2147516416
SELECT a,AVG(DISTINCT b) AS average FROM t1 GROUP BY a HAVING average > 50;
a	average
1	32768.5000
DROP TABLE t1;
CREATE TABLE t1 ( a INT, b INT, KEY(a) );
INSERT INTO t1 VALUES (NULL, 1), (NULL, 2);
ANALYZE TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
EXPLAIN SELECT MIN(a), MIN(b) FROM t1;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	NULL	NULL	NULL	NULL	2	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t1`.`a`) AS `MIN(a)`,min(`test`.`t1`.`b`) AS `MIN(b)` from `test`.`t1`
SELECT MIN(a), MIN(b) FROM t1;
MIN(a)	MIN(b)
NULL	1
CREATE TABLE t2( a INT, b INT, c INT, KEY(a, b) );
INSERT INTO t2 ( a, b, c ) VALUES ( 1, NULL, 2 ), ( 1, 3, 4 ), ( 1, 4, 4 );
ANALYZE TABLE t2;
Table	Op	Msg_type	Msg_text
test.t2	analyze	status	OK
EXPLAIN SELECT MIN(b), MIN(c) FROM t2 WHERE a = 1;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t2	NULL	ref	a	a	5	const	3	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t2`.`b`) AS `MIN(b)`,min(`test`.`t2`.`c`) AS `MIN(c)` from `test`.`t2` where (`test`.`t2`.`a` = 1)
SELECT MIN(b), MIN(c) FROM t2 WHERE a = 1;
MIN(b)	MIN(c)
3	2
CREATE TABLE t3 (a INT, b INT, c int, KEY(a, b));
INSERT INTO t3 VALUES (1, NULL, 1), (2, NULL, 2),  (2, NULL, 2),  (3, NULL, 3);
ANALYZE TABLE t3;
Table	Op	Msg_type	Msg_text
test.t3	analyze	status	OK
EXPLAIN SELECT MIN(a), MIN(b) FROM t3 where a = 2;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t3`.`a`) AS `MIN(a)`,min(`test`.`t3`.`b`) AS `MIN(b)` from `test`.`t3` where multiple equal(2, `test`.`t3`.`a`)
SELECT MIN(a), MIN(b) FROM t3 where a = 2;
MIN(a)	MIN(b)
2	NULL
CREATE TABLE t4 (a INT, b INT, c int, KEY(a, b));
INSERT INTO t4 VALUES (1, 1, 1), (2, NULL, 2),  (2, NULL, 2),  (3, 1, 3);
ANALYZE TABLE t4;
Table	Op	Msg_type	Msg_text
test.t4	analyze	status	OK
EXPLAIN SELECT MIN(a), MIN(b) FROM t4 where a = 2;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t4`.`a`) AS `MIN(a)`,min(`test`.`t4`.`b`) AS `MIN(b)` from `test`.`t4` where multiple equal(2, `test`.`t4`.`a`)
SELECT MIN(a), MIN(b) FROM t4 where a = 2;
MIN(a)	MIN(b)
2	NULL
SELECT MIN(b), min(c) FROM t4 where a = 2;
MIN(b)	min(c)
NULL	2
CREATE TABLE t5( a INT, b INT, KEY( a, b) );
INSERT INTO t5 VALUES( 1, 1 ), ( 1, 2 );
ANALYZE TABLE t5;
Table	Op	Msg_type	Msg_text
test.t5	analyze	status	OK
EXPLAIN SELECT MIN(a), MIN(b) FROM t5 WHERE a = 1;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select min(`test`.`t5`.`a`) AS `MIN(a)`,min(`test`.`t5`.`b`) AS `MIN(b)` from `test`.`t5` where multiple equal(1, `test`.`t5`.`a`)
SELECT MIN(a), MIN(b) FROM t5 WHERE a = 1;
MIN(a)	MIN(b)
1	1
SELECT MIN(a), MIN(b) FROM t5 WHERE a = 1 and b > 1;
MIN(a)	MIN(b)
1	2
DROP TABLE t1, t2, t3, t4, t5;
CREATE TABLE t1 (a INT);
INSERT INTO t1 values (),(),();
SELECT (SELECT SLEEP(0) FROM t1 ORDER BY AVG(DISTINCT a) ) as x FROM t1 
GROUP BY x;
ERROR HY000: Expression #1 of ORDER BY contains aggregate function and applies to the result of a non-aggregated query
SELECT 1 FROM t1 GROUP BY (SELECT SLEEP(0) FROM t1 ORDER BY AVG(DISTINCT a) );
ERROR HY000: Expression #1 of ORDER BY contains aggregate function and applies to the result of a non-aggregated query
DROP TABLE t1;
CREATE TABLE t1 (a int, b date NOT NULL, KEY k1 (a,b));
SELECT MIN(b) FROM t1 WHERE a=1 AND b>'2007-08-01';
MIN(b)
NULL
DROP TABLE t1;
CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (1),(2),(3),(4);
SELECT a FROM t1 HAVING COUNT(*)>2;
ERROR 42000: In aggregated query without GROUP BY, expression #1 of SELECT list contains nonaggregated column 'test.t1.a'; this is incompatible with sql_mode=only_full_group_by
SELECT COUNT(*), a FROM t1;
ERROR 42000: In aggregated query without GROUP BY, expression #2 of SELECT list contains nonaggregated column 'test.t1.a'; this is incompatible with sql_mode=only_full_group_by
SELECT a FROM t1 HAVING COUNT(*)>2;
a
1
SELECT COUNT(*), a FROM t1;
COUNT(*)	a
4	1
DROP TABLE t1;
set SQL_MODE=ONLY_FULL_GROUP_BY;
CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (1),(2),(3),(4);
CREATE VIEW v1 AS SELECT a,(a + 1) AS y FROM t1;
ANALYZE TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
EXPLAIN SELECT y FROM v1 GROUP BY v1.y;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	NULL	NULL	NULL	NULL	4	100.00	Using temporary
Warnings:
Note	1003	/* select#1 */ select (`test`.`t1`.`a` + 1) AS `y` from `test`.`t1` group by (`test`.`t1`.`a` + 1)
DROP VIEW v1;
DROP TABLE t1;
SET SQL_MODE=DEFAULT;
CREATE TABLE t1(a DOUBLE);
INSERT INTO t1 VALUES (10), (20);
SELECT AVG(a), CAST(AVG(a) AS DECIMAL) FROM t1;
AVG(a)	CAST(AVG(a) AS DECIMAL)
15	15
DROP TABLE t1;
CREATE TABLE derived1 (a bigint(21));
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
INSERT INTO derived1 VALUES (2);
CREATE TABLE D (
pk int(11) NOT NULL AUTO_INCREMENT,
int_nokey int(11) DEFAULT NULL,
int_key int(11) DEFAULT NULL,
filler blob,
PRIMARY KEY (pk),
KEY int_key (int_key)
);
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
INSERT INTO D VALUES 
(39,40,4,repeat('  X', 42)),
(43,56,4,repeat('  X', 42)),
(47,12,4,repeat('  X', 42)),
(71,28,4,repeat('  X', 42)),
(76,54,4,repeat('  X', 42)),
(83,45,4,repeat('  X', 42)),
(105,53,12,NULL);
SELECT 
(SELECT COUNT( int_nokey ) 
FROM derived1 AS X 
WHERE 
X.int_nokey < 61 
GROUP BY pk 
LIMIT 1) 
FROM D AS X 
WHERE X.int_key < 13  
GROUP BY int_nokey LIMIT 1;
ERROR 42000: Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'test.X.pk' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by
DROP TABLE derived1;
DROP TABLE D;
CREATE TABLE t1 (a INT, b INT);
INSERT INTO t1 VALUES (1,1), (1,2), (1,3);
SET SQL_MODE='ONLY_FULL_GROUP_BY';
SELECT COUNT(*) FROM t1;
COUNT(*)
3
SELECT COUNT(*) FROM t1 where a=1;
COUNT(*)
3
SELECT COUNT(*),a FROM t1;
ERROR 42000: In aggregated query without GROUP BY, expression #2 of SELECT list contains nonaggregated column 'test.t1.a'; this is incompatible with sql_mode=only_full_group_by
SELECT COUNT(*) FROM t1 a JOIN t1 b ON a.a= b.a;
COUNT(*)
9
SELECT COUNT(*), (SELECT count(*) FROM t1 inr WHERE inr.a = outr.a) 
FROM t1 outr;
ERROR 42000: In aggregated query without GROUP BY, expression #2 of SELECT list contains nonaggregated column 'test.outr.a'; this is incompatible with sql_mode=only_full_group_by
SELECT COUNT(*) FROM t1 a JOIN t1 outr 
ON a.a= (SELECT count(*) FROM t1 inr WHERE inr.a = outr.a);
COUNT(*)
0
SET SQL_MODE=default;
DROP TABLE t1;
End of 5.0 tests
#
# BUG#47280 - strange results from count(*) with order by multiple 
#             columns without where/group
# 
# 
# Initialize test
# 
CREATE TABLE t1 (
pk INT NOT NULL,
i INT,
PRIMARY KEY (pk)
);
INSERT INTO t1 VALUES (1,11),(2,12),(3,13);
#
# Start test
# All the following queries shall return 1 record
#

# Masking all correct values {11...13} for column i in this result. 
SELECT MAX(pk) as max, i
FROM t1
ORDER BY max;
max	i
3	#

ANALYZE TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
EXPLAIN
SELECT MAX(pk) as max, i
FROM t1
ORDER BY max;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	t1	NULL	ALL	NULL	NULL	NULL	NULL	3	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select max(`test`.`t1`.`pk`) AS `max`,`test`.`t1`.`i` AS `i` from `test`.`t1`

# Only 11 is correct for collumn i in this result
SELECT MAX(pk) as max, i
FROM t1
WHERE pk<2
ORDER BY max;
max	i
1	11
#
# Cleanup
#
DROP TABLE t1;
#
# Bug#43668: Wrong comparison and MIN/MAX for YEAR(2)
# WL#6263: Remove year(2)
#
create table t1 (f1 year, f2 year, f3 date, f4 datetime);
insert into t1 values
(98,1998,19980101,"1998-01-01 00:00:00"),
('00',2000,20000101,"2000-01-01 00:00:01"),
(02,2002,20020101,"2002-01-01 23:59:59"),
(60,2060,20600101,"2060-01-01 11:11:11"),
(70,1970,19700101,"1970-11-11 22:22:22"),
(NULL,NULL,NULL,NULL);
select min(f1),max(f1) from t1;
min(f1)	max(f1)
1970	2060
select min(f2),max(f2) from t1;
min(f2)	max(f2)
1970	2060
select min(f3),max(f3) from t1;
min(f3)	max(f3)
1970-01-01	2060-01-01
select min(f4),max(f4) from t1;
min(f4)	max(f4)
1970-11-11 22:22:22	2060-01-01 11:11:11
select a.f1 as a, b.f1 as b, a.f1 > b.f1 as gt,
a.f1 < b.f1 as lt, a.f1<=>b.f1 as eq
from t1 a, t1 b;
a	b	gt	lt	eq
1970	1970	0	0	1
1970	1998	0	1	0
1970	2000	0	1	0
1970	2002	0	1	0
1970	2060	0	1	0
1970	NULL	NULL	NULL	0
1998	1970	1	0	0
1998	1998	0	0	1
1998	2000	0	1	0
1998	2002	0	1	0
1998	2060	0	1	0
1998	NULL	NULL	NULL	0
2000	1970	1	0	0
2000	1998	1	0	0
2000	2000	0	0	1
2000	2002	0	1	0
2000	2060	0	1	0
2000	NULL	NULL	NULL	0
2002	1970	1	0	0
2002	1998	1	0	0
2002	2000	1	0	0
2002	2002	0	0	1
2002	2060	0	1	0
2002	NULL	NULL	NULL	0
2060	1970	1	0	0
2060	1998	1	0	0
2060	2000	1	0	0
2060	2002	1	0	0
2060	2060	0	0	1
2060	NULL	NULL	NULL	0
NULL	1970	NULL	NULL	0
NULL	1998	NULL	NULL	0
NULL	2000	NULL	NULL	0
NULL	2002	NULL	NULL	0
NULL	2060	NULL	NULL	0
NULL	NULL	NULL	NULL	1
select a.f1 as a, b.f2 as b, a.f1 > b.f2 as gt,
a.f1 < b.f2 as lt, a.f1<=>b.f2 as eq
from t1 a, t1 b;
a	b	gt	lt	eq
1970	1970	0	0	1
1970	1998	0	1	0
1970	2000	0	1	0
1970	2002	0	1	0
1970	2060	0	1	0
1970	NULL	NULL	NULL	0
1998	1970	1	0	0
1998	1998	0	0	1
1998	2000	0	1	0
1998	2002	0	1	0
1998	2060	0	1	0
1998	NULL	NULL	NULL	0
2000	1970	1	0	0
2000	1998	1	0	0
2000	2000	0	0	1
2000	2002	0	1	0
2000	2060	0	1	0
2000	NULL	NULL	NULL	0
2002	1970	1	0	0
2002	1998	1	0	0
2002	2000	1	0	0
2002	2002	0	0	1
2002	2060	0	1	0
2002	NULL	NULL	NULL	0
2060	1970	1	0	0
2060	1998	1	0	0
2060	2000	1	0	0
2060	2002	1	0	0
2060	2060	0	0	1
2060	NULL	NULL	NULL	0
NULL	1970	NULL	NULL	0
NULL	1998	NULL	NULL	0
NULL	2000	NULL	NULL	0
NULL	2002	NULL	NULL	0
NULL	2060	NULL	NULL	0
NULL	NULL	NULL	NULL	1
select a.f1 as a, b.f3 as b, a.f1 > b.f3 as gt,
a.f1 < b.f3 as lt, a.f1<=>b.f3 as eq
from t1 a, t1 b;
a	b	gt	lt	eq
1970	1970-01-01	0	1	0
1970	1998-01-01	0	1	0
1970	2000-01-01	0	1	0
1970	2002-01-01	0	1	0
1970	2060-01-01	0	1	0
1970	NULL	NULL	NULL	0
1998	1970-01-01	1	0	0
1998	1998-01-01	0	1	0
1998	2000-01-01	0	1	0
1998	2002-01-01	0	1	0
1998	2060-01-01	0	1	0
1998	NULL	NULL	NULL	0
2000	1970-01-01	1	0	0
2000	1998-01-01	1	0	0
2000	2000-01-01	0	1	0
2000	2002-01-01	0	1	0
2000	2060-01-01	0	1	0
2000	NULL	NULL	NULL	0
2002	1970-01-01	1	0	0
2002	1998-01-01	1	0	0
2002	2000-01-01	1	0	0
2002	2002-01-01	0	1	0
2002	2060-01-01	0	1	0
2002	NULL	NULL	NULL	0
2060	1970-01-01	1	0	0
2060	1998-01-01	1	0	0
2060	2000-01-01	1	0	0
2060	2002-01-01	1	0	0
2060	2060-01-01	0	1	0
2060	NULL	NULL	NULL	0
NULL	1970-01-01	NULL	NULL	0
NULL	1998-01-01	NULL	NULL	0
NULL	2000-01-01	NULL	NULL	0
NULL	2002-01-01	NULL	NULL	0
NULL	2060-01-01	NULL	NULL	0
NULL	NULL	NULL	NULL	1
select a.f1 as a, b.f4 as b, a.f1 > b.f4 as gt,
a.f1 < b.f4 as lt, a.f1<=>b.f4 as eq
from t1 a, t1 b;
a	b	gt	lt	eq
1970	1970-11-11 22:22:22	0	1	0
1970	1998-01-01 00:00:00	0	1	0
1970	2000-01-01 00:00:01	0	1	0
1970	2002-01-01 23:59:59	0	1	0
1970	2060-01-01 11:11:11	0	1	0
1970	NULL	NULL	NULL	0
1998	1970-11-11 22:22:22	1	0	0
1998	1998-01-01 00:00:00	0	1	0
1998	2000-01-01 00:00:01	0	1	0
1998	2002-01-01 23:59:59	0	1	0
1998	2060-01-01 11:11:11	0	1	0
1998	NULL	NULL	NULL	0
2000	1970-11-11 22:22:22	1	0	0
2000	1998-01-01 00:00:00	1	0	0
2000	2000-01-01 00:00:01	0	1	0
2000	2002-01-01 23:59:59	0	1	0
2000	2060-01-01 11:11:11	0	1	0
2000	NULL	NULL	NULL	0
2002	1970-11-11 22:22:22	1	0	0
2002	1998-01-01 00:00:00	1	0	0
2002	2000-01-01 00:00:01	1	0	0
2002	2002-01-01 23:59:59	0	1	0
2002	2060-01-01 11:11:11	0	1	0
2002	NULL	NULL	NULL	0
2060	1970-11-11 22:22:22	1	0	0
2060	1998-01-01 00:00:00	1	0	0
2060	2000-01-01 00:00:01	1	0	0
2060	2002-01-01 23:59:59	1	0	0
2060	2060-01-01 11:11:11	0	1	0
2060	NULL	NULL	NULL	0
NULL	1970-11-11 22:22:22	NULL	NULL	0
NULL	1998-01-01 00:00:00	NULL	NULL	0
NULL	2000-01-01 00:00:01	NULL	NULL	0
NULL	2002-01-01 23:59:59	NULL	NULL	0
NULL	2060-01-01 11:11:11	NULL	NULL	0
NULL	NULL	NULL	NULL	1
select *, f1 = f2 from t1;
f1	f2	f3	f4	f1 = f2
1998	1998	1998-01-01	1998-01-01 00:00:00	1
2000	2000	2000-01-01	2000-01-01 00:00:01	1
2002	2002	2002-01-01	2002-01-01 23:59:59	1
2060	2060	2060-01-01	2060-01-01 11:11:11	1
1970	1970	1970-01-01	1970-11-11 22:22:22	1
NULL	NULL	NULL	NULL	NULL
drop table t1;
#
# Bug #54465: assert: field_types == 0 || field_types[field_pos] ==
#             MYSQL_TYPE_LONGLONG
#
CREATE TABLE t1 (a INT);
INSERT INTO t1 VALUES (1), (2);
SELECT MAX((SELECT 1 FROM t1 ORDER BY @var LIMIT 1)) m FROM t1 t2, t1 
ORDER BY t1.a;
m
1
DROP TABLE t1;
#
#  Bug#58030 crash in Item_func_geometry_from_text::val_str
#
SELECT MAX(TIMESTAMP(RAND(0)));
SELECT MIN(TIMESTAMP(RAND(0)));
#
#  Bug#58177 crash and valgrind warnings in decimal and protocol sending functions...
#
SELECT MIN(GET_LOCK('aaaaaaaaaaaaaaaaa',0) / '0b1111111111111111111111111111111111111111111111111111111111111111111111111' ^ (RAND()));
SELECT MIN(GET_LOCK('aaaaaaaaaaaaaaaaa',0) / '0b1111111111111111111111111111111111111111111111111111111111111111111111111' ^ (RAND()));
SELECT MIN(GET_LOCK('aaaaaaaaaaaaaaaaa',0) / '0b1111111111111111111111111111111111111111111111111111111111111111111111111' ^ (RAND()));
SELECT MIN(GET_LOCK('aaaaaaaaaaaaaaaaa',0) / '0b1111111111111111111111111111111111111111111111111111111111111111111111111' ^ (RAND()));
SELECT RELEASE_LOCK('aaaaaaaaaaaaaaaaa');
#
# Bug #11766094 - 59132: MIN() AND MAX() REMOVE UNSIGNEDNESS 
#
CREATE TABLE t1 (a BIGINT UNSIGNED);
INSERT INTO t1 VALUES (18446668621106209655);
SELECT MAX(LENGTH(a)), LENGTH(MAX(a)), MIN(a), MAX(a), CONCAT(MIN(a)), CONCAT(MAX(a)) FROM t1;
MAX(LENGTH(a))	LENGTH(MAX(a))	MIN(a)	MAX(a)	CONCAT(MIN(a))	CONCAT(MAX(a))
20	20	18446668621106209655	18446668621106209655	18446668621106209655	18446668621106209655
DROP TABLE t1;
#
# Bug #11766270  59343: YEAR(4): INCORRECT RESULT AND VALGRIND WARNINGS WITH MIN/MAX, UNION
#
CREATE TABLE t1(f1 YEAR);
INSERT INTO t1 VALUES (0000),(2001);
(SELECT MAX(f1) FROM t1) UNION (SELECT MAX(f1) FROM t1);
Catalog	Database	Table	Table_alias	Column	Column_alias	Type	Length	Max length	Is_null	Flags	Decimals	Charsetnr
def				MAX(f1)	MAX(f1)	13	4	4	Y	32864	0	63
MAX(f1)
2001
DROP TABLE t1;
#
End of 5.1 tests
#
# Bug#52123 Assertion failed: aggregator == aggr->Aggrtype(),
#           file .\item_sum.cc, line 587
#
CREATE TABLE t1(a int, KEY(a));
INSERT INTO t1 VALUES (1), (2);
SELECT 1 FROM t1 ORDER BY AVG(DISTINCT a);
ERROR HY000: Expression #1 of ORDER BY contains aggregate function and applies to the result of a non-aggregated query
DROP TABLE t1;
#
# Bug#55648: Server crash on MIN/MAX on maximum time value
#
CREATE TABLE t1(c1 TIME NOT NULL);
INSERT INTO t1 VALUES('837:59:59');
INSERT INTO t1 VALUES('838:59:59');
SELECT MAX(c1) FROM t1;
MAX(c1)
838:59:59
DROP TABLE t1;
# End of the bug#55648
#
# Bug#56120: Failed assertion on MIN/MAX on negative time value
#
CREATE TABLE t1(c1 TIME NOT NULL);
INSERT INTO t1 VALUES('-00:00:01');
SELECT MAX(c1),MIN(c1) FROM t1;
MAX(c1)	MIN(c1)
-00:00:01	-00:00:01
DROP TABLE t1;
# End of the bug#56120
#
# Bug#57932 "query with AVG(DISTINCT) returns NULL if last
# aggregated value was NULL"
#
CREATE TABLE t1 (col_int_nokey int(11));
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
INSERT INTO t1 VALUES (7),(8),(NULL);
SELECT AVG(DISTINCT col_int_nokey) FROM t1;
AVG(DISTINCT col_int_nokey)
7.5000
SELECT AVG(DISTINCT outr.col_int_nokey) FROM t1 AS outr LEFT JOIN t1 AS outr2 ON
outr.col_int_nokey = outr2.col_int_nokey;
AVG(DISTINCT outr.col_int_nokey)
7.5000
DROP TABLE t1;
# End of the bug#57932
#
# BUG#12773464 - 61925: WRONG RESULT WITH AGGREGATE + NOT BETWEEN + KEY
#
CREATE TABLE t1 (a int, KEY (a));
INSERT INTO t1 VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10);
SELECT MAX(a) FROM t1 WHERE a NOT BETWEEN 3 AND 9;
MAX(a)
10
DROP TABLE t1;
#
# Bug#13724099 1032 BYTE MEMORY LEAK NEW_CACHED_ITEM IN
#              SUBQUERY WITH GROUPING OF OUTER COLUMN
#
CREATE TABLE t1 (
a BLOB,
b INT)
engine=innodb;
INSERT INTO t1 VALUES ('a', 0);
SELECT 0 FROM t1
WHERE 0 = (SELECT group_concat(b)
FROM t1 t GROUP BY t1.a)
;
0
0
DROP TABLE t1;
#
# Bug#25738624: ASSERTION `FALSE' FAILED IN SQL/SQL_EXECUTOR.CC
#
CREATE TABLE e1(pk INT, col_date DATE);
CREATE TABLE b1(i INT);
CREATE TABLE bb4(col_int_key INT, KEY(col_int_key)) ENGINE=MYISAM;
INSERT INTO bb4 VALUES(4);
UPDATE IGNORE e1 AS outr1, b1 AS outr2 SET outr1.col_date =
JSON_SET(outr1.col_date, CONCAT('$','[',1,']','.','cdate'), '2007-07-12')
WHERE outr1.pk <= ANY ( SELECT DISTINCT innr1.col_int_key AS y FROM bb4
AS innr2 LEFT JOIN bb4 AS innr1 ON (innr2.col_int_key <> innr1.col_int_key)
WHERE innr1.col_int_key= 4);
DROP TABLE e1, b1, bb4;
CREATE TABLE t1(pk INT, KEY(pk)) ENGINE=MYISAM;
INSERT INTO t1 VALUES(1);
SELECT MIN(i2.pk) FROM t1 i1 LEFT JOIN t1 i2 ON (i1.pk != i2.pk)
WHERE i2.pk = 1;
MIN(i2.pk)
NULL
DROP TABLE t1;
# End of test for bug#25738624
#
# Bug#25541454: ASSERT `FALSE' FAILED IN READ_SYSTEM / JOIN_READ_CONST_TABLE AT SQL_EXECUTOR.CC
#
CREATE TABLE t1 (
col_int_key int(11) DEFAULT NULL,
pk int(11) NOT NULL AUTO_INCREMENT,
col_int int(11) DEFAULT NULL,
PRIMARY KEY (pk),
KEY col_int_key (col_int_key)
) ENGINE=MyISAM;
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
CREATE TABLE t2 (
col_int_key int(11) DEFAULT NULL,
pk int(11) NOT NULL AUTO_INCREMENT,
col_int int(11) DEFAULT NULL,
PRIMARY KEY (pk),
KEY col_int_key (col_int_key)
) ENGINE=MyISAM;
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
INSERT INTO t2 VALUES (4,1,2);
CREATE TABLE t3 (
col_int int(11) DEFAULT NULL,
col_int_key int(11) DEFAULT NULL,
pk int(11) NOT NULL AUTO_INCREMENT,
PRIMARY KEY (pk),
KEY col_int_key (col_int_key)
) ENGINE=MyISAM;
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
INSERT INTO t3 VALUES (3,9,1);
CREATE TABLE t4 (
col_int_key int(11) DEFAULT NULL,
col_int int(11) DEFAULT NULL,
pk int(11) NOT NULL AUTO_INCREMENT,
PRIMARY KEY (pk),
KEY col_int_key (col_int_key)
) ENGINE=MyISAM;
Warnings:
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
Warning	1681	Integer display width is deprecated and will be removed in a future release.
SELECT (
SELECT MIN(subquery1_t1.col_int_key)
FROM t3 AS subquery1_t1
RIGHT JOIN t1 AS subquery1_t2
STRAIGHT_JOIN t4 AS subquery1_t3
ON (subquery1_t3.pk = subquery1_t2.col_int_key)
ON (subquery1_t3.col_int_key = subquery1_t2.col_int)
WHERE subquery1_t1.col_int_key >= table1.col_int
AND subquery1_t3.pk > table1.pk
)
FROM t2 AS table1;
(
SELECT MIN(subquery1_t1.col_int_key)
FROM t3 AS subquery1_t1
RIGHT JOIN t1 AS subquery1_t2
STRAIGHT_JOIN t4 AS subquery1_t3
ON (subquery1_t3.pk = subquery1_t2.col_int_key)
ON (subquery1_t3.col_int_key = subquery1_t2.col_int)
WHERE subquery1_t1.col_int_k
NULL
DROP TABLE t1, t2, t3, t4;
# End of test for bug#25541454
#
# Bug#29596977 MYSQL OPTIMIZER SCAN FULL INDEX FOR MAX() ON INDEXED COLUMN.
#
CREATE TABLE t1 (
id BIGINT NOT NULL AUTO_INCREMENT,
f1 BIGINT,
PRIMARY KEY(id),
INDEX ix_fd2 (f1)
);
INSERT INTO t1 VALUES (NULL, 1), (NULL, 2), (NULL, 3);
CREATE FUNCTION f1 (par INT) RETURNS INT
DETERMINISTIC
SQL SECURITY INVOKER
BEGIN
RETURN par + 1;
END|
ANALYZE TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
EXPLAIN SELECT f1(MAX(f1)) FROM t1;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	Select tables optimized away
Warnings:
Note	1003	/* select#1 */ select `f1`(max(`test`.`t1`.`f1`)) AS `f1(MAX(f1))` from `test`.`t1`
SELECT f1(MAX(f1)) FROM t1;
f1(MAX(f1))
4
DROP TABLE t1;
DROP FUNCTION f1;
#
# Bug#31848191: ITEM_SUM_STD AND _VARIANCE HAS INCORRECT IS_NULL()
#
CREATE TABLE t1 (f1 INTEGER,f2 INTEGER);
INSERT INTO t1 VALUES (1,10),(1,20),(2,NULL),(2,NULL),(3,50);
SELECT f1, STD(f2) FROM t1 GROUP BY f1 WITH ROLLUP HAVING STD(f2) IS NULL;
f1	STD(f2)
2	NULL
SELECT f1, STD(f2) FROM t1 GROUP BY f1 WITH ROLLUP HAVING STD(f2) IS NOT NULL;
f1	STD(f2)
1	5
3	0
NULL	16.99673171197595
DROP TABLE t1;
# Bug#32713860: Executing prepare returns wrong result
CREATE TABLE t1 (
i8 BIGINT UNIQUE,
dc DECIMAL(10,4) UNIQUE,
f8 DOUBLE UNIQUE,
vc VARCHAR(10) UNIQUE
);
INSERT INTO t1 VALUES(123456, 123456.7890, 123456, '123456');
SET @i8=123456;
SET @dc='123456.7890';
SET @f8=123456.0E0;
SET @vc='123456';
PREPARE si8 FROM 'SELECT MAX(i8) FROM t1 WHERE i8 > ?';
PREPARE ei8 FROM 'EXPLAIN SELECT MAX(i8) FROM t1 WHERE i8 > ?';
PREPARE sdc FROM 'SELECT MAX(dc) FROM t1 WHERE dc > ?';
PREPARE edc FROM 'EXPLAIN SELECT MAX(dc) FROM t1 WHERE dc > ?';
PREPARE sf8 FROM 'SELECT MAX(f8) FROM t1 WHERE f8 > ?';
PREPARE ef8 FROM 'EXPLAIN SELECT MAX(f8) FROM t1 WHERE f8 > ?';
PREPARE svc FROM 'SELECT MAX(vc) FROM t1 WHERE vc > ?';
PREPARE evc FROM 'EXPLAIN SELECT MAX(vc) FROM t1 WHERE vc > ?';
SELECT MAX(i8) FROM t1 WHERE i8 > 123456;
MAX(i8)
NULL
EXECUTE si8 USING @i8;
MAX(i8)
NULL
EXPLAIN SELECT MAX(i8) FROM t1 WHERE i8 > 123456;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No matching min/max row
Warnings:
Note	1003	/* select#1 */ select max(`test`.`t1`.`i8`) AS `MAX(i8)` from `test`.`t1` where (`test`.`t1`.`i8` > 123456)
EXECUTE ei8 USING @i8;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No matching min/max row
Warnings:
Note	1003	/* select#1 */ select max(`test`.`t1`.`i8`) AS `MAX(i8)` from `test`.`t1` where (`test`.`t1`.`i8` > 123456)
SELECT MAX(dc) FROM t1 WHERE dc > 123456.7890;
MAX(dc)
NULL
EXECUTE sdc USING @dc;
MAX(dc)
NULL
EXPLAIN SELECT MAX(dc) FROM t1 WHERE dc > 123456.7890;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No matching min/max row
Warnings:
Note	1003	/* select#1 */ select max(`test`.`t1`.`dc`) AS `MAX(dc)` from `test`.`t1` where (`test`.`t1`.`dc` > 123456.7890)
EXECUTE edc USING @dc;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No matching min/max row
Warnings:
Note	1003	/* select#1 */ select max(`test`.`t1`.`dc`) AS `MAX(dc)` from `test`.`t1` where (`test`.`t1`.`dc` > 123456.7890)
SELECT MAX(f8) FROM t1 WHERE f8 > 123456e0;
MAX(f8)
NULL
EXECUTE sf8 USING @f8;
MAX(f8)
NULL
EXPLAIN SELECT MAX(f8) FROM t1 WHERE f8 > 123456e0;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No matching min/max row
Warnings:
Note	1003	/* select#1 */ select max(`test`.`t1`.`f8`) AS `MAX(f8)` from `test`.`t1` where (`test`.`t1`.`f8` > 123456e0)
EXECUTE ef8 USING @f8;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No matching min/max row
Warnings:
Note	1003	/* select#1 */ select max(`test`.`t1`.`f8`) AS `MAX(f8)` from `test`.`t1` where (`test`.`t1`.`f8` > 123456)
SELECT MAX(vc) FROM t1 WHERE vc > '123456';
MAX(vc)
NULL
EXECUTE svc USING @vc;
MAX(vc)
NULL
EXPLAIN SELECT MAX(vc) FROM t1 WHERE vc > '123456';
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No matching min/max row
Warnings:
Note	1003	/* select#1 */ select max(`test`.`t1`.`vc`) AS `MAX(vc)` from `test`.`t1` where (`test`.`t1`.`vc` > '123456')
EXECUTE evc USING @vc;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	SIMPLE	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	No matching min/max row
Warnings:
Note	1003	/* select#1 */ select max(`test`.`t1`.`vc`) AS `MAX(vc)` from `test`.`t1` where (`test`.`t1`.`vc` > '123456')
DROP TABLE t1;
#
# Bug#32552332 - CAN'T WRITE; DUPLICATE KEY IN TABLE '/TMP/#SQL...'
#
CREATE TABLE tr (c1 INT);
INSERT INTO tr VALUES (1);
CREATE FUNCTION seq_1_to_2() RETURNS INT
BEGIN
DECLARE limit_value, return_value INT;
SET limit_value = 2;
SELECT c1 INTO return_value FROM tr;
IF (return_value < limit_value) THEN
UPDATE tr SET c1 = c1 + 1;
ELSE
UPDATE tr SET c1 = 1;
END IF;
RETURN (return_value);
END|
CREATE TABLE t1 (c1 INT);
INSERT INTO t1 VALUES (10);
INSERT INTO t1 VALUES (11);
SELECT seq_1_to_2() as seq, COUNT(*) FROM t1 GROUP BY seq;
seq	COUNT(*)
1	1
2	1
SELECT FLOOR(seq_1_to_2() * 2) AS val, COUNT(*) FROM t1 GROUP BY val;
val	COUNT(*)
2	1
4	1
SELECT val, COUNT(*) FROM (SELECT FLOOR(seq_1_to_2())+1 val FROM t1) x
GROUP BY x.val;
val	COUNT(*)
2	1
3	1
DROP TABLE t1, tr;
DROP FUNCTION seq_1_to_2;
#
# Bug #34030363 virtual double Item_sum_std::val_real():
#               Assertion `nr >= 0.0' failed
#
CREATE TABLE t1(value double);
INSERT INTO t1 VALUES
(9.33174e+07),
(4.5e+95),
(7.31463e+09),
(1.79769e+308),
(-2.59078e+12),
(2.34165e+21),
(-1.79769e+308),
(0.0);
SELECT STDDEV(value) from t1;
ERROR 22003: DOUBLE value is out of range in 'std(`test`.`t1`.`value`)'
DROP TABLE t1;
CREATE TABLE t2(grp int, value double);
INSERT INTO t2 VALUES
(0, 9.33174e+07),
(1, 4.5e+95),
(0, 7.31463e+09),
(1, 1.79769e+308),
(0, -2.59078e+12),
(1, 2.34165e+21),
(0, -1.79769e+308),
(1, 0.0);
SELECT VARIANCE(value) FROM t2 GROUP BY grp;
ERROR 22003: DOUBLE value is out of range in 'variance(`test`.`t2`.`value`)'
DROP TABLE t2;
