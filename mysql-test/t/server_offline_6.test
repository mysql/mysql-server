# Created: Horst Hunger 2014-05-09
# WL#3836:  Method to bring servers off line

-- source include/not_threadpool.inc

# X plugin might increase counter 'threads_connected' below
source include/xplugin_wait_for_interfaces.inc;

--disable_warnings
SELECT * FROM performance_schema.global_variables WHERE variable_name LIKE '%offline_mode%';
--enable_warnings
# Save the global value to be used to restore the original value.
SET @global_saved_tmp =  @@global.offline_mode;

--enable_connect_log
# This count may not be 1, because of the probably existing connections
# from the previous/parallel test runs
let $user_count= `SELECT COUNT(USER) FROM INFORMATION_SCHEMA.PROCESSLIST
  WHERE USER != 'event_scheduler'`;

# test case 2.1.1 1)
# Create 3 non-super users

CREATE USER 'user1'@'localhost';

SELECT COUNT(USER) FROM INFORMATION_SCHEMA.PROCESSLIST;
SHOW STATUS LIKE 'threads_connected';

# Create another super user session to see if it also survies.
--connect(conu4,localhost,root)
SELECT COUNT(USER) FROM INFORMATION_SCHEMA.PROCESSLIST;
SHOW STATUS LIKE 'threads_connected';

--connection default
SET GLOBAL offline_mode = OFF;
SELECT COUNT(USER) FROM INFORMATION_SCHEMA.PROCESSLIST;
SHOW STATUS LIKE 'threads_connected';

--connect(conu1,localhost,user1)
--disable_warnings
SELECT * FROM performance_schema.global_variables WHERE variable_name LIKE '%offline_mode%';
--enable_warnings

--connection default
SELECT COUNT(USER) FROM INFORMATION_SCHEMA.PROCESSLIST;
SHOW STATUS LIKE 'threads_connected';

# Clean up
--disconnect conu1
--disconnect conu4

# Wait until all users have been disconnected (for slow machines)
let $count_sessions= $user_count;
--source include/wait_until_count_sessions.inc

DROP USER 'user1'@'localhost';

--echo # Restoring the original values.
SET @@global.offline_mode = @global_saved_tmp;

