# Save the initial number of concurrent sessions
--source include/count_sessions.inc

let $global_tmp_storage_engine  = `select @@global.default_tmp_storage_engine`;
let $session_tmp_storage_engine = `select @@session.default_tmp_storage_engine`;

connect (con1,localhost,root,,);
connect (con2,localhost,root,,);
connection con1;
--disable_warnings
drop table if exists t1,t2;
drop view if exists v1;
--enable_warnings

# Add a lot of keys to slow down check
create table t1(n int not null, key(n), key(n), key(n), key(n));

let $1=10000;
disable_query_log;
while ($1)
{
 eval insert into t1 values ($1);
 dec $1;
}
enable_query_log;
send check table t1 extended;
connection con2;
insert into t1 values (200000);
connection con1;
reap;
connection default;
disconnect con1;
disconnect con2;
drop table t1;


# End of 4.1 tests

#
# Bug#9897 Views: 'Check Table' crashes MySQL, with a view and a table
#          in the statement
#
Create table t1(f1 int);
Create table t2(f1 int);
Create view v1 as Select * from t1;
Check Table v1,t2;
drop view v1;
drop table t1, t2;


#
# Bug#26325 TEMPORARY TABLE "corrupt" after first read, according to CHECK TABLE
#

# Repair table is supported only by MyISAM engine

SET @@GLOBAL.default_tmp_storage_engine = MyISAM;
SET @@session.default_tmp_storage_engine = MyISAM;

SELECT @@global.default_tmp_storage_engine;
SELECT @@session.default_tmp_storage_engine;

CREATE TEMPORARY TABLE t1(a INT);
CHECK TABLE t1;
REPAIR TABLE t1;
DROP TABLE t1;

# Reset the variables to MTR default
eval SET @@global.default_tmp_storage_engine = $global_tmp_storage_engine;
eval SET @@session.default_tmp_storage_engine = $session_tmp_storage_engine;

SELECT @@global.default_tmp_storage_engine;
SELECT @@session.default_tmp_storage_engine;

CREATE TEMPORARY TABLE t1(a INT);
CHECK TABLE t1;
REPAIR TABLE t1;
DROP TABLE t1;

--echo #
--echo # Bug#56422 CHECK TABLE run when the table is locked reports corruption
--echo #           along with timeout
--echo #

--disable_warnings
DROP TABLE IF EXISTS t1;
--enable_warnings

CREATE TABLE t1(a INT);
LOCK TABLE t1 WRITE;

--echo # Connection con1
connect(con1, localhost, root);
SET lock_wait_timeout= 1;
CHECK TABLE t1;

--echo # Connection default
connection default;
UNLOCK TABLES;
DROP TABLE t1;
disconnect con1;


# Wait till we reached the initial number of concurrent sessions
--source include/wait_until_count_sessions.inc
