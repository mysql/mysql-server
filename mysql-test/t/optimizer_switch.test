
# This test checks that setting of optimizer_switch works correctly.
# Test cases for bugs related to changing the setting of optimizer_switch,
# should go here.

--echo
--echo BUG#37120 optimizer_switch allowable values not according to specification
--echo

select @@optimizer_switch; 

set optimizer_switch='default';
set optimizer_switch='materialization=off';
select @@optimizer_switch; 

set optimizer_switch='default';
set optimizer_switch='semijoin=off';
select @@optimizer_switch; 

set optimizer_switch='default';
set optimizer_switch='loosescan=off';
select @@optimizer_switch; 

set optimizer_switch='default';
set optimizer_switch='semijoin=off,materialization=off';
select @@optimizer_switch; 

set optimizer_switch='default';
set optimizer_switch='materialization=off,semijoin=off';
select @@optimizer_switch; 

set optimizer_switch='default';
set optimizer_switch='semijoin=off,materialization=off,loosescan=off';
select @@optimizer_switch; 

set optimizer_switch='default';
set optimizer_switch='semijoin=off,loosescan=off';
select @@optimizer_switch; 

set optimizer_switch='default';
set optimizer_switch='materialization=off,loosescan=off';
select @@optimizer_switch; 
set optimizer_switch='default';


# test re-optimization/re-execution with different execution methods
# prepare once, exec with different modes
create table t1 (a1 char(8), a2 char(8));
create table t2 (b1 char(8), b2 char(8));

insert into t1 values ('1 - 00', '2 - 00');
insert into t1 values ('1 - 01', '2 - 01');
insert into t1 values ('1 - 02', '2 - 02');

insert into t2 values ('1 - 01', '2 - 01');
insert into t2 values ('1 - 01', '2 - 01');
insert into t2 values ('1 - 02', '2 - 02');
insert into t2 values ('1 - 02', '2 - 02');
insert into t2 values ('1 - 03', '2 - 03');

set @@optimizer_switch="semijoin=off";
prepare st1 from
"select * from t1 where (a1, a2) in (select b1, min(b2) from t2 where b1 > '0' group by b1)";
set @@optimizer_switch="semijoin=on,materialization=off";
execute st1;
set @@optimizer_switch="semijoin=off,materialization=on";
execute st1;

set optimizer_switch='default';
set @@optimizer_switch="materialization=off";
prepare st1 from
"select * from t1 where (a1, a2) in (select b1, min(b2) from t2 where b1 > '0' group by b1)";
set @@optimizer_switch="semijoin=off,materialization=on";
execute st1;
set @@optimizer_switch="semijoin=on,materialization=off";
execute st1;

set optimizer_switch='default';
drop table t1, t2;

--echo #
--echo # BUG#47367 Crash in Name_resolution_context::process_error
--echo #

SET SESSION optimizer_switch = 'default,semijoin=off';
CREATE TABLE t1 (f1 INTEGER);
CREATE TABLE t2 LIKE t1;
delimiter |;
CREATE PROCEDURE p1 () BEGIN SELECT f1 FROM t1 WHERE f1 IN (SELECT f1 FROM t2); END|
delimiter ;|
CALL p1;
ALTER TABLE t2 CHANGE COLUMN f1 my_column INT;
CALL p1;
DROP PROCEDURE p1;
--echo # Restore the original column list of table t2:
ALTER TABLE t2 CHANGE COLUMN my_column f1 INT;

SET SESSION optimizer_switch = 'semijoin=on';
delimiter |;
--echo # Recreate procedure so that we eliminate any caching effects
CREATE PROCEDURE p1 () BEGIN SELECT f1 FROM t1 WHERE f1 IN (SELECT f1 FROM t2); END|
delimiter ;|
CALL p1;
ALTER TABLE t2 CHANGE COLUMN f1 my_column INT;
CALL p1;
DROP PROCEDURE p1;
DROP TABLE t1, t2;
SET SESSION optimizer_switch = 'default';


--echo #
--echo # Bug #46744 Crash in optimize_semijoin_nests on empty view
--echo # with limit and procedure.
--echo #

--disable_warnings
DROP TABLE IF EXISTS t1, t2;
DROP VIEW IF EXISTS v1;
DROP PROCEDURE IF EXISTS p1;
--enable_warnings

CREATE TABLE t1 ( f1 int );
CREATE TABLE t2 ( f1 int );

insert into t2 values (5), (7);

CREATE OR REPLACE VIEW v1 AS SELECT * FROM t1 LIMIT 2;

create procedure p1() 
select COUNT(*) 
FROM v1 WHERE f1 IN 
(SELECT f1 FROM t2 WHERE f1 = ANY (SELECT f1 FROM v1));

SET SESSION optimizer_switch = 'semijoin=on';
CALL p1();
SET SESSION optimizer_switch = 'semijoin=off';
CALL p1();

drop table t1, t2;
drop view v1;
drop procedure p1;

set SESSION optimizer_switch='default';

--echo # End of bug#46744

--echo #
--echo # Bug#50489: another segfault in fix_semijoin_strategies... 
--echo #

CREATE TABLE it (
  id INT NOT NULL,
  expr_key INT NOT NULL,
  expr_nokey INT NOT NULL,
  expr_padder INT DEFAULT NULL,
  KEY expr_key(expr_key)
);
INSERT INTO it VALUES (135,218264606,218264606,100);
INSERT INTO it VALUES (201,810783319,810783319,200);
CREATE TABLE ot (
  id INT NOT NULL,
  expr_key INT NOT NULL,
  expr_nokey INT NOT NULL,
  KEY expr_key(expr_key)
);
delimiter |;
let proc_text=
CREATE PROCEDURE run_n_times(x int)
BEGIN
DECLARE c int;
WHILE x DO
  SET x = x-1;
  SELECT COUNT(expr_key) INTO c FROM ot
  WHERE expr_key IN (SELECT expr_nokey FROM it)
    AND ot.expr_key<100000000;
END WHILE;
END|
delimiter ;|
eval $proc_text;
SET optimizer_switch="default";
call run_n_times(1);
SET optimizer_switch="firstmatch=off,materialization=off";
call run_n_times(1);
SET optimizer_switch="default";
call run_n_times(1);
DROP PROCEDURE run_n_times;

# Re-create procedure to avoid caching effects
eval $proc_text;
SET optimizer_switch="firstmatch=off,materialization=off";
call run_n_times(1);
SET optimizer_switch="default";
call run_n_times(1);
DROP PROCEDURE run_n_times;

# Re-create procedure to avoid caching effects
eval $proc_text;
SET optimizer_switch="semijoin=off,materialization=off";
call run_n_times(1);
SET optimizer_switch="default";
call run_n_times(1);
DROP PROCEDURE run_n_times;

DROP TABLE it, ot;

# End of Bug#50489

--echo # 
--echo # BUG#31480: Incorrect result for nested subquery when executed via semijoin
--echo # 

CREATE TABLE t1 (a INT NOT NULL, b INT NOT NULL);
CREATE TABLE t2 (c INT NOT NULL, d INT NOT NULL);
CREATE TABLE t3 (e INT NOT NULL);
CREATE TABLE t4 (f INT NOT NULL, g INT NOT NULL);

INSERT INTO t1 VALUES (1,10);
INSERT INTO t1 VALUES (2,10);
INSERT INTO t1 VALUES (1,20);
INSERT INTO t1 VALUES (2,20);
INSERT INTO t1 VALUES (3,20);
INSERT INTO t1 VALUES (2,30);
INSERT INTO t1 VALUES (4,40);

INSERT INTO t2 VALUES (2,10);
INSERT INTO t2 VALUES (2,20);
INSERT INTO t2 VALUES (4,10);
INSERT INTO t2 VALUES (5,10);
INSERT INTO t2 VALUES (3,20);
INSERT INTO t2 VALUES (2,40);

INSERT INTO t3 VALUES (10);
INSERT INTO t3 VALUES (30);
INSERT INTO t3 VALUES (10);
INSERT INTO t3 VALUES (20);

INSERT INTO t4 VALUES (2,10);
INSERT INTO t4 VALUES (2,10);
INSERT INTO t4 VALUES (3,10);
INSERT INTO t4 VALUES (4,10);
INSERT INTO t4 VALUES (4,20);
INSERT INTO t4 VALUES (4,20);

--echo # Reference to the parent query block (used tables was wrong)

set @@optimizer_switch='materialization=off,semijoin=off';

let query=
SELECT * FROM t1 AS ta
WHERE ta.a IN (SELECT c FROM t2 AS tb
               WHERE tb.d >= SOME(SELECT e FROM t3 as tc
                                  WHERE ta.b=tc.e));

analyze table t1;
analyze table t2;
analyze table t3;
analyze table t4;
eval EXPLAIN $query;
eval $query;

set @@optimizer_switch='materialization=off,semijoin=on';

eval EXPLAIN $query;
eval $query;

--echo # Subquery with GROUP BY and HAVING

set @@optimizer_switch='materialization=off,semijoin=off';

let query=
SELECT * FROM t1 AS ta
WHERE ta.a IN (SELECT c FROM t2 AS tb
               WHERE tb.d >= SOME(SELECT SUM(g) FROM t4 as tc
                                  GROUP BY f
                                  HAVING ta.a=tc.f));

eval EXPLAIN $query;
eval $query;

set @@optimizer_switch='materialization=off,semijoin=on';

eval EXPLAIN $query;
eval $query;

--echo # Subquery with ORDER BY and LIMIT

set @@optimizer_switch='materialization=off,semijoin=off';

--echo # NOTE: The ordered subquery should have a LIMIT clause to make sense

let query=
SELECT * FROM t1 AS ta
WHERE ta.a IN (SELECT c FROM t2 AS tb
               WHERE tb.d IN (SELECT g FROM t4 as tc
                                  WHERE ta.a=tc.f
                                  ORDER BY tc.f));

eval EXPLAIN $query;
eval $query;

set @@optimizer_switch='materialization=off,semijoin=on';

eval EXPLAIN $query;
eval $query;

--echo # Reference to the transformed-away query block (dependency was wrong)

set @@optimizer_switch='materialization=off,semijoin=off';

let query=
SELECT * FROM t1 AS ta
WHERE ta.a IN (SELECT c FROM t2 AS tb
               WHERE tb.d >= SOME(SELECT e FROM t3 as tc
                                  WHERE tb.d=tc.e));

eval EXPLAIN $query;
--sorted_result
eval $query;

set @@optimizer_switch='materialization=off,semijoin=on';

eval EXPLAIN $query;
--sorted_result
eval $query;

--echo # Reference above the parent query block (should not be affected)

set @@optimizer_switch='materialization=off,semijoin=off';

let query=
SELECT * FROM t1 AS t
WHERE t.a NOT IN (SELECT a FROM t1 AS ta
                  WHERE ta.a IN (SELECT c FROM t2 AS tb
                                 WHERE tb.d >= SOME(SELECT e FROM t3 as tc
                                                    WHERE t.b=tc.e)));

eval EXPLAIN $query;
eval $query;

set @@optimizer_switch='materialization=off,semijoin=on';

eval EXPLAIN $query;
eval $query;

--echo # EXISTS with reference to the parent query block

set @@optimizer_switch='materialization=off,semijoin=off';

let query=
SELECT * FROM t1 AS ta
WHERE ta.a IN (SELECT c FROM t2 AS tb
               WHERE EXISTS (SELECT * FROM t3 as tc
                             WHERE ta.b=tc.e));

eval EXPLAIN $query;
eval $query;

set @@optimizer_switch='materialization=off,semijoin=on';

eval EXPLAIN $query;
--sorted_result
eval $query;

--echo # Scalar subquery with reference to the parent query block

set @@optimizer_switch='materialization=off,semijoin=off';

let query=
SELECT * FROM t1 AS ta
WHERE ta.a IN (SELECT c FROM t2 AS tb
               WHERE tb.d = (SELECT MIN(e) FROM t3 as tc
                             WHERE ta.b=tc.e));

eval EXPLAIN $query;
eval $query;

set @@optimizer_switch='materialization=off,semijoin=on';

eval EXPLAIN $query;
eval $query;

--echo # Combine scalar subquery with quantified comparison subquery

set @@optimizer_switch='materialization=off,semijoin=off';

let query=
SELECT * FROM t1 AS ta
WHERE ta.a IN (SELECT c FROM t2 AS tb
               WHERE (SELECT MIN(e) FROM t3 as tc
                      WHERE tb.d=tc.e) < SOME(SELECT e FROM t3 as tc
                                              WHERE ta.b=tc.e));

eval EXPLAIN $query;
eval $query;

set @@optimizer_switch='materialization=off,semijoin=on';

eval EXPLAIN $query;
eval $query;

DROP TABLE t1, t2, t3, t4;

set @@optimizer_switch='default';

--echo # End of BUG#31480
