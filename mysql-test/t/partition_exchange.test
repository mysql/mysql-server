--echo #
--echo # Bug#11894100: EXCHANGE PARTITION CAN'T BE EXECUTED IF
--echo #               ROW_FORMAT WAS SET EXPLICITLY
--echo #
SET sql_mode = 'NO_ENGINE_SUBSTITUTION';
--echo # Same definition (both have ROW_FORMAT set)

# We cannot add ROW_FORMAT=compact to the second CREATE TABLE t2 statement
# because it is about not having ROW_FORMAT keyword to CREATE TABLE.
SET GLOBAL innodb_default_row_format=compact;

CREATE TABLE t1 (
 id int(11) NOT NULL AUTO_INCREMENT,
 year year(4) DEFAULT NULL,
 modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
 PRIMARY KEY (id)
) ENGINE=InnoDB ROW_FORMAT=COMPACT
PARTITION BY HASH (id)
PARTITIONS 2;

CREATE TABLE t2 LIKE t1;
ALTER TABLE t2 REMOVE PARTITIONING;

--vertical_results
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;

SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONS
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');

ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONS
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');

DROP TABLE t2;

--echo # Only the partitioned table have ROW_FORMAT set.
CREATE TABLE t2 (
 id int(11) NOT NULL AUTO_INCREMENT,
 year year(4) DEFAULT NULL,
 modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
 PRIMARY KEY (id)
) ENGINE=InnoDB;

ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONS
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');

--echo # Only the non partitioned table have ROW_FORMAT set.
DROP TABLE t1, t2;
CREATE TABLE t1 (
 id int(11) NOT NULL AUTO_INCREMENT,
 year year(4) DEFAULT NULL,
 modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
 PRIMARY KEY (id)
) ENGINE=InnoDB
PARTITION BY HASH (id)
PARTITIONS 2;
CREATE TABLE t2 (
 id int(11) NOT NULL AUTO_INCREMENT,
 year year(4) DEFAULT NULL,
 modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
 PRIMARY KEY (id)
) ENGINE=InnoDB ROW_FORMAT = COMPACT;

ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONS
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');

--echo # No table have ROW_FORMAT set.
DROP TABLE t1, t2;
CREATE TABLE t1 (
 id int(11) NOT NULL AUTO_INCREMENT,
 year year(4) DEFAULT NULL,
 modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
 PRIMARY KEY (id)
) ENGINE=InnoDB
PARTITION BY HASH (id)
PARTITIONS 2;
CREATE TABLE t2 (
 id int(11) NOT NULL AUTO_INCREMENT,
 year year(4) DEFAULT NULL,
 modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
 PRIMARY KEY (id)
) ENGINE=InnoDB;

ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONS
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');

--echo # Not same ROW_FORMAT as default (but same).
DROP TABLE t1, t2;
CREATE TABLE t1 (
 id int(11) NOT NULL AUTO_INCREMENT,
 year year(4) DEFAULT NULL,
 modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
 PRIMARY KEY (id)
) ENGINE=InnoDB ROW_FORMAT = REDUNDANT
PARTITION BY HASH (id)
PARTITIONS 2;
CREATE TABLE t2 (
 id int(11) NOT NULL AUTO_INCREMENT,
 year year(4) DEFAULT NULL,
 modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
 PRIMARY KEY (id)
) ENGINE=InnoDB ROW_FORMAT = REDUNDANT;

ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONS
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');

--echo # Not same ROW_FORMAT as default (tables differs).
DROP TABLE t1, t2;
CREATE TABLE t1 (
 id int(11) NOT NULL AUTO_INCREMENT,
 year year(4) DEFAULT NULL,
 modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
 PRIMARY KEY (id)
) ENGINE=InnoDB
PARTITION BY HASH (id)
PARTITIONS 2;
CREATE TABLE t2 (
 id int(11) NOT NULL AUTO_INCREMENT,
 year year(4) DEFAULT NULL,
 modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
 PRIMARY KEY (id)
) ENGINE=InnoDB ROW_FORMAT = REDUNDANT;

--error ER_PARTITION_EXCHANGE_DIFFERENT_OPTION
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONS
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');

--echo # Different than default (forced ROW_TYPE)
DROP TABLE t1, t2;
CREATE TABLE t1 (
 id int(11) NOT NULL AUTO_INCREMENT,
 year year(4) DEFAULT NULL,
 modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
 PRIMARY KEY (id)
) ENGINE=InnoDB ROW_FORMAT = COMPACT
PARTITION BY HASH (id)
PARTITIONS 2;
CREATE TABLE t2 (
 id int(11) NOT NULL AUTO_INCREMENT,
 year year(4) DEFAULT NULL,
 modified timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
 PRIMARY KEY (id)
) ENGINE=InnoDB ROW_FORMAT = REDUNDANT;

--error ER_PARTITION_EXCHANGE_DIFFERENT_OPTION
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
SHOW CREATE TABLE t1;
SHOW CREATE TABLE t2;
SELECT TABLE_NAME, TABLE_TYPE, ENGINE, ROW_FORMAT, CREATE_OPTIONS
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_SCHEMA = 'test' AND TABLE_NAME IN ('t1', 't2');
--horizontal_results
DROP TABLE t1, t2;

--echo #
--echo # Bug #28235668: ASSERTION AT UT_DBG_ASSERTION_FAILED (EXPR=0X5173C5C "J < NCOL"
--echo #

--echo # Create a partitioned table with virtual columns
CREATE TABLE t1_1 (
  `col1` int(11) DEFAULT NULL,
  `col2` int(11) DEFAULT NULL,
  `col3` int(11) DEFAULT NULL,
  `col4` text,
  `col5` varchar(500) GENERATED ALWAYS AS (substr(`col4`,1,500)) VIRTUAL,
  `col6` text GENERATED ALWAYS AS (substr(`col4`,1,500)) VIRTUAL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
/*!50100 PARTITION BY RANGE ((`col1` * 2))
(PARTITION p0 VALUES LESS THAN (128) ENGINE = InnoDB,
 PARTITION p1 VALUES LESS THAN (256) ENGINE = InnoDB,
 PARTITION p2 VALUES LESS THAN (384) ENGINE = InnoDB,
 PARTITION p3 VALUES LESS THAN MAXVALUE ENGINE = InnoDB) */;

--echo # "Clone" table using AS SELECT ...
CREATE TABLE temp25058 AS SELECT * FROM t1_1 WHERE 1 <> 1;

SHOW CREATE TABLE temp25058;

--echo # Select from this table is ok - no error
SELECT * FROM temp25058;

--echo # Exchanging dissimilar tables is not a supported action for
--echo # tables with generated columns.
--error ER_UNSUPPORTED_ACTION_ON_GENERATED_COLUMN
ALTER TABLE t1_1 ALGORITHM DEFAULT , LOCK SHARED ,
EXCHANGE PARTITION p2 WITH TABLE temp25058;

--echo # No viritual columns in Innodb or DD
SHOW CREATE TABLE temp25058;

--echo # No viritual columns in Innodb or DD
SELECT * FROM temp25058;

DROP TABLE temp25058;
DROP TABLE t1_1;

--echo #
--echo # Bug#56484: !table || (!table->read_set ||
--echo #                       bitmap_is_set(table->read_set, field_index))
--echo # After WL#8971, the test case was rewritten to use InnoDB.
--echo #

CREATE TABLE t1 (a INT NOT NULL, b TIME NOT NULL DEFAULT '00:00:00')
ENGINE=InnoDB
PARTITION BY HASH (a) PARTITIONS 2;

CREATE TABLE t2 (a INT) ENGINE=InnoDB;
--error ER_TABLES_DIFFERENT_METADATA
ALTER TABLE t1 EXCHANGE PARTITION p1 WITH TABLE t2;
DROP TABLE t1, t2;

--echo #
--echo # Bug#55784: Foreign key integrity broken by alter table
--echo #
CREATE TABLE t1 (s1 INT PRIMARY KEY) ENGINE=InnoDB;

CREATE TABLE t2 (s1 INT, FOREIGN KEY (s1) REFERENCES t1 (s1)) ENGINE=InnoDB;

INSERT INTO t1 VALUES (1),(2),(3);

INSERT INTO t2 VALUES (1),(2),(3);

CREATE TABLE t3 (s1 INT PRIMARY KEY)
  ENGINE=InnoDB
  PARTITION BY LIST (s1)
  (PARTITION p1 VALUES IN (1,2,3));

--error ER_PARTITION_EXCHANGE_FOREIGN_KEY
ALTER TABLE t3 EXCHANGE PARTITION p1 WITH TABLE t1;

DROP TABLE t2, t1, t3;

--echo # Tests for WL#4445
CREATE TABLE t (a INT,
  b VARCHAR(55),
  PRIMARY KEY (a));

CREATE TABLE tp (a INT,
  b VARCHAR(55),
  PRIMARY KEY (a))
PARTITION BY RANGE (a)
(PARTITION p0 VALUES LESS THAN (100),
 PARTITION p1 VALUES LESS THAN MAXVALUE);

CREATE TABLE tsp (a INT,
  b VARCHAR(55),
  PRIMARY KEY (a))
PARTITION BY RANGE (a)
SUBPARTITION BY HASH(a)
(PARTITION p0 VALUES LESS THAN (100)
 (SUBPARTITION sp0,
  SUBPARTITION sp1),
 PARTITION p1 VALUES LESS THAN MAXVALUE
 (SUBPARTITION sp2,
  SUBPARTITION sp3));

INSERT INTO t VALUES (1, "First value"), (3, "Three"), (5, "Five"), (99, "End of values");
INSERT INTO tp VALUES (2, "First value"), (10, "Ten"), (50, "Fifty"), (200, "Two hundred, end of values"), (61, "Sixty one"), (62, "Sixty two"), (63, "Sixty three"), (64, "Sixty four"), (161, "161"), (162, "162"), (163, "163"), (164, "164");
INSERT INTO tsp VALUES (2, "First value"), (10, "Ten"), (50, "Fifty"), (200, "Two hundred, end of values"), (61, "Sixty one"), (62, "Sixty two"), (63, "Sixty three"), (64, "Sixty four"), (161, "161"), (162, "162"), (163, "163"), (164, "164");
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
--sorted_result
SELECT * FROM t;
--sorted_result
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
--sorted_result
SELECT * FROM t;
--sorted_result
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
--sorted_result
SELECT * FROM t;
--sorted_result
SELECT * FROM tp;
--error ER_ROW_DOES_NOT_MATCH_PARTITION
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
--sorted_result
SELECT * FROM t;
--sorted_result
SELECT * FROM tp;
--echo # Test list of partitions
--error ER_PARSE_ERROR
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t IGNORE;
--error ER_PARSE_ERROR
ALTER TABLE tp EXCHANGE PARTITION p0,p1 WITH TABLE t IGNORE;
--error ER_PARSE_ERROR
ALTER TABLE tp EXCHANGE PARTITION p0,p1 WITH TABLE t;
--error ER_PARSE_ERROR
ALTER TABLE tp EXCHANGE PARTITION (p0,p1) WITH TABLE t;
--error ER_PARSE_ERROR
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE (t,t2);
--error ER_PARSE_ERROR
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t,t2;
--error ER_UNKNOWN_PARTITION
ALTER TABLE tp EXCHANGE PARTITION non_existent WITH TABLE t;
--error ER_PARTITION_INSTEAD_OF_SUBPARTITION
ALTER TABLE tsp EXCHANGE PARTITION p0 WITH TABLE t;
--error ER_PARTITION_EXCHANGE_PART_TABLE
ALTER TABLE tsp EXCHANGE PARTITION sp0 WITH TABLE tp;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
SHOW CREATE TABLE tsp;
--sorted_result
SELECT * FROM t;
--sorted_result
SELECT * FROM tp;
--echo # Test exchange partition
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
--sorted_result
SELECT * FROM t;
--sorted_result
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
--sorted_result
SELECT * FROM t;
--sorted_result
SELECT * FROM tp;
--echo # Test exchange subpartition
ALTER TABLE tsp EXCHANGE PARTITION sp1 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tsp;
--sorted_result
SELECT * FROM t;
--sorted_result
SELECT * FROM tsp;
ALTER TABLE tsp EXCHANGE PARTITION sp1 WITH TABLE t;
ALTER TABLE t ENGINE = InnoDB;
ALTER TABLE tp ENGINE = InnoDB;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
--sorted_result
SELECT * FROM t;
--sorted_result
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
--sorted_result
SELECT * FROM t;
--sorted_result
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;

--echo # Test different charsets
CREATE TABLE tmp LIKE t;
INSERT INTO tmp SELECT * FROM t;
RENAME TABLE t TO tmp2, tmp TO t;
ALTER TABLE t CHARACTER SET = koi8r COLLATE koi8r_general_ci;
--error ER_PARTITION_EXCHANGE_DIFFERENT_OPTION
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
DROP TABLE t;
--echo # Test multiple different table options
CREATE TABLE t (a INT,
  b VARCHAR(55),
  PRIMARY KEY (a))
MAX_ROWS = 100000 MIN_ROWS = 1000;
INSERT INTO t SELECT * FROM tmp2;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
--error ER_PARTITION_EXCHANGE_DIFFERENT_OPTION
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW WARNINGS;
DROP TABLE t;
RENAME TABLE tmp2 TO t;
# test different keys
ALTER TABLE t ADD KEY ba_key (b, a);
ALTER TABLE tp ADD KEY ba_key (b, a);
ALTER TABLE tsp ADD KEY ba_key (b, a);
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
--sorted_result
SELECT * FROM t;
--sorted_result
SELECT * FROM tp;
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
ALTER TABLE t DROP KEY ba_key;
--error ER_TABLES_DIFFERENT_METADATA
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
ALTER TABLE t ADD KEY b_key (b);
--error ER_TABLES_DIFFERENT_METADATA
ALTER TABLE tsp EXCHANGE PARTITION sp1 WITH TABLE t;
ALTER TABLE t ADD KEY ba_key (b, a);
ALTER TABLE t DROP KEY b_key;
# test different index types
# test different columns
ALTER TABLE t CHANGE a c INT;
--error ER_TABLES_DIFFERENT_METADATA
ALTER TABLE tsp EXCHANGE PARTITION sp1 WITH TABLE t;
ALTER TABLE t CHANGE c a INT;
# test different data/index dir
# test different options (row_format, max/min_rows, comments, tablespace,
#                         pack_keys, delay_key_write, checksum etc.
# test foreign keys
--echo # test temporary table
CREATE TEMPORARY TABLE tmp LIKE t;
INSERT INTO tmp SELECT * FROM t;
ALTER TABLE t RENAME TO tmp2;
ALTER TABLE tmp RENAME TO t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
--error ER_PARTITION_EXCHANGE_TEMP_TABLE
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
DROP TEMPORARY TABLE t;
ALTER TABLE tmp2 RENAME TO t;
--echo # Test non partitioned table
ALTER TABLE tp REMOVE PARTITIONING;
--error ER_PARTITION_MGMT_ON_NONPARTITIONED
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;

# TODO:
# Verify that it is possible to read a table that is going to be exchanged
# (but not write)
# Verify that it is possible to both read and write to the partition that is
# going to be exchanged
# test mdl locking (i.e. together with transactions and other ddl)
# Add test in lc_0-2 to make sure renameing operators is ok with different lc
# Add test to exchange between databases, also check grants.
# Add test for privileges
# check if correct error whithout partitioning support
DROP TABLE t, tp, tsp;

--echo # Test with LOCK TABLE
# Test with only one table locked at a time, both table locked + read, write

CREATE TABLE tp
(a VARCHAR(24),
 b DATETIME,
 PRIMARY KEY (a,b))
PARTITION BY RANGE COLUMNS (a, b)
(PARTITION p0 VALUES LESS THAN ("Middle", '0000-00-00'),
 PARTITION p1 VALUES LESS THAN (MAXVALUE, '9999-12-31 23:59:59'));
CREATE TABLE t LIKE tp;
ALTER TABLE t REMOVE PARTITIONING;
CREATE TABLE t2 LIKE t;
INSERT INTO tp VALUES ("First in tp", '2000-01-02 03:04:25'), ("Zebra in tp", '0000-00-00 00:00:00'), ("Second in tp", '2010-01-01 05:12:24');
INSERT INTO t VALUES ("First in t", '2000-01-02 03:04:25'), ("a test in t", '0000-00-00 00:00:00'), ("Echo in t", '2010-01-01 05:12:24');
# 3 different kind of locks (none, READ, WRITE) for three different tables.
# 3^3 = 18. The variant with no locks does not need testing -> 17
let $count = 17;
while ($count)
{
let $t_lock = `SELECT (CASE ($count % 3) WHEN 0 THEN 0 WHEN 1 THEN 'WRITE' WHEN 2 THEN 'READ' END)`;
let $tp_lock = `SELECT (CASE ((($count + 2) DIV 3) % 3) WHEN 0 THEN 0 WHEN 1 THEN 'WRITE' WHEN 2 THEN 'READ' END)`;
let $t2_lock = `SELECT (CASE ((($count + 8) DIV 9) % 3) WHEN 0 THEN 0 WHEN 1 THEN 'WRITE' WHEN 2 THEN 'READ' END)`;
--echo # tp_lock '$tp_lock' t_lock '$t_lock' t2_lock '$t2_lock' count '$count'
let $lock_cmd = LOCK TABLE;
let $take_lock = 0;
if ($t_lock)
{
  let $lock_cmd = $lock_cmd t $t_lock;
  let $take_lock = 1;
}
if ($tp_lock)
{
  if ($take_lock)
  {
    let $lock_cmd = $lock_cmd, tp $tp_lock;
  }
  if (!$take_lock)
  {
    let $lock_cmd = $lock_cmd tp $tp_lock;
  }
  let $take_lock = 1;
}
if ($t2_lock)
{
  if ($take_lock)
  {
    let $lock_cmd = $lock_cmd, t2 $t2_lock;
  }
  if (!$take_lock)
  {
    let $lock_cmd = $lock_cmd t2 $t2_lock;
  }
  let $take_lock = 1;
}
if ($take_lock)
{
  eval $lock_cmd;
}
--error 0, ER_TABLE_NOT_LOCKED, ER_TABLE_NOT_LOCKED_FOR_WRITE
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t;
SHOW WARNINGS;
--error 0, ER_TABLE_NOT_LOCKED, ER_TABLE_NOT_LOCKED_FOR_WRITE
ALTER TABLE tp EXCHANGE PARTITION p0 WITH TABLE t2;
SHOW WARNINGS;
UNLOCK TABLES;
dec $count;
}
DROP TABLE t, t2, tp;

--echo #
--echo # Tests for WL#5630: Allow EXCHANGE PARTITION WITHOUT VALIDATION
--echo #
CREATE TABLE t (a INT,
  b VARCHAR(55),
  PRIMARY KEY (a));

CREATE TABLE tp (a INT,
  b VARCHAR(55),
  PRIMARY KEY (a))
PARTITION BY RANGE (a)
(PARTITION p0 VALUES LESS THAN (100),
 PARTITION p1 VALUES LESS THAN MAXVALUE);

CREATE TABLE tsp (a INT,
  b VARCHAR(55),
  PRIMARY KEY (a))
PARTITION BY RANGE (a)
SUBPARTITION BY HASH(a)
(PARTITION p0 VALUES LESS THAN (100)
 (SUBPARTITION sp0,
  SUBPARTITION sp1),
 PARTITION p1 VALUES LESS THAN MAXVALUE
 (SUBPARTITION sp2,
  SUBPARTITION sp3));

INSERT INTO t VALUES (1, "First value"), (3, "Three"), (5, "Five"),
                     (6, "Six"), (8, "Eight"), (99, "End of values");
INSERT INTO tp VALUES (2, "First value"), (10, "Ten"), (50, "Fifty"),
(200, "Two hundred, end of values"), (61, "Sixty one"), (62, "Sixty two"),
(63, "Sixty three"), (64, "Sixty four"), (161, "161"), (162, "162"),
(163, "163"), (164, "164");
INSERT INTO tsp VALUES (2, "First value"), (10, "Ten"), (50, "Fifty"),
(200, "Two hundred, end of values"), (61, "Sixty one"), (62, "Sixty two"),
(63, "Sixty three"), (64, "Sixty four"), (161, "161"), (162, "162"),
(163, "163"), (164, "164");
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
--sorted_result
SELECT * FROM t;
--sorted_result
SELECT * FROM tp PARTITION (p0);
--sorted_result
SELECT * FROM tp PARTITION (p1);

# FR1
--error ER_ROW_DOES_NOT_MATCH_PARTITION
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t;
--error ER_ROW_DOES_NOT_MATCH_PARTITION
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t WITH VALIDATION;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t WITHOUT VALIDATION;
--sorted_result
SELECT * FROM t;
--sorted_result
SELECT * FROM tp PARTITION (p0);
--sorted_result
SELECT * FROM tp PARTITION (p1);
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;
--echo # No need to use WITHOUT VALIDATION on the original partition
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t;
--sorted_result
SELECT * FROM t;
--sorted_result
SELECT * FROM tp PARTITION (p0);
--sorted_result
SELECT * FROM tp PARTITION (p1);
SHOW CREATE TABLE t;
SHOW CREATE TABLE tp;

--echo # Test exchange subpartition WITHOUT VALIDATION
--sorted_result
SELECT * FROM t;
--sorted_result
SELECT * FROM tsp PARTITION (sp3);
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t WITHOUT VALIDATION;
SHOW CREATE TABLE t;
SHOW CREATE TABLE tsp;
--sorted_result
SELECT * FROM t;
--sorted_result
SELECT * FROM tsp PARTITION (sp3);
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t;
--sorted_result
SELECT * FROM t;
--sorted_result
SELECT * FROM tsp PARTITION (sp3);
SHOW CREATE TABLE t;
SHOW CREATE TABLE tsp;

--echo # Test MANAGEMENT of partition with misplaced rows
call mtr.add_suppression("row in wrong partition:");
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t WITHOUT VALIDATION;
--sorted_result
SELECT * FROM tp PARTITION (p0);
SELECT * FROM tp PARTITION (p1);
--error ER_ROW_IN_WRONG_PARTITION
ALTER TABLE tp REBUILD PARTITION p1;
--error ER_ROW_IN_WRONG_PARTITION
ALTER TABLE tp REORGANIZE PARTITION p1 INTO
(PARTITION p1 VALUES LESS THAN (162),
 PARTITION p2 VALUES LESS THAN MAXVALUE);
ALTER TABLE tp ANALYZE PARTITION p1;
ALTER TABLE tp OPTIMIZE PARTITION p1;

--echo # Test REBUILD of partition (with subpartitions) with misplaced rows
--echo # half of the rows match sp3 and the other half match sp2
--echo # with duplicates!
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t WITHOUT VALIDATION;
SELECT * FROM tsp PARTITION (sp2);
SELECT * FROM tsp PARTITION (sp3);
call mtr.add_suppression("Cannot find index .PRIMARY. in InnoDB index translation table.");
--error ER_DUP_ENTRY,ER_DUP_KEY
ALTER TABLE tsp REBUILD PARTITION p1;
--error ER_DUP_ENTRY,ER_DUP_KEY
ALTER TABLE tsp REORGANIZE PARTITION p1 INTO
(PARTITION p1 VALUES LESS THAN (162),
 PARTITION p2 VALUES LESS THAN MAXVALUE);
ALTER TABLE tsp ANALYZE PARTITION sp3;
ALTER TABLE tsp OPTIMIZE PARTITION sp3;
SELECT * FROM tsp PARTITION (sp2);
SELECT * FROM tsp PARTITION (sp3);

--echo # Test with REBUILD where the rows does not match the current partition
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t;
ALTER TABLE tp EXCHANGE PARTITION p1 WITH TABLE t;
ALTER TABLE tsp EXCHANGE PARTITION sp3 WITH TABLE t WITHOUT VALIDATION;
SELECT * FROM tsp PARTITION (sp2);
SELECT * FROM tsp PARTITION (sp3);
--error ER_ROW_IN_WRONG_PARTITION
ALTER TABLE tsp REBUILD PARTITION p1;
--error ER_ROW_IN_WRONG_PARTITION
ALTER TABLE tsp REORGANIZE PARTITION p1 INTO
(PARTITION p1 VALUES LESS THAN (162),
 PARTITION p2 VALUES LESS THAN MAXVALUE);
--error ER_ROW_IN_WRONG_PARTITION
ALTER TABLE tsp REORGANIZE PARTITION p1 INTO
(PARTITION p01 VALUES LESS THAN (162)
 (SUBPARTITION sp01,
  SUBPARTITION sp02),
 PARTITION p02 VALUES LESS THAN MAXVALUE
 (SUBPARTITION sp03,
  SUBPARTITION sp04));
ALTER TABLE tsp ANALYZE PARTITION sp3;
ALTER TABLE tsp OPTIMIZE PARTITION sp3;
SELECT * FROM tsp PARTITION (sp2);
SELECT * FROM tsp PARTITION (sp3);
--echo # Test with REBUILD where the rows does not match the current partition

DROP TABLE t, tp, tsp;

SET sql_mode = default;
SET GLOBAL innodb_default_row_format=default;
--echo #
--echo # Bug#19730200: EXCHANGE PARTITION FOR PARTITION WITH DATA DIRECTORY
--echo #
--mkdir $MYSQL_TMP_DIR/t1_dir
--mkdir $MYSQL_TMP_DIR/p1_dir
--mkdir $MYSQL_TMP_DIR/p2_dir
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
eval CREATE TABLE t1 (a int unsigned auto_increment primary key, b varchar(64))
ENGINE = InnoDB
DATA DIRECTORY = '$MYSQL_TMP_DIR/t1_dir';
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
eval CREATE TABLE t2 (a int unsigned auto_increment primary key, b varchar(64))
ENGINE = InnoDB
PARTITION BY LIST (a)
(PARTITION p1 VALUES IN (1,3,5,7,9) DATA DIRECTORY = '$MYSQL_TMP_DIR/p1_dir',
 PARTITION p2 VALUES IN (0,2,4,6,8) DATA DIRECTORY = '$MYSQL_TMP_DIR/p2_dir');
INSERT INTO t1 VALUES (1, "t1"), (5, "t1");
INSERT INTO t2 VALUES (3, "p1"), (4, "p2"), (7, "p1"), (8, "p2");
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
SHOW CREATE TABLE t1;
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
SHOW CREATE TABLE t2;
--echo # List files from t1_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/t1_dir/test
--echo # List files from p1_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/p1_dir/test
--echo # List files from p2_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/p2_dir/test
ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;
SELECT * FROM t1;
SELECT * FROM t2;
--echo # List files from t1_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/t1_dir/test
--echo # List files from p1_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/p1_dir/test
--echo # List files from p2_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/p2_dir/test
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
SHOW CREATE TABLE t1;
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
SHOW CREATE TABLE t2;
FLUSH TABLES t1, t2;
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
SHOW CREATE TABLE t1;
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
SHOW CREATE TABLE t1;
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
SHOW CREATE TABLE t2;
--echo # List files from t1_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/t1_dir/test
--echo # List files from p1_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/p1_dir/test
--echo # List files from p2_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/p2_dir/test
DROP TABLE t1, t2;
--echo # exchage partition with data dir and range
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
eval CREATE TABLE t1 (a int unsigned auto_increment primary key, b varchar(64))
ENGINE = InnoDB
DATA DIRECTORY = '$MYSQL_TMP_DIR/t1_dir';
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
eval CREATE TABLE t2 (a int unsigned auto_increment primary key, b varchar(64))
ENGINE = InnoDB
PARTITION BY range (a)
(PARTITION p1 VALUES less than (10) DATA DIRECTORY = '$MYSQL_TMP_DIR/p1_dir',
 PARTITION p2 VALUES less than (20) DATA DIRECTORY = '$MYSQL_TMP_DIR/p2_dir');
INSERT INTO t1 VALUES (1, "t1"), (5, "t1");
INSERT INTO t2 VALUES (3, "p1"), (4, "p2"), (17, "p1"), (12, "p2");
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
SHOW CREATE TABLE t1;
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
SHOW CREATE TABLE t2;
--echo # List files from t1_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/t1_dir/test
--echo # List files from p1_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/p1_dir/test
--echo # List files from p2_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/p2_dir/test
ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;
SELECT * FROM t1;
SELECT * FROM t2;
--echo # List files from t1_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/t1_dir/test
--echo # List files from p1_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/p1_dir/test
--echo # List files from p2_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/p2_dir/test
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
SHOW CREATE TABLE t1;
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
SHOW CREATE TABLE t2;
FLUSH TABLES t1, t2;
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
SHOW CREATE TABLE t1;
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
SHOW CREATE TABLE t1;
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
SHOW CREATE TABLE t2;
--echo # List files from t1_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/t1_dir/test
--echo # List files from p1_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/p1_dir/test
--echo # List files from p2_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/p2_dir/test
DROP table t1,t2;
--rmdir $mysql_tmp_dir/t1_dir/test
--rmdir $mysql_tmp_dir/p1_dir/test
--rmdir $mysql_tmp_dir/p2_dir/test
--rmdir $mysql_tmp_dir/t1_dir
--rmdir $mysql_tmp_dir/p1_dir
--rmdir $mysql_tmp_dir/p2_dir
--echo exchange subpartition

--mkdir $MYSQL_TMP_DIR/t1_dir
--mkdir $MYSQL_TMP_DIR/sp0_dir
--mkdir $MYSQL_TMP_DIR/sp3_dir
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
eval CREATE TABLE t1 (id INT, purchased DATE)
ENGINE = InnoDB
DATA DIRECTORY = '$MYSQL_TMP_DIR/t1_dir';
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
eval CREATE TABLE t2 (id INT, purchased DATE)
PARTITION BY RANGE( YEAR(purchased) )
SUBPARTITION BY HASH( TO_DAYS(purchased) ) (
PARTITION p0 VALUES LESS THAN (1990) (
SUBPARTITION s0 data directory='$MYSQL_TMP_DIR/sp0_dir',
SUBPARTITION s1),
PARTITION p1 VALUES LESS THAN (2000) (
SUBPARTITION s2,
SUBPARTITION s3 data directory='$MYSQL_TMP_DIR/sp3_dir'
));
insert into t2 values(1,'1987-05-12 '),(2,'1987-05-14');
insert into t2 values(3,'1997-05-10 '),(4,'1997-05-18');
insert into t1 values(1,'1987-05-10 '),(2,'1987-05-08');
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
SHOW CREATE TABLE t1;
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
SHOW CREATE TABLE t2;
--echo # List files from t1_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/t1_dir/test
--echo # List files from sp0_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/sp0_dir/test
--echo # List files from sp3_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/sp3_dir/test
ALTER TABLE t2 EXCHANGE PARTITION s0 WITH TABLE t1;
SELECT * FROM t1;
SELECT * FROM t2;
--echo # List files from t1_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/t1_dir/test
--echo # List files from sp0_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/sp0_dir/test
--echo # List files from sp3_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/sp3_dir/test
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
SHOW CREATE TABLE t1;
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION s0 WITH TABLE t1;
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
SHOW CREATE TABLE t1;
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
SHOW CREATE TABLE t2;
--echo # List files from t1_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/t1_dir/test
--echo # List files from sp0_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/sp0_dir/test
--echo # List files from sp3_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/sp3_dir/test
delete from t1;
insert into t1 values(3,'1997-05-8 '),(4,'1997-05-16');
ALTER TABLE t2 EXCHANGE PARTITION s3 WITH TABLE t1;
SELECT * FROM t1;
SELECT * FROM t2;
--echo # List files from t1_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/t1_dir/test
--echo # List files from sp0_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/sp0_dir/test
--echo # List files from sp3_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/sp3_dir/test
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
SHOW CREATE TABLE t1;
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
SHOW CREATE TABLE t2;
ALTER TABLE t2 EXCHANGE PARTITION s3 WITH TABLE t1;
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
SHOW CREATE TABLE t1;
--replace_result $MYSQL_TMP_DIR MYSQL_TMP_DIR
SHOW CREATE TABLE t2;
--echo # List files from t1_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/t1_dir/test
--echo # List files from sp0_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/sp0_dir/test
--echo # List files from sp3_dir/test
--replace_result #p# #P# #sp# #SP#
--list_files $MYSQL_TMP_DIR/sp3_dir/test
DROP table t1,t2;
--rmdir $mysql_tmp_dir/t1_dir/test
--rmdir $mysql_tmp_dir/sp0_dir/test
--rmdir $mysql_tmp_dir/sp3_dir/test
--rmdir $mysql_tmp_dir/t1_dir
--rmdir $mysql_tmp_dir/sp0_dir
--rmdir $mysql_tmp_dir/sp3_dir


--echo check table_id after exchange partition
CREATE TABLE t1 (a INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, b VARCHAR(64)) ENGINE = INNODB ;

CREATE TABLE t2 (a INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, b VARCHAR(64)) ENGINE = INNODB PARTITION BY LIST (a) (PARTITION p1 VALUES IN (1,3,5,7,9) ,PARTITION p2 VALUES IN (0,2,4,6,8) );

### table_id swaps with test/t1
let $table_id_before_exchange = `SELECT table_id FROM INFORMATION_SCHEMA.INNODB_TABLES WHERE NAME LIKE '%test%t1%'`;

ALTER TABLE t2 EXCHANGE PARTITION p1 WITH TABLE t1;

let  $table_id_after_exchange = `SELECT DISTINCT TABLE_ID FROM INFORMATION_SCHEMA.INNODB_COLUMNS WHERE TABLE_ID IN (SELECT TABLE_ID FROM INFORMATION_SCHEMA.INNODB_TABLES WHERE NAME LIKE '%test%t2%')`;

--let $assert_cond = $table_id_before_exchange = $table_id_after_exchange
--let $assert_text = Table id of t2 exchanged with t1
--source include/assert.inc

-- echo add column after exchange partition
ALTER TABLE t2 ADD COLUMN j INT,ALGORITHM=INSTANT;
ALTER TABLE t2 ADD COLUMN k INT,ALGORITHM=COPY;

 DROP TABLE t1,t2;

 --echo exchange second partition
CREATE TABLE t1 (a INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, b VARCHAR(64)) ENGINE = INNODB ;

CREATE TABLE t2 (a INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, b VARCHAR(64)) ENGINE = INNODB PARTITION BY LIST (a) (PARTITION p1 VALUES IN (1,3,5,7,9) ,PARTITION p2 VALUES IN (0,2,4,6,8) );


### table id remains same when changing other than first partition
let $table_id_before_exchange = `SELECT TABLE_ID FROM INFORMATION_SCHEMA.INNODB_TABLES WHERE NAME LIKE '%test%t2%p1' OR NAME LIKE '%test%t2%p1'`;

ALTER TABLE t2 EXCHANGE PARTITION p2 WITH TABLE t1;

let  $table_id_after_exchange = `SELECT DISTINCT TABLE_ID FROM INFORMATION_SCHEMA.INNODB_COLUMNS WHERE TABLE_ID IN (SELECT TABLE_ID FROM INFORMATION_SCHEMA.INNODB_TABLES WHERE NAME LIKE '%test%t2%')`;

--let $assert_cond = $table_id_before_exchange = $table_id_after_exchange
--let $assert_text = Table id of t2  is same after exchange it's 2nd partition with table t1
--source include/assert.inc

-- echo add column after exchange partition
ALTER TABLE t2 ADD COLUMN j INT,ALGORITHM=INSTANT;
ALTER TABLE t2 ADD COLUMN k INT,ALGORITHM=COPY;

DROP TABLE t1,t2;

--echo #
--echo Bug#28687608 exchange partition with different row_format
--echo #

SET @orig_default_row_format = @@global.innodb_default_row_format;

SET GLOBAL innodb_default_row_format=COMPACT;
CREATE TABLE t1 (
  col1 INT UNSIGNED,
  col2 DATETIME
)
ENGINE=INNODB
PARTITION BY RANGE COLUMNS(col2)
(
PARTITION p0 VALUES LESS THAN ('1960-01-01'),
PARTITION p1 VALUES LESS THAN ('1980-01-01')
);

INSERT INTO t1 VALUES ('1','1958-02-17 06:25:34');
INSERT INTO t1 VALUES ('2','1962-11-23 11:06:06');

SET GLOBAL innodb_default_row_format=DYNAMIC;

ALTER TABLE t1 ADD PARTITION (PARTITION p2 VALUES LESS THAN ('2000-01-01'));

INSERT INTO t1 VALUES ('3','1999-10-13 05:28:46'), ('4', '1996-09-26 20:00:00');

--replace_result #p# #P# #sp# #SP#
SELECT NAME,ROW_FORMAT  FROM INFORMATION_SCHEMA.INNODB_TABLES
WHERE NAME LIKE '%t1%' ORDER BY TABLE_ID;

CREATE TABLE t2 LIKE t1;
ALTER TABLE t2 REMOVE PARTITIONING;

--echo exchange compact partition with dynamic;

--error ER_PARTITION_EXCHANGE_DIFFERENT_OPTION
ALTER TABLE t1 EXCHANGE PARTITION p0 WITH TABLE t2;

ALTER TABLE t1 EXCHANGE PARTITION p2 WITH TABLE t2;
DROP TABLE t1,t2;

SET GLOBAL innodb_default_row_format=COMPACT;
CREATE TABLE t1 (a INT,
  b VARCHAR(55),
  PRIMARY KEY (a))
PARTITION BY RANGE (a)
SUBPARTITION BY HASH(a)
(PARTITION p0 VALUES LESS THAN (100)
 (SUBPARTITION sp0,
  SUBPARTITION sp1),
 PARTITION p1 VALUES LESS THAN  (200)
 (SUBPARTITION sp2,
  SUBPARTITION sp3));

SET GLOBAL innodb_default_row_format=DYNAMIC;

ALTER TABLE t1 ADD PARTITION (PARTITION p2 VALUES LESS THAN (300)
(SUBPARTITION sp4,
SUBPARTITION sp5));

INSERT INTO t1(b,a) VALUES('first',40),('second',91),('third',140),
('forth',191);

--replace_result #p# #P# #sp# #SP#
SELECT NAME,ROW_FORMAT  FROM INFORMATION_SCHEMA.INNODB_TABLES
WHERE NAME LIKE '%t1%' ORDER BY TABLE_ID;

CREATE TABLE t2 like t1;
ALTER TABLE t2 REMOVE PARTITIONING;

--error ER_PARTITION_EXCHANGE_DIFFERENT_OPTION
ALTER TABLE t1 EXCHANGE PARTITION sp2 WITH TABLE t2;

ALTER TABLE t1 EXCHANGE PARTITION sp4 WITH TABLE t2;
DROP TABLE t1,t2;
SET @@global.innodb_default_row_format=@orig_default_row_format;
