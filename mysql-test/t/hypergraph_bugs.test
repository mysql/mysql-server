--source include/have_hypergraph.inc
--source include/have_optimizer_trace.inc
--source include/elide_costs.inc

# This should have been a unit test. But unit tests do not have framework
# for prepared statements yet. So we are adding this.

--echo #
--echo # Bug#34402003: HYPERGRAPH BUG: Offload issue with execute statement.
--echo #

CREATE TABLE t1(a INT);
CREATE TABLE t2(a INT);
CREATE TABLE t3(a INT);
INSERT INTO t1 VALUES (1),(2),(5);
INSERT INTO t2 VALUES (2);
INSERT INTO t3 VALUES (3);
ANALYZE TABLE t1, t2, t3;
# Hypergraph should be able to use the multiple equality (5, t1.a, t2.a).
# So, the join condition (t1.a=t2.a) should not be seen in the final plan.
# Instead, it should see filters (t1.a=5) and (t2.a=5).
SET optimizer_trace='enabled=on';
let $query = SELECT * FROM t1 LEFT JOIN t2 ON t1.a=t2.a JOIN t3 ON t1.a=5;
eval PREPARE stmt FROM "EXPLAIN FORMAT=tree $query";
eval EXECUTE stmt;
# Check that we are using the optimized join condition for generating the
# plan i.e it should be using multiple equalities that are established during
# optimization.
SELECT
IF(TRACE LIKE '%Left join (extra join condition = (t1.a = 5) AND (t2.a = 5))%',
   'OK', TRACE)
FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
eval PREPARE stmt FROM "$query";
eval EXECUTE stmt;
SET optimizer_trace="enabled=off";
DROP TABLE t1,t2,t3;

CREATE TABLE t0 (a0 INTEGER);
CREATE TABLE t1 (a1 INTEGER);
CREATE TABLE t2 (a2 INTEGER);
CREATE TABLE t3 (a3 INTEGER);
INSERT INTO t0 VALUES (0),(1);
INSERT INTO t1 VALUES (0),(1);
INSERT INTO t2 VALUES (1);
INSERT INTO t3 VALUES (1);
# Hypergraph should be able to detect that a1=5 cannot be true resulting
# in Zero rows access path for right side of the join.
EXPLAIN FORMAT=tree SELECT * FROM t0, t1 LEFT JOIN (t2,t3) ON a1=5 WHERE a0=a1 AND a0=1;
SELECT * FROM t0, t1 LEFT JOIN (t2,t3) ON a1=5 WHERE a0=a1 AND a0=1;
DROP TABLE t0,t1,t2,t3;
--echo #
--echo # Bug#34401789: Enable constant propagation in conditions
--echo #               for hypergraph optimizer
--echo #

CREATE TABLE t1 (f1 INTEGER);
EXPLAIN FORMAT=tree
SELECT f1 FROM t1 GROUP BY f1 HAVING f1 = 10 AND f1 <> 11;
DROP TABLE t1;

# This should have been a unit test. But unit tests do not have framework
# for type "year" yet.
# We are basically testing that "f1" in the non-equality predicate gets
# substituted with value "1" propagated from "f1 = 1" predicate which
# will make the condition to be always true.

--echo #
--echo # Bug#34080394: Hypergraph Offload issue : Problem in
--echo #               ExtractRequiredItemsForFilter.
--echo #

CREATE TABLE t1 (f1 YEAR);
EXPLAIN FORMAT=tree SELECT * FROM t1 WHERE f1 = 1 AND f1 <> 11;
DROP TABLE t1;

--echo #
--echo # Bug#34504697: Hypergraph: Assertion
--echo #               `!(used_tabs & (~read_tables & ~filter_for_table))'
--echo #               failed
--echo #

CREATE TABLE t1 (f1 INTEGER);
SELECT 1
FROM t1 LEFT JOIN (SELECT t2.*
                   FROM (t1 AS t2 INNER JOIN t1 AS t3 ON (t3.f1 = t2.f1))
                   WHERE (t3.f1 <> 1 OR t2.f1 > t2.f1)) AS dt
ON (t1.f1 = dt.f1);
DROP TABLE t1;

--echo #
--echo # Bug#34503695:Hypergraph: mysqld crash-signal 11
--echo #              -CommonSubexpressionElimination
--echo #

CREATE TABLE t1 (f1 INTEGER);
# For the NOT IN subquery, hypergraph does re-planning with materialization.
# This replanning uses the modified where condition from the previous planning.
# For this case, the where condition is concluded as always false resulting in
# removal of elements from the OR condition leading to a crash during re-planning.
# The modified where condition from the first planning should not affect AND/OR
# structure of the condition.
SELECT * FROM t1
WHERE t1.f1 NOT IN (SELECT t2.f1
                    FROM (t1 AS t2 JOIN t1 AS t3 ON (t3.f1 = t2.f1))
                    WHERE (t3.f1 <> t2.f1 OR t3.f1 < t2.f1));
DROP TABLE t1;

--echo #
--echo # Bug#34527126: Some rapid tests in MTR fail with hypergraph
--echo #               when run in --ps-protocol mode
--echo #

CREATE TABLE t1(f1 INTEGER);
# The error generated during planning for the first derived query block
# should not result in an assert failure when the second derived table is
# cleaned up.
PREPARE ps FROM
"SELECT * FROM (WITH RECURSIVE qn AS (SELECT 1 FROM t1 UNION ALL
                                      SELECT 1 FROM t1 STRAIGHT_JOIN qn)
                                     SELECT * FROM qn) AS dt1,
                                     (SELECT COUNT(*) FROM t1) AS dt2";
--error ER_CTE_RECURSIVE_FORBIDDEN_JOIN_ORDER
EXECUTE ps;
DROP TABLE t1;

--echo #
--echo # Bug#34494877: WL#14449: Offload issue: RapidException (3):
--echo #               rpdrqctr_transcode.c:1447 @ rpdoqc_
--echo #

CREATE TABLE t(x INT, y INT);
INSERT INTO t VALUES (1, 10), (2, 20), (3, 30);
ANALYZE TABLE t;

# Expect the entire query to be optimized away. It used to produce a
# join between t and a temporary table containing the result of a
# "Zero rows" plan.
let $query =
SELECT * FROM
  t RIGHT JOIN
  (SELECT MAX(y) AS m FROM t WHERE FALSE GROUP BY x) AS dt
  ON t.x = dt.m;
--eval EXPLAIN FORMAT=TREE $query
--eval $query

# Similar to the above, but the query cannot be entirely optimized
# away, since the outer table isn't empty. It used to add a
# materialization step on top of the zero rows plan for the derived
# table. Now it should just have zero rows directly on the inner side
# of the join.
let $query =
SELECT * FROM
  t LEFT JOIN
  (SELECT MAX(y) AS m FROM t WHERE FALSE GROUP BY x) AS dt
  ON t.x = dt.m;
--replace_regex $elide_costs
--eval EXPLAIN FORMAT=TREE $query
--eval $query

# Similar case, where the query cannot be entirely optimized away.
# Verify that the entire inner side of the outer join is optimized
# away. Only t1 should be accessed.
let $query =
SELECT * FROM
  t AS t1 LEFT JOIN
  (t AS t2
   INNER JOIN (SELECT MAX(y) AS m FROM t WHERE FALSE GROUP BY x) AS dt
   ON t2.x = dt.m)
  ON t1.x = t2.y;
--replace_regex $elide_costs
--eval EXPLAIN FORMAT=TREE $query
--eval $query

DROP TABLE t;

--echo #
--echo # Bug#34534373: Heatwave offload issue - Sees inner tables of
--echo #               a semijoin when it should not
--echo #

CREATE TABLE t1 (f1 INTEGER);
# The condition t2.f1 = t3.f1+1 should be placed as a join condition
# for the semijoin and not on the outer join.
--replace_regex $elide_costs
EXPLAIN FORMAT=tree
 SELECT 1
 FROM t1 LEFT JOIN (SELECT * FROM t1 AS t2
                    WHERE f1 IN (SELECT f1+1 FROM t1 AS t3)) AS dt
 ON t1.f1=dt.f1;
DROP TABLE t1;

--echo #
--echo # Bug#34699398: Row estimates for joins ignores histograms.
--echo #

CREATE TABLE num (n INT);
INSERT INTO num VALUES (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);

CREATE TABLE t1 (a INT, ah INT, ai INT, KEY ix1(ai));

INSERT INTO t1 SELECT k%25, k%25, K%25 FROM
  (SELECT num1.n+num2.n*10 k FROM num num1, num num2) d1;

CREATE TABLE t2 (b INT, bh INT, bi INT, KEY ix2(bi));

INSERT INTO t2 SELECT k%25, k%25, k%25 FROM
  (SELECT num1.n+num2.n*10 k FROM num num1, num num2, num num3) d1;

ANALYZE TABLE t1 UPDATE HISTOGRAM ON ah;
ANALYZE TABLE t2 UPDATE HISTOGRAM ON bh;
ANALYZE TABLE t1,t2;

# Neither index nor histogram, so use 10% selectivity estimate.
--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1,t2 WHERE a=b;

--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1 x1, t1 x2 WHERE x1.a=x2.a;

--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t2 x1, t2 x2 WHERE x1.b=x2.b;

# Estimate selectivity from ix1.

--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1,t2 WHERE ai=b;

--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1 x1, t1 x2 WHERE x1.ai=x2.ai;

# Estimate selectivity from ix1 or ix2.

--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1,t2 WHERE ai=bi;

# Estimate selectivity from ix2.

--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1,t2 WHERE a=bi;

--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t2 x1, t2 x2 WHERE x1.bi=x2.bi;

# Estimate selectivity from histogram on 'a'.

--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1,t2 WHERE ah=b;

--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1 x1, t1 x2 WHERE x1.ah=x2.ah;

# Estimate selectivity from histogram on 'a' or 'b'.

--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1,t2 WHERE ah=bh;

# Estimate selectivity from histogram on 'b'.

--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t1,t2 WHERE a=bh;

--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t2 x1, t2 x2 WHERE x1.bh=x2.bh;

DROP TABLE num, t1, t2;

--echo #
--echo # Bug#34682561: Assertion `!eq_items.is_empty()' failed
--echo #               in make_join_hypergraph.cc
--echo #

CREATE TABLE t1 (f1 INTEGER, f2 INTEGER);
ANALYZE TABLE t1;
let $query =
SELECT f1 FROM t1
WHERE EXISTS (SELECT t2.f1
              FROM (t1 AS t2 JOIN t1 AS t3 ON (t3.f1 = t2.f2))
              LEFT JOIN t1 AS t4 ON TRUE
              WHERE t4.f1 = t3.f1 OR t3.f2 >= t2.f2)
GROUP BY f1;

--replace_regex $elide_costs
eval EXPLAIN FORMAT=tree $query;
eval $query;

DROP TABLE t1;

--echo #
--echo # Bug#34717171: Hypergraph :Assertion `false' failed
--echo #               in join_optimizer.cc
--echo #

CREATE TABLE t1 (pk INT PRIMARY KEY AUTO_INCREMENT, x INT);
CREATE TABLE t2 (x INT);

INSERT INTO t1 VALUES (), (), (), (), (), (), (), (), (), ();
INSERT INTO t2 VALUES (), (), (), (), (), (), (), (), (), ();

ANALYZE TABLE t1,t2;

let $query =
WITH subq AS (
  SELECT * FROM t2
  WHERE x IN (SELECT t1.pk FROM t1, t2 AS t3 WHERE t1.x = t3.x)
)
SELECT 1 FROM subq LEFT JOIN t2 AS t4 ON TRUE WHERE subq.x = t4.x;

--replace_regex $elide_costs
eval EXPLAIN FORMAT=tree $query;
eval $query;

DROP TABLE t1,t2;

--echo #
--echo # Bug#34828364: Assertion `!eq_items.is_empty()' failed
--echo #               in make_join_hypergraph.cc
--echo #

CREATE TABLE t1 (f1 INTEGER, f2 INTEGER);

ANALYZE TABLE t1;

let $query =
SELECT 1
FROM (SELECT * FROM t1
      WHERE f1 IN (SELECT t1.f1 FROM (t1 AS t2 JOIN t1 AS t3 ON t3.f1 = t2.f2)
                   LEFT JOIN t1 AS t4 ON TRUE
                   WHERE (t3.f2 <> t3.f2 OR t4.f2 = t2.f2))) AS t5 JOIN t1 AS t6
ON TRUE;

--replace_regex $elide_costs
eval EXPLAIN FORMAT=tree $query;
eval $query;

DROP TABLE t1;

--echo #
--echo # Bug#34821222: Hypergraph: mysqld crash-signal 11 - IsAnd &
--echo #               CommonSubexpressionElimination
--echo #

CREATE TABLE t1 (x INTEGER NOT NULL);
CREATE TABLE t2 (y INTEGER, z INTEGER);

SELECT 1 IN (
  SELECT COUNT(*) FROM t1 WHERE x NOT IN (
    SELECT 1 FROM t2 WHERE y <> y OR z <> z));

DROP TABLE t1, t2;

--echo #
--echo # Bug#34854369: Customer query hits assert(m_pq.is_valid()) failure
--echo #

# Graph simplification used to hit an assertion as a result of
# division by zero caused by information schema tables with zero row
# estimates.
CREATE TABLE t (table_id BIGINT UNSIGNED);
SELECT /*+ SET_VAR(optimizer_max_subgraph_pairs = 1) */ 1
FROM t AS t1 JOIN t AS t2 USING (table_id)
     JOIN INFORMATION_SCHEMA.INNODB_TABLES AS t3 USING (table_id)
     JOIN INFORMATION_SCHEMA.INNODB_TABLES AS t4 USING (table_id)
     JOIN INFORMATION_SCHEMA.INNODB_TABLES AS t5 USING (table_id)
     JOIN INFORMATION_SCHEMA.INNODB_TABLES AS t6 USING (table_id)
     JOIN INFORMATION_SCHEMA.INNODB_TABLES AS t7 USING (table_id)
     JOIN INFORMATION_SCHEMA.INNODB_TABLES AS t8 USING (table_id);
DROP TABLE t;

# Graph simplification used to hit an assertion as a result of
# division by zero caused by zero row estimates from MyISAM. (InnoDB
# never gives zero row estimates, not even for empty tables, whereas
# MyISAM does.)
CREATE TABLE t0 (x INT) ENGINE = MyISAM;
CREATE TABLE t1 (x INT) ENGINE = InnoDB;
SELECT /*+ SET_VAR(optimizer_max_subgraph_pairs = 1) */ 1
FROM t0 AS a NATURAL JOIN
     t0 AS b NATURAL JOIN
     t0 AS c NATURAL JOIN
     t0 AS d NATURAL JOIN
     t0 AS e NATURAL JOIN
     t0 AS f NATURAL JOIN
     t1 AS g NATURAL JOIN
     t1 AS h;
DROP TABLE t0, t1;


--echo #
--echo # Bug#34861693: Assertion
--echo # `std::abs(1.0 - EstimateAggregateRows(child, query_block, path->aggreg
--echo #

CREATE TABLE num (n INT);
INSERT INTO num VALUES (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);

CREATE TABLE t1 (a INT, b INT);

INSERT INTO t1 SELECT n,n FROM num UNION SELECT n+10,n+10 FROM num;

CREATE TABLE t2 (a INT, b INT);

ANALYZE TABLE t1, t2;

# The row estimate for "x1 LEFT JOIN (x2 LEFT JOIN x3)" may be different from that of
#  "(x1 LEFT JOIN x2) LEFT JOIN x3" (see bug #33550360 "Inconsistent row estimates
# in the hypergraph optimizer"). Then the the row estimate for GROUP BY will also depend
# on the join order. This triggers the assert (i.e. bug#34861693).
--replace_regex $elide_costs
EXPLAIN FORMAT=TREE SELECT x1.a+0 k, COUNT(x1.b) FROM t1 x1
  LEFT JOIN t2 x2 ON x1.b=x2.a
  LEFT JOIN t1 x3 ON x2.b=x3.a GROUP BY k;

DROP TABLE t1,t2,num;


--echo #
--echo # Bug#35000554: assertion error in EstimateAggregateNoRollupRows()
--echo #

CREATE TABLE num10 (n INT);
INSERT INTO num10 VALUES (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);

CREATE TABLE t1(a INT, b INT, c INT);

ANALYZE TABLE t1 UPDATE HISTOGRAM ON a, b, c;

INSERT INTO t1 SELECT NULL, x1.n+x2.n*10, NULL FROM num10 x1, num10 x2;
INSERT INTO t1 VALUES (NULL, 0, 0);

ANALYZE TABLE t1;

# Row estimate should not be zero, even if histogram was built on empty table.
--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT b FROM t1 GROUP BY b;

# Row estimate should not be zero, even if histogram was built on empty table.
--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT b FROM t1 WHERE b=c;

ANALYZE TABLE t1 UPDATE HISTOGRAM ON a, b, c;

# Prior to the fix, this would trigger the assert, as we would estimate
# zero distinct values for 'a'.
--replace_regex $elide_costs
EXPLAIN FORMAT=TREE SELECT a,b FROM t1 GROUP BY a,b;

# Now there is an updated histogram (built on a non-empty table),
# and thus a better estimate.
--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT b FROM t1 WHERE b=c;

# Estimate should be two rows (NULL and 0).
--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT c FROM t1 GROUP BY c;

DROP TABLE num10, t1;

CREATE TABLE t2(a INT, b INT);

INSERT INTO t2 VALUES (0, 0), (0, 1), (1, 2), (NULL, 3), (NULL, 4), (NULL, 5);

ANALYZE TABLE t2 UPDATE HISTOGRAM ON a, b;
ANALYZE TABLE t2;

# Estimate should be 1.5 rows (i.e. 25% of the table), as there are two distinct
# values, and 'a' is NULL for 50% of the rows.
--replace_regex $elide_costs_and_time
EXPLAIN ANALYZE SELECT 1 FROM t2 WHERE a=b;

DROP TABLE t2;
