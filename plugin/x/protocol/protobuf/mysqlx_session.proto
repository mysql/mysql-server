/*
 * Copyright (c) 2015, 2022, Oracle and/or its affiliates.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, version 2.0,
 * as published by the Free Software Foundation.
 *
 * This program is also distributed with certain software (including
 * but not limited to OpenSSL) that is licensed under separate terms,
 * as designated in a particular file or component or in included license
 * documentation.  The authors of MySQL hereby grant you an additional
 * permission to link the program and your derivative works with the
 * separately licensed software that they have included with MySQL.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License, version 2.0, for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA
 */
syntax = "proto2";

import "mysqlx.proto"; // comment_out_if PROTOBUF_LITE

// ifdef PROTOBUF_LITE: option optimize_for = LITE_RUNTIME;

/**
@namespace Mysqlx::Session
@brief Messages to manage sessions.

@startuml "Messages for Sessions"
== session start ==
Client -> Server: AuthenticateStart
opt
Server --> Client: AuthenticateContinue
Client --> Server: AuthenticateContinue
end
alt
Server --> Client: AuthenticateOk
else
Server --> Client: Error
end
...
== session reset ==
Client -> Server: Reset
Server --> Client: Ok
== session end ==
Client -> Server: Close
Server --> Client: Ok
@enduml
*/
package Mysqlx.Session;
option java_package = "com.mysql.cj.x.protobuf";

/**
The initial message send from the client to the server to start
the authentication process.

@returns @ref Mysqlx::Session::AuthenticateContinue
*/
message AuthenticateStart {
  /** authentication mechanism name */
  required string mech_name = 1;

  /** authentication data */
  optional bytes auth_data = 2;

  /** initial response */
  optional bytes initial_response = 3;

  option (client_message_id) = SESS_AUTHENTICATE_START; // comment_out_if PROTOBUF_LITE
}

/**
Send by client or server after an @ref Mysqlx::Session::AuthenticateStart
to exchange more authentication data.

@returns Mysqlx::Session::AuthenticateContinue
*/
message AuthenticateContinue {
  /** authentication data */
  required bytes auth_data = 1;

  option (server_message_id) = SESS_AUTHENTICATE_CONTINUE; // comment_out_if PROTOBUF_LITE
  option (client_message_id) = SESS_AUTHENTICATE_CONTINUE; // comment_out_if PROTOBUF_LITE
}

/**
Sent by the server after successful authentication.
*/
message AuthenticateOk {
  /** authentication data */
  optional bytes auth_data = 1;

  option (server_message_id) = SESS_AUTHENTICATE_OK; // comment_out_if PROTOBUF_LITE
}

/**
Reset the current session.

@returns @ref Mysqlx::Ok
*/
message Reset {
  /** if is true the session will be reset, but stays authenticated; otherwise,
      the session will be closed and needs to be authenticated again */
  optional bool keep_open = 1 [ default = false ];

  option (client_message_id) = SESS_RESET; // comment_out_if PROTOBUF_LITE
}

/**
Close the current session.

@returns @ref Mysqlx::Ok

*/
message Close {
  option (client_message_id) = SESS_CLOSE; // comment_out_if PROTOBUF_LITE
}

