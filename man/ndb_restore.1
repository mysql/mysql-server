'\" t
.\"     Title: ndb_restore
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 06/04/2022
.\"    Manual: MySQL Database System
.\"    Source: MySQL 8.0
.\"  Language: English
.\"
.TH "NDB_RESTORE" "1" "06/04/2022" "MySQL 8\&.0" "MySQL Database System"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
ndb_restore \- restore an NDB Cluster backup
.SH "SYNOPSIS"
.HP \w'\fBndb_restore\ \fR\fB\fIoptions\fR\fR\ 'u
\fBndb_restore \fR\fB\fIoptions\fR\fR
.SH "DESCRIPTION"
.PP
The NDB Cluster restoration program is implemented as a separate command\-line utility
\fBndb_restore\fR, which can normally be found in the MySQL
bin
directory\&. This program reads the files created as a result of the backup and inserts the stored information into the database\&.
.PP
In NDB 7\&.6 and earlier, this program printed
NDBT_ProgramExit \- \fIstatus\fR
upon completion of its run, due to an unnecessary dependency on the
NDBT
testing library\&. This dependency has been removed in NDB 8\&.0, eliminating the extraneous output\&.
.PP
\fBndb_restore\fR
must be executed once for each of the backup files that were created by the
START BACKUP
command used to create the backup (see
Section\ \&23.6.8.2, \(lqUsing The NDB Cluster Management Client to Create a Backup\(rq)\&. This is equal to the number of data nodes in the cluster at the time that the backup was created\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
Before using
\fBndb_restore\fR, it is recommended that the cluster be running in single user mode, unless you are restoring multiple data nodes in parallel\&. See
Section\ \&23.6.6, \(lqNDB Cluster Single User Mode\(rq, for more information\&.
.sp .5v
.RE
.PP
Options that can be used with
\fBndb_restore\fR
are shown in the following table\&. Additional descriptions follow the table\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.B Table\ \&23.41.\ \&Command\-line options used with the program ndb_restore
.TS
allbox tab(:);
lB lB lB.
T{
Format
T}:T{
Description
T}:T{
Added, Deprecated, or Removed
T}
.T&
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l
lB l l.
T{
.PP
\fB \fR\fB--allow-pk-changes[=0|1]\fR\fB \fR
T}:T{
Allow changes to set of columns making up table's primary key
T}:T{
.PP
ADDED: NDB 8.0.21
T}
T{
.PP
\fB \fR\fB--append\fR\fB \fR
T}:T{
Append data to tab-delimited file
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--backup-password=password\fR\fB \fR
T}:T{
Supply a password for decrypting an encrypted backup with --decrypt; see
              documentation for allowed values
T}:T{
.PP
ADDED: NDB 8.0.22
T}
T{
.PP
\fB \fR\fB--backup-password-from-stdin\fR\fB \fR
T}:T{
Get decryption password in a secure fashion from STDIN; use together
              with --decrypt option
T}:T{
.PP
ADDED: NDB 8.0.24
T}
T{
.PP
\fB \fR\fB--backup-path=path\fR\fB \fR
T}:T{
Path to backup files directory
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB--backupid=#\fR,
.PP
\fB \fR\fB-b #\fR\fB \fR
T}:T{
Restore from backup having this ID
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--character-sets-dir=path\fR\fB \fR
T}:T{
Directory containing character sets
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB--connect=connection_string\fR,
.PP
\fB \fR\fB-c connection_string\fR\fB \fR
T}:T{
Alias for --connectstring
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--connect-retries=#\fR\fB \fR
T}:T{
Number of times to retry connection before giving up
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--connect-retry-delay=#\fR\fB \fR
T}:T{
Number of seconds to wait between attempts to contact management server
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB--connect-string=connection_string\fR,
.PP
\fB \fR\fB-c connection_string\fR\fB \fR
T}:T{
Same as --ndb-connectstring
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--core-file\fR\fB \fR
T}:T{
Write core file on error; used in debugging
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--decrypt\fR\fB \fR
T}:T{
Decrypt an encrypted backup; requires --backup-password
T}:T{
.PP
ADDED: NDB 8.0.22
T}
T{
.PP
\fB \fR\fB--defaults-extra-file=path\fR\fB \fR
T}:T{
Read given file after global files are read
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--defaults-file=path\fR\fB \fR
T}:T{
Read default options from given file only
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--defaults-group-suffix=string\fR\fB \fR
T}:T{
Also read groups with concat(group, suffix)
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--disable-indexes\fR\fB \fR
T}:T{
Causes indexes from backup to be ignored; may decrease time needed to
              restore data
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB--dont-ignore-systab-0\fR,
.PP
\fB \fR\fB-f\fR\fB \fR
T}:T{
Do not ignore system table during restore; experimental only; not for
              production use
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--exclude-databases=list\fR\fB \fR
T}:T{
List of one or more databases to exclude (includes those not named)
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--exclude-intermediate-sql-tables[=TRUE|FALSE]\fR\fB \fR
T}:T{
Do not restore any intermediate tables (having names prefixed with
              '#sql-') that were left over from copying ALTER TABLE
              operations; specify FALSE to restore such tables
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--exclude-missing-columns\fR\fB \fR
T}:T{
Causes columns from backup version of table that are missing from
              version of table in database to be ignored
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--exclude-missing-tables\fR\fB \fR
T}:T{
Causes tables from backup that are missing from database to be ignored
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--exclude-tables=list\fR\fB \fR
T}:T{
List of one or more tables to exclude (includes those in same database
              that are not named); each table reference must include
              database name
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--fields-enclosed-by=char\fR\fB \fR
T}:T{
Fields are enclosed by this character
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--fields-optionally-enclosed-by\fR\fB \fR
T}:T{
Fields are optionally enclosed by this character
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--fields-terminated-by=char\fR\fB \fR
T}:T{
Fields are terminated by this character
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB--help\fR,
.PP
\fB \fR\fB-?\fR\fB \fR
T}:T{
Display help text and exit
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--hex\fR\fB \fR
T}:T{
Print binary types in hexadecimal format
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--ignore-extended-pk-updates[=0|1]\fR\fB \fR
T}:T{
Ignore log entries containing updates to columns now included in
              extended primary key
T}:T{
.PP
ADDED: NDB 8.0.21
T}
T{
.PP
\fB \fR\fB--include-databases=list\fR\fB \fR
T}:T{
List of one or more databases to restore (excludes those not named)
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--include-stored-grants\fR\fB \fR
T}:T{
Restore shared users and grants to ndb_sql_metadata table
T}:T{
.PP
ADDED: NDB 8.0.19
T}
T{
.PP
\fB \fR\fB--include-tables=list\fR\fB \fR
T}:T{
List of one or more tables to restore (excludes those in same database
              that are not named); each table reference must include
              database name
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--lines-terminated-by=char\fR\fB \fR
T}:T{
Lines are terminated by this character
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--login-path=path\fR\fB \fR
T}:T{
Read given path from login file
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB--lossy-conversions\fR,
.PP
\fB \fR\fB-L\fR\fB \fR
T}:T{
Allow lossy conversions of column values (type demotions or changes in
              sign) when restoring data from backup
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--no-binlog\fR\fB \fR
T}:T{
If mysqld is connected and using binary logging, do not log restored
              data
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--no-defaults\fR\fB \fR
T}:T{
Do not read default options from any option file other than login file
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB--no-restore-disk-objects\fR,
.PP
\fB \fR\fB-d\fR\fB \fR
T}:T{
Do not restore objects relating to Disk Data
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB--no-upgrade\fR,
.PP
\fB \fR\fB-u\fR\fB \fR
T}:T{
Do not upgrade array type for varsize attributes which do not already
              resize VAR data, and do not change column attributes
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB--ndb-connectstring=connection_string\fR,
.PP
\fB \fR\fB-c connection_string\fR\fB \fR
T}:T{
Set connect string for connecting to ndb_mgmd. Syntax:
              "[nodeid=id;][host=]hostname[:port]". Overrides entries in
              NDB_CONNECTSTRING and my.cnf
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB--ndb-mgmd-host=connection_string\fR,
.PP
\fB \fR\fB-c connection_string\fR\fB \fR
T}:T{
Same as --ndb-connectstring
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB--ndb-nodegroup-map=map\fR,
.PP
\fB \fR\fB-z\fR\fB \fR
T}:T{
Specify node group map; unused, unsupported
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--ndb-nodeid=#\fR\fB \fR
T}:T{
Set node ID for this node, overriding any ID set by --ndb-connectstring
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--ndb-optimized-node-selection\fR\fB \fR
T}:T{
Enable optimizations for selection of nodes for transactions. Enabled by
              default; use --skip-ndb-optimized-node-selection to
              disable
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB--nodeid=#\fR,
.PP
\fB \fR\fB-n #\fR\fB \fR
T}:T{
ID of node where backup was taken
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--num-slices=#\fR\fB \fR
T}:T{
Number of slices to apply when restoring by slice
T}:T{
.PP
ADDED: NDB 8.0.20
T}
T{
.PP
\fB--parallelism=#\fR,
.PP
\fB \fR\fB-p #\fR\fB \fR
T}:T{
Number of parallel transactions to use while restoring data
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB--preserve-trailing-spaces\fR,
.PP
\fB \fR\fB-P\fR\fB \fR
T}:T{
Allow preservation of trailing spaces (including padding) when promoting
              fixed-width string types to variable-width types
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--print\fR\fB \fR
T}:T{
Print metadata, data, and log to stdout (equivalent to --print-meta
              --print-data --print-log)
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--print-data\fR\fB \fR
T}:T{
Print data to stdout
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--print-defaults\fR\fB \fR
T}:T{
Print program argument list and exit
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--print-log\fR\fB \fR
T}:T{
Print log to stdout
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--print-meta\fR\fB \fR
T}:T{
Print metadata to stdout
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--print-sql-log\fR\fB \fR
T}:T{
Write SQL log to stdout
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--progress-frequency=#\fR\fB \fR
T}:T{
Print status of restore each given number of seconds
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB--promote-attributes\fR,
.PP
\fB \fR\fB-A\fR\fB \fR
T}:T{
Allow attributes to be promoted when restoring data from backup
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--rebuild-indexes\fR\fB \fR
T}:T{
Causes multithreaded rebuilding of ordered indexes found in backup;
              number of threads used is determined by setting
              BuildIndexThreads
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--remap-column=string\fR\fB \fR
T}:T{
Apply offset to value of specified column using indicated function and
              arguments. Format is [db].[tbl].[col]:[fn]:[args]; see
              documentation for details
T}:T{
.PP
ADDED: NDB 8.0.21
T}
T{
.PP
\fB--restore-data\fR,
.PP
\fB \fR\fB-r\fR\fB \fR
T}:T{
Restore table data and logs into NDB Cluster using NDB API
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB--restore-epoch\fR,
.PP
\fB \fR\fB-e\fR\fB \fR
T}:T{
Restore epoch info into status table; useful on replica cluster for
              starting replication; updates or inserts row in
              mysql.ndb_apply_status with ID 0
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB--restore-meta\fR,
.PP
\fB \fR\fB-m\fR\fB \fR
T}:T{
Restore metadata to NDB Cluster using NDB API
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--restore-privilege-tables\fR\fB \fR
T}:T{
Restore MySQL privilege tables that were previously moved to NDB
T}:T{
.PP
DEPRECATED: NDB 8.0.16
T}
T{
.PP
\fB \fR\fB--rewrite-database=string\fR\fB \fR
T}:T{
Restore to differently named database; format is olddb,newdb
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--skip-broken-objects\fR\fB \fR
T}:T{
Ignore missing blob tables in backup file
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB--skip-table-check\fR,
.PP
\fB \fR\fB-s\fR\fB \fR
T}:T{
Skip table structure check during restore
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--skip-unknown-objects\fR\fB \fR
T}:T{
Causes schema objects not recognized by ndb_restore to be ignored when
              restoring backup made from newer NDB version to older
              version
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--slice-id=#\fR\fB \fR
T}:T{
Slice ID, when restoring by slices
T}:T{
.PP
ADDED: NDB 8.0.20
T}
T{
.PP
\fB--tab=path\fR,
.PP
\fB \fR\fB-T path\fR\fB \fR
T}:T{
Creates a tab-separated .txt file for each table in path provided
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB--usage\fR,
.PP
\fB \fR\fB-?\fR\fB \fR
T}:T{
Display help text and exit; same as --help
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--verbose=#\fR\fB \fR
T}:T{
Level of verbosity in output
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB--version\fR,
.PP
\fB \fR\fB-V\fR\fB \fR
T}:T{
Display version information and exit
T}:T{
.PP
(Supported in all NDB releases based on MySQL 8.0)
T}
T{
.PP
\fB \fR\fB--with-apply-status\fR\fB \fR
T}:T{
Restore the ndb_apply_status table. Requires --restore-data
T}:T{
.PP
ADDED: NDB 8.0.29
T}
.TE
.sp 1
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-allow\-pk\-changes\fR
.TS
allbox tab(:);
lB l
lB l
lB l
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--allow-pk-changes[=0|1]
T}
T{
Introduced
T}:T{
8.0.21-ndb-8.0.21
T}
T{
Type
T}:T{
Integer
T}
T{
Default Value
T}:T{
0
T}
T{
Minimum Value
T}:T{
0
T}
T{
Maximum Value
T}:T{
1
T}
.TE
.sp 1
When this option is set to
1,
\fBndb_restore\fR
allows the primary keys in a table definition to differ from that of the same table in the backup\&. This may be desirable when backing up and restoring between different schema versions with primary key changes on one or more tables, and it appears that performing the restore operation using ndb_restore is simpler or mor efficient than issuing many
ALTER TABLE
statements after restoring table schemas and data\&.
.sp
The following changes in primary key definitions are supported by
\fB\-\-allow\-pk\-changes\fR:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBExtending the primary key\fR: A non\-nullable column that exists in the table schema in the backup becomes part of the table\*(Aqs primary key in the database\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBImportant\fR
.ps -1
.br
When extending a table\*(Aqs primary key, any columns which become part of primary key must not be updated while the backup is being taken; any such updates discovered by
\fBndb_restore\fR
cause the restore operation to fail, even when no change in value takes place\&. In some cases, it may be possible to override this behavior using the
\fB\-\-ignore\-extended\-pk\-updates\fR
option; see the description of this option for more information\&.
.sp .5v
.RE
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBContracting the primary key (1)\fR: A column that is already part of the table\*(Aqs primary key in the backup schema is no longer part of the primary key, but remains in the table\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBContracting the primary key (2)\fR: A column that is already part of the table\*(Aqs primary key in the backup schema is removed from the table entirely\&.
.RE
.sp
These differences can be combined with other schema differences supported by
\fBndb_restore\fR, including changes to blob and text columns requiring the use of staging tables\&.
.sp
Basic steps in a typical scenario using primary key schema changes are listed here:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
Restore table schemas using
\fBndb_restore\fR
\fB\-\-restore\-meta\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Alter schema to that desired, or create it
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
Back up the desired schema
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
Run
\fBndb_restore\fR
\fB\-\-disable\-indexes\fR
using the backup from the previous step, to drop indexes and constraints
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
Run
\fBndb_restore\fR
\fB\-\-allow\-pk\-changes\fR
(possibly along with
\fB\-\-ignore\-extended\-pk\-updates\fR,
\fB\-\-disable\-indexes\fR, and possibly other options as needed) to restore all data
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
Run
\fBndb_restore\fR
\fB\-\-rebuild\-indexes\fR
using the backup made with the desired schema, to rebuild indexes and constraints
.RE
.sp
When extending the primary key, it may be necessary for
\fBndb_restore\fR
to use a temporary secondary unique index during the restore operation to map from the old primary key to the new one\&. Such an index is created only when necessary to apply events from the backup log to a table which has an extended primary key\&. This index is named
NDB$RESTORE_PK_MAPPING, and is created on each table requiring it; it can be shared, if necessary, by multiple instances of
\fBndb_restore\fR
instances running in parallel\&. (Running
\fBndb_restore\fR
\fB\-\-rebuild\-indexes\fR
at the end of the restore process causes this index to be dropped\&.)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-append\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--append
T}
.TE
.sp 1
When used with the
\fB\-\-tab\fR
and
\fB\-\-print\-data\fR
options, this causes the data to be appended to any existing files having the same names\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-backup\-path\fR=\fIdir_name\fR
.TS
allbox tab(:);
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--backup-path=path
T}
T{
Type
T}:T{
Directory name
T}
T{
Default Value
T}:T{
./
T}
.TE
.sp 1
The path to the backup directory is required; this is supplied to
\fBndb_restore\fR
using the
\fB\-\-backup\-path\fR
option, and must include the subdirectory corresponding to the ID backup of the backup to be restored\&. For example, if the data node\*(Aqs
DataDir
is
/var/lib/mysql\-cluster, then the backup directory is
/var/lib/mysql\-cluster/BACKUP, and the backup files for the backup with the ID 3 can be found in
/var/lib/mysql\-cluster/BACKUP/BACKUP\-3\&. The path may be absolute or relative to the directory in which the
\fBndb_restore\fR
executable is located, and may be optionally prefixed with
\fBbackup\-path=\fR\&.
.sp
It is possible to restore a backup to a database with a different configuration than it was created from\&. For example, suppose that a backup with backup ID
12, created in a cluster with two storage nodes having the node IDs
2
and
3, is to be restored to a cluster with four nodes\&. Then
\fBndb_restore\fR
must be run twice\(emonce for each storage node in the cluster where the backup was taken\&. However,
\fBndb_restore\fR
cannot always restore backups made from a cluster running one version of MySQL to a cluster running a different MySQL version\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBImportant\fR
.ps -1
.br
It is not possible to restore a backup made from a newer version of NDB Cluster using an older version of
\fBndb_restore\fR\&. You can restore a backup made from a newer version of MySQL to an older cluster, but you must use a copy of
\fBndb_restore\fR
from the newer NDB Cluster version to do so\&.
.sp
For example, to restore a cluster backup taken from a cluster running NDB Cluster 7\&.5\&.27 to a cluster running NDB Cluster 7\&.4\&.37, you must use the
\fBndb_restore\fR
that comes with the NDB Cluster 7\&.5\&.27 distribution\&.
.sp .5v
.RE
For more rapid restoration, the data may be restored in parallel, provided that there is a sufficient number of cluster connections available\&. That is, when restoring to multiple nodes in parallel, you must have an
[api]
or
[mysqld]
section in the cluster
config\&.ini
file available for each concurrent
\fBndb_restore\fR
process\&. However, the data files must always be applied before the logs\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-backup\-password=\fR\fB\fIpassword\fR\fR
.TS
allbox tab(:);
lB l
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--backup-password=password
T}
T{
Introduced
T}:T{
8.0.22-ndb-8.0.22
T}
T{
Type
T}:T{
String
T}
T{
Default Value
T}:T{
[none]
T}
.TE
.sp 1
This option specifies a password to be used when decrypting an encrypted backup with the
\fB\-\-decrypt\fR
option\&. This must be the same password that was used to encrypt the backup\&.
.sp
The password can be up to 256 characters in length, and must be enclosed by single or double quotation marks\&. It can contain any of the ASCII characters having character codes 32, 35, 38, 40\-91, 93, 95, and 97\-126; in other words, it can use any printable ASCII characters except for
!,
\*(Aq,
",
$,
%,
\e, and
^\&.
.sp
In MySQL 8\&.0\&.24 and later, it is possible to omit the password, in which case
\fBndb_restore\fR
waits for it to be supplied from
stdin, as when using
\fB\-\-backup\-password\-from\-stdin\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-backup\-password\-from\-stdin[=TRUE|FALSE]\fR
.TS
allbox tab(:);
lB l
lB l.
T{
Command-Line Format
T}:T{
--backup-password-from-stdin
T}
T{
Introduced
T}:T{
8.0.24-ndb-8.0.24
T}
.TE
.sp 1
When used in place of
\fB\-\-backup\-password\fR, this option enables input of the backup password from the system shell (stdin), similar to how this is done when supplying the password interactively to
\fBmysql\fR
when using the
\fB\-\-password\fR
without supplying the password on the command line\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-backupid\fR=\fI#\fR,
\fB\-b\fR
.TS
allbox tab(:);
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--backupid=#
T}
T{
Type
T}:T{
Numeric
T}
T{
Default Value
T}:T{
none
T}
.TE
.sp 1
This option is used to specify the ID or sequence number of the backup, and is the same number shown by the management client in the
Backup \fIbackup_id\fR completed
message displayed upon completion of a backup\&. (See
Section\ \&23.6.8.2, \(lqUsing The NDB Cluster Management Client to Create a Backup\(rq\&.)
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBImportant\fR
.ps -1
.br
When restoring cluster backups, you must be sure to restore all data nodes from backups having the same backup ID\&. Using files from different backups results at best in restoring the cluster to an inconsistent state, and is likely to fail altogether\&.
.sp .5v
.RE
In NDB 8\&.0, this option is required\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-character\-sets\-dir\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--character-sets-dir=path
T}
.TE
.sp 1
Directory containing character sets\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-connect\fR,
\fB\-c\fR
.TS
allbox tab(:);
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--connect=connection_string
T}
T{
Type
T}:T{
String
T}
T{
Default Value
T}:T{
localhost:1186
T}
.TE
.sp 1
Alias for
\fB\-\-ndb\-connectstring\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-connect\-retries\fR
.TS
allbox tab(:);
lB l
lB l
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--connect-retries=#
T}
T{
Type
T}:T{
Integer
T}
T{
Default Value
T}:T{
12
T}
T{
Minimum Value
T}:T{
0
T}
T{
Maximum Value
T}:T{
12
T}
.TE
.sp 1
Number of times to retry connection before giving up\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-connect\-retry\-delay\fR
.TS
allbox tab(:);
lB l
lB l
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--connect-retry-delay=#
T}
T{
Type
T}:T{
Integer
T}
T{
Default Value
T}:T{
5
T}
T{
Minimum Value
T}:T{
0
T}
T{
Maximum Value
T}:T{
5
T}
.TE
.sp 1
Number of seconds to wait between attempts to contact management server\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-connect\-string\fR
.TS
allbox tab(:);
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--connect-string=connection_string
T}
T{
Type
T}:T{
String
T}
T{
Default Value
T}:T{
[none]
T}
.TE
.sp 1
Same as
\fB\-\-ndb\-connectstring\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-core\-file\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--core-file
T}
.TE
.sp 1
Write core file on error; used in debugging\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-decrypt\fR
.TS
allbox tab(:);
lB l
lB l.
T{
Command-Line Format
T}:T{
--decrypt
T}
T{
Introduced
T}:T{
8.0.22-ndb-8.0.22
T}
.TE
.sp 1
Decrypt an encrypted backup using the password supplied by the
\fB\-\-backup\-password\fR
option\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-defaults\-extra\-file\fR
.TS
allbox tab(:);
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--defaults-extra-file=path
T}
T{
Type
T}:T{
String
T}
T{
Default Value
T}:T{
[none]
T}
.TE
.sp 1
Read given file after global files are read\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-defaults\-file\fR
.TS
allbox tab(:);
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--defaults-file=path
T}
T{
Type
T}:T{
String
T}
T{
Default Value
T}:T{
[none]
T}
.TE
.sp 1
Read default options from given file only\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-defaults\-group\-suffix\fR
.TS
allbox tab(:);
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--defaults-group-suffix=string
T}
T{
Type
T}:T{
String
T}
T{
Default Value
T}:T{
[none]
T}
.TE
.sp 1
Also read groups with concat(group, suffix)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-disable\-indexes\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--disable-indexes
T}
.TE
.sp 1
Disable restoration of indexes during restoration of the data from a native
NDB
backup\&. Afterwards, you can restore indexes for all tables at once with multithreaded building of indexes using
\fB\-\-rebuild\-indexes\fR, which should be faster than rebuilding indexes concurrently for very large tables\&.
.sp
In NDB 8\&.0\&.27 and later, this option also drops any foreign keys specified in the backup\&.
.sp
Prior to NDB 8\&.0\&.29, attempting to access from MySQL an
NDB
table for which one or more indexes could not be found was always rejected with error
4243
Index not found\&. Beginning with NDB 8\&.0\&.29, it is possible for MySQL to open such a table, provided the query does not use any of the affected indexes; otherwise the query is rejected with
ER_NOT_KEYFILE\&. In the latter case, you can temporarily work around the problem by executing an
ALTER TABLE
statement such as this one:
.sp
.if n \{\
.RS 4
.\}
.nf
ALTER TABLE tbl ALTER INDEX idx INVISIBLE;
.fi
.if n \{\
.RE
.\}
.sp
This causes MySQL to ignore the index
idx
on table
tbl\&. See
Primary Keys and Indexes, for more information\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-dont\-ignore\-systab\-0\fR,
\fB\-f\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--dont-ignore-systab-0
T}
.TE
.sp 1
Normally, when restoring table data and metadata,
\fBndb_restore\fR
ignores the copy of the
NDB
system table that is present in the backup\&.
\fB\-\-dont\-ignore\-systab\-0\fR
causes the system table to be restored\&.
\fIThis option is intended for experimental and development use only, and is not recommended in a production environment\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-exclude\-databases\fR=\fIdb\-list\fR
.TS
allbox tab(:);
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--exclude-databases=list
T}
T{
Type
T}:T{
String
T}
T{
Default Value
T}:T{
T}
.TE
.sp 1
Comma\-delimited list of one or more databases which should not be restored\&.
.sp
This option is often used in combination with
\fB\-\-exclude\-tables\fR; see that option\*(Aqs description for further information and examples\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-exclude\-intermediate\-sql\-tables[\fR=\fITRUE|FALSE]\fR
.TS
allbox tab(:);
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--exclude-intermediate-sql-tables[=TRUE|FALSE]
T}
T{
Type
T}:T{
Boolean
T}
T{
Default Value
T}:T{
TRUE
T}
.TE
.sp 1
When performing copying
ALTER TABLE
operations,
\fBmysqld\fR
creates intermediate tables (whose names are prefixed with
#sql\-)\&. When
TRUE, the
\fB\-\-exclude\-intermediate\-sql\-tables\fR
option keeps
\fBndb_restore\fR
from restoring such tables that may have been left over from these operations\&. This option is
TRUE
by default\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-exclude\-missing\-columns\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--exclude-missing-columns
T}
.TE
.sp 1
It is possible to restore only selected table columns using this option, which causes
\fBndb_restore\fR
to ignore any columns missing from tables being restored as compared to the versions of those tables found in the backup\&. This option applies to all tables being restored\&. If you wish to apply this option only to selected tables or databases, you can use it in combination with one or more of the
\fB\-\-include\-*\fR
or
\fB\-\-exclude\-*\fR
options described elsewhere in this section to do so, then restore data to the remaining tables using a complementary set of these options\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-exclude\-missing\-tables\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--exclude-missing-tables
T}
.TE
.sp 1
It is possible to restore only selected tables using this option, which causes
\fBndb_restore\fR
to ignore any tables from the backup that are not found in the target database\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-exclude\-tables\fR=\fItable\-list\fR
.TS
allbox tab(:);
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--exclude-tables=list
T}
T{
Type
T}:T{
String
T}
T{
Default Value
T}:T{
T}
.TE
.sp 1
List of one or more tables to exclude; each table reference must include the database name\&. Often used together with
\fB\-\-exclude\-databases\fR\&.
.sp
When
\fB\-\-exclude\-databases\fR
or
\fB\-\-exclude\-tables\fR
is used, only those databases or tables named by the option are excluded; all other databases and tables are restored by
\fBndb_restore\fR\&.
.sp
This table shows several invocations of
\fBndb_restore\fR
usng
\fB\-\-exclude\-*\fR
options (other options possibly required have been omitted for clarity), and the effects these options have on restoring from an NDB Cluster backup:
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.B Table\ \&23.42.\ \&Several invocations of ndb_restore using \-\-exclude\-* options, and the effects these options have on restoring from an NDB Cluster backup\&.
.TS
allbox tab(:);
lB lB.
T{
Option
T}:T{
Result
T}
.T&
l l
l l
l l
l l.
T{
\fB--exclude-databases=db1\fR
T}:T{
All tables in all databases except db1 are restored;
                  no tables in db1 are restored
T}
T{
\fB--exclude-databases=db1,db2\fR (or
                  \fB--exclude-databases=db1\fR
                  \fB--exclude-databases=db2\fR)
T}:T{
All tables in all databases except db1 and
                  db2 are restored; no tables in
                  db1 or db2 are
                  restored
T}
T{
\fB--exclude-tables=db1.t1\fR
T}:T{
All tables except t1 in database
                  db1 are restored; all other tables
                  in db1 are restored; all tables in
                  all other databases are restored
T}
T{
\fB--exclude-tables=db1.t2,db2.t1\fR (or
                  \fB--exclude-tables=db1.t2\fR
                  \fB--exclude-tables=db2.t1)\fR
T}:T{
All tables in database db1 except for
                  t2 and all tables in database
                  db2 except for table
                  t1 are restored; no other tables in
                  db1 or db2 are
                  restored; all tables in all other databases are
                  restored
T}
.TE
.sp 1
You can use these two options together\&. For example, the following causes all tables in all databases
\fIexcept for\fR
databases
db1
and
db2, and tables
t1
and
t2
in database
db3, to be restored:
.sp
.if n \{\
.RS 4
.\}
.nf
$> \fBndb_restore [\&.\&.\&.] \-\-exclude\-databases=db1,db2 \-\-exclude\-tables=db3\&.t1,db3\&.t2\fR
.fi
.if n \{\
.RE
.\}
.sp
(Again, we have omitted other possibly necessary options in the interest of clarity and brevity from the example just shown\&.)
.sp
You can use
\fB\-\-include\-*\fR
and
\fB\-\-exclude\-*\fR
options together, subject to the following rules:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The actions of all
\fB\-\-include\-*\fR
and
\fB\-\-exclude\-*\fR
options are cumulative\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
All
\fB\-\-include\-*\fR
and
\fB\-\-exclude\-*\fR
options are evaluated in the order passed to ndb_restore, from right to left\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
In the event of conflicting options, the first (rightmost) option takes precedence\&. In other words, the first option (going from right to left) that matches against a given database or table
\(lqwins\(rq\&.
.RE
.sp
For example, the following set of options causes
\fBndb_restore\fR
to restore all tables from database
db1
except
db1\&.t1, while restoring no other tables from any other databases:
.sp
.if n \{\
.RS 4
.\}
.nf
\-\-include\-databases=db1 \-\-exclude\-tables=db1\&.t1
.fi
.if n \{\
.RE
.\}
.sp
However, reversing the order of the options just given simply causes all tables from database
db1
to be restored (including
db1\&.t1, but no tables from any other database), because the
\fB\-\-include\-databases\fR
option, being farthest to the right, is the first match against database
db1
and thus takes precedence over any other option that matches
db1
or any tables in
db1:
.sp
.if n \{\
.RS 4
.\}
.nf
\-\-exclude\-tables=db1\&.t1 \-\-include\-databases=db1
.fi
.if n \{\
.RE
.\}
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-fields\-enclosed\-by\fR=\fIchar\fR
.TS
allbox tab(:);
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--fields-enclosed-by=char
T}
T{
Type
T}:T{
String
T}
T{
Default Value
T}:T{
T}
.TE
.sp 1
Each column value is enclosed by the string passed to this option (regardless of data type; see the description of
\fB\-\-fields\-optionally\-enclosed\-by\fR)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-fields\-optionally\-enclosed\-by\fR
.TS
allbox tab(:);
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--fields-optionally-enclosed-by
T}
T{
Type
T}:T{
String
T}
T{
Default Value
T}:T{
T}
.TE
.sp 1
The string passed to this option is used to enclose column values containing character data (such as
CHAR,
VARCHAR,
BINARY,
TEXT, or
ENUM)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-fields\-terminated\-by\fR=\fIchar\fR
.TS
allbox tab(:);
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--fields-terminated-by=char
T}
T{
Type
T}:T{
String
T}
T{
Default Value
T}:T{
\t (tab)
T}
.TE
.sp 1
The string passed to this option is used to separate column values\&. The default value is a tab character (\et)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-help\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--help
T}
.TE
.sp 1
Display help text and exit\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-hex\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--hex
T}
.TE
.sp 1
If this option is used, all binary values are output in hexadecimal format\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-ignore\-extended\-pk\-updates\fR
.TS
allbox tab(:);
lB l
lB l
lB l
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--ignore-extended-pk-updates[=0|1]
T}
T{
Introduced
T}:T{
8.0.21-ndb-8.0.21
T}
T{
Type
T}:T{
Integer
T}
T{
Default Value
T}:T{
0
T}
T{
Minimum Value
T}:T{
0
T}
T{
Maximum Value
T}:T{
1
T}
.TE
.sp 1
When using
\fB\-\-allow\-pk\-changes\fR, columns which become part of a table\*(Aqs primary key must not be updated while the backup is being taken; such columns should keep the same values from the time values are inserted into them until the rows containing the values are deleted\&. If
\fBndb_restore\fR
encounters updates to these columns when restoring a backup, the restore fails\&. Because some applications may set values for all columns when updating a row, even when some column values are not changed, the backup may include log events appearing to update columns which are not in fact modified\&. In such cases you can set
\fB\-\-ignore\-extended\-pk\-updates\fR
to
1, forcing
\fBndb_restore\fR
to ignore such updates\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBImportant\fR
.ps -1
.br
When causing these updates to be ignored, the user is responsible for ensuring that there are no updates to the values of any columns that become part of the primary key\&.
.sp .5v
.RE
For more information, see the description of
\fB\-\-allow\-pk\-changes\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-include\-databases\fR=\fIdb\-list\fR
.TS
allbox tab(:);
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--include-databases=list
T}
T{
Type
T}:T{
String
T}
T{
Default Value
T}:T{
T}
.TE
.sp 1
Comma\-delimited list of one or more databases to restore\&. Often used together with
\fB\-\-include\-tables\fR; see the description of that option for further information and examples\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-include\-stored\-grants\fR
.TS
allbox tab(:);
lB l
lB l.
T{
Command-Line Format
T}:T{
--include-stored-grants
T}
T{
Introduced
T}:T{
8.0.19-ndb-8.0.19
T}
.TE
.sp 1
In NDB 8\&.0,
\fBndb_restore\fR
does not by default restore shared users and grants (see
Section\ \&23.6.12, \(lqPrivilege Synchronization and NDB_STORED_USER\(rq) to the
ndb_sql_metadata
table\&. Specifying this option causes it to do so\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-include\-tables\fR=\fItable\-list\fR
.TS
allbox tab(:);
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--include-tables=list
T}
T{
Type
T}:T{
String
T}
T{
Default Value
T}:T{
T}
.TE
.sp 1
Comma\-delimited list of tables to restore; each table reference must include the database name\&.
.sp
When
\fB\-\-include\-databases\fR
or
\fB\-\-include\-tables\fR
is used, only those databases or tables named by the option are restored; all other databases and tables are excluded by
\fBndb_restore\fR, and are not restored\&.
.sp
The following table shows several invocations of
\fBndb_restore\fR
using
\fB\-\-include\-*\fR
options (other options possibly required have been omitted for clarity), and the effects these have on restoring from an NDB Cluster backup:
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.B Table\ \&23.43.\ \&Several invocations of ndb_restore using \-\-include\-* options, and their effects on restoring from an NDB Cluster backup\&.
.TS
allbox tab(:);
lB lB.
T{
Option
T}:T{
Result
T}
.T&
l l
l l
l l
l l.
T{
\fB--include-databases=db1\fR
T}:T{
Only tables in database db1 are restored; all tables
                  in all other databases are ignored
T}
T{
\fB--include-databases=db1,db2\fR (or
                  \fB--include-databases=db1\fR
                  \fB--include-databases=db2\fR)
T}:T{
Only tables in databases db1 and
                  db2 are restored; all tables in all
                  other databases are ignored
T}
T{
\fB--include-tables=db1.t1\fR
T}:T{
Only table t1 in database db1 is
                  restored; no other tables in db1 or
                  in any other database are restored
T}
T{
\fB--include-tables=db1.t2,db2.t1\fR (or
                  \fB--include-tables=db1.t2\fR
                  \fB--include-tables=db2.t1\fR)
T}:T{
Only the table t2 in database db1
                  and the table t1 in database
                  db2 are restored; no other tables
                  in db1, db2, or
                  any other database are restored
T}
.TE
.sp 1
You can also use these two options together\&. For example, the following causes all tables in databases
db1
and
db2, together with the tables
t1
and
t2
in database
db3, to be restored (and no other databases or tables):
.sp
.if n \{\
.RS 4
.\}
.nf
$> \fBndb_restore [\&.\&.\&.] \-\-include\-databases=db1,db2 \-\-include\-tables=db3\&.t1,db3\&.t2\fR
.fi
.if n \{\
.RE
.\}
.sp
(Again we have omitted other, possibly required, options in the example just shown\&.)
.sp
It also possible to restore only selected databases, or selected tables from a single database, without any
\fB\-\-include\-*\fR
(or
\fB\-\-exclude\-*\fR) options, using the syntax shown here:
.sp
.if n \{\
.RS 4
.\}
.nf
ndb_restore \fIother_options\fR \fIdb_name\fR,[\fIdb_name\fR[,\&.\&.\&.] | \fItbl_name\fR[,\fItbl_name\fR][,\&.\&.\&.]]
.fi
.if n \{\
.RE
.\}
.sp
In other words, you can specify either of the following to be restored:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
All tables from one or more databases
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
One or more tables from a single database
.RE
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-lines\-terminated\-by\fR=\fIchar\fR
.TS
allbox tab(:);
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--lines-terminated-by=char
T}
T{
Type
T}:T{
String
T}
T{
Default Value
T}:T{
\n (linebreak)
T}
.TE
.sp 1
Specifies the string used to end each line of output\&. The default is a linefeed character (\en)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-login\-path\fR
.TS
allbox tab(:);
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--login-path=path
T}
T{
Type
T}:T{
String
T}
T{
Default Value
T}:T{
[none]
T}
.TE
.sp 1
Read given path from login file\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-lossy\-conversions\fR,
\fB\-L\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--lossy-conversions
T}
.TE
.sp 1
This option is intended to complement the
\fB\-\-promote\-attributes\fR
option\&. Using
\fB\-\-lossy\-conversions\fR
allows lossy conversions of column values (type demotions or changes in sign) when restoring data from backup\&. With some exceptions, the rules governing demotion are the same as for MySQL replication; see
Section\ \&17.5.1.9.2, \(lqReplication of Columns Having Different Data Types\(rq, for information about specific type conversions currently supported by attribute demotion\&.
.sp
Beginning with NDB 8\&.0\&.26, this option also makes it possible to restore a
NULL
column as
NOT NULL\&. The column must not contain any
NULL
entries; otherwise
\fBndb_restore\fR
stops with an error\&.
.sp
\fBndb_restore\fR
reports any truncation of data that it performs during lossy conversions once per attribute and column\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-no\-binlog\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--no-binlog
T}
.TE
.sp 1
This option prevents any connected SQL nodes from writing data restored by
\fBndb_restore\fR
to their binary logs\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-no\-restore\-disk\-objects\fR,
\fB\-d\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--no-restore-disk-objects
T}
.TE
.sp 1
This option stops
\fBndb_restore\fR
from restoring any NDB Cluster Disk Data objects, such as tablespaces and log file groups; see
Section\ \&23.6.10, \(lqNDB Cluster Disk Data Tables\(rq, for more information about these\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-no\-upgrade\fR,
\fB\-u\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--no-upgrade
T}
.TE
.sp 1
When using
\fBndb_restore\fR
to restore a backup,
VARCHAR
columns created using the old fixed format are resized and recreated using the variable\-width format now employed\&. This behavior can be overridden by specifying
\fB\-\-no\-upgrade\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-ndb\-connectstring\fR
.TS
allbox tab(:);
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--ndb-connectstring=connection_string
T}
T{
Type
T}:T{
String
T}
T{
Default Value
T}:T{
[none]
T}
.TE
.sp 1
Set connect string for connecting to ndb_mgmd\&. Syntax: "[nodeid=id;][host=]hostname[:port]"\&. Overrides entries in NDB_CONNECTSTRING and my\&.cnf\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-ndb\-mgmd\-host\fR
.TS
allbox tab(:);
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--ndb-mgmd-host=connection_string
T}
T{
Type
T}:T{
String
T}
T{
Default Value
T}:T{
[none]
T}
.TE
.sp 1
Same as
\fB\-\-ndb\-connectstring\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-ndb\-nodegroup\-map\fR=\fImap\fR,
\fB\-z\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--ndb-nodegroup-map=map
T}
.TE
.sp 1
Intended for restoring a backup taken from one node group to a different node group, but never completely implemented; unsupported\&.
.sp
All code supporting this option was removed in NDB 8\&.0\&.27; in this and later versions, any value set for it is ignored, and the option itself does nothing\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-ndb\-nodeid\fR
.TS
allbox tab(:);
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--ndb-nodeid=#
T}
T{
Type
T}:T{
Integer
T}
T{
Default Value
T}:T{
[none]
T}
.TE
.sp 1
Set node ID for this node, overriding any ID set by
\fB\-\-ndb\-connectstring\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-ndb\-optimized\-node\-selection\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--ndb-optimized-node-selection
T}
.TE
.sp 1
Enable optimizations for selection of nodes for transactions\&. Enabled by default; use
\fB\-\-skip\-ndb\-optimized\-node\-selection\fR
to disable\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-no\-defaults\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--no-defaults
T}
.TE
.sp 1
Do not read default options from any option file other than login file\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-nodeid\fR=\fI#\fR,
\fB\-n\fR
.TS
allbox tab(:);
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--nodeid=#
T}
T{
Type
T}:T{
Numeric
T}
T{
Default Value
T}:T{
none
T}
.TE
.sp 1
Specify the node ID of the data node on which the backup was taken\&.
.sp
When restoring to a cluster with different number of data nodes from that where the backup was taken, this information helps identify the correct set or sets of files to be restored to a given node\&. (In such cases, multiple files usually need to be restored to a single data node\&.) See
the section called \(lqRestoring to a different number of data nodes\(rq, for additional information and examples\&.
.sp
In NDB 8\&.0, this option is required\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-num\-slices\fR=\fI#\fR
.TS
allbox tab(:);
lB l
lB l
lB l
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--num-slices=#
T}
T{
Introduced
T}:T{
8.0.20-ndb-8.0.20
T}
T{
Type
T}:T{
Integer
T}
T{
Default Value
T}:T{
1
T}
T{
Minimum Value
T}:T{
1
T}
T{
Maximum Value
T}:T{
1024
T}
.TE
.sp 1
When restoring a backup by slices, this option sets the number of slices into which to divide the backup\&. This allows multiple instances of
\fBndb_restore\fR
to restore disjoint subsets in parallel, potentially reducing the amount of time required to perform the restore operation\&.
.sp
A
\fIslice\fR
is a subset of the data in a given backup; that is, it is a set of fragments having the same slice ID, specified using the
\fB\-\-slice\-id\fR
option\&. The two options must always be used together, and the value set by
\fB\-\-slice\-id\fR
must always be less than the number of slices\&.
.sp
\fBndb_restore\fR
encounters fragments and assigns each one a fragment counter\&. When restoring by slices, a slice ID is assigned to each fragment; this slice ID is in the range 0 to 1 less than the number of slices\&. For a table that is not a
BLOB
table, the slice to which a given fragment belongs is determined using the formula shown here:
.sp
.if n \{\
.RS 4
.\}
.nf
[\fIslice_ID\fR] = [\fIfragment_counter\fR] % [\fInumber_of_slices\fR]
.fi
.if n \{\
.RE
.\}
.sp
For a
BLOB
table, a fragment counter is not used; the fragment number is used instead, along with the ID of the main table for the
BLOB
table (recall that
NDB
stores
\fIBLOB\fR
values in a separate table internally)\&. In this case, the slice ID for a given fragment is calculated as shown here:
.sp
.if n \{\
.RS 4
.\}
.nf
[\fIslice_ID\fR] =
([\fImain_table_ID\fR] + [\fIfragment_ID\fR]) % [\fInumber_of_slices\fR]
.fi
.if n \{\
.RE
.\}
.sp
Thus, restoring by
\fIN\fR
slices means running
\fIN\fR
instances of
\fBndb_restore\fR, all with
\fB\-\-num\-slices=\fR\fB\fIN\fR\fR
(along with any other necessary options) and one each with
\fB\-\-slice\-id=1\fR,
\fB\-\-slice\-id=2\fR,
\fB\-\-slice\-id=3\fR, and so on through
\fBslice\-id=\fR\fB\fIN\fR\fR\fB\-1\fR\&.
.PP
\fBExample\fR. Assume that you want to restore a backup named
BACKUP\-1, found in the default directory
/var/lib/mysql\-cluster/BACKUP/BACKUP\-3
on the node file system on each data node, to a cluster with four data nodes having the node IDs 1, 2, 3, and 4\&. To perform this operation using five slices, execute the sets of commands shown in the following list:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
Restore the cluster metadata using
\fBndb_restore\fR
as shown here:
.sp
.if n \{\
.RS 4
.\}
.nf
$> \fBndb_restore \-b 1 \-n 1 \-m \-\-disable\-indexes \-\-backup\-path=/home/ndbuser/backups\fR
.fi
.if n \{\
.RE
.\}
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Restore the cluster data to the data nodes invoking
\fBndb_restore\fR
as shown here:
.sp
.if n \{\
.RS 4
.\}
.nf
$> \fBndb_restore \-b 1 \-n 1 \-r \-\-num\-slices=5 \-\-slice\-id=0 \-\-backup\-path=/var/lib/mysql\-cluster/BACKUP/BACKUP\-1\fR
$> \fBndb_restore \-b 1 \-n 1 \-r \-\-num\-slices=5 \-\-slice\-id=1 \-\-backup\-path=/var/lib/mysql\-cluster/BACKUP/BACKUP\-1\fR
$> \fBndb_restore \-b 1 \-n 1 \-r \-\-num\-slices=5 \-\-slice\-id=2 \-\-backup\-path=/var/lib/mysql\-cluster/BACKUP/BACKUP\-1\fR
$> \fBndb_restore \-b 1 \-n 1 \-r \-\-num\-slices=5 \-\-slice\-id=3 \-\-backup\-path=/var/lib/mysql\-cluster/BACKUP/BACKUP\-1\fR
$> \fBndb_restore \-b 1 \-n 1 \-r \-\-num\-slices=5 \-\-slice\-id=4 \-\-backup\-path=/var/lib/mysql\-cluster/BACKUP/BACKUP\-1\fR
$> \fBndb_restore \-b 1 \-n 2 \-r \-\-num\-slices=5 \-\-slice\-id=0 \-\-backup\-path=/var/lib/mysql\-cluster/BACKUP/BACKUP\-1\fR
$> \fBndb_restore \-b 1 \-n 2 \-r \-\-num\-slices=5 \-\-slice\-id=1 \-\-backup\-path=/var/lib/mysql\-cluster/BACKUP/BACKUP\-1\fR
$> \fBndb_restore \-b 1 \-n 2 \-r \-\-num\-slices=5 \-\-slice\-id=2 \-\-backup\-path=/var/lib/mysql\-cluster/BACKUP/BACKUP\-1\fR
$> \fBndb_restore \-b 1 \-n 2 \-r \-\-num\-slices=5 \-\-slice\-id=3 \-\-backup\-path=/var/lib/mysql\-cluster/BACKUP/BACKUP\-1\fR
$> \fBndb_restore \-b 1 \-n 2 \-r \-\-num\-slices=5 \-\-slice\-id=4 \-\-backup\-path=/var/lib/mysql\-cluster/BACKUP/BACKUP\-1\fR
$> \fBndb_restore \-b 1 \-n 3 \-r \-\-num\-slices=5 \-\-slice\-id=0 \-\-backup\-path=/var/lib/mysql\-cluster/BACKUP/BACKUP\-1\fR
$> \fBndb_restore \-b 1 \-n 3 \-r \-\-num\-slices=5 \-\-slice\-id=1 \-\-backup\-path=/var/lib/mysql\-cluster/BACKUP/BACKUP\-1\fR
$> \fBndb_restore \-b 1 \-n 3 \-r \-\-num\-slices=5 \-\-slice\-id=2 \-\-backup\-path=/var/lib/mysql\-cluster/BACKUP/BACKUP\-1\fR
$> \fBndb_restore \-b 1 \-n 3 \-r \-\-num\-slices=5 \-\-slice\-id=3 \-\-backup\-path=/var/lib/mysql\-cluster/BACKUP/BACKUP\-1\fR
$> \fBndb_restore \-b 1 \-n 3 \-r \-\-num\-slices=5 \-\-slice\-id=4 \-\-backup\-path=/var/lib/mysql\-cluster/BACKUP/BACKUP\-1\fR
$> \fBndb_restore \-b 1 \-n 4 \-r \-\-num\-slices=5 \-\-slice\-id=0 \-\-backup\-path=/var/lib/mysql\-cluster/BACKUP/BACKUP\-1\fR
$> \fBndb_restore \-b 1 \-n 4 \-r \-\-num\-slices=5 \-\-slice\-id=1 \-\-backup\-path=/var/lib/mysql\-cluster/BACKUP/BACKUP\-1\fR
$> \fBndb_restore \-b 1 \-n 4 \-r \-\-num\-slices=5 \-\-slice\-id=2 \-\-backup\-path=/var/lib/mysql\-cluster/BACKUP/BACKUP\-1\fR
$> \fBndb_restore \-b 1 \-n 4 \-r \-\-num\-slices=5 \-\-slice\-id=3 \-\-backup\-path=/var/lib/mysql\-cluster/BACKUP/BACKUP\-1\fR
$> \fBndb_restore \-b 1 \-n 4 \-r \-\-num\-slices=5 \-\-slice\-id=4 \-\-backup\-path=/var/lib/mysql\-cluster/BACKUP/BACKUP\-1\fR
.fi
.if n \{\
.RE
.\}
.sp
All of the commands just shown in this step can be executed in parallel, provided there are enough slots for connections to the cluster (see the description for the
\fB\-\-backup\-path\fR
option)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
Restore indexes as usual, as shown here:
.sp
.if n \{\
.RS 4
.\}
.nf
$> \fBndb_restore \-b 1 \-n 1 \-\-rebuild\-indexes \-\-backup\-path=/var/lib/mysql\-cluster/BACKUP/BACKUP\-1\fR
.fi
.if n \{\
.RE
.\}
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
Finally, restore the epoch, using the command shown here:
.sp
.if n \{\
.RS 4
.\}
.nf
$> \fBndb_restore \-b 1 \-n 1 \-\-restore\-epoch \-\-backup\-path=/var/lib/mysql\-cluster/BACKUP/BACKUP\-1\fR
.fi
.if n \{\
.RE
.\}
.RE
.sp
You should use slicing to restore the cluster data only; it is not necessary to employ
\fB\-\-num\-slices\fR
or
\fB\-\-slice\-id\fR
when restoring the metadata, indexes, or epoch information\&. If either or both of these options are used with the
\fBndb_restore\fR
options controlling restoration of these, the program ignores them\&.
.sp
The effects of using the
\fB\-\-parallelism\fR
option on the speed of restoration are independent of those produced by slicing or parallel restoration using multiple instances of
\fBndb_restore\fR
(\fB\-\-parallelism\fR
specifies the number of parallel transactions executed by a
\fIsingle\fR
\fBndb_restore\fR
thread), but it can be used together with either or both of these\&. You should be aware that increasing
\fB\-\-parallelism\fR
causes
\fBndb_restore\fR
to impose a greater load on the cluster; if the system can handle this, restoration should complete even more quickly\&.
.sp
The value of
\fB\-\-num\-slices\fR
is not directly dependent on values relating to hardware such as number of CPUs or CPU cores, amount of RAM, and so forth, nor does it depend on the number of LDMs\&.
.sp
It is possible to employ different values for this option on different data nodes as part of the same restoration; doing so should not in and of itself produce any ill effects\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-parallelism\fR=\fI#\fR,
\fB\-p\fR
.TS
allbox tab(:);
lB l
lB l
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--parallelism=#
T}
T{
Type
T}:T{
Numeric
T}
T{
Default Value
T}:T{
128
T}
T{
Minimum Value
T}:T{
1
T}
T{
Maximum Value
T}:T{
1024
T}
.TE
.sp 1
\fBndb_restore\fR
uses single\-row transactions to apply many rows concurrently\&. This parameter determines the number of parallel transactions (concurrent rows) that an instance of
\fBndb_restore\fR
tries to use\&. By default, this is 128; the minimum is 1, and the maximum is 1024\&.
.sp
The work of performing the inserts is parallelized across the threads in the data nodes involved\&. This mechanism is employed for restoring bulk data from the
\&.Data
file\(emthat is, the fuzzy snapshot of the data; it is not used for building or rebuilding indexes\&. The change log is applied serially; index drops and builds are DDL operations and handled separately\&. There is no thread\-level parallelism on the client side of the restore\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-preserve\-trailing\-spaces\fR,
\fB\-P\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--preserve-trailing-spaces
T}
.TE
.sp 1
Cause trailing spaces to be preserved when promoting a fixed\-width character data type to its variable\-width equivalent\(emthat is, when promoting a
CHAR
column value to
VARCHAR, or a
BINARY
column value to
VARBINARY\&. Otherwise, any trailing spaces are dropped from such column values when they are inserted into the new columns\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
Although you can promote
CHAR
columns to
VARCHAR
and
BINARY
columns to
VARBINARY, you cannot promote
VARCHAR
columns to
CHAR
or
VARBINARY
columns to
BINARY\&.
.sp .5v
.RE
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-print\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--print
T}
.TE
.sp 1
Causes
\fBndb_restore\fR
to print all data, metadata, and logs to
stdout\&. Equivalent to using the
\fB\-\-print\-data\fR,
\fB\-\-print\-meta\fR, and
\fB\-\-print\-log\fR
options together\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
Use of
\fB\-\-print\fR
or any of the
\fB\-\-print_*\fR
options is in effect performing a dry run\&. Including one or more of these options causes any output to be redirected to
stdout; in such cases,
\fBndb_restore\fR
makes no attempt to restore data or metadata to an NDB Cluster\&.
.sp .5v
.RE
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-print\-data\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--print-data
T}
.TE
.sp 1
Cause
\fBndb_restore\fR
to direct its output to
stdout\&. Often used together with one or more of
\fB\-\-tab\fR,
\fB\-\-fields\-enclosed\-by\fR,
\fB\-\-fields\-optionally\-enclosed\-by\fR,
\fB\-\-fields\-terminated\-by\fR,
\fB\-\-hex\fR, and
\fB\-\-append\fR\&.
.sp
TEXT
and
BLOB
column values are always truncated\&. Such values are truncated to the first 256 bytes in the output\&. This cannot currently be overridden when using
\fB\-\-print\-data\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-print\-defaults\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--print-defaults
T}
.TE
.sp 1
Print program argument list and exit\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-print\-log\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--print-log
T}
.TE
.sp 1
Cause
\fBndb_restore\fR
to output its log to
stdout\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-print\-meta\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--print-meta
T}
.TE
.sp 1
Print all metadata to
stdout\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBprint\-sql\-log\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--print-sql-log
T}
.TE
.sp 1
Log SQL statements to
stdout\&. Use the option to enable; normally this behavior is disabled\&. The option checks before attempting to log whether all the tables being restored have explicitly defined primary keys; queries on a table having only the hidden primary key implemented by
NDB
cannot be converted to valid SQL\&.
.sp
This option does not work with tables having
BLOB
columns\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-progress\-frequency\fR=\fIN\fR
.TS
allbox tab(:);
lB l
lB l
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--progress-frequency=#
T}
T{
Type
T}:T{
Numeric
T}
T{
Default Value
T}:T{
0
T}
T{
Minimum Value
T}:T{
0
T}
T{
Maximum Value
T}:T{
65535
T}
.TE
.sp 1
Print a status report each
\fIN\fR
seconds while the backup is in progress\&. 0 (the default) causes no status reports to be printed\&. The maximum is 65535\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-promote\-attributes\fR,
\fB\-A\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--promote-attributes
T}
.TE
.sp 1
\fBndb_restore\fR
supports limited
\fIattribute promotion\fR
in much the same way that it is supported by MySQL replication; that is, data backed up from a column of a given type can generally be restored to a column using a
\(lqlarger, similar\(rq
type\&. For example, data from a
CHAR(20)
column can be restored to a column declared as
VARCHAR(20),
VARCHAR(30), or
CHAR(30); data from a
MEDIUMINT
column can be restored to a column of type
INT
or
BIGINT\&. See
Section\ \&17.5.1.9.2, \(lqReplication of Columns Having Different Data Types\(rq, for a table of type conversions currently supported by attribute promotion\&.
.sp
Beginning with NDB 8\&.0\&.26, this option also makes it possible to restore a
NOT NULL
column as
NULL\&.
.sp
Attribute promotion by
\fBndb_restore\fR
must be enabled explicitly, as follows:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
Prepare the table to which the backup is to be restored\&.
\fBndb_restore\fR
cannot be used to re\-create the table with a different definition from the original; this means that you must either create the table manually, or alter the columns which you wish to promote using
ALTER TABLE
after restoring the table metadata but before restoring the data\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Invoke
\fBndb_restore\fR
with the
\fB\-\-promote\-attributes\fR
option (short form
\fB\-A\fR) when restoring the table data\&. Attribute promotion does not occur if this option is not used; instead, the restore operation fails with an error\&.
.RE
.sp
When converting between character data types and
TEXT
or
BLOB, only conversions between character types (CHAR
and
VARCHAR) and binary types (BINARY
and
VARBINARY) can be performed at the same time\&. For example, you cannot promote an
INT
column to
BIGINT
while promoting a
VARCHAR
column to
TEXT
in the same invocation of
\fBndb_restore\fR\&.
.sp
Converting between
TEXT
columns using different character sets is not supported, and is expressly disallowed\&.
.sp
When performing conversions of character or binary types to
TEXT
or
BLOB
with
\fBndb_restore\fR, you may notice that it creates and uses one or more staging tables named
\fItable_name\fR$ST\fInode_id\fR\&. These tables are not needed afterwards, and are normally deleted by
\fBndb_restore\fR
following a successful restoration\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-rebuild\-indexes\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--rebuild-indexes
T}
.TE
.sp 1
Enable multithreaded rebuilding of the ordered indexes while restoring a native
NDB
backup\&. The number of threads used for building ordered indexes by
\fBndb_restore\fR
with this option is controlled by the
BuildIndexThreads
data node configuration parameter and the number of LDMs\&.
It is necessary to use this option only for the first run of
\fBndb_restore\fR; this causes all ordered indexes to be rebuilt without using
\fB\-\-rebuild\-indexes\fR
again when restoring subsequent nodes\&. You should use this option prior to inserting new rows into the database; otherwise, it is possible for a row to be inserted that later causes a unique constraint violation when trying to rebuild the indexes\&.
.sp
Building of ordered indices is parallelized with the number of LDMs by default\&. Offline index builds performed during node and system restarts can be made faster using the
BuildIndexThreads
data node configuration parameter; this parameter has no effect on dropping and rebuilding of indexes by
\fBndb_restore\fR, which is performed online\&.
.sp
Rebuilding of unique indexes uses disk write bandwidth for redo logging and local checkpointing\&. An insufficient amount of this bandwith can lead to redo buffer overload or log overload errors\&. In such cases you can run
\fBndb_restore\fR
\fB\-\-rebuild\-indexes\fR
again; the process resumes at the point where the error occurred\&. You can also do this when you have encountered temporary errors\&. You can repeat execution of
\fBndb_restore\fR
\fB\-\-rebuild\-indexes\fR
indefinitely; you may be able to stop such errors by reducing the value of
\fB\-\-parallelism\fR\&. If the problem is insufficient space, you can increase the size of the redo log (FragmentLogFileSize
node configuration parameter), or you can increase the speed at which LCPs are performed (MaxDiskWriteSpeed
and related parameters), in order to free space more quickly\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-remap\-column=\fR\fB\fIdb\fR\fR\fB\&.\fR\fB\fItbl\fR\fR\fB\&.\fR\fB\fIcol\fR\fR\fB:\fR\fB\fIfn\fR\fR\fB:\fR\fB\fIargs\fR\fR
.TS
allbox tab(:);
lB l
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--remap-column=string
T}
T{
Introduced
T}:T{
8.0.21-ndb-8.0.21
T}
T{
Type
T}:T{
String
T}
T{
Default Value
T}:T{
[none]
T}
.TE
.sp 1
When used together with
\fB\-\-restore\-data\fR, this option applies a function to the value of the indicated column\&. Values in the argument string are listed here:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fIdb\fR: Database name, following any renames performed by
\fB\-\-rewrite\-database\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fItbl\fR: Table name\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fIcol\fR: Name of the column to be updated\&. This column must be of type
INT
or
BIGINT\&. The column can also be but is not required to be
UNSIGNED\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fIfn\fR: Function name; currently, the only supported name is
offset\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fIargs\fR: Arguments supplied to the function\&. Currently, only a single argument, the size of the offset to be added by the
offset
function, is supported\&. Negative values are supported\&. The size of the argument cannot exceed that of the signed variant of the column\*(Aqs type; for example, if
\fIcol\fR
is an
INT
column, then the allowed range of the argument passed to the
offset
function is
\-2147483648
to
2147483647
(see
Section\ \&11.1.2, \(lqInteger Types (Exact Value) - INTEGER, INT, SMALLINT, TINYINT, MEDIUMINT, BIGINT\(rq)\&.
.sp
If applying the offset value to the column would cause an overflow or underflow, the restore operation fails\&. This could happen, for example, if the column is a
BIGINT, and the option attempts to apply an offset value of 8 on a row in which the column value is 4294967291, since
4294967291 + 8 = 4294967299 > 4294967295\&.
.RE
.sp
This option can be useful when you wish to merge data stored in multiple source instances of NDB Cluster (all using the same schema) into a single destination NDB Cluster, using NDB native backup (see
Section\ \&23.6.8.2, \(lqUsing The NDB Cluster Management Client to Create a Backup\(rq) and
\fBndb_restore\fR
to merge the data, where primary and unique key values are overlapping between source clusters, and it is necessary as part of the process to remap these values to ranges that do not overlap\&. It may also be necessary to preserve other relationships between tables\&. To fulfill such requirements, it is possible to use the option multiple times in the same invocation of
\fBndb_restore\fR
to remap columns of different tables, as shown here:
.sp
.if n \{\
.RS 4
.\}
.nf
$> \fBndb_restore \-\-restore\-data \-\-remap\-column=hr\&.employee\&.id:offset:1000 \e
    \-\-remap\-column=hr\&.manager\&.id:offset:1000 \-\-remap\-column=hr\&.firstaiders\&.id:offset:1000\fR
.fi
.if n \{\
.RE
.\}
.sp
(Other options not shown here may also be used\&.)
.sp
\fB\-\-remap\-column\fR
can also be used to update multiple columns of the same table\&. Combinations of multiple tables and columns are possible\&. Different offset values can also be used for different columns of the same table, like this:
.sp
.if n \{\
.RS 4
.\}
.nf
$> \fBndb_restore \-\-restore\-data \-\-remap\-column=hr\&.employee\&.salary:offset:10000 \e
    \-\-remap\-column=hr\&.employee\&.hours:offset:\-10\fR
.fi
.if n \{\
.RE
.\}
.sp
When source backups contain duplicate tables which should not be merged, you can handle this by using
\fB\-\-exclude\-tables\fR,
\fB\-\-exclude\-databases\fR, or by some other means in your application\&.
.sp
Information about the structure and other characteristics of tables to be merged can obtained using
SHOW CREATE TABLE; the
\fBndb_desc\fR
tool; and
MAX(),
MIN(),
LAST_INSERT_ID(), and other MySQL functions\&.
.sp
Replication of changes from merged to unmerged tables, or from unmerged to merged tables, in separate instances of NDB Cluster is not supported\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-restore\-data\fR,
\fB\-r\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--restore-data
T}
.TE
.sp 1
Output
NDB
table data and logs\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-restore\-epoch\fR,
\fB\-e\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--restore-epoch
T}
.TE
.sp 1
Add (or restore) epoch information to the cluster replication status table\&. This is useful for starting replication on an NDB Cluster replica\&. When this option is used, the row in the
mysql\&.ndb_apply_status
having
0
in the
id
column is updated if it already exists; such a row is inserted if it does not already exist\&. (See
Section\ \&23.7.9, \(lqNDB Cluster Backups With NDB Cluster Replication\(rq\&.)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-restore\-meta\fR,
\fB\-m\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--restore-meta
T}
.TE
.sp 1
This option causes
\fBndb_restore\fR
to print
NDB
table metadata\&.
.sp
The first time you run the
\fBndb_restore\fR
restoration program, you also need to restore the metadata\&. In other words, you must re\-create the database tables\(emthis can be done by running it with the
\fB\-\-restore\-meta\fR
(\fB\-m\fR) option\&. Restoring the metadata need be done only on a single data node; this is sufficient to restore it to the entire cluster\&.
.sp
In older versions of NDB Cluster, tables whose schemas were restored using this option used the same number of partitions as they did on the original cluster, even if it had a differing number of data nodes from the new cluster\&. In NDB 8\&.0, when restoring metadata, this is no longer an issue;
\fBndb_restore\fR
now uses the default number of partitions for the target cluster, unless the number of local data manager threads is also changed from what it was for data nodes in the original cluster\&.
.sp
When using this option in NDB 8\&.0, it is recommended that auto synchronization be disabled by setting
ndb_metadata_check=OFF
until
\fBndb_restore\fR
has completed restoring the metadata, after which it can it turned on again to synchronize objects newly created in the NDB dictionary\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
The cluster should have an empty database when starting to restore a backup\&. (In other words, you should start the data nodes with
\fB\-\-initial\fR
prior to performing the restore\&.)
.sp .5v
.RE
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-restore\-privilege\-tables\fR
.TS
allbox tab(:);
lB l
lB l.
T{
Command-Line Format
T}:T{
--restore-privilege-tables
T}
T{
Deprecated
T}:T{
8.0.16-ndb-8.0.16
T}
.TE
.sp 1
\fBndb_restore\fR
does not by default restore distributed MySQL privilege tables created in releases of NDB Cluster prior to version 8\&.0, which does not support distrubuted privileges as implemented in NDB 7\&.6 and earlier\&. This option causes
\fBndb_restore\fR
to restore them\&.
.sp
In NDB 8\&.0, such tables are not used for access control; as part of the MySQL server\*(Aqs upgrade process, the server creates
InnoDB
copies of these tables local to itself\&. For more information, see
Section\ \&23.3.7, \(lqUpgrading and Downgrading NDB Cluster\(rq, as well as
Section\ \&6.2.3, \(lqGrant Tables\(rq\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-rewrite\-database\fR=\fIolddb,newdb\fR
.TS
allbox tab(:);
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--rewrite-database=string
T}
T{
Type
T}:T{
String
T}
T{
Default Value
T}:T{
none
T}
.TE
.sp 1
This option makes it possible to restore to a database having a different name from that used in the backup\&. For example, if a backup is made of a database named
products, you can restore the data it contains to a database named
inventory, use this option as shown here (omitting any other options that might be required):
.sp
.if n \{\
.RS 4
.\}
.nf
$> ndb_restore \-\-rewrite\-database=product,inventory
.fi
.if n \{\
.RE
.\}
.sp
The option can be employed multiple times in a single invocation of
\fBndb_restore\fR\&. Thus it is possible to restore simultaneously from a database named
db1
to a database named
db2
and from a database named
db3
to one named
db4
using
\fB\-\-rewrite\-database=db1,db2 \-\-rewrite\-database=db3,db4\fR\&. Other
\fBndb_restore\fR
options may be used between multiple occurrences of
\fB\-\-rewrite\-database\fR\&.
.sp
In the event of conflicts between multiple
\fB\-\-rewrite\-database\fR
options, the last
\fB\-\-rewrite\-database\fR
option used, reading from left to right, is the one that takes effect\&. For example, if
\fB\-\-rewrite\-database=db1,db2 \-\-rewrite\-database=db1,db3\fR
is used, only
\fB\-\-rewrite\-database=db1,db3\fR
is honored, and
\fB\-\-rewrite\-database=db1,db2\fR
is ignored\&. It is also possible to restore from multiple databases to a single database, so that
\fB\-\-rewrite\-database=db1,db3 \-\-rewrite\-database=db2,db3\fR
restores all tables and data from databases
db1
and
db2
into database
db3\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBImportant\fR
.ps -1
.br
When restoring from multiple backup databases into a single target database using
\fB\-\-rewrite\-database\fR, no check is made for collisions between table or other object names, and the order in which rows are restored is not guaranteed\&. This means that it is possible in such cases for rows to be overwritten and updates to be lost\&.
.sp .5v
.RE
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-skip\-broken\-objects\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--skip-broken-objects
T}
.TE
.sp 1
This option causes
\fBndb_restore\fR
to ignore corrupt tables while reading a native
NDB
backup, and to continue restoring any remaining tables (that are not also corrupted)\&. Currently, the
\fB\-\-skip\-broken\-objects\fR
option works only in the case of missing blob parts tables\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-skip\-table\-check\fR,
\fB\-s\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--skip-table-check
T}
.TE
.sp 1
It is possible to restore data without restoring table metadata\&. By default when doing this,
\fBndb_restore\fR
fails with an error if a mismatch is found between the table data and the table schema; this option overrides that behavior\&.
.sp
Some of the restrictions on mismatches in column definitions when restoring data using
\fBndb_restore\fR
are relaxed; when one of these types of mismatches is encountered,
\fBndb_restore\fR
does not stop with an error as it did previously, but rather accepts the data and inserts it into the target table while issuing a warning to the user that this is being done\&. This behavior occurs whether or not either of the options
\fB\-\-skip\-table\-check\fR
or
\fB\-\-promote\-attributes\fR
is in use\&. These differences in column definitions are of the following types:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Different
COLUMN_FORMAT
settings (FIXED,
DYNAMIC,
DEFAULT)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Different
STORAGE
settings (MEMORY,
DISK)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Different default values
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Different distribution key settings
.RE
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-skip\-unknown\-objects\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--skip-unknown-objects
T}
.TE
.sp 1
This option causes
\fBndb_restore\fR
to ignore any schema objects it does not recognize while reading a native
NDB
backup\&. This can be used for restoring a backup made from a cluster running (for example) NDB 7\&.6 to a cluster running NDB Cluster 7\&.5\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-slice\-id\fR=\fI#\fR
.TS
allbox tab(:);
lB l
lB l
lB l
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--slice-id=#
T}
T{
Introduced
T}:T{
8.0.20-ndb-8.0.20
T}
T{
Type
T}:T{
Integer
T}
T{
Default Value
T}:T{
0
T}
T{
Minimum Value
T}:T{
0
T}
T{
Maximum Value
T}:T{
1023
T}
.TE
.sp 1
When restoring by slices, this is the ID of the slice to restore\&. This option is always used together with
\fB\-\-num\-slices\fR, and its value must be always less than that of
\fB\-\-num\-slices\fR\&.
.sp
For more information, see the description of the
\fB\-\-num\-slices\fR
elsewhere in this section\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-tab\fR=\fIdir_name\fR,
\fB\-T\fR
\fIdir_name\fR
.TS
allbox tab(:);
lB l
lB l.
T{
Command-Line Format
T}:T{
--tab=path
T}
T{
Type
T}:T{
Directory name
T}
.TE
.sp 1
Causes
\fB\-\-print\-data\fR
to create dump files, one per table, each named
\fItbl_name\fR\&.txt\&. It requires as its argument the path to the directory where the files should be saved; use
\&.
for the current directory\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-usage\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--usage
T}
.TE
.sp 1
Display help text and exit; same as
\fB\-\-help\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-verbose\fR=\fI#\fR
.TS
allbox tab(:);
lB l
lB l
lB l
lB l
lB l.
T{
Command-Line Format
T}:T{
--verbose=#
T}
T{
Type
T}:T{
Numeric
T}
T{
Default Value
T}:T{
1
T}
T{
Minimum Value
T}:T{
0
T}
T{
Maximum Value
T}:T{
255
T}
.TE
.sp 1
Sets the level for the verbosity of the output\&. The minimum is 0; the maximum is 255\&. The default value is 1\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-version\fR
.TS
allbox tab(:);
lB l.
T{
Command-Line Format
T}:T{
--version
T}
.TE
.sp 1
Display version information and exit\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fB\-\-with\-apply\-status\fR
.TS
allbox tab(:);
lB l
lB l.
T{
Command-Line Format
T}:T{
--with-apply-status
T}
T{
Introduced
T}:T{
8.0.29-ndb-8.0.29
T}
.TE
.sp 1
Restore all rows from the backup\*(Aqs
ndb_apply_status
table (except for the row having
server_id = 0, which is generated using
\fB\-\-restore\-epoch\fR)\&. This option requires that
\fB\-\-restore\-data\fR
also be used\&.
.sp
If the
ndb_apply_status
table from the backeup already contains a row with
server_id = 0,
\fBndb_restore\fR
\fB\-\-with\-apply\-status\fR
deletes it\&. For this reason, we recommend that you use
\fBndb_restore\fR
\fB\-\-restore\-epoch\fR
after invoking
\fBndb_restore\fR
with the
\fB\-\-with\-apply\-status\fR
option\&. You can also use
\fB\-\-restore\-epoch\fR
concurrently with the last of any invocations of
\fBndb_restore\fR
\fB\-\-with\-apply\-status\fR
used to restore the cluster\&.
.sp
For more information, see
the section called \(lqndb_apply_status Table\(rq\&.
.RE
.PP
Typical options for this utility are shown here:
.sp
.if n \{\
.RS 4
.\}
.nf
ndb_restore [\-c \fIconnection_string\fR] \-n \fInode_id\fR \-b \fIbackup_id\fR \e
      [\-m] \-r \-\-backup\-path=\fI/path/to/backup/files\fR
.fi
.if n \{\
.RE
.\}
.PP
Normally, when restoring from an NDB Cluster backup,
\fBndb_restore\fR
requires at a minimum the
\fB\-\-nodeid\fR
(short form:
\fB\-n\fR),
\fB\-\-backupid\fR
(short form:
\fB\-b\fR), and
\fB\-\-backup\-path\fR
options\&.
.PP
The
\fB\-c\fR
option is used to specify a connection string which tells
ndb_restore
where to locate the cluster management server (see
Section\ \&23.4.3.3, \(lqNDB Cluster Connection Strings\(rq)\&. If this option is not used, then
\fBndb_restore\fR
attempts to connect to a management server on
localhost:1186\&. This utility acts as a cluster API node, and so requires a free connection
\(lqslot\(rq
to connect to the cluster management server\&. This means that there must be at least one
[api]
or
[mysqld]
section that can be used by it in the cluster
config\&.ini
file\&. It is a good idea to keep at least one empty
[api]
or
[mysqld]
section in
config\&.ini
that is not being used for a MySQL server or other application for this reason (see
Section\ \&23.4.3.7, \(lqDefining SQL and Other API Nodes in an NDB Cluster\(rq)\&.
.PP
In NDB 8\&.0\&.22 and later,
\fBndb_restore\fR
can decrypt an encrypted backup using
\fB\-\-decrypt\fR
and
\fB\-\-backup\-password\fR\&. Both options must be specified to perform decryption\&. See the documentation for the
START BACKUP
management client command for information on creating encrypted backups\&.
.PP
You can verify that
\fBndb_restore\fR
is connected to the cluster by using the
SHOW
command in the
\fBndb_mgm\fR
management client\&. You can also accomplish this from a system shell, as shown here:
.sp
.if n \{\
.RS 4
.\}
.nf
$> \fBndb_mgm \-e "SHOW"\fR
.fi
.if n \{\
.RE
.\}
.PP
\fBError reporting\fR. \fBndb_restore\fR
reports both temporary and permanent errors\&. In the case of temporary errors, it may able to recover from them, and reports
Restore successful, but encountered temporary error, please look at configuration
in such cases\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBImportant\fR
.ps -1
.br
.PP
After using
\fBndb_restore\fR
to initialize an NDB Cluster for use in circular replication, binary logs on the SQL node acting as the replica are not automatically created, and you must cause them to be created manually\&. To cause the binary logs to be created, issue a
SHOW TABLES
statement on that SQL node before running
START SLAVE\&. This is a known issue in NDB Cluster\&.
.sp .5v
.RE
.SS "Restoring an NDB Backup to a Different Version of NDB Cluster"
.PP
The following two sections provide information about restoring a native NDB backup to a different version of NDB Cluster from the version in which the backup was taken\&.
.PP
In addition, you should consult
Section\ \&23.3.7, \(lqUpgrading and Downgrading NDB Cluster\(rq, for other issues you may encounter when attempting to restore an NDB backup to a cluster running a different version of the NDB software\&.
.PP
It is also advisable to review
What is New in NDB Cluster 8.0, as well as
Section\ \&2.11.4, \(lqChanges in MySQL 8.0\(rq, for other changes between NDB 8\&.0 and previous versions of NDB Cluster that may be relevant to your particular circumstances\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBRestoring an NDB backup to a previous version of NDB Cluster\fR
.RS 4
.PP
You may encounter issues when restoring a backup taken from a later version of NDB Cluster to a previous one, due to the use of features which do not exist in the earlier version\&. Some of these issues are listed here:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
.PP
\fButf8mb4_ai_ci character set\fR. Tables created in NDB 8\&.0 by default use the
utf8mb4_ai_ci
character set, which is not available in NDB 7\&.6 and earlier, and so cannot be read by an
\fBndb_restore\fR
binary from one of these earlier versions\&. In such cases, it is necessary to alter any tables using
utf8mb4_ai_ci
so that they use a character set supported in the older version prior to performing the backup\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
.PP
\fBTable metadata format\fR. Due to changes in how the MySQL Server and NDB handle table metadata, tables created or altered using the included MySQL server binary from NDB 8\&.0 cannot be restored using
\fBndb_restore\fR
to NDB 7\&.6 or an earlier version of NDB Cluster\&. Such tables use
\&.sdi
files which are not understood by older versions of
\fBmysqld\fR\&.
A backup taken in NDB 8\&.0 of tables which were created in NDB 7\&.6 or earlier, and which have not been altered since upgrading to NDB 8\&.0, should be restorable to older versions of NDB Cluster\&.
.sp
Since it is possible to restore metadata and table data separately, you can in such cases restore the table schemas from a dump made using
\fBmysqldump\fR, or by executing the necessary
CREATE TABLE
statements manually, then import only the table data using
\fBndb_restore\fR
with the
\fB\-\-restore\-data\fR
option\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
.PP
\fBMulti-threaded backups\fR. Multi\-threaded backups taken in NDB 8\&.0 can be restored to an cluster running an earlier version of
NDB
in either of the following two ways:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Using an
\fBndb_restore\fR
binary from NDB 8\&.0, perform a parallel restore\&. See
the section called \(lqRestoring a parallel backup in parallel\(rq\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Restore the backups serially; in this case, a later version of
\fBndb_restore\fR
is not required\&. See
the section called \(lqRestoring a parallel backup serially\(rq\&.
.RE
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
.PP
\fBEncrypted backups\fR. Encrypted backups created in NDB 8\&.0\&.22 and later cannot be restored using
\fBndb_restore\fR
from NDB 8\&.0\&.21 or earlier\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
.PP
\fBNDB_STORED_USER privilege\fR. The
NDB_STORED_USER
privilege is supported only in NDB 8\&.0\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
.PP
\fBMaximum number of data nodes\fR. NDB Cluster 8\&.0 supports up to 144 data nodes, while earlier versions support a maximum of only 48 data nodes\&. See
the section called \(lqRestoring to Fewer Nodes Than the Original\(rq, for information with situations in which this incompatibility causes an issue\&.
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBRestoring an NDB backup to a later version of NDB Cluster\fR
.RS 4
.PP
In general, it should be possible to restore a backup created using the
\fBndb_mgm\fR
client
START BACKUP
command in an older version of NDB to a newer version, provided that you use the
\fBndb_restore\fR
binary that comes with the newer version\&. (It may be possible to use the older version of
\fBndb_restore\fR, but this is not recommended\&.) Additional potential issues are listed here:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
When restoring the metadata from a backup (\fB\-\-restore\-meta\fR
option),
\fBndb_restore\fR
normally attempts to reproduce the captured table schema exactly as it was when the backup was taken\&.
.sp
Tables created in versions of NDB prior to 8\&.0 use
\&.frm
files for their metadata\&. These files can be read by the
\fBmysqld\fR
in NDB 8\&.0, which can use the information contained therein to create the
\&.sdi
files used by the MySQL data dictionary in later versions\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
When restoring an older backup to a newer version of NDB, it may not be possible to take advantage of newer features such as hashmap partitioning, greater number of hashmap buckets, read backup, and different partitioning layouts\&. For this reason, it may be preferable to restore older schemas using
\fBmysqldump\fR
and the
\fBmysql\fR
client, which allows NDB to make use of the new schema features\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Tables using the old temporal types which did not support fractional seconds (used prior to MySQL 5\&.6\&.4 and NDB 7\&.3\&.31) cannot be restored to NDB 8\&.0 using
\fBndb_restore\fR\&. You can check such tables using
CHECK TABLE, and then upgrade them to the newer temporal column format, if necessary, using
REPAIR TABLE
in the
\fBmysql\fR
client; this must be done prior to taking the backup\&. See
Section\ \&2.11.5, \(lqPreparing Your Installation for Upgrade\(rq, for more information\&.
.sp
You also also restore such tables using a dump created with
\fBmysqldump\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Distributed grant tables created in NDB 7\&.6 and earlier are not supported in NDB 8\&.0\&. Such tables can be restored to an NDB 8\&.0 cluster, but they have no effect on access control\&.
.RE
.RE
.SS "Restoring to a different number of data nodes"
.PP
It is possible to restore from an NDB backup to a cluster having a different number of data nodes than the original from which the backup was taken\&. The following two sections discuss, respectively, the cases where the target cluster has a lesser or greater number of data nodes than the source of the backup\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBRestoring to Fewer Nodes Than the Original\fR
.RS 4
.PP
You can restore to a cluster having fewer data nodes than the original provided that the larger number of nodes is an even multiple of the smaller number\&. In the following example, we use a backup taken on a cluster having four data nodes to a cluster having two data nodes\&.
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
The management server for the original cluster is on host
host10\&. The original cluster has four data nodes, with the node IDs and host names shown in the following extract from the management server\*(Aqs
config\&.ini
file:
.sp
.if n \{\
.RS 4
.\}
.nf
[ndbd]
NodeId=2
HostName=host2
[ndbd]
NodeId=4
HostName=host4
[ndbd]
NodeId=6
HostName=host6
[ndbd]
NodeId=8
HostName=host8
.fi
.if n \{\
.RE
.\}
.sp
We assume that each data node was originally started with
\fBndbmtd\fR
\fB\-\-ndb\-connectstring=host10\fR
or the equivalent\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Perform a backup in the normal manner\&. See
Section\ \&23.6.8.2, \(lqUsing The NDB Cluster Management Client to Create a Backup\(rq, for information about how to do this\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
The files created by the backup on each data node are listed here, where
\fIN\fR
is the node ID and
\fIB\fR
is the backup ID\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
BACKUP\-\fIB\fR\-0\&.\fIN\fR\&.Data
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
BACKUP\-\fIB\fR\&.\fIN\fR\&.ctl
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
BACKUP\-\fIB\fR\&.\fIN\fR\&.log
.RE
.sp
These files are found under
BackupDataDir/BACKUP/BACKUP\-\fIB\fR, on each data node\&. For the rest of this example, we assume that the backup ID is 1\&.
.sp
Have all of these files available for later copying to the new data nodes (where they can be accessed on the data node\*(Aqs local file system by
\fBndb_restore\fR)\&. It is simplest to copy them all to a single location; we assume that this is what you have done\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
The management server for the target cluster is on host
host20, and the target has two data nodes, with the node IDs and host names shown, from the management server
config\&.ini
file on
host20:
.sp
.if n \{\
.RS 4
.\}
.nf
[ndbd]
NodeId=3
hostname=host3
[ndbd]
NodeId=5
hostname=host5
.fi
.if n \{\
.RE
.\}
.sp
Each of the data node processes on
host3
and
host5
should be started with
\fBndbmtd\fR
\fB\-c host20\fR
\fB\-\-initial\fR
or the equivalent, so that the new (target) cluster starts with clean data node file systems\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
Copy two different sets of two backup files to each of the target data nodes\&. For this example, copy the backup files from nodes 2 and 4 from the original cluster to node 3 in the target cluster\&. These files are listed here:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
BACKUP\-1\-0\&.2\&.Data
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
BACKUP\-1\&.2\&.ctl
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
BACKUP\-1\&.2\&.log
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
BACKUP\-1\-0\&.4\&.Data
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
BACKUP\-1\&.4\&.ctl
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
BACKUP\-1\&.4\&.log
.RE
.sp
Then copy the backup files from nodes 6 and 8 to node 5; these files are shown in the following list:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
BACKUP\-1\-0\&.6\&.Data
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
BACKUP\-1\&.6\&.ctl
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
BACKUP\-1\&.6\&.log
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
BACKUP\-1\-0\&.8\&.Data
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
BACKUP\-1\&.8\&.ctl
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
BACKUP\-1\&.8\&.log
.RE
.sp
For the remainder of this example, we assume that the respective backup files have been saved to the directory
/BACKUP\-1
on each of nodes 3 and 5\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
On each of the two target data nodes, you must restore from both sets of backups\&. First, restore the backups from nodes 2 and 4 to node 3 by invoking
\fBndb_restore\fR
on
host3
as shown here:
.sp
.if n \{\
.RS 4
.\}
.nf
$> \fBndb_restore \-c host20 \fR\fB\fB\-\-nodeid=2\fR\fR\fB \fR\fB\fB\-\-backupid=1\fR\fR\fB \fR\fB\fB\-\-restore\-data\fR\fR\fB \fR\fB\fB\-\-backup\-path=/BACKUP\-1\fR\fR
$> \fBndb_restore \-c host20 \-\-nodeid=4 \-\-backupid=1 \-\-restore\-data \-\-backup\-path=/BACKUP\-1\fR
.fi
.if n \{\
.RE
.\}
.sp
Then restore the backups from nodes 6 and 8 to node 5 by invoking
\fBndb_restore\fR
on
host5, like this:
.sp
.if n \{\
.RS 4
.\}
.nf
$> \fBndb_restore \-c host20 \-\-nodeid=6 \-\-backupid=1 \-\-restore\-data \-\-backup\-path=/BACKUP\-1\fR
$> \fBndb_restore \-c host20 \-\-nodeid=8 \-\-backupid=1 \-\-restore\-data \-\-backup\-path=/BACKUP\-1\fR
.fi
.if n \{\
.RE
.\}
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBRestoring to More Nodes Than the Original\fR
.RS 4
.PP
The node ID specified for a given
\fBndb_restore\fR
command is that of the node in the original backup and not that of the data node to restore it to\&. When performing a backup using the method described in this section,
\fBndb_restore\fR
connects to the management server and obtains a list of data nodes in the cluster the backup is being restored to\&. The restored data is distributed accordingly, so that the number of nodes in the target cluster does not need to be to be known or calculated when performing the backup\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
When changing the total number of LCP threads or LQH threads per node group, you should recreate the schema from backup created using
\fBmysqldump\fR\&.
.sp .5v
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
\fICreate the backup of the data\fR\&. You can do this by invoking the
\fBndb_mgm\fR
client
START BACKUP
command from the system shell, like this:
.sp
.if n \{\
.RS 4
.\}
.nf
$> \fBndb_mgm \-e "START BACKUP 1"\fR
.fi
.if n \{\
.RE
.\}
.sp
This assumes that the desired backup ID is 1\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Create a backup of the schema\&. This step is necessary only if the total number of LCP threads or LQH threads per node group is changed\&.
.sp
.if n \{\
.RS 4
.\}
.nf
$> \fBmysqldump \-\-no\-data \-\-routines \-\-events \-\-triggers \-\-databases > myschema\&.sql\fR
.fi
.if n \{\
.RE
.\}
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBImportant\fR
.ps -1
.br
Once you have created the
NDB
native backup using
\fBndb_mgm\fR, you must not make any schema changes before creating the backup of the schema, if you do so\&.
.sp .5v
.RE
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
Copy the backup directory to the new cluster\&. For example if the backup you want to restore has ID 1 and
BackupDataDir
=
/backups/node_\fInodeid\fR, then the path to the backup on this node is
/backups/node_1/BACKUP/BACKUP\-1\&. Inside this directory there are three files, listed here:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
BACKUP\-1\-0\&.1\&.Data
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
BACKUP\-1\&.1\&.ctl
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
BACKUP\-1\&.1\&.log
.RE
.sp
You should copy the entire directory to the new node\&.
.sp
If you needed to create a schema file, copy this to a location on an SQL node where it can be read by
\fBmysqld\fR\&.
.RE
.PP
There is no requirement for the backup to be restored from a specific node or nodes\&.
.PP
To restore from the backup just created, perform the following steps:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
\fIRestore the schema\fR\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If you created a separate schema backup file using
\fBmysqldump\fR, import this file using the
\fBmysql\fR
client, similar to what is shown here:
.sp
.if n \{\
.RS 4
.\}
.nf
$> \fBmysql < myschema\&.sql\fR
.fi
.if n \{\
.RE
.\}
.sp
When importing the schema file, you may need to specify the
\fB\-\-user\fR
and
\fB\-\-password\fR
options (and possibly others) in addition to what is shown, in order for the
\fBmysql\fR
client to be able to connect to the MySQL server\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If you did
\fInot\fR
need to create a schema file, you can re\-create the schema using
\fBndb_restore\fR
\fB\-\-restore\-meta\fR
(short form
\fB\-m\fR), similar to what is shown here:
.sp
.if n \{\
.RS 4
.\}
.nf
$> ndb_restore \-\-nodeid=1 \-\-backupid=1 \-\-restore\-meta \-\-backup\-path=/backups/node_1/BACKUP/BACKUP\-1
.fi
.if n \{\
.RE
.\}
.sp
\fBndb_restore\fR
must be able to contact the management server; add the
\fB\-\-ndb\-connectstring\fR
option if and as needed to make this possible\&.
.RE
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
\fIRestore the data\fR\&. This needs to be done once for each data node in the original cluster, each time using that data node\*(Aqs node ID\&. Assuming that there were 4 data nodes originally, the set of commands required would look something like this:
.sp
.if n \{\
.RS 4
.\}
.nf
ndb_restore \-\-nodeid=1 \-\-backupid=1 \-\-restore\-data \-\-backup\-path=/backups/node_1/BACKUP/BACKUP\-1 \-\-disable\-indexes
ndb_restore \-\-nodeid=2 \-\-backupid=1 \-\-restore\-data \-\-backup\-path=/backups/node_2/BACKUP/BACKUP\-1 \-\-disable\-indexes
ndb_restore \-\-nodeid=3 \-\-backupid=1 \-\-restore\-data \-\-backup\-path=/backups/node_3/BACKUP/BACKUP\-1 \-\-disable\-indexes
ndb_restore \-\-nodeid=4 \-\-backupid=1 \-\-restore\-data \-\-backup\-path=/backups/node_4/BACKUP/BACKUP\-1 \-\-disable\-indexes
.fi
.if n \{\
.RE
.\}
.sp
These can be run in parallel\&.
.sp
Be sure to add the
\fB\-\-ndb\-connectstring\fR
option as needed\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
\fIRebuild the indexes\fR\&. These were disabled by the
\fB\-\-disable\-indexes\fR
option used in the commands just shown\&. Recreating the indexes avoids errors due to the restore not being consistent at all points\&. Rebuilding the indexes can also improve performance in some cases\&. To rebuild the indexes, execute the following command once, on a single node:
.sp
.if n \{\
.RS 4
.\}
.nf
$> \fBndb_restore \-\-nodeid=1 \-\-backupid=1 \-\-backup\-path=/backups/node_1/BACKUP/BACKUP\-1 \-\-rebuild\-indexes\fR
.fi
.if n \{\
.RE
.\}
.sp
As mentioned previously, you may need to add the
\fB\-\-ndb\-connectstring\fR
option, so that
\fBndb_restore\fR
can contact the management server\&.
.RE
.RE
.SS "Restoring from a backup taken in parallel"
.PP
NDB Cluster 8\&.0 supports parallel backups on each data node using
\fBndbmtd\fR
with multiple LDMs (see
Section\ \&23.6.8.5, \(lqTaking an NDB Backup with Parallel Data Nodes\(rq)\&. The next two sections describe how to restore backups that were taken in this fashion\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBRestoring a parallel backup in parallel\fR
.RS 4
.PP
Restoring a parallel backup in parallel requires an
\fBndb_restore\fR
binary from an NDB 8\&.0 distribution\&. The process is not substantially different from that outlined in the general usage section under the description of the
\fBndb_restore\fR
program, and consists of executing
\fBndb_restore\fR
twice, similarly to what is shown here:
.sp
.if n \{\
.RS 4
.\}
.nf
$> ndb_restore \-n 1 \-b 1 \-m \-\-backup\-path=\fIpath/to/backup_dir\fR/BACKUP/BACKUP\-\fIbackup_id\fR
$> ndb_restore \-n 1 \-b 1 \-r \-\-backup\-path=\fIpath/to/backup_dir\fR/BACKUP/BACKUP\-\fIbackup_id\fR
.fi
.if n \{\
.RE
.\}
.PP
\fIbackup_id\fR
is the ID of the backup to be restored\&. In the general case, no additional special arguments are required;
\fBndb_restore\fR
always checks for the existence of parallel subdirectories under the directory indicated by the
\fB\-\-backup\-path\fR
option and restores the metadata (serially) and then the table data (in parallel)\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBRestoring a parallel backup serially\fR
.RS 4
.PP
It is possible to restore a backup that was made using parallelism on the data nodes in serial fashion\&. To do this, invoke
\fBndb_restore\fR
with
\fB\-\-backup\-path\fR
pointing to the subdirectories created by each LDM under the main backup directory, once to any one of the subdirectories to restore the metadata (it does not matter which one, since each subdirectory contains a complete copy of the metadata), then to each of the subdirectories in turn to restore the data\&. Suppose that we want to restore the backup having backup ID 100 that was taken with four LDMs, and that the
BackupDataDir
is
/opt\&. To restore the metadata in this case, we can invoke
\fBndb_restore\fR
like this:
.sp
.if n \{\
.RS 4
.\}
.nf
$> ndb_restore \-n 1 \-b 1 \-m \-\-backup\-path=opt/BACKUP/BACKUP\-100/BACKUP\-100\-PART\-1\-OF\-4
.fi
.if n \{\
.RE
.\}
.PP
To restore the table data, execute
\fBndb_restore\fR
four times, each time using one of the subdirectories in turn, as shown here:
.sp
.if n \{\
.RS 4
.\}
.nf
$> ndb_restore \-n 1 \-b 1 \-r \-\-backup\-path=opt/BACKUP/BACKUP\-100/BACKUP\-100\-PART\-1\-OF\-4
$> ndb_restore \-n 1 \-b 1 \-r \-\-backup\-path=opt/BACKUP/BACKUP\-100/BACKUP\-100\-PART\-2\-OF\-4
$> ndb_restore \-n 1 \-b 1 \-r \-\-backup\-path=opt/BACKUP/BACKUP\-100/BACKUP\-100\-PART\-3\-OF\-4
$> ndb_restore \-n 1 \-b 1 \-r \-\-backup\-path=opt/BACKUP/BACKUP\-100/BACKUP\-100\-PART\-4\-OF\-4
.fi
.if n \{\
.RE
.\}
.PP
You can employ the same technique to restore a parallel backup to an older version of NDB Cluster (7\&.6 or earlier) that does not support parallel backups, using the
\fBndb_restore\fR
binary supplied with the older version of the NDB Cluster software\&.
.RE
.SH "COPYRIGHT"
.br
.PP
Copyright \(co 1997, 2022, Oracle and/or its affiliates.
.PP
This documentation is free software; you can redistribute it and/or modify it only under the terms of the GNU General Public License as published by the Free Software Foundation; version 2 of the License.
.PP
This documentation is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
.PP
You should have received a copy of the GNU General Public License along with the program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA or see http://www.gnu.org/licenses/.
.sp
.SH "SEE ALSO"
For more information, please refer to the MySQL Reference Manual,
which may already be installed locally and which is also available
online at http://dev.mysql.com/doc/.
.SH AUTHOR
Oracle Corporation (http://dev.mysql.com/).
